!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=127)}([function(e,t,n){(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(11);t.Promise="undefined"!=typeof window&&window.Promise?window.Promise:void 0!==e&&e.Promise?e.Promise:r.Promise,t._assign=function(e){return e?JSON.parse(JSON.stringify(e)):null},t.fastCHAIN=function(e,n){return new t.Promise(function(t,o){if(e&&e.length){var i=[],a=function(){i.length<e.length?n(e[i.length],i.length,function(e){i.push(e),r.setFast(a)}):t(i)};a()}else t([])})},t.fastRACE=function(e,n){return new t.Promise(function(t,r){if(e&&e.length){var o=!1,i=0,a=function(){i<e.length&&(n(e[i],i,function(e){o||(o=!0,t([e]))}),i++,a())};a()}else t([])})},t.fastALL=function(e,n){return t.Promise.all((e||[]).map(function(e,r){return new t.Promise(function(t,o){n(e,r,function(e){t(e)})})}))};var o="undefined"==typeof window?"":navigator.userAgent||"";t.isSafari=0!==o.length&&(/^((?!chrome|android).)*safari/i.test(o)||/iPad|iPhone|iPod/.test(o)&&!window.MSStream),t.isMSBrowser=0!==o.length&&(o.indexOf("MSIE ")>0||o.indexOf("Trident/")>0||o.indexOf("Edge/")>0),t.isAndroid=/Android/.test(o),t.random16Bits=function(){if("undefined"==typeof crypto)return Math.round(Math.random()*Math.pow(2,16));if(crypto.getRandomValues){var t=new Uint16Array(1);return crypto.getRandomValues(t),t[0]}return void 0!==e&&e._crypto.randomBytes?e._crypto.randomBytes(2).reduce(function(e,t){return t*e}):Math.round(Math.random()*Math.pow(2,16))},t.timeid=function(e){for(var n=Math.round((new Date).getTime()/(e?1:1e3)).toString();n.length<(e?13:10);)n="0"+n;return n+"-"+(t.random16Bits()+t.random16Bits()).toString(16)},t.intersect=function(e,t){return!(!e||!t)&&(!(!e.length||!t.length)&&(e||[]).filter(function(e){return-1!==(t||[]).indexOf(e)}).length>0)},t.uuid=function(){var e,n,r="";return[r,r,r,r,r,r,r,r].reduce(function(o,i,a){for(e=t.random16Bits(),n=3===a?4:4===a?(e%16&3|8).toString(16):r,e=e.toString(16);e.length<4;)e="0"+e;return o+([2,3,4,5].indexOf(a)>-1?"-":r)+(n+e).slice(0,4)},r)};var i={int:function(e){return e},uuid:t.uuid,timeId:function(){return t.timeid()},timeIdms:function(){return t.timeid(!0)}};t.hash=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return(t>>>0).toString(16)},t.generateID=function(e,t){return i[e]?i[e](t||1):""},t.cleanArgs=function(e,n){for(var r={},o=e.length;o--;){var i=e[o].split(":");i.length>1?r[i[0]]=t.cast(i[1],n[i[0]]||void 0):r[i[0]]=n[i[0]]||void 0}return r},t.isObject=function(e){return"[object Object]"===Object.prototype.toString.call(e)},t.cast=function(e,n){if("any"===e||"blob"===e)return n;var r=typeof n;if("undefined"===r||null===n)return n;var o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},i=function(e,n){switch(e){case"safestr":return i("string",n).replace(/[&<>"'`=\/]/gim,function(e){return o[e]});case"int":return"number"!==r||n%1!=0?parseInt(n||0):n;case"number":case"float":return"number"!==r?parseFloat(n||0):n;case"any[]":case"array":return Array.isArray(n)?n:[];case"uuid":case"timeId":case"timeIdms":case"string":return"string"!==r?String(n):n;case"object":case"obj":case"map":return t.isObject(n)?n:{};case"boolean":case"bool":return!0===n}return n},a=i(String(e||"").toLowerCase(),n);if(-1!==e.indexOf("[]")){var s=e.slice(0,e.lastIndexOf("[]"));return(n||[]).map(function(e){return t.cast(s,e)})}return void 0!==a?["int","float","number"].indexOf(e)>-1&&isNaN(a)?0:a:void 0},t.sortedInsert=function(e,n,r,o){return e.length?(e.splice(t.binarySearch(e,n),0,n),e):(e.push(n),e)},t.binarySearch=function(e,n,r,o){var i=e.length,a=r||0,s=void 0!==o?o:i-1;if(0===i)return 0;if(n>e[s])return s+1;if(n<e[a])return a;if(a>=s)return 0;var u=a+Math.floor((s-a)/2);return n<e[u]?t.binarySearch(e,n,a,u-1):n>e[u]?t.binarySearch(e,n,u+1,s):0},t.removeDuplicates=function(e){if(!e.length)return[];for(var t=[e[0]],n=1;n<e.length;n++)e[n]!==e[n-1]&&t.push(e[n]);return t},t.deepFreeze=function(e){return Object.getOwnPropertyNames(e||{}).forEach(function(n){var r=e[n];"object"==typeof r&&null!==r&&(e[n]=t.deepFreeze(r))}),Object.freeze(e)};var a={};t.objQuery=function(e,t,n){var r=function(e,t,n){return e[t]&&n?r(e,t+1,n[e[t]]):n},o=e+(n?"1":"0");if(a[o])return r(a[o],0,t);var i=[];if(i=e.indexOf("[")>-1?[].concat.apply([],e.split(".").map(function(e){return e.match(/([^\[]+)|\[([^\]]+)\]\[/gim)||e})).map(function(e){return e.replace(/\[|\]/gim,"")}):e.split("."),n){var s=i.shift()+"."+i.shift();i.unshift(s)}return a[o]=i,r(a[o],0,t)}}).call(this,n(33))},function(e,t){var n=e.exports={version:"2.5.5"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){e.exports=!n(13)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(14),o=n(46),i=n(29),a=Object.defineProperty;t.f=n(3)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(30)("wks"),o=n(16),i=n(2).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(80),o=n(32);e.exports=function(e){return r(o(e))}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(4),o=n(15);e.exports=n(3)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(2),o=n(1),i=n(47),a=n(9),s=n(5),u=function(e,t,n){var l,c,f,d=e&u.F,p=e&u.G,h=e&u.S,y=e&u.P,m=e&u.B,v=e&u.W,g=p?o:o[t]||(o[t]={}),b=g.prototype,_=p?r:h?r[t]:(r[t]||{}).prototype;for(l in p&&(n=t),n)(c=!d&&_&&void 0!==_[l])&&s(g,l)||(f=c?_[l]:n[l],g[l]=p&&"function"!=typeof _[l]?n[l]:m&&c?i(f,r):v&&_[l]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):y&&"function"==typeof f?i(Function.call,f):f,y&&((g.virtual||(g.virtual={}))[l]=f,e&u.R&&b&&!b[l]&&a(b,l,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n=0,r={},o=Array.prototype.slice,i="undefined"!=typeof window&&window.setImmediate?window.setImmediate:!(void 0===e||!e.setImmediate)&&e.setImmediate,a="undefined"!=typeof window&&window.postMessage&&window.addEventListener,s="undefined"!=typeof window&&window.Promise?window.Promise:!(void 0===e||!e.Promise)&&e.Promise,u=function(e){return e[0].apply(null,o.call(e,1))};a&&window.addEventListener("message",function(e){var t,n=e.data;"string"==typeof n&&0===n.indexOf("setMsg")&&(t=r[n])&&(delete r[n],u(t))});var l=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=n++,i="setMsg"+o;return r[i]=e,window.postMessage(i,"*"),o};t.setFast=i?function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i(function(){u(e)})}:s?function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];s.resolve().then(function(){u(e)})}:a?l:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];setTimeout(function(){u(e)},0)};var c=function(){},f=["R"],d=["F"],p=["P"],h=function(){function t(e){this._state=p,this._queue=[],this._outcome=void 0,e!==c&&b(this,e)}return t.doPolyFill=function(){void 0!==e&&(e.Promise||(e.Promise=this)),"undefined"!=typeof window&&(window.Promise||(window.Promise=this))},t.prototype.catch=function(e){return this.then(function(){},e)},t.prototype.then=function(e,n){if("function"!=typeof e&&this._state===d||"function"!=typeof n&&this._state===f)return this;var r=new t(c);this._state!==p?m(r,this._state===d?e:n,this._outcome):this._queue.push(new y(r,e,n));return r},t.resolve=function(e){return e instanceof this?e:v._resolve(new t(c),e)},t.reject=function(e){return v._reject(new t(c),e)},t.all=function(e){return new t(function(t,n){var r=[];if(e.length)for(var o=function(n,o,i){void 0!==i?r.push(i):r.push(o),r.length==e.length&&t(r)},i=function(t){e[t].then(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];o(0,e,void 0)}).catch(function(e){o(0,void 0,e)})},a=0;a<e.length;a++)i(a);else t([])})},t.race=function(e){var n,r=this,o=e.length,i=!1,a=-1,s=new t(c);if(!1!==Array.isArray(e))return this.reject(new TypeError);if(!o)return this.resolve([]);for(;++a<o;)n=e[a],r.resolve(n).then(function(e){i||(i=!0,v._resolve(s,e))},function(e){i||(i=!0,v._reject(s,e))});return s},t}();t.Promise=h;var y=function(){function e(e,t,n){this._promise=e,"function"==typeof t&&(this._onFulfilled=t,this._callFulfilled=this._otherCallFulfilled),"function"==typeof n&&(this._onRejected=n,this._callRejected=this._otherCallRejected)}return e.prototype._callFulfilled=function(e){v._resolve(this._promise,e)},e.prototype._otherCallFulfilled=function(e){m(this._promise,this._onFulfilled,e)},e.prototype._callRejected=function(e){v._reject(this._promise,e)},e.prototype._otherCallRejected=function(e){m(this._promise,this._onRejected,e)},e}();function m(e,n,r){t.setFast(function(){var t;try{t=n.apply(null,r)}catch(t){return v._reject(e,t)}return t===e?v._reject(e,new TypeError):v._resolve(e,t),null})}t._QueueItem=y;var v=function(){function e(){}return e._resolve=function(t,n){var r=_(g,n),o=r._value,i=-1,a=t._queue.length;if("error"===r._status)return e._reject(t,r._value);if(o)b(t,o);else for(t._state=d,t._outcome=n;++i<a;)t._queue[i]._callFulfilled(n);return t},e._reject=function(e,t){e._state=f,e._outcome=t;for(var n=-1,r=e._queue.length;++n<r;)e._queue[n]._callRejected(t);return e},e}();function g(e){var t=e&&e.then;return!e||"object"!=typeof e&&"function"!=typeof e||"function"!=typeof t?null:function(){t.apply(e,arguments)}}function b(e,t){var n=!1;function r(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];n||(n=!0,v._reject(e,t))}function o(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];n||(n=!0,v._resolve(e,t))}var i=_(function(){t(o,r)});"error"===i._status&&r(i._value)}function _(e,t){var n={_status:null,_value:null};try{n._value=e(t),n._status="success"}catch(e){n._status="error",n._value=e}return n}}).call(this,n(33))},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(11),i=n(111),a=n(110),s=n(109),u=n(0),l=n(108),c=n(100),f=1.41,d=["_util"],p=function(){function e(){this.version=f,this._onConnectedCallBacks=[];var e=this;e._actions={},e._views={},e.dataModels={},e._events=["*","change","delete","upsert","drop","select","error"],e._hasEvents={},e.tableNames=[],e.plugins=[],e.hasPK={},e.skipPurge={},e.toRowFns={},e.tablePKs={},e.toColFns={},e.toColRules={},e._randoms=[],e._randomPtr=0,e.hasAnyEvents=!1;for(var t=0;t<200;t++)e._randoms.push(u.random16Bits().toString(16));e._callbacks={},e._callbacks["*"]=new s.ReallySmallEvents,e.iB=new l.NanoSQLDefaultBackend;var n={models:{},actions:{},views:{},config:{},parent:this};e.iB.willConnect&&e.iB.willConnect(n,function(){e.iB.didConnect&&e.iB.didConnect(n,function(){})})}return e.prototype.toColumn=function(e){return this.toColFns[this.sTable]||(this.toColFns[this.sTable]={}),this.toColFns[this.sTable]=e,this},e.prototype.toRow=function(e){return this.toRowFns[this.sTable]||(this.toRowFns[this.sTable]={}),this.toRowFns[this.sTable]=e,this},e.prototype.fastRand=function(){return this._randomPtr++,this._randomPtr>=this._randoms.length&&(this._randomPtr=0),this._randoms[this._randomPtr]},e.prototype.table=function(e){return e&&(this.sTable=e),this},e.prototype.connect=function(){var e=this,t=this;return new u.Promise(function(n,r){var o={models:t.dataModels,actions:t._actions,views:t._views,config:t._config,parent:e};o.models[d[0]]=[{key:"key",type:"string",props:["pk()","ai()"]},{key:"value",type:"any"}],t._config&&t._config.history&&e.use(new c._NanoSQLHistoryPlugin(t._config.historyMode)),t._config&&!1===t._config.mode||e.use(new l.NanoSQLDefaultBackend),u.fastCHAIN(e.plugins,function(e,t,n){e.willConnect?e.willConnect(o,function(e){o=e,n()}):n()}).then(function(){e.dataModels=o.models,e._actions=o.actions,e._views=o.views,e._config=o.config,Object.keys(e.dataModels).forEach(function(t){var n=!1;e.dataModels[t]=e.dataModels[t].filter(function(e){return"*"!==e.key||"*"!==e.type||(n=!0,!1)}),e.skipPurge[t]=n}),e.plugins.forEach(function(t){t.didExec&&(e.pluginHasDidExec=!0)}),t.tableNames=Object.keys(e.dataModels);var r=function(){u.fastALL(e.plugins,function(e,t,n){e.didConnect?e.didConnect(o,function(){n()}):n()}).then(function(){e.isConnected=!0,e._onConnectedCallBacks.length&&e._onConnectedCallBacks.forEach(function(e){return e()}),n(t.tableNames)})},i=function(t){e.query("upsert",{key:"version",value:e.version}).manualExec({table:"_util"}).then(function(){t?e.extend("rebuild_idx").then(function(){r()}):r()})};e.query("select").where(["key","=","version"]).manualExec({table:"_util"}).then(function(e){e.length?e[0].value<=1.21?i(!0):e[0].value<f?i(!1):r():i(!0)})})})},e.prototype.getActions=function(e){return this._actions[e].map(function(e){return{name:e.name,args:e.args}})},e.prototype.getViews=function(e){return this._views[e].map(function(e){return{name:e.name,args:e.args}})},e.prototype.getConfig=function(){return this._config},e.prototype.avFilter=function(e){return this._AVMod=e,this},e.prototype.use=function(e){return this.plugins.push(e),this},e.prototype.on=function(e,t){var n=this,r=n.sTable,o=n._events.length,i=e.split(" ");if(Array.isArray(r))return this;for(n._callbacks[r]||(n._callbacks[r]=new s.ReallySmallEvents),o=i.length;o--;)-1!==n._events.indexOf(i[o])&&n._callbacks[r].on(i[o],t);return n._refreshEventChecker()},e.prototype.off=function(e,t){var n=this,r=e.split(" "),o=r.length,i=n.sTable;if(Array.isArray(i))return this;for(;o--;)-1!==n._events.indexOf(r[o])&&n._callbacks[i].off(r[o],t);return n._refreshEventChecker()},e.prototype._refreshEventChecker=function(){var e=this;return this._hasEvents={},Object.keys(this._callbacks).concat(["*"]).forEach(function(t){e._hasEvents[t]=e._events.reduce(function(n,r){return n+(e._callbacks[t]&&e._callbacks[t].eventListeners[r]?e._callbacks[t].eventListeners[r].length:0)},0)>0}),this.hasAnyEvents=!1,Object.keys(this._hasEvents).forEach(function(t){e.hasAnyEvents=e.hasAnyEvents||e._hasEvents[t]}),this},e.prototype.model=function(e,t,n){var r=this,o=this,i=o.sTable;if(Array.isArray(i))return this;o._callbacks[i]||(o._callbacks[i]=new s.ReallySmallEvents);var a=!1;if(!n){if(-1!==["string","safestr","timeId","timeIdms","uuid","int","float","number","array","map","bool","blob","any"].indexOf(i.replace(/\W/gim,""))||0===i.indexOf("_")||null!==i.match(/[\(\)\]\[\.]/g))throw Error("Invalid Table Name! https://docs.nanosql.io/setup/data-models");(e||[]).forEach(function(e){if(null!==e.key.match(/[\(\)\]\[\.]/g)||0===e.key.indexOf("_"))throw Error("Invalid Data Model! https://docs.nanosql.io/setup/data-models")})}return o.toColRules[i]={},(e||[]).forEach(function(e){e.props&&e.props.forEach(function(t){if(-1!==t.indexOf("from=>")&&-1!==t.indexOf("(")){var n=t.replace("from=>","").split("(").shift(),r=t.replace("from=>","").split("(").pop().replace(")","").split(",").map(function(e){return e.trim()});o.toColRules[i][e.key]=[n].concat(r)}if(0===t.indexOf("toColumn.")){n=t.replace(/toColumn\.(.*)\(.*\)/gim,"$1"),r=t.replace(/toColumn\..*\((.*)\)/gim,"$1").split(",").map(function(e){return e.trim()});o.toColRules[i][e.key]=[n].concat(r)}}),e.props&&u.intersect(["pk","pk()"],e.props)&&(r.tablePKs[i]=e.key,a=!0)}),this.hasPK[i]=a,a||(this.tablePKs[i]="_id_",e.unshift({key:"_id_",type:"uuid",props:["pk()"]})),o.dataModels[i]=e,o._views[i]=[],o._actions[i]=[],o},e.prototype.views=function(e){return Array.isArray(this.sTable)?this:(this._views[this.sTable]=e,this)},e.prototype.getView=function(e,t){return void 0===t&&(t={}),Array.isArray(this.sTable)?new u.Promise(function(e,t){return t()}):this._doAV("View",this._views[this.sTable],e,t)},e.prototype.actions=function(e){return Array.isArray(this.sTable)?this:(this._actions[this.sTable]=e,this)},e.prototype.doAction=function(e,t){return Array.isArray(this.sTable)?new u.Promise(function(e,t){return t()}):this._doAV("Action",this._actions[this.sTable],e,t)},e.prototype.queryFilter=function(e){return this.queryMod=e,this},e.prototype._doAV=function(e,t,n,r){var o=this,i=this,a=t.reduce(function(e,t){return t.name===n?t:e},null);return a?(i._activeAV=n,i._AVMod?new u.Promise(function(t,n){i._AVMod(o.sTable,e,i._activeAV||"",r,function(e){a.call(a.args?u.cleanArgs(a.args,e):{},i).then(t).catch(n)},function(e){n(e)})}):a.call(a.args?u.cleanArgs(a.args,r):{},i)):new u.Promise(function(e,t){return t("Action/View Not Found!")})},e.prototype.query=function(e,t){var n=this._activeAV;return this._activeAV=void 0,new i._NanoSQLQuery(this,this.sTable,e,t,n)},e.prototype.onConnected=function(e){this.isConnected?e():this._onConnectedCallBacks.push(e)},e.prototype.triggerEvent=function(e){var t=this;if(t._hasEvents["*"]||t._hasEvents[e.table]){if("*"===e.table)return this;o.setFast(function(){e.types.forEach(function(n){t._callbacks["*"].trigger(n,e,t),t._callbacks["*"].trigger("*",e,t),e.table&&t._callbacks[e.table]&&t._callbacks[e.table].trigger(n,e,t)})})}return t},e.prototype.default=function(e){var t={},n=this;return Array.isArray(n.sTable)?{}:(n.dataModels[n.sTable].forEach(function(n){t[n.key]=e&&e[n.key]?e[n.key]:n.default,void 0===t[n.key]&&(t[n.key]=u.cast(n.type,null))}),t)},e.prototype.rawDump=function(e){var t=this;return new u.Promise(function(n,o){var i={};u.fastCHAIN(t.plugins,function(t,n,o){t.dumpTables?t.dumpTables(e).then(function(e){i=r({},i,e),o(i)}):o()}).then(function(){n(i)})})},e.prototype.rawImport=function(e){var t=this;return new u.Promise(function(n,r){u.fastCHAIN(t.plugins,function(t,n,r){t.importTables?t.importTables(e).then(r):r()}).then(function(){n()})})},e.prototype.disconnect=function(){return u.fastCHAIN(this.plugins,function(e,t,n){e.willDisconnect?e.willDisconnect(n):n()})},e.prototype.doTransaction=function(e){var t=this,n=this,o=[],i=u.random16Bits().toString(16);return new u.Promise(function(s,l){n.plugins.length?u.fastCHAIN(n.plugins,function(e,t,n){e.transactionBegin?e.transactionBegin(i,n):n()}).then(function(){Array.isArray(n.sTable)||e(function(e){var t=e||n.sTable;return{query:function(e,n){return new a._NanoSQLTransactionQuery(e,n,t,o,i)}}},function(){var e=[];u.fastCHAIN(o,function(t,o,a){e.push(t.table),n.query(t.action,t.actionArgs).manualExec(r({},t,{table:t.table,transaction:!0,queryID:i})).then(a)}).then(function(r){u.fastCHAIN(t.plugins,function(e,t,n){e.transactionEnd?e.transactionEnd(i,n):n()}).then(function(){e.filter(function(e,t,n){return n.indexOf(e)===t}).forEach(function(e){0!==e.indexOf("_")&&n.triggerEvent({query:o[0],table:e,time:(new Date).getTime(),result:r,types:["transaction"],actionOrView:"",notes:[],transactionID:i,affectedRowPKS:[],affectedRows:[]})}),s(r)})})})}):l("Nothing to do, no plugins!")})},e.prototype.config=function(e){return this._config=e,this},e.prototype.extend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this;return new u.Promise(function(t,r){if(n.plugins.length){var o=e,i=[];u.fastCHAIN(n.plugins,function(e,t,n){e.extend?e.extend(function(e,t){o=e,i=t,n()},o,i):n()}).then(function(){t(i)})}else r("No plugins!")})},e.prototype.loadJS=function(e,t,n,r){var o=this;return n?this.doTransaction(function(n,r){t.forEach(function(t){n(e).query("upsert",t).exec()}),r()}):new u.Promise(function(n,i){u.fastCHAIN(t,function(n,i,a){r&&r(Math.round((i+1)/t.length*1e4)/100),o.query("upsert",n).manualExec({table:e}).then(a)}).then(function(e){n(e.map(function(e){return e.shift()}))})})},e.prototype.loadCSV=function(e,t,n,r,o){var i=this,a=[],s=t.split("\n").map(function(e,t){if(0!==t){var n={},o=e.match(/(,)|(["|\[|\{].*?["|\]|\}]|[^",\s]+)(?=\s*,|\s*$)/g)||[],i=!1;","===o[0]&&o.unshift("");for(var s=function(){var e=!1;if(o.forEach(function(t,n){e||","===t&&(void 0!==o[n+1]&&","!==o[n+1]||(e=!0,o.splice(n+1,0,"")))}),e)return"break";i=!0};!i;){if("break"===s())break}o=o.filter(function(e,t){return t%2==0});for(var u=a.length;u--;)1===o[u].indexOf("{")||1===o[u].indexOf("[")?o[u]=JSON.parse(o[u].slice(1,o[u].length-1).replace(/'/gm,'"')):0===o[u].indexOf('"')&&(o[u]=o[u].slice(1,o[u].length-1)),n[a[u]]=o[u];return r?r(n):n}a=e.split(",")}).filter(function(e){return e});return n?this.doTransaction(function(t,n){s.forEach(function(n){t(e).query("upsert",n).exec()}),n()}):new u.Promise(function(t,n){u.fastCHAIN(s,function(t,n,r){o&&o(Math.round((n+1)/s.length*1e4)/100),i.query("upsert",t).manualExec({table:e}).then(r)}).then(function(e){t(e.map(function(e){return e.shift()}))})})},e}();t.NanoSQLInstance=p,p.functions={COUNT:{type:"A",call:function(e,t,n){t(n&&"*"!==n?e.filter(function(e){return u.objQuery(n,e)}).length:e.length)}},MAX:{type:"A",call:function(e,t,n){if(e.length){var r=u.objQuery(n,e[0])||0;e.forEach(function(e){u.objQuery(n,e);u.objQuery(n,e)>r&&(r=u.objQuery(n,e))}),t(r)}else t(0)}},MIN:{type:"A",call:function(e,t,n){if(e.length){var r=u.objQuery(n,e[0])||0;e.forEach(function(e){var t=u.objQuery(n,e);t<r&&(r=t)}),t(r)}else t(0)}},AVG:{type:"A",call:function(e,t,n){t(e.reduce(function(e,t){return e+(u.objQuery(n,t)||0)},0)/e.length)}},SUM:{type:"A",call:function(e,t,n){t(e.reduce(function(e,t){return e+(u.objQuery(n,t)||0)},0))}},LOWER:{type:"S",call:function(e,t,n){t(e.map(function(e){return String(u.objQuery(n,e)).toLowerCase()}))}},UPPER:{type:"S",call:function(e,t,n){t(e.map(function(e){return String(u.objQuery(n,e)).toUpperCase()}))}},CAST:{type:"S",call:function(e,t,n,r){t(e.map(function(e){return u.cast(r,u.objQuery(n,e))}))}},ABS:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.abs(u.objQuery(n,e))}))}},CEIL:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.ceil(u.objQuery(n,e))}))}},POW:{type:"S",call:function(e,t,n,r){t(e.map(function(e){return Math.pow(u.objQuery(n,e),parseInt(r))}))}},ROUND:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.round(u.objQuery(n,e))}))}},SQRT:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.sqrt(u.objQuery(n,e))}))}}};var h=new p;t.nSQL=function(e){return h.table(e)},"undefined"!=typeof window&&(window["nano-sql"]={nSQL:t.nSQL,NanoSQLInstance:p})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(8);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(){this._sorted=[],this._indexOf={},this.ai=1,this.doAI=!1}return e.prototype.set=function(e){var t=this;if(this._sorted=e||[],this._indexOf={},this._sorted.forEach(function(e,n){t._indexOf[String(e)]=n}),this.doAI&&this._sorted.length){var n=this._sorted.length;this.ai=this._sorted[n-1]+1}},e.prototype.getLocation=function(e){var t=this.indexOf(e);return-1!==t?t:r.binarySearch(this._sorted,e)},e.prototype.add=function(e){if(this.doAI)parseInt(e)>=this.ai&&this.ai++,this._indexOf[String(e)]=this._sorted.length,this._sorted.push(e);else{var t=r.binarySearch(this._sorted,e);this._sorted.splice(t,0,e),this._indexOf[String(e)]=t;for(var n=t+1;n<this._sorted.length;n++)this._indexOf[String(this._sorted[n])]++}},e.prototype.keys=function(){return this._sorted},e.prototype.indexOf=function(e){return void 0!==this._indexOf[String(e)]?this._indexOf[String(e)]:-1},e.prototype.remove=function(e){var t=this._indexOf[String(e)];if(void 0!==t){delete this._indexOf[String(e)],this._sorted.splice(t,1);for(var n=t;n<this._sorted.length;n++)this._indexOf[String(this._sorted[n])]--}},e}();t.DatabaseIndex=o},function(e,t,n){"use strict";e.exports=n(126)},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(2),o=n(1),i=n(27),a=n(21),s=n(4).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,n){t.f=n(6)},function(e,t,n){var r=n(4).f,o=n(5),i=n(6)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(41),o=n(23);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(14),o=n(81),i=n(23),a=n(31)("IE_PROTO"),s=function(){},u=function(){var e,t=n(45)("iframe"),r=i.length;for(t.style.display="none",n(76).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[i[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[a]=e):n=u(),void 0===t?n:o(n,t)}},function(e,t){e.exports={}},function(e,t){e.exports=!0},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(8);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(2),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var r=n(30)("keys"),o=n(16);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(34);r=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}}).apply(void 0,[t].concat(r))}},e.exports=r},function(e,t,n){"use strict";var r=function(e){};r=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")},e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,s,u],f=0;(l=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){var r=n(19),o=n(15),i=n(7),a=n(29),s=n(5),u=n(46),l=Object.getOwnPropertyDescriptor;t.f=n(3)?l:function(e,t){if(e=i(e),t=a(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(41),o=n(23).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(5),o=n(7),i=n(79)(!1),a=n(31)("IE_PROTO");e.exports=function(e,t){var n,s=o(e),u=0,l=[];for(n in s)n!=a&&r(s,n)&&l.push(n);for(;t.length>u;)r(s,n=t[u++])&&(~i(l,n)||l.push(n));return l}},function(e,t,n){e.exports=n(9)},function(e,t,n){"use strict";var r=n(27),o=n(10),i=n(42),a=n(9),s=n(26),u=n(82),l=n(22),c=n(48),f=n(6)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,y,m,v){u(n,t,h);var g,b,_,w=function(e){if(!d&&e in S)return S[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},x=t+" Iterator",k="values"==y,C=!1,S=e.prototype,T=S[f]||S["@@iterator"]||y&&S[y],E=T||w(y),I=y?k?w("entries"):E:void 0,O="Array"==t&&S.entries||T;if(O&&(_=c(O.call(new e)))!==Object.prototype&&_.next&&(l(_,x,!0),r||"function"==typeof _[f]||a(_,f,p)),k&&T&&"values"!==T.name&&(C=!0,E=function(){return T.call(this)}),r&&!v||!d&&!C&&S[f]||a(S,f,E),s[t]=E,s[x]=p,y)if(g={values:k?E:w("values"),keys:m?E:w("keys"),entries:I},v)for(b in g)b in S||i(S,b,g[b]);else o(o.P+o.F*(d||C),t,g);return g}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(86)),o=a(n(71)),i="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function a(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof o.default&&"symbol"===i(r.default)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":i(e)}},function(e,t,n){var r=n(8),o=n(2).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){e.exports=!n(3)&&!n(13)(function(){return 7!=Object.defineProperty(n(45)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(93);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(5),o=n(49),i=n(31)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var r=n(32);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";var r=n(36),o=n(35),i=n(125),a={};e.exports=function(e,t,n,s,u){for(var l in e)if(e.hasOwnProperty(l)){var c;try{r("function"==typeof e[l],"%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.",s||"React class",n,l,typeof e[l]),c=e[l](t,l,s,n,null,i)}catch(e){c=e}if(o(!c||c instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",s||"React class",n,l,typeof c),c instanceof Error&&!(c.message in a)){a[c.message]=!0;var f=u?u():"";o(!1,"Failed %s type: %s%s",n,c.message,null!=f?f:"")}}}},function(e,t,n){"use strict";var r={};Object.freeze(r),e.exports=r},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(s[a[c]]=n[a[c]])}}return s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=(0,n(12).nSQL)("balance").model([{key:"id",type:"int",props:["pk","ai"]},{key:"userId",type:"string"},{key:"balance",type:"int"}]).config({mode:"TEMP"});r.connect(),t.default=r},function(e,t,n){var r=n(10);r(r.S,"Object",{create:n(25)})},function(e,t,n){n(54);var r=n(1).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){e.exports={default:n(55),__esModule:!0}},function(e,t,n){var r=n(8),o=n(14),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(47)(Function.call,n(37).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){var r=n(10);r(r.S,"Object",{setPrototypeOf:n(57).set})},function(e,t,n){n(58),e.exports=n(1).Object.setPrototypeOf},function(e,t,n){e.exports={default:n(59),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(60)),o=a(n(56)),i=a(n(44));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,i.default)(t)));e.prototype=(0,o.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){n(20)("observable")},function(e,t,n){n(20)("asyncIterator")},function(e,t){},function(e,t,n){var r=n(7),o=n(38).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(40);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(24),o=n(39),i=n(19);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,s=n(e),u=i.f,l=0;s.length>l;)u.call(e,a=s[l++])&&t.push(a);return t}},function(e,t,n){var r=n(16)("meta"),o=n(8),i=n(5),a=n(4).f,s=0,u=Object.isExtensible||function(){return!0},l=!n(13)(function(){return u(Object.preventExtensions({}))}),c=function(e){a(e,r,{value:{i:"O"+ ++s,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return l&&f.NEED&&u(e)&&!i(e,r)&&c(e),e}}},function(e,t,n){"use strict";var r=n(2),o=n(5),i=n(3),a=n(10),s=n(42),u=n(68).KEY,l=n(13),c=n(30),f=n(22),d=n(16),p=n(6),h=n(21),y=n(20),m=n(67),v=n(66),g=n(14),b=n(8),_=n(7),w=n(29),x=n(15),k=n(25),C=n(65),S=n(37),T=n(4),E=n(24),I=S.f,O=T.f,P=C.f,R=r.Symbol,A=r.JSON,N=A&&A.stringify,M=p("_hidden"),L=p("toPrimitive"),q={}.propertyIsEnumerable,j=c("symbol-registry"),D=c("symbols"),F=c("op-symbols"),U=Object.prototype,W="function"==typeof R,B=r.QObject,H=!B||!B.prototype||!B.prototype.findChild,z=i&&l(function(){return 7!=k(O({},"a",{get:function(){return O(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=I(U,t);r&&delete U[t],O(e,t,n),r&&e!==U&&O(U,t,r)}:O,V=function(e){var t=D[e]=k(R.prototype);return t._k=e,t},K=W&&"symbol"==typeof R.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof R},Q=function(e,t,n){return e===U&&Q(F,t,n),g(e),t=w(t,!0),g(n),o(D,t)?(n.enumerable?(o(e,M)&&e[M][t]&&(e[M][t]=!1),n=k(n,{enumerable:x(0,!1)})):(o(e,M)||O(e,M,x(1,{})),e[M][t]=!0),z(e,t,n)):O(e,t,n)},$=function(e,t){g(e);for(var n,r=m(t=_(t)),o=0,i=r.length;i>o;)Q(e,n=r[o++],t[n]);return e},Y=function(e){var t=q.call(this,e=w(e,!0));return!(this===U&&o(D,e)&&!o(F,e))&&(!(t||!o(this,e)||!o(D,e)||o(this,M)&&this[M][e])||t)},J=function(e,t){if(e=_(e),t=w(t,!0),e!==U||!o(D,t)||o(F,t)){var n=I(e,t);return!n||!o(D,t)||o(e,M)&&e[M][t]||(n.enumerable=!0),n}},G=function(e){for(var t,n=P(_(e)),r=[],i=0;n.length>i;)o(D,t=n[i++])||t==M||t==u||r.push(t);return r},X=function(e){for(var t,n=e===U,r=P(n?F:_(e)),i=[],a=0;r.length>a;)!o(D,t=r[a++])||n&&!o(U,t)||i.push(D[t]);return i};W||(s((R=function(){if(this instanceof R)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===U&&t.call(F,n),o(this,M)&&o(this[M],e)&&(this[M][e]=!1),z(this,e,x(1,n))};return i&&H&&z(U,e,{configurable:!0,set:t}),V(e)}).prototype,"toString",function(){return this._k}),S.f=J,T.f=Q,n(38).f=C.f=G,n(19).f=Y,n(39).f=X,i&&!n(27)&&s(U,"propertyIsEnumerable",Y,!0),h.f=function(e){return V(p(e))}),a(a.G+a.W+a.F*!W,{Symbol:R});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var te=E(p.store),ne=0;te.length>ne;)y(te[ne++]);a(a.S+a.F*!W,"Symbol",{for:function(e){return o(j,e+="")?j[e]:j[e]=R(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in j)if(j[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!W,"Object",{create:function(e,t){return void 0===t?k(e):$(k(e),t)},defineProperty:Q,defineProperties:$,getOwnPropertyDescriptor:J,getOwnPropertyNames:G,getOwnPropertySymbols:X}),A&&a(a.S+a.F*(!W||l(function(){var e=R();return"[null]"!=N([e])||"{}"!=N({a:e})||"{}"!=N(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!K(e))return v(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,N.apply(A,r)}}),R.prototype[L]||n(9)(R.prototype,L,R.prototype.valueOf),f(R,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){n(69),n(64),n(63),n(62),e.exports=n(1).Symbol},function(e,t,n){e.exports={default:n(70),__esModule:!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports=function(){}},function(e,t,n){"use strict";var r=n(73),o=n(72),i=n(26),a=n(7);e.exports=n(43)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){n(74);for(var r=n(2),o=n(9),i=n(26),a=n(6)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<s.length;u++){var l=s[u],c=r[l],f=c&&c.prototype;f&&!f[a]&&o(f,a,l),i[l]=i.Array}},function(e,t,n){var r=n(2).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(28),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(28),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(7),o=n(78),i=n(77);e.exports=function(e){return function(t,n,a){var s,u=r(t),l=o(u.length),c=i(a,l);if(e&&n!=n){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(40);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(4),o=n(14),i=n(24);e.exports=n(3)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),s=a.length,u=0;s>u;)r.f(e,n=a[u++],t[n]);return e}},function(e,t,n){"use strict";var r=n(25),o=n(15),i=n(22),a={};n(9)(a,n(6)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(28),o=n(32);e.exports=function(e){return function(t,n){var i,a,s=String(o(t)),u=r(n),l=s.length;return u<0||u>=l?e?"":void 0:(i=s.charCodeAt(u))<55296||i>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(83)(!0);n(43)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){n(84),n(75),e.exports=n(21).f("iterator")},function(e,t,n){e.exports={default:n(85),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(44),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,i.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){var r=n(10);r(r.S+r.F*!n(3),"Object",{defineProperty:n(4).f})},function(e,t,n){n(88);var r=n(1).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t,n){e.exports={default:n(89),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(90),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,i.default)(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(10),o=n(1),i=n(13);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){var r=n(49),o=n(48);n(94)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){n(95),e.exports=n(1).Object.getPrototypeOf},function(e,t,n){e.exports={default:n(96),__esModule:!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(97)),o=c(n(92)),i=c(n(91)),a=c(n(87)),s=c(n(61)),u=n(18),l=c(u);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(t.__proto__||(0,r.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){return l.default.createElement("div",null,"Account balance ",this.props.nSQLdata)}}],[{key:"tables",value:function(){return["balance"]}},{key:"onChange",value:function(e,t){console.log("account status changed event",e),e.notes.includes("mount")||t(e.affectedRows[0].balance)}}]),t}(u.PureComponent);t.default=f},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var a=n(18),s=n(12);t.bindNSQL=function(e,t){return function(n){function r(e){var t=n.call(this,e)||this;return t.state={data:void 0,isLoading:!0},t.updateState=t.updateState.bind(t),t}return o(r,n),r.prototype.componentWillMount=function(){if(t&&t.tables&&t.tables.length)this.tables=t.tables;else{if(!e.tables)throw Error("Need tables for nanoSQL HOC!");this.tables=e.tables()}if(t&&t.onChange)this.onChange=t.onChange;else{if(!e.onChange)throw Error("Need tables for nanoSQL HOC!");this.onChange=e.onChange}t&&t.store?this.store=t.store:this.store=s.nSQL();for(var n=this.store.sTable,r=this.tables.length;r--;)this.store.table(this.tables[r]).on("change",this.updateState),this.updateState({table:this.tables[r],query:{table:this.tables[r],action:null,actionArgs:null,state:"complete",result:[],comments:[]},time:Date.now(),notes:["mount"],result:[],types:["change"],actionOrView:"",affectedRows:[]});this.store.table(n)},r.prototype.componentWillUnmount=function(){for(var e=this.store.sTable,t=this.tables.length;t--;)this.store.table(this.tables[t]).off("change",this.updateState);this.store.table(e)},r.prototype.updateState=function(e){var t=this;this.setState({isLoading:!0},function(){t.onChange(e,function(e){t.setState({isLoading:!1,data:e})})})},r.prototype.render=function(){return a.createElement(e,i({nSQLloading:this.state.isLoading,nSQLdata:this.state.data},this.props))},r}(a.Component)}},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=["_hist","_hist_ptr","_id"],a=function(){function e(e){this.historyModeArgs=e,this._tablePkKeys={},this._tablePkTypes={},this._tableKeys={}}return e.prototype.willConnect=function(e,t){var n=this;this.parent=e.parent;var a={};Object.keys(e.models).forEach(function(t){if(0!==t.indexOf("_")){var r=o._assign(e.models[t]).map(function(e){return e.props&&o.intersect(["pk","pk()"],e.props)&&(n._tablePkKeys[t]=e.key,n._tablePkTypes[t]=e.type,n._tableKeys[t]={}),delete e.props,delete e.default,e});r.unshift({key:"_id",type:"timeIdms",props:["pk()"]}),a["_"+t+"__hist_rows"]=r,a["_"+t+"__hist_idx"]=[{key:"id",type:n._tablePkTypes[t],props:["pk()"]},{key:"histRows",type:"timeIdms[]"},{key:"histPtr",type:"number"}]}});var s="string"!=typeof this.historyModeArgs,u=[{key:"id",type:"timeIdms",props:["pk()"]},{key:"table",type:"string"},{key:"keys",type:"any[]"}],l=[{key:"id",type:"timeIdms",props:["pk()"]},{key:"ptr",type:"int"}];"database"!==this.historyModeArgs&&this.historyModeArgs?("database"!==this.historyModeArgs||s)&&(this.historyModes={},s?this.historyModes=o._assign(this.historyModeArgs):Object.keys(this._tablePkKeys).forEach(function(e){n.historyModes[e]=n.historyModeArgs}),Object.keys(this.historyModes).forEach(function(e){"table"===n.historyModes[e]&&(a["_"+e+"__hist"]=u,a["_"+e+"__hist_ptr"]=l)})):(a[i[0]]=u,a[i[1]]=l),e.models=r({},e.models,a),t(e)},e.prototype._histTable=function(e){return e?this.historyModes?"table"===this.historyModes[e]?"_"+e+"__hist":null:"_hist":"__null"},e.prototype._generateHistoryPointers=function(e,t){var n=this,r=this._histTable(e);r?this.parent.query("select").manualExec({table:r+"_ptr"}).then(function(i){i.length?t():n.parent.query("upsert",{id:o.timeid(!0),table:e,ptr:0}).manualExec({table:r+"_ptr"}).then(t)}):t()},e.prototype.didConnect=function(e,t){var n=this,r=function(){o.fastALL(Object.keys(n._tableKeys),function(e,t,r){n.parent.extend("idx","_"+e+"__hist_idx").then(function(t){t.forEach(function(t){n._tableKeys[e][t]=!0}),n.historyModes?n._generateHistoryPointers(e,r):r()})}).then(t)};this.historyModes?r():this.parent.query("select").manualExec({table:"_hist_ptr"}).then(function(e){e.length?r():n.parent.query("upsert",{id:o.timeid(!0),table:"",ptr:0}).manualExec({table:"_hist_ptr"}).then(r)})},e.prototype._purgeRowHistory=function(e,t,n,r){var i=this,a="_"+e+"__hist_rows",s="_"+e+"__hist_idx";o.fastALL(t,function(t,n,u){i.parent.query("select").where(["id","=",t]).manualExec({table:s}).then(function(n){if(n.length){var l=Object.isFrozen(n[0])?o._assign(n[0]):n[0],c=[];if(r)c=c.concat(l.histRows.filter(function(e){return-1!==e})),l.histPtr=0,l.histRows=[];else{for(;l.histPtr--;)c.push(l.histRows.shift());l.histPtr=0}c.length?i.parent.query("upsert",l).comment("History Purge").where(["id","=",t]).manualExec({table:s}).then(function(){i.parent.query("delete").comment("History Purge").where(["_id","IN",c]).manualExec({table:a}).then(function(){r?i.parent.query("select").where([i._tablePkKeys[e],"=",t]).manualExec({table:e}).then(function(n){i._unshiftSingleRow(e,["change"],t,n[0],!1,u)}):u()})}):u()}else u()})}).then(n)},e.prototype._purgeTableHistory=function(e,t,n){var r=this;this.parent.query("select").manualExec({table:e+"_ptr"}).then(function(i){var a=Object.isFrozen(i[0])?o._assign(i[0]):i[0];if(n||a.ptr>0){var s=r.parent.query("select");n||s.range(-1*a.ptr,0),s.manualExec({table:e}).then(function(i){if(i.length){var s={};i.forEach(function(e){s[e.table]||(s[e.table]=[]),s[e.table]=s[e.table].concat(e.keys)}),o.fastALL(Object.keys(s),function(e,t,o){r._purgeRowHistory(e,s[e],o,n)}).then(function(){r.parent.query("delete").comment("History Purge").where(["id","IN",i.map(function(e){return e.id})]).manualExec({table:e}).then(function(){a.ptr=0,r.parent.query("upsert",a).comment("History Purge").where(["id","=",a.id]).manualExec({table:e+"_ptr"}).then(t)})})}else t()})}else t()})},e.prototype._purgeParentHistory=function(e,t,n){if(this.historyModes){var r=this._histTable(e);r?this._purgeTableHistory(r,n):this._purgeRowHistory(e,t,n)}else this._purgeTableHistory("_hist",n)},e.prototype._purgeAllHistory=function(e,t,n){if(this.historyModes){var r=this._histTable(e);r?this._purgeTableHistory(r,n,!0):this._purgeRowHistory(e,[t],n,!0)}else this._purgeTableHistory("_hist",n,!0)},e.prototype.didExec=function(e,t){var n=this;e.table&&0!==e.table.indexOf("_")&&e.types.indexOf("change")>-1&&-1===e.query.comments.indexOf("History Write")?this._purgeParentHistory(e.table,e.affectedRowPKS,function(){o.fastALL(e.affectedRows,function(t,r,o){var i=t[n._tablePkKeys[e.table]];n._tableKeys[e.table][i]?n._unshiftSingleRow(e.table,e.types,i,t,!1,function(e){o(i)}):(n._tableKeys[e.table][i]=!0,n._unshiftSingleRow(e.table,e.types,i,t,!0,function(t){n.parent.query("upsert",{id:i,histRows:[t,-1],histPtr:0}).manualExec({table:"_"+e.table+"__hist_idx"}).then(function(){o(i)})}))}).then(function(r){n._unshiftParent(e,r,t)})}):t(e)},e.prototype._unshiftParent=function(e,t,n){var r=this._histTable(e.table);r?this.parent.query("upsert",{id:o.timeid(!0),table:e.table,keys:t}).manualExec({table:r}).then(function(){n(e)}):n(e)},e.prototype._unshiftSingleRow=function(e,t,n,i,a,s){var u=this,l="_"+e+"__hist_idx",c=o.timeid(!0),f=function(e){u.parent.query("select").where(["id","=",n]).manualExec({table:l}).then(function(t){var r=Object.isFrozen(t[0])?o._assign(t[0]):t[0];r.histRows.unshift(e),u.parent.query("upsert",r).where(["id","=",n]).manualExec({table:l}).then(function(){s(e)})})};t.indexOf("delete")>-1||t.indexOf("drop")>-1?f(-1):this.parent.query("upsert",r({_id:c},i)).manualExec({table:"_"+e+"__hist_rows"}).then(function(){a?s(c):f(c)})},e.prototype.extend=function(e,t,n){if("hist"===t[0]){var r=t[1],o=t[2],i=t[3];switch(r){case"<":case">":this._shiftHistory(r,o,i,function(n){e(t,[n])});break;case"?":this._queryHistory(o,i,function(n){e(t,n)});break;case"rev":this._getRevisionHistory(o,i,function(n){e(t,n)});break;case"clear":this._purgeAllHistory(o,i,function(){e(t,n)})}}else e(t,n)},e.prototype._getRevisionHistory=function(e,t,n){var r=this,a="_"+e+"__hist_idx";this.parent.query("select").where(["id","=",t]).manualExec({table:a}).then(function(t){var a=t[0].histRows.filter(function(e){return-1!==e});r.parent.query("select").where(["_id","IN",a]).manualExec({table:"_"+e+"__hist_rows"}).then(function(e){var r={};e.forEach(function(e){r[e[i[2]]]=Object.isFrozen(e)?o._assign(e):e,delete r[e[i[2]]][i[2]]}),n([{pointer:t[0].histRows.length-t[0].histPtr-1,revisions:t[0].histRows.reverse().map(function(e){return-1===e?null:r[e]})}])})})},e.prototype._getTableHistory=function(e,t){var n=this;this.parent.extend("idx.length",e).then(function(r){n.parent.query("select").manualExec({table:e+"_ptr"}).then(function(e){e.length?t([r,r-e[0].ptr]):t([0,0])})})},e.prototype._queryHistory=function(e,t,n){if(this.historyModes){var r=this._histTable(e);if(r){if(!e)throw Error("Need a table to query this history!");this._getTableHistory(r,n)}else{if(!t)throw Error("Need a row primary key to query this history!");var o="_"+e+"__hist_idx";this.parent.query("select").where(["id","=",t]).manualExec({table:o}).then(function(e){var t=e[0];n([t.histRows.length,t.histRows.length-t.histPtr-1])})}}else this._getTableHistory("_hist",function(e){n(e)})},e.prototype._shiftTableHistory=function(e,t,n){var r=this;this.parent.query("select").manualExec({table:t+"_ptr"}).then(function(i){var a=o._assign(i[0]);a.ptr+="<"===e?1:-1,a.ptr<0&&(a.ptr=0),r.parent.extend("idx.length",t).then(function(s){a.ptr>s&&(a.ptr=s),i[0].ptr!==a.ptr?r.parent.query("select").range(-1,"<"===e?i[0].ptr:a.ptr).manualExec({table:t}).then(function(i){r.parent.query("upsert",a).manualExec({table:t+"_ptr"}).then(function(){o.fastALL(i[0].keys,function(t,n,o){r._shiftRowHistory(e,i[0].table,t,o)}).then(function(e){n(e.indexOf(!0)>-1)})})}):n(!1)})})},e.prototype._shiftRowHistory=function(e,t,n,r){var i=this,a=function(e){i.parent.query("upsert",e).where([i._tablePkKeys[t],"=",n]).manualExec({table:"_"+t+"__hist_idx"}).then(function(){r(!0)})};this.parent.query("select").where([this._tablePkKeys[t],"=",n]).manualExec({table:"_"+t+"__hist_idx"}).then(function(s){var u=o._assign(s[0]);if(u.histPtr+="<"===e?1:-1,u.histPtr<0&&(u.histPtr=0),u.histPtr>u.histRows.length-1&&(u.histPtr=u.histRows.length-1),u.histPtr!==s[0].histPtr){var l=u.histRows[u.histPtr];-1===l?i.parent.query("delete").comment("History Write").where([i._tablePkKeys[t],"=",n]).manualExec({table:t}).then(function(){a(u)}):i.parent.query("select").where(["_id","=",l]).manualExec({table:"_"+t+"__hist_rows"}).then(function(e){i.parent.query("upsert",e[0]).comment("History Write").manualExec({table:t}).then(function(){a(u)})})}else r(!1)})},e.prototype._shiftHistory=function(e,t,n,r){if(this.historyModes){var o=this._histTable(t);if(o){if(!t)throw Error("Need a table to change this history!");this._shiftTableHistory(e,o,r)}else{if(!n)throw Error("Need a row primary key to change this history!");this._shiftRowHistory(e,t,n,r)}}else this._shiftTableHistory(e,"_hist",r)},e}();t._NanoSQLHistoryPlugin=a},function(e,t,n){(function(e){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(11),i=n(0),a=n(17),s=function(t){e._fs.existsSync(t)&&(e._fs.readdirSync(t).forEach(function(n){var r=t+"/"+n;e._fs.statSync(r).isDirectory()?s(r):e._fs.unlinkSync(r)}),e._fs.rmdirSync(t))},u=function(){function t(e,t,n){this.path=e,this.writeCache=t,this.readCache=n,this._pkKey={},this._pkType={},this._dbIndex={},this._levelDBs={},this._isPKnum={}}return t.prototype.connect=function(t){var n=this;i.fastALL(Object.keys(this._dbIndex),function(t,r,o){var i=[];n._levelDBs[t].createKeyStream().on("data",function(r){i.push(n._isPKnum[t]?new e._Int64BE(r).toNumber():r)}).on("end",function(){i.length&&n._dbIndex[t].set(i),o()})}).then(t)},t.prototype.disconnect=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t._levelDBs[e].close(r)}).then(function(){e()})},t.prototype.setID=function(t){this._id=t,this._path=(this.path||".")+"/db_"+this._id,e._fs.existsSync(this._path)||e._fs.mkdirSync(this._path)},t.prototype.makeTable=function(t,n){var r=this;this._dbIndex[t]=new a.DatabaseIndex,this._levelDBs[t]=e._levelup(e._leveldown(e._path.join(this._path,t)),{cacheSize:1024*(this.readCache||32)*1024,writeBufferSize:1024*(this.writeCache||32)*1024}),n.forEach(function(e){e.props&&i.intersect(["pk","pk()"],e.props)&&(r._pkType[t]=e.type,r._pkKey[t]=e.key,r._isPKnum[t]=-1!==["int","number","float"].indexOf(e.type)),e.props&&i.intersect(["ai","ai()"],e.props)&&i.intersect(["pk","pk()"],e.props)&&"int"===e.type&&(r._dbIndex[t].doAI=!0)})},t.prototype.write=function(t,n,o,a){if(!(n=n||i.generateID(this._pkType[t],this._dbIndex[t].ai)))throw Error("Can't add a row without a primary key!");-1===this._dbIndex[t].indexOf(n)&&this._dbIndex[t].add(n);var s,u=r({},o,((s={})[this._pkKey[t]]=n,s));this._levelDBs[t].put(this._isPKnum[t]?new e._Int64BE(n).toBuffer():n,JSON.stringify(u),function(e){if(e)throw Error(e);a(u)})},t.prototype.delete=function(t,n,r){-1!==this._dbIndex[t].indexOf(n)&&this._dbIndex[t].remove(n),this._levelDBs[t].del(this._isPKnum[t]?new e._Int64BE(n).toBuffer():n,function(e){if(e)throw Error(e);r()})},t.prototype.read=function(t,n,r){-1!==this._dbIndex[t].indexOf(n)?this._levelDBs[t].get(this._isPKnum[t]?new e._Int64BE(n).toBuffer():n,function(e,t){if(e)throw Error(e);r(JSON.parse(t))}):r(null)},t.prototype.rangeRead=function(t,n,r,i,a,s){var u=this._dbIndex[t].keys(),l=-1===[typeof i,typeof a].indexOf("undefined"),c=l?[i,a]:[0,u.length-1],f=[],d=s&&l?i:u[c[0]],p=s&&l?a:u[c[1]];this._levelDBs[t].createValueStream({gte:this._isPKnum[t]?new e._Int64BE(d).toBuffer():d,lte:this._isPKnum[t]?new e._Int64BE(p).toBuffer():p}).on("data",function(e){f.push(JSON.parse(e))}).on("end",function(){var e=c[0]||0,t=0,i=function(){t<f.length?n(f[t],e,function(){e++,++t%500==0?o.setFast(i):i()}):r()};i()})},t.prototype.drop=function(e,t){var n=this;i.fastALL(this._dbIndex[e].keys(),function(t,r,o){n._levelDBs[e].del(t,o)}).then(function(){var r=new a.DatabaseIndex;r.doAI=n._dbIndex[e].doAI,n._dbIndex[e]=r,t()})},t.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},t.prototype.destroy=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,function(){t._levelDBs[e].close(r)})}).then(function(){s(t._path),e()})},t}();t._LevelStore=u}).call(this,n(33))},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(11),i=n(0),a=n(17),s=function(){function e(e){this._pkKey={},this._pkType={},this._dbIndex={},this._size=1e3*(e||0)*1e3}return e.prototype.setID=function(e){this._id=e},e.prototype.connect=function(e){var t=this;this._db=window.openDatabase(this._id,"1.0",this._id,this._size||i.isAndroid?5e6:1),i.fastALL(Object.keys(this._pkKey),function(e,n,r){t._sql(!0,"CREATE TABLE IF NOT EXISTS "+e+" (id BLOB PRIMARY KEY UNIQUE, data TEXT)",[],function(){t._sql(!1,"SELECT id FROM "+e,[],function(n){for(var o=[],i=0;i<n.rows.length;i++)o.push(n.rows.item(i).id);o=o.sort(),t._dbIndex[e].set(o),r()})})}).then(e)},e.prototype._chkTable=function(e){if(-1===Object.keys(this._pkType).indexOf(e))throw Error("No table "+e+" found!");return e},e.prototype.makeTable=function(e,t){var n=this;this._dbIndex[e]=new a.DatabaseIndex,t.forEach(function(t){t.props&&t.props.indexOf("pk")>-1&&(n._pkType[e]=t.type,n._pkKey[e]=t.key),t.props&&t.props.indexOf("ai")>-1&&t.props.indexOf("pk")>-1&&"int"===t.type&&(n._dbIndex[e].doAI=!0)})},e.prototype._sql=function(e,t,n,r){var o=function(e){e.executeSql(t,n,function(e,t){r(t)},function(e,r){return console.error(t,n,r),!1})};e?this._db.transaction(o):this._db.readTransaction(o)},e.prototype.write=function(e,t,n,o){if(!(t=t||i.generateID(this._pkType[e],this._dbIndex[e].ai)))throw new Error("Can't add a row without a primary key!");var a,s,u=!1;if(-1===this._dbIndex[e].indexOf(t)&&(u=!0,this._dbIndex[e].add(t)),u){var l=r({},n,((a={})[this._pkKey[e]]=t,a));this._sql(!0,"INSERT into "+this._chkTable(e)+" (id, data) VALUES (?, ?)",[t,JSON.stringify(l)],function(e){o(l)})}else{var c=r({},n,((s={})[this._pkKey[e]]=t,s));this._sql(!0,"UPDATE "+this._chkTable(e)+" SET data = ? WHERE id = ?",[JSON.stringify(c),t],function(){o(c)})}},e.prototype.delete=function(e,t,n){-1!==this._dbIndex[e].indexOf(t)&&this._dbIndex[e].remove(t),this._sql(!0,"DELETE FROM "+this._chkTable(e)+" WHERE id = ?",[t],function(){n()})},e.prototype.read=function(e,t,n){this._sql(!1,"SELECT data FROM "+this._chkTable(e)+" WHERE id = ?",[t],function(e){e.rows.length?n(JSON.parse(e.rows.item(0).data)):n(void 0)})},e.prototype.batchRead=function(e,t,n){this._sql(!1,"SELECT data from "+this._chkTable(e)+" WHERE id IN ("+t.map(function(e){return"?"}).join(", ")+") ORDER BY id",t,function(e){for(var t=e.rows.length,r=[];t--;)r.unshift(JSON.parse(e.rows.item(t).data));n(r)})},e.prototype.rangeRead=function(e,t,n,r,i,a){var s=this,u=this._dbIndex[e].keys(),l=-1===[typeof r,typeof i].indexOf("undefined"),c=l?[r,i]:[];if(u.length){a&&l&&(c=c.map(function(t){return s._dbIndex[e].getLocation(t)}));var f=c[0]||0,d=[],p=c[0],h="SELECT data from "+this._chkTable(e);if(c.length){for(u[p];p<=c[1];)d.push(u[p]),p++;h+=" WHERE id IN ("+d.map(function(e){return"?"}).join(", ")+")"}h+=" ORDER BY id",this._sql(!1,h,d,function(e){var r=0,i=function(){e.rows.length>r?t(JSON.parse(e.rows.item(r).data),f,function(){f++,++r%500==0?o.setFast(i):i()}):n()};i()})}else n()},e.prototype.drop=function(e,t){var n=new a.DatabaseIndex;n.doAI=this._dbIndex[e].doAI,this._dbIndex[e]=n,this._sql(!0,"DELETE FROM "+this._chkTable(e),[],function(e){t()})},e.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},e.prototype.destroy=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,r)}).then(e)},e}();t._WebSQLStore=s},function(module,exports,__webpack_require__){var __assign=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(exports,"__esModule",{value:!0});var lie_ts_1=__webpack_require__(11),utilities_1=__webpack_require__(0),db_idx_1=__webpack_require__(17),_evalContext=function(source,context){var compiled=eval("(function("+Object.keys(context).join(", ")+") {"+source+"})");return compiled.apply(context,Object.keys(context).map(function(e){return context[e]}))},_IndexedDBStore=function(){function e(e){this._worker='function o(r){this.go=function(t){var o=0;r&&r.length||t([]),r.forEach(function(e,n){e(function(){++o===r.length&&t([])})})}}var s={db:null,store:function(e,n,t){var o=s.db.transaction(e,n);t(o,o.objectStore(e),function(e,n){return function(){postMessage({do:e,args:n})}})},init:function(){addEventListener("message",function(e){var n=e.data;s[n.do]&&s[n.do](n.args)},!1)},setup:function(n){var e=indexedDB.open(n.id,1),t=!1,a={};e.onupgradeneeded=function(e){t=!0,s.db=e.target.result,Object.keys(n.pkKeys).forEach(function(e){s.db.createObjectStore(e,{keyPath:n.pkKeys[e]}),a[e]=[]})},e.onsuccess=function(e){if(s.db=e.target.result,t)postMessage({do:"rdy",args:a});else{new o(Object.keys(n.pkKeys).map(function(t){return function(n){var e,o,r;e=t,o=function(e){a[t]=e,n()},r=[],s.store(e,"readonly",function(e,n,t){n.openCursor().onsuccess=function(e){var n=e.target.result;n&&(r.push(n.key),n.continue())},e.oncomplete=function(){o(r)}})}})).go(function(){postMessage({do:"rdy",args:a})})}}},write:function(o){s.store(o.table,"readwrite",function(e,n,t){n.put(o.row),e.oncomplete=t("write_"+o.id,null)})},read:function(r){s.store(r.table,"readonly",function(e,n,t){var o=n.get(r.pk);o.onsuccess=function(){postMessage({do:"read_"+r.id,args:o.result})}})},readRange:function(a){s.store(a.table,"readonly",function(e,n,t){var o=[],r=-1===a.range.indexOf(void 0)?n.openCursor(IDBKeyRange.bound(a.range[0],a.range[1])):n.openCursor();e.oncomplete=t("readRange_"+a.id+"_done",o),r.onsuccess=function(e){var n=e.target.result;n&&(o.push(n.value),n.continue())}})},delete:function(o){s.store(o.table,"readwrite",function(e,n,t){e.oncomplete=t("delete_"+o.id,!0),e.onerror=t("delete_"+o.id,!1),"_clear_"===o.pk?n.clear():n.delete(o.pk)})}};s.init();',this._pkKey={},this._pkType={},this._dbIndex={},this._waitingCBs={},this._useWorker=e}return e.prototype.connect=function(e){var t=this;if(this._useWorker)this._w=new Worker(window.URL.createObjectURL(new Blob([this._worker]))),this._w.addEventListener("message",function(e){t._handleWWMessage(e.data.do,e.data.args)});else{var n=[];_evalContext(this._worker,{postMessage:function(e){t._handleWWMessage(e.do,e.args)},addEventListener:function(e,t){n.push(t)}}),this._w={addEventListener:null,postMessage:function(e,t){n.forEach(function(t){t({data:e})})}}}this._waitingCBs.rdy=function(n){Object.keys(n).forEach(function(e){t._dbIndex[e].set(n[e])}),e()},this._w.postMessage({do:"setup",args:{pkKeys:this._pkKey,id:this._id}})},e.prototype.setID=function(e){this._id=e},e.prototype._handleWWMessage=function(e,t){this._waitingCBs[e]&&(this._waitingCBs[e](t),delete this._waitingCBs[e])},e.prototype.makeTable=function(e,t){var n=this;this._dbIndex[e]=new db_idx_1.DatabaseIndex,t.forEach(function(t){t.props&&utilities_1.intersect(["pk","pk()"],t.props)&&(n._pkType[e]=t.type,n._pkKey[e]=t.key,t.props&&utilities_1.intersect(["ai","ai()"],t.props)&&("int"===t.type||"number"===t.type)&&(n._dbIndex[e].doAI=!0))})},e.prototype.write=function(e,t,n,r){if(!(t=t||utilities_1.generateID(this._pkType[e],this._dbIndex[e].ai)))throw new Error("Can't add a row without a primary key!");-1===this._dbIndex[e].indexOf(t)&&this._dbIndex[e].add(t);var o,i=utilities_1.uuid(),a=__assign({},n,((o={})[this._pkKey[e]]=t,o));this._waitingCBs["write_"+i]=function(e){r(a)},this._w.postMessage({do:"write",args:{table:e,id:i,row:a}})},e.prototype.delete=function(e,t,n){-1!==this._dbIndex[e].indexOf(t)&&this._dbIndex[e].remove(t);var r=utilities_1.uuid();this._waitingCBs["delete_"+r]=function(e){n()},this._w.postMessage({do:"delete",args:{table:e,id:r,pk:t}})},e.prototype.read=function(e,t,n){var r=utilities_1.uuid();-1!==this._dbIndex[e].indexOf(t)?(this._waitingCBs["read_"+r]=function(e){n(e)},this._w.postMessage({do:"read",args:{table:e,id:r,pk:t}})):n(null)},e.prototype.rangeRead=function(e,t,n,r,o,i){var a=this,s=this._dbIndex[e].keys(),u=-1===[typeof r,typeof o].indexOf("undefined"),l=u?[r,o]:[0,s.length-1];if(s.length){var c=utilities_1.uuid(),f=[],d=l[0],p=0;this._waitingCBs["readRange_"+c+"_done"]=function(e){delete a._waitingCBs["readRange_"+c],f=e;var r=function(){d<=l[1]?t(f[p],d,function(){d++,++p%500==0?lie_ts_1.setFast(r):r()}):n()};r()},this._w.postMessage({do:"readRange",args:{table:e,id:c,range:i&&u?l:l.map(function(e){return s[e]})}})}else n()},e.prototype.drop=function(e,t){var n=new db_idx_1.DatabaseIndex;n.doAI=this._dbIndex[e].doAI,this._dbIndex[e]=n;var r=utilities_1.uuid();this._waitingCBs["delete_"+r]=function(e){t()},this._w.postMessage({do:"delete",args:{table:e,id:r,pk:"_clear_"}})},e.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},e.prototype.destroy=function(e){var t=this;utilities_1.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,r)}).then(e)},e}();exports._IndexedDBStore=_IndexedDBStore},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(11),i=n(0),a=n(17),s=function(){function e(e){this._pkKey={},this._pkType={},this._rows={},this._dbIndex={},this._ls=e||!1}return e.prototype.connect=function(e){e()},e.prototype.setID=function(e){this._id=e},e.prototype.makeTable=function(e,t){var n=this;this._rows[e]={},this._dbIndex[e]=new a.DatabaseIndex,t.forEach(function(t){if(t.props&&i.intersect(["pk","pk()"],t.props)&&(n._pkType[e]=t.type,n._pkKey[e]=t.key),t.props&&i.intersect(["pk","pk()"],t.props)&&i.intersect(["ai","ai()"],t.props)&&"int"===t.type&&(n._dbIndex[e].doAI=!0),n._ls){var r=localStorage.getItem(n._id+"*"+e+"_idx");r&&n._dbIndex[e].set(JSON.parse(r))}})},e.prototype.write=function(e,t,n,o){if(!(t=t||i.generateID(this._pkType[e],this._dbIndex[e].ai)))throw new Error("Can't add a row without a primary key!");if(-1===this._dbIndex[e].indexOf(t)&&(this._dbIndex[e].add(t),this._ls&&localStorage.setItem(this._id+"*"+e+"_idx",JSON.stringify(this._dbIndex[e].keys()))),this._ls){var a=r({},n,((s={})[this._pkKey[e]]=t,s));localStorage.setItem(this._id+"*"+e+"__"+t,JSON.stringify(a)),o(a)}else{a=r({},n,((u={})[this._pkKey[e]]=t,u));this._rows[e][t]=i.deepFreeze(a),o(a)}var s,u},e.prototype.delete=function(e,t,n){-1!==this._dbIndex[e].indexOf(t)&&(this._dbIndex[e].remove(t),this._ls&&localStorage.setItem(this._id+"*"+e+"_idx",JSON.stringify(this._dbIndex[e].keys()))),this._ls?localStorage.removeItem(this._id+"*"+e+"__"+t):delete this._rows[e][t],n()},e.prototype.read=function(e,t,n){if(this._ls){var r=localStorage.getItem(this._id+"*"+e+"__"+t);n(r?JSON.parse(r):void 0)}else n(this._rows[e][t])},e.prototype.rangeRead=function(e,t,n,r,i,a){var s=this,u=this._dbIndex[e].keys(),l=-1===[typeof r,typeof i].indexOf("undefined"),c=l?[r,i]:[0,u.length-1];if(u.length){a&&l&&(c=c.map(function(t){return s._dbIndex[e].getLocation(t)}));var f=c[0],d=0,p=function(){f++,++d%500==0?o.setFast(h):h()},h=function(){if(f<=c[1])if(s._ls){var r=localStorage.getItem(s._id+"*"+e+"__"+u[f]);t(r?JSON.parse(r):void 0,f,p)}else t(s._rows[e][u[f]],f,p);else n()};h()}else n()},e.prototype.drop=function(e,t){var n=this;this._ls?(localStorage.setItem(this._id+"*"+e+"_idx",JSON.stringify([])),this._dbIndex[e].keys().forEach(function(t){localStorage.removeItem(n._id+"*"+e+"__"+t)})):this._rows[e]={};var r=new a.DatabaseIndex;r.doAI=this._dbIndex[e].doAI,this._dbIndex[e]=r,t()},e.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},e.prototype.destroy=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,r)}).then(e)},e}();t._SyncStore=s},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="$",r=function(){function e(t){this._trie=e._create(t)}return e.prototype.getIndex=function(){return this._trie},e.prototype.setIndex=function(e){this._trie=e},e.prototype.addWord=function(t){return t.toLowerCase().split("").reduce(function(t,n,r,o){return e._append(t,n,r,o)},this._trie),this},e.prototype.removeWord=function(t){var r=e._checkPrefix(this._trie,t),o=r.prefixFound,i=r.prefixNode;return o&&delete i[n],this},e.prototype.getWords=function(){return e._recursePrefix(this._trie,"")},e.prototype.getPrefix=function(t){if(t=t.toLowerCase(),!this._isPrefix(t))return[];var n=e._checkPrefix(this._trie,t).prefixNode;return e._recursePrefix(n,t)},e.prototype._isPrefix=function(t){return e._checkPrefix(this._trie,t).prefixFound},e._append=function(e,t,r,o){return e[t]=e[t]||{},e=e[t],r===o.length-1&&(e[n]=1),e},e._checkPrefix=function(e,t){return{prefixFound:t.toLowerCase().split("").every(function(t,n){return!!e[t]&&(e=e[t])}),prefixNode:e}},e._create=function(t){return(t||[]).reduce(function(t,n){return n.toLowerCase().split("").reduce(e._append,t),t},{})},e._recursePrefix=function(t,r,o){void 0===o&&(o=[]);var i=r;for(var a in t)a===n&&(o.push(i),i=""),e._recursePrefix(t[a],r+a,o);return o.sort()},e}();t.Trie=r},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(105),i=n(0),a=n(104),s=n(103),u=n(102),l=n(101),c=function(){function e(e,t){if(this._tableNames=[],this._nsql=e,this._mode=t.persistent?"PERM":t.mode||"TEMP",this._id=t.id,this._size=t.size||5,this.adapters=[],this.models={},this.tableInfo={},this._trieIndexes={},this._tableNames=[],this._doCache=t.cache||!0,this._cache={},this._cacheKeys={},this.adapters[0]={adapter:null,waitForWrites:!0},"string"==typeof this._mode)switch("PERM"===this._mode&&(this._mode=this._detectStorageMethod()||this._mode),this._mode){case"IDB":this.adapters[0].adapter=new s._IndexedDBStore(!1);break;case"IDB_WW":this.adapters[0].adapter=new s._IndexedDBStore(!0);break;case"WSQL":this.adapters[0].adapter=new u._WebSQLStore(this._size);break;case"LS":this.adapters[0].adapter=new a._SyncStore(!0);break;case"LVL":this.adapters[0].adapter=new l._LevelStore(t.dbPath,t.writeCache,t.readCache);break;case"TEMP":this.adapters[0].adapter=new a._SyncStore(!1)}else this.adapters[0].adapter=this._mode}return e.prototype.init=function(e,t){var n=this;this._id||(this._id=i.hash(JSON.stringify(e)).toString()),this.models=this._createSecondaryIndexTables(e),this._tableNames=Object.keys(this.models),this.adapters.forEach(function(e){e.adapter.setID(n._id)}),this._tableNames.forEach(function(t){n._newTable(t,e[t])}),this._relFromTable={},this._relToTable={},this._relationColumns={},this._columnsAreTables={},this._tableNames.forEach(function(e){n.tableInfo[e]._viewTables=Object.keys(n.tableInfo).reduce(function(t,r){return r===e?t:(-1!==Object.keys(n.tableInfo[r]._views).indexOf(e)&&t.push({table:r,column:n.tableInfo[r]._views[e].pkColumn}),t)},[]);var t=n.models[e].length;n._relFromTable[e]={},n._relationColumns[e]=[],n._relToTable[e]=[],n._columnsAreTables[e]={};for(var r=function(){var r=n.models[e][t];if(-1!==n._tableNames.indexOf(r.type.replace("[]",""))){var o="";n._columnsAreTables[e][r.key]={_toTable:r.type.replace("[]",""),_thisType:-1===r.type.indexOf("[]")?"single":"array"},r.props&&(r.props.forEach(function(e){-1!==e.indexOf("ref=>")&&(o=e.replace("ref=>","")),0===e.indexOf("orm(")&&(o=e.replace(/orm\((.*)\)/gim,"$1"))}),o&&(n._hasORM=!0,n._relationColumns[e].push(r.key),n._relFromTable[e][r.key]={_toTable:r.type.replace("[]",""),_toColumn:o.replace("[]",""),_toType:-1===o.indexOf("[]")?"single":"array",_thisType:-1===r.type.indexOf("[]")?"single":"array"}))}};t--;)r()}),Object.keys(this._relFromTable).forEach(function(e){Object.keys(n._relFromTable[e]).forEach(function(t){var r=n._relFromTable[e][t];n._relToTable[r._toTable].push({_thisColumn:r._toColumn,_thisType:r._toType,_fromTable:e,_fromColumn:t,_fromType:r._thisType})})}),i.fastALL(this.adapters,function(e,t,r){e.adapter.connect(function(){e.adapter.setNSQL&&e.adapter.setNSQL(n._nsql),r()})}).then(function(){i.fastALL(Object.keys(n._trieIndexes),function(e,t,r){var o=n._trieIndexes[e];Object.keys(o).length?i.fastALL(Object.keys(o),function(t,r,o){var i="_"+e+"_idx_"+t;n.adapters[0].adapter.getIndex(i,!1,function(r){r.forEach(function(r){n._trieIndexes[e][t].addWord(String(r))}),o()})}).then(r):r()}).then(function(){t(n.models)})})},e.prototype._invalidateCache=function(e,t){var n=this;this._doCache&&Object.keys(this._cacheKeys[e]).forEach(function(r){for(var o=t.length,i=!0;o--&&i;)n._cacheKeys[e][r][t[o]]&&(delete n._cache[e][r],delete n._cacheKeys[e][r],i=!1)})},e.prototype.rebuildIndexes=function(e,t){var n=this,r=(new Date).getTime();i.fastALL(Object.keys(this.tableInfo),function(t,r,o){if("_ALL_"!==e&&e!==t||0===t.indexOf("_"))o();else{var a=n.tableInfo[t]._secondaryIndexes;i.fastALL(a,function(e,r,o){var i="_"+t+"_idx_"+e;n._drop(i,o)}).then(function(){var e=n.tableInfo[t]._pk,r={};a.forEach(function(e){r[e]={}}),n._read(t,function(t,n,o){t[e]?(a.forEach(function(n){t[n]&&(r[n][t[n]]||(r[n][t[n]]=[]),r[n][t[n]].push(t[e]))}),o(!1)):o(!1)},function(){i.fastALL(a,function(e,o,a){var s="_"+t+"_idx_"+e;i.fastALL(Object.keys(r[e]),function(t,o,i){n.adapterWrite(s,t,{id:t,rows:r[e][t].sort()},i)}).then(a)}).then(function(){o()})})})}}).then(function(){t((new Date).getTime()-r)})},e.prototype._secondaryIndexKey=function(e){return i.isObject(e)||Array.isArray(e)?JSON.stringify(e).substr(0,12):"number"==typeof e?e:String(e).substr(0,32)},e.prototype._detectStorageMethod=function(){if("undefined"==typeof window)return"LVL";if(i.isSafari)return"WSQL";if(i.isMSBrowser)return"undefined"!=typeof indexedDB?"IDB":"LS";if(-1===[typeof Worker,typeof Blob,typeof indexedDB].indexOf("undefined")&&window.URL&&window.URL.createObjectURL)try{var e=new Worker(window.URL.createObjectURL(new Blob(["var t = 't';"])));e.postMessage(""),e.terminate();return indexedDB.open("1234",1),indexedDB.deleteDatabase("1234"),"IDB_WW"}catch(e){if("undefined"!=typeof indexedDB)return"IDB"}return"LS"},e.prototype._secondaryIndexRead=function(e,t,n,r){var o=this;this.adapters[0].adapter.read("_"+e+"_idx_"+t,this._secondaryIndexKey(n),function(t){void 0!==t&&null!==t?o._read(e,t.rows||[],r):r([])})},e.prototype._rangeRead=function(e,t,n,r,o){var i=[];this.adapters[0].adapter.rangeRead(e,function(e,t,n){i.push(e),n()},function(){o(i)},t,n,r)},e.prototype._read=function(e,t,n){var r=this;if(Array.isArray(t)){var o=this.adapters[0].adapter.batchRead;o?o.apply(this.adapters[0].adapter,[e,t,n]):i.fastALL(t,function(t,n,o){r.adapters[0].adapter.read(e,t,o)}).then(function(e){n(e.filter(function(e){return e}))})}else{var a=[];"function"!=typeof t||this.adapters[0].adapter.rangeRead(e,function(e,n,r){t(e,n,function(t){t&&a.push(e),r()})},function(){n(a)})}},e.prototype._trieRead=function(e,t,n,r){var o=this,a=this._trieIndexes[e][t].getPrefix(n);i.fastALL(a,function(n,r,i){o._secondaryIndexRead(e,t,n,i)}).then(function(e){r([].concat.apply([],e))})},e.prototype._clearSecondaryIndexes=function(e,t,n,r,o){var a=this;i.fastALL(this.tableInfo[e]._secondaryIndexes.filter(function(e){return-1===r.indexOf(e)}),function(r,o,s){var u=a._secondaryIndexKey(n[r]),l="_"+e+"_idx_"+r;a.adapters[0].adapter.read(l,u,function(e){if(e){var n=e.rows.indexOf(t);if(-1!==n){var r=e?Object.isFrozen(e)?i._assign(e):e:{id:null,rows:[]};r.rows.splice(n,1),r.rows.sort(),r.rows=i.removeDuplicates(r.rows),a.adapterWrite(l,r.id,r,s)}else s()}else s()})}).then(o)},e.prototype._setSecondaryIndexes=function(e,t,n,r,o){var a=this;i.fastALL(this.tableInfo[e]._secondaryIndexes.filter(function(e){return-1===r.indexOf(e)}),function(r,o,s){var u=a._secondaryIndexKey(n[r]);if(u){a._trieIndexes[e][r]&&a._trieIndexes[e][r].addWord(String(n[r]));var l="_"+e+"_idx_"+r;a.adapters[0].adapter.read(l,u,function(e){var n=e?Object.isFrozen(e)?i._assign(e):e:{id:u,rows:[]};n.rows.push(t),n.rows.sort(),n.rows=i.removeDuplicates(n.rows),a.adapterWrite(l,u,n,s)})}else s()}).then(o)},e.prototype._write=function(e,t,n,o,i){var a,s=this;if(n){var u=r({},n,o,((a={})[this.tableInfo[e]._pk]=t,a)),l=Object.keys(u).filter(function(e){return u[e]===n[e]});this.tableInfo[e]._secondaryIndexes.length?this._clearSecondaryIndexes(e,t,n,l,function(){s._setSecondaryIndexes(e,t,u,l,function(){s.adapterWrite(e,t,u,i)})}):this.adapterWrite(e,t,u,i)}else this.adapterWrite(e,t,o,function(t){s.tableInfo[e]._secondaryIndexes.length?s._setSecondaryIndexes(e,t[s.tableInfo[e]._pk],o,[],function(){i(t)}):i(t)})},e.prototype._delete=function(e,t,n){var r=this;if(!t)throw new Error("Can't delete without a primary key!");this.adapters[0].adapter.read(e,t,function(o){r._clearSecondaryIndexes(e,t,o,[],function(){r.adapterDelete(e,t,function(){n(o)})})})},e.prototype._drop=function(e,t){var n=this;i.fastALL(this.tableInfo[e]._secondaryIndexes,function(t,r,o){n.adapterDrop("_"+e+"_idx_"+t,o)}).then(function(){n._trieIndexes[e]={},n.tableInfo[e]._trieColumns.forEach(function(t){n._trieIndexes[e][t]=new o.Trie([])}),n.adapterDrop(e,t)})},e.prototype._createSecondaryIndexTables=function(e){return Object.keys(e).forEach(function(t){var n=!1,r=!1;if(e[t].forEach(function(o){o.props&&i.intersect(["pk","pk()"],o.props)&&(n=!0),o.props&&i.intersect(["trie","idx","idx()","trie()"],o.props)&&(r=!0,e["_"+t+"_idx_"+o.key]=[{key:"id",type:-1!==["number","float","int"].indexOf(o.type)?o.type:"string",props:["pk"]},{key:"rows",type:"any[]"}])}),r&&!n)throw new Error("Tables with secondary indexes must have a primary key!")}),e},e.prototype._newTable=function(e,t){var n=this;this.tableInfo[e]={_pk:"",_pkType:"",_keys:[],_defaults:[],_secondaryIndexes:[],_trieColumns:[],_name:e,_views:{},_viewTables:[]},this._cache[e]={},this._cacheKeys[e]={},this._trieIndexes[e]={},this.adapters.forEach(function(n){n.adapter.makeTable(e,t)});for(var r=this.models[e].length,a=function(){var t=s.models[e][r];if(s.tableInfo[e]._keys.unshift(t.key),s.tableInfo[e]._defaults[r]=t.default,t.props&&t.props.length){var a=!1;t.props.forEach(function(r){if(-1!==r.indexOf("from=>")){n._hasViews=!0;var o=t.type;"from=>GHOST"!==r&&"from=>LIVE"!==r&&(o=r.replace("from=>","").split(".").shift()),n.tableInfo[e]._views[o]||(n.tableInfo[e]._views[o]={pkColumn:"",mode:"",columns:[]}),"from=>GHOST"===r||"from=>LIVE"===r?(a=!0,n.tableInfo[e]._views[o].pkColumn=t.key,n.tableInfo[e]._views[o].mode=r.replace("from=>","")):n.tableInfo[e]._views[o].columns.push({thisColumn:t.key,otherColumn:r.replace("from=>","").split(".").pop()})}}),i.intersect(["pk","pk()"],t.props)&&(s.tableInfo[e]._pk=t.key,s.tableInfo[e]._pkType=t.type),(i.intersect(["trie","idx","idx()","trie()"],t.props)||a)&&s.tableInfo[e]._secondaryIndexes.push(t.key),i.intersect(["trie","trie()"],t.props)&&(s.tableInfo[e]._trieColumns.push(t.key),s._trieIndexes[e][t.key]=new o.Trie([]))}},s=this;r--;)a();return e},e.prototype.adapterWrite=function(e,t,n,r,o){var a;i.fastALL(this.adapters,function(r,o,i){r.waitForWrites?r.adapter.write(e,t,n,function(e){a=e,i()}):(i(),r.adapter.write(e,t,n,function(e){}))}).then(function(){r(a)}).catch(function(e){o&&o(e)})},e.prototype.adapterDelete=function(e,t,n,r){i.fastALL(this.adapters,function(n,r,o){n.waitForWrites?n.adapter.delete(e,t,function(){o()}):(o(),n.adapter.delete(e,t,function(){}))}).then(function(){n()}).catch(function(e){r&&r(e)})},e.prototype.adapterDrop=function(e,t,n){i.fastALL(this.adapters,function(t,n,r){t.waitForWrites?t.adapter.drop(e,function(){r()}):(r(),t.adapter.drop(e,function(){}))}).then(function(){t()}).catch(function(e){n&&n(e)})},e}();t._NanoSQLStorage=c},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(12),i=n(0),a={select:function(e,t){e._select(t)},upsert:function(e,t){e._upsert(t)},delete:function(e,t){e._delete(t)},drop:function(e,t){e._drop(t)},"show tables":function(e,t){e._query.result=Object.keys(e._store.tableInfo),t(e._query)},describe:function(e,t){"string"==typeof e._query.table?(e._query.result=i._assign(e._store.models[e._query.table]),t(e._query)):t(e._query)}},s=function(){function e(e){this._store=e}return e.prototype.doQuery=function(e,t){this._query=e,this._isInstanceTable=Array.isArray(e.table),a[e.action](this,t)},e.prototype._getRows=function(e){this._isInstanceTable?new c(this._query).getRows(e):new l(this._query,this._store,function(t){e(t.filter(function(e){return e}))})},e.prototype._setCache=function(e){var t=this;this._store._cache[this._query.table][this._hash]=e,this._store._cacheKeys[this._query.table][this._hash]={},e.forEach(function(e){t._store._cacheKeys[t._query.table][t._hash][e[t._store.tableInfo[t._query.table]._pk]]=!0})},e.prototype._select=function(e){var t=this;this._hash=i.hash(JSON.stringify(r({},this._query,{queryID:null})));var n=!this._query.join&&!this._query.orm&&this._store._doCache&&!Array.isArray(this._query.table);this._getRows(function(r){["having","orderBy","offset","limit","actionArgs","groupBy","orm","join"].filter(function(e){return t._query[e]}).length?new u(t._query,t._store)._executeQueryArguments(r,function(o){n&&t._setCache(r),t._query.result=o,e(t._query)}):(n&&t._setCache(r),t._query.result=r,e(t._query))})},e.prototype._updateORMRows=function(e,t,n,r,o){var a=this;this._store.tableInfo[e._fromTable]._pk;this._store._read(e._fromTable,t,function(t){i.fastALL(t,function(t,o,s){var u=Object.isFrozen(t)?i._assign(t):t;if("array"===e._fromType){u[e._fromColumn]=u[e._fromColumn]||[];var l=u[e._fromColumn].indexOf(r);n?-1===l?u[e._fromColumn].push(r):s():-1!==l?u[e._fromColumn].splice(l,1):s(),u[e._fromColumn].sort()}else u[e._fromColumn]=n?r:null;a._store._nsql.query("upsert",u).comment("_orm_skip").manualExec({table:e._fromTable}).then(s)}).then(o)})},e.prototype._syncORM=function(e,t,n,r){var o=this;if(this._store._hasORM){var a=this._store._relToTable[this._query.table];if(-1===this._query.comments.indexOf("_orm_skip"))if(a&&a.length){for(var s=Math.max(t.length,n.length),u=[];s--;)u.push(" ");i.fastCHAIN(u,function(r,s,u){i.fastALL(a,function(r,a,u){var l,c;switch(e){case"del":var f=t[s][o._store.tableInfo[o._query.table]._pk],d="array"===r._thisType?t[s][r._thisColumn]||[]:[t[s][r._thisColumn]].filter(function(e){return e});o._updateORMRows(r,d,!1,f,u);break;case"add":var p=n[s][o._store.tableInfo[o._query.table]._pk];if(t[s])if(l=t[s][r._thisColumn],c=n[s][r._thisColumn],Array.isArray(l)&&Array.isArray(c)?l.length===c.length&&l.filter(function(e,t){return e!==c[t]}).length>0:l===c)u();else if("array"===r._thisType){var h=(n[s][r._thisColumn]||[]).filter(function(e){return-1===(t[s][r._thisColumn]||[]).indexOf(e)}),y=(t[s][r._thisColumn]||[]).filter(function(e){return-1===(n[s][r._thisColumn]||[]).indexOf(e)});i.fastALL([h,y],function(e,t,n){o._updateORMRows(r,e,0===t,p,n)}).then(u)}else{var m=function(){null!==n[s][r._thisColumn]&&void 0!==n[s][r._thisColumn]?o._updateORMRows(r,[n[s][r._thisColumn]],!0,p,u):u()};null!==t[s][r._thisColumn]&&void 0!==t[s][r._thisColumn]?o._updateORMRows(r,[t[s][r._thisColumn]],!1,p,m):m()}else{var v="array"===r._thisType?n[s][r._thisColumn]||[]:[n[s][r._thisColumn]].filter(function(e){return e});v&&v.length?o._updateORMRows(r,v,!0,p,u):u()}}}).then(u)}).then(r)}else r();else r()}else r()},e.prototype._updateRowViews=function(e,t,n){var r=this;this._store._hasViews?null!==e&&void 0!==e?i.fastALL(Object.keys(this._store.tableInfo[this._query.table]._views),function(n,o,i){var a=r._store.tableInfo[r._query.table]._views[n].pkColumn;if(void 0!==e[a]){if(e[a]!==t[a])return null===e[a]?(r._store.tableInfo[r._query.table]._views[n].columns.forEach(function(t){e[t.thisColumn]=null}),void i()):void r._store._read(n,[e[a]],function(t){if(!t.length&&"LIVE"===r._store.tableInfo[r._query.table]._views[n].mode)return r._store.tableInfo[r._query.table]._views[n].columns.forEach(function(t){e[t.thisColumn]=null}),void i();r._store.tableInfo[r._query.table]._views[n].columns.forEach(function(n){e[n.thisColumn]=t[0][n.otherColumn]}),i()});i()}else i()}).then(function(){n(e)}):n(e||{}):n(e)},e.prototype._updateRemoteViews=function(e,t,n){var r=this,o=this._store.tableInfo[this._query.table]._pk;i.fastALL(e,function(e,n,a){i.fastALL(r._store.tableInfo[r._query.table]._viewTables,function(n,a,s){t&&"GHOST"===r._store.tableInfo[n.table]._views[r._query.table].mode?s():r._store._secondaryIndexRead(n.table,n.column,e[o],function(o){if(o.length){var a=r._store.tableInfo[n.table]._views[r._query.table].columns,u=r._store.tableInfo[n.table]._views[r._query.table].pkColumn;i.fastALL(o,function(o,i,s){var l=a.length,c=!1;if(t){if("LIVE"===r._store.tableInfo[n.table]._views[r._query.table].mode)for(c=!0,o[u]=null;l--;)o[a[l].otherColumn]=null}else for(;l--;)o[a[l].otherColumn]!==e[a[l].thisColumn]&&(o[a[l].otherColumn]=e[a[l].thisColumn],c=!0);if(c){var f=r._store.tableInfo[n.table]._pk;r._store.adapterWrite(n.table,o[f],o,s)}else s()}).then(s)}else s()})}).then(a)}).then(n)},e.prototype._doAfterQuery=function(e,t,n){var r=this;this._store._hasViews&&this._store.tableInfo[this._query.table]._viewTables.length?this._updateRemoteViews(e,t,function(){n(r._query)}):n(this._query)},e.prototype._upsert=function(e){var t=this,n=this._store.tableInfo[this._query.table]._pk;if(this._isInstanceTable)this._getRows(function(n){t._query.result=t._query.table.map(function(e){return-1===n.indexOf(e)?e:r({},t._query.actionArgs,e)}),e(t._query)});else if(this._query.where)this._getRows(function(r){r.length?i.fastCHAIN(r,function(e,r,o){t._updateRowViews(t._query.actionArgs||{},e,function(r){t._store._write(t._query.table,e[n],e,r,o)})}).then(function(o){var i=o.map(function(e){return e[n]});t._store._invalidateCache(t._query.table,i),t._query.result=[{msg:o.length+" row(s) modfied.",affectedRowPKS:i,affectedRows:o}],t._syncORM("add",r,o,function(){t._doAfterQuery(o,!1,e)})}):(t._query.result=[{msg:"0 row(s) modfied.",affectedRowPKS:[],affectedRows:[]}],e(t._query))});else{var o=this._query.actionArgs||{};this._store._cache[this._query.table]={};var a=function(r){t._updateRowViews(o,r,function(i){t._store._write(t._query.table,o[n],r,i,function(o){t._query.result=[{msg:"1 row inserted.",affectedRowPKS:[o[n]],affectedRows:[o]}],t._store._hasORM?t._syncORM("add",[r].filter(function(e){return e}),[o],function(){t._doAfterQuery([o],!1,e)}):t._doAfterQuery([o],!1,e)})})};void 0!==o[n]?this._store._read(this._query.table,[o[n]],function(e){e.length?a(e[0]):a(null)}):a(null)}},e.prototype._delete=function(e){var t=this;this._isInstanceTable?this._query.where?this._getRows(function(n){t._query.result=t._query.table.filter(function(e){return-1===n.indexOf(e)}),e(t._query)}):(this._query.result=[],e(this._query)):this._query.where?this._getRows(function(n){(n=n.filter(function(e){return e})).length?i.fastALL(n,function(e,n,r){t._store._delete(t._query.table,e[t._store.tableInfo[t._query.table]._pk],r)}).then(function(r){t._store._cache[t._query.table]={};var o=n.map(function(e){return e[t._store.tableInfo[t._query.table]._pk]});t._store._invalidateCache(t._query.table,o),t._query.result=[{msg:n.length+" row(s) deleted.",affectedRowPKS:o,affectedRows:n}],t._syncORM("del",n,[],function(){t._doAfterQuery(n,!0,e)})}):(t._query.result=[{msg:"0 row(s) deleted.",affectedRowPKS:[],affectedRows:[]}],e(t._query))}):this._drop(e)},e.prototype._drop=function(e){var t=this;if(this._isInstanceTable)return this._query.result=[],void e(this._query);this._store._rangeRead(this._query.table,void 0,void 0,!1,function(n){t._store._cache[t._query.table]={},t._store._cacheKeys[t._query.table]={},t._store._drop(t._query.table,function(){t._query.result=[{msg:"'"+t._query.table+"' table dropped.",affectedRowPKS:n.map(function(e){return e[t._store.tableInfo[t._query.table]._pk]}),affectedRows:n}],t._syncORM("del",n,[],function(){t._doAfterQuery(n,!0,e)})})})},e}();t._NanoSQLStorageQuery=s;var u=function(){function e(e,t){this.q=e,this.s=t,this._groupByColumns=[]}return e.prototype._join=function(e,t){var n=this;if(this.q.join){var r={};"cross"!==this.q.join.type&&this.q.join.where&&(r={_left:this.q.join.where[0],_check:this.q.join.where[1],_right:this.q.join.where[2]});var o=this.q.table,i=this.q.join.table;this._doJoin(this.q.join.type,o,i,r,function(e){n.q.where?t(e.filter(function(e,t){return Array.isArray(n.q.where)?f(e,n.q.where||[],t,!0):n.q.where(e,t)})):n.q.range?t(e.filter(function(e,t){return n.q.range&&n.q.range[0]>=t&&n.q.range[1]<=t})):t(e)})}else t(e)},e.prototype._groupByKey=function(e,t){return e.reduce(function(e,n){return-1!==n.indexOf(".length")?e+"."+String((t[n.replace(".length","")]||[]).length):e+"."+String(t[n])},"").slice(1)},e.prototype._groupBy=function(e){var t=this,n=this.q.groupBy||{},r=e.sort(function(e,r){return t._sortObj(e,r,n,!0)});return r.forEach(function(e,r){var o=Object.keys(n).map(function(t){return String(e[t])||""}).join(".");t._sortGroups||(t._sortGroups={}),t._sortGroups[o]||(t._sortGroups[o]=[]),t._sortGroups[o].push(r)}),r},e.prototype._having=function(e){var t=this;return e.filter(function(e,n){return Array.isArray(t.q.having)?f(e,t.q.having||[],n,!0):t.q.having(e,n)})},e.prototype._orderBy=function(e){var t=this;return e.sort(function(e,n){return t._sortObj(e,n,t.q.orderBy||{},!1)})},e.prototype._offset=function(e){var t=this;return e.filter(function(e,n){return!t.q.offset||n>=t.q.offset})},e.prototype._limit=function(e){var t=this;return e.filter(function(e,n){return!t.q.limit||n<t.q.limit})},e.prototype._orm=function(e,t){var n=this,r=this.q.orm?this.q.orm.map(function(e){return"string"==typeof e?{key:e,limit:5}:e}):[];i.fastALL(e,function(e,t,a){e=Object.isFrozen(e)?i._assign(e):e,i.fastALL(r,function(t,r,i){if(e[t.key]&&e[t.key].length){var a=n.s._columnsAreTables[n.q.table][t.key];a?n.s._nsql.query("select").where([n.s.tableInfo[a._toTable]._pk,"array"===a._thisType?"IN":"=",e[t.key]]).manualExec({table:a._toTable}).then(function(n){var r=o.nSQL().query("select",t.select);t.where&&r.where(t.where),void 0!==t.limit&&r.limit(t.limit),void 0!==t.offset&&r.offset(t.offset),t.orderBy&&r.orderBy(t.orderBy),t.groupBy&&r.groupBy(t.groupBy),r.manualExec({table:n}).then(function(r){n.filter(function(e){return e}).length?e[t.key]="array"===a._thisType?r:r[0]:e[t.key]="array"===a._thisType?[]:void 0,i()})}):i()}else i()}).then(function(){a(e)})}).then(t)},e.prototype._doJoin=function(e,t,n,r,o){var i="left",a="right",s="outer",u=this,l=u.s.tableInfo[e===a?n:t],c=u.s.tableInfo[e===a?t:n],d=function(e,t){return[l,c].reduce(function(n,r,o){return r._keys.forEach(function(i){n[r._name+"."+i]=((0===o?e:t)||{})[i]}),n},{})},p=[],h=r&&r._right&&r._right.split(".").pop()||"",y={},m=[];u.s._read(l._name,function(t,n,o){var v=!1;u.s._read(c._name,function(n,o,i){var u;r&&"cross"!==e?f(((u={})[l._name]=t,u[c._name]=n,u),[r._left,r._check,e===a?t[h]:n[h]],0)?(e===s&&(y[o]=!0),p.push(d(t,n)),v=!0):e===s&&(m[o]=n):(p.push(d(t,n)),v=!0);i(!1)},function(){!v&&[i,a,s].indexOf(e)>-1&&p.push(d(t,null)),o(!1)})},function(){if(e===s){for(var t=m.filter(function(e,t){return!y[t]}),n=0;n<t.length;)p.push(d(null,t[n])),n++;o(p)}else o(p)})},e.prototype._sortObj=function(e,t,n,r){return Object.keys(n).reduce(function(o,a){var s=r?i.objQuery(a,e):e[a],u=r?i.objQuery(a,t):t[a];return o||(s===u?0:(s>u?1:-1)*("desc"===n[a]?-1:1))},0)},e.prototype._mutateRows=function(e,t){var n=this,r=this.q.actionArgs,a={},s={};if(r&&r.length){var u=!1,l={};r.forEach(function(e){if(-1!==e.indexOf("(")){var t=(e.match(/^.*\(/g)||[""])[0].replace(/\(|\)/g,"").toUpperCase(),n=o.NanoSQLInstance.functions[t],r=1===e.split(" AS ").length?t:(e.split(" AS ").pop()||"").trim();if(!n)throw new Error("'"+t+"' is not a valid function!");"A"===n.type&&(u=!0),l[e]={fn:n,key:r}}}),i.fastALL(r,function(t,r,o){if(t.indexOf("(")>-1){var c=(t.match(/\(.*\)/g)||[""])[0].replace(/\(|\)/g,"").split(",").map(function(e){return e.trim()});n._sortGroups&&u?i.fastALL(Object.keys(n._sortGroups),function(r,o,i){var a;s[r]||(s[r]={}),(a=l[t].fn).call.apply(a,[e.filter(function(e,t){return n._sortGroups[r].indexOf(t)>-1}),function(e){s[r][l[t].key]=e,i()}].concat(c))}).then(o):(f=l[t].fn).call.apply(f,[e,function(e){a[l[t].key]=e,o()}].concat(c))}else o();var f}).then(function(){var o=function(e,t,o){var a={};return r.forEach(function(r){var s=r.indexOf("(")>-1,u=s?l[r].fn.type:"";if(r.indexOf(" AS ")>-1){var c=r.split(" AS "),f=s?l[r].key:c[0].trim();a[c[1]]=s?"A"===u?o[f]:o[f][t]:i.objQuery(f,e,void 0!==n.q.join)}else{f=s?l[r].key:r;a[r]=s?"A"===u?o[f]:o[f][t]:i.objQuery(f,e,void 0!==n.q.join)}}),a};if(!e.length&&u){var c=[{}];return Object.keys(l).forEach(function(e){void 0!==a[l[e].key]&&(c[0][e]=a[l[e].key])}),void t(c)}if(n._sortGroups&&u){var f=[];Object.keys(n._sortGroups).forEach(function(t){var r=e.filter(function(e,r){return n._sortGroups[t].indexOf(r)>-1}).filter(function(e,t){return t<1});r&&r.length&&f.push(o(r[0],0,s[t]))}),t(f)}else t(u?e.filter(function(e,t){return t<1}).map(function(e,t){return o(e,t,a)}):e.map(function(e,t){return o(e,t,a)}))})}else t(e)},e.prototype._executeQueryArguments=function(e,t){var n=this,r=function(){n.q.having&&(e=n._having(e)),n.q.orderBy&&(e=n._orderBy(e)),n.q.offset&&(e=n._offset(e)),n.q.limit&&(e=n._limit(e)),t(e)},o=function(){n.q.actionArgs&&n.q.actionArgs.length?n._mutateRows(e,function(t){e=t,r()}):r()},i=function(){n.q.groupBy&&(e=n._groupBy(e)),n.q.orm?n._orm(e,function(t){e=t,o()}):o()};this.q.join?this._join(e,function(t){e=t,i()}):i()},e}();t._MutateSelection=u;var l=function(){function e(e,t,n){var r=this;if(this.q=e,this.s=t,this.q.join&&this.q.orm)throw new Error("Cannot do a JOIN and ORM command at the same time!");if([this.q.where,this.q.range,this.q.trie].filter(function(e){return e}).length>1)throw new Error("Can only have ONE of Trie, Range or Where!");if(this.q.join)n([]);else if(this.q.trie&&this.q.trie.column&&this.q.trie.search)this._selectByTrie(n);else if(this.q.range&&this.q.range.length)this._selectByRange(n);else if(this.q.where&&this.q.where.length&&Array.isArray(this.q.where)){if("string"==typeof this.q.where[0]?0===this._isOptimizedWhere(this.q.where):0===(this.q.where||[]).reduce(function(e,t,n){return n%2==1?e:e+r._isOptimizedWhere(t)},0))this._selectByKeys(this.q.where,n);else{var o=this._isSubOptimizedWhere(this.q.where);if(o>0){var i=this.q.where.slice(0,o),a=this.q.where.slice(o+1);this._selectByKeys(i,function(e){n(e.filter(function(e,t){return f(e,a,t)}))})}else this._fullTableScan(n)}}else this._fullTableScan(n)}return e.prototype._selectByKeys=function(e,t){var n=this;if(e&&"string"==typeof e[0])this._selectRowsByIndex(e,t);else if(e){var r=[],o="";i.fastCHAIN(e,function(e,t,i){if("string"==typeof e)return o=e,void i();n._selectRowsByIndex(e,function(e){if("AND"===o){for(var t={},a=e.length;a--;)t[e[a][n.s.tableInfo[n.q.table]._pk]]=!0;r=r.filter(function(e){return t[e[n.s.tableInfo[n.q.table]._pk]]})}else r=r.concat(e);i()})}).then(function(){t(r)})}},e.prototype._selectRowsByIndex=function(e,t){var n=this;if("BETWEEN"!==e[1]){var r=[];switch(e[1]){case"IN":r=e[2];break;case"=":r=[e[2]]}e[0]===this.s.tableInfo[this.q.table]._pk?this.s._read(this.q.table,r,t):i.fastALL(r,function(t,r,o){n.s._secondaryIndexRead(n.q.table,e[0],t,o)}).then(function(e){t([].concat.apply([],e))})}else{var o=e[0]===this.s.tableInfo[this.q.table]._pk?"":e[0];if(o){var a="_"+this.q.table+"_idx_"+o;this.s._rangeRead(a,e[2][0],e[2][1],!0,function(e){for(var r=[],o=e.length;o--;)r=r.concat(e[o].rows);n.s._read(n.q.table,r,t)})}else this.s._rangeRead(this.q.table,e[2][0],e[2][1],!0,function(e){t(e)})}},e.prototype._selectByRange=function(e){var t=this;if(this.q.range){var n=this.q.range;n[0]>0?this.s._rangeRead(this.q.table,n[1],n[1]+n[0],!1,e):this.s.adapters[0].adapter.getIndex(this.q.table,!0,function(r){for(var o=n[0]>0?n[1]:r+n[0]-n[1],i=o,a=Math.abs(n[0])-1;a--;)i++;t.s._rangeRead(t.q.table,o,i,!1,e)})}else e([])},e.prototype._selectByTrie=function(e){this.q.trie?this.s._trieRead(this.q.table,this.q.trie.column,this.q.trie.search,e):e([])},e.prototype._fullTableScan=function(e){var t=this,n=void 0!==this.q.where,r=n&&Array.isArray(this.q.where);this.s._read(this.q.table,function(e,o,i){i(!n||(r?f(e,t.q.where,o):t.q.where(e,o)))},e)},e.prototype._isSubOptimizedWhere=function(e){var t=this;if("string"==typeof e[0])return 0;if(0===this._isOptimizedWhere(e[0])){var n=0;return e.forEach(function(r,o){o%2==0&&0===t._isOptimizedWhere(r)&&e[o+1]&&(n=o+1)}),"AND"!==e[n]?0:n}return 0},e.prototype._isOptimizedWhere=function(e){var t=this.s.tableInfo[this.q.table];return["=","IN","BETWEEN"].indexOf(e[1])>-1&&(e[0]===t._pk||t._secondaryIndexes.indexOf(e[0])>-1)?0:1},e}();t._RowSelection=l;var c=function(){function e(e){this.q=e}return e.prototype.getRows=function(e){var t=this;if(this.q.join||this.q.orm||this.q.trie)throw new Error("Cannot do a JOIN, ORM or TRIE command with instance table!");if(this.q.range&&this.q.range.length){var n,r,o=this.q.range;n=o[0]<0?this.q.table.length+o[0]-o[1]:o[1];var i=Math.abs(o[0])-1;for(r=n;i--;)r++;e(this.q.table.filter(function(e,t){return t>=n&&t<=r}))}else e(this.q.table.filter(function(e,n){return!t.q.where||(Array.isArray(t.q.where)?f(e,t.q.where||[],n):t.q.where(e,n))}))},e}();t.InstanceSelection=c;var f=function(e,t,n,r){var o=["AND","OR"];if("string"!=typeof t[0]){var a=t.map(function(t,n){return-1!==o.indexOf(t)?("AND"===t&&!0,t):0===d(t[2],t[1],i.objQuery(t[0],e,r))});return a.forEach(function(e,t){"OR"===e&&(a[t]=a[t-1]||a[t+1],a[t-1]=void 0,a[t+1]=void 0)}),-1===a.indexOf(!1)}return 0===d(t[2],t[1],i.objQuery(t[0],e,r))},d=function(e,t,n){var r=function(e){return["LIKE","NOT LIKE"].indexOf(t)>-1?String(e||"").toLowerCase():e},o=r(n),i=r(e);if("NULL"===e||"NOT NULL"===e){var a="="===t||"LIKE"===t;return("NULL"===e?null===n||void 0===n:null!==n&&void 0!==n)?a?0:1:a?1:0}switch(t){case"=":return o===i?0:1;case"!=":return o!==i?0:1;case">":return o>i?0:1;case"<":return o<i?0:1;case"<=":return o<=i?0:1;case">=":return o>=i?0:1;case"IN":return(i||[]).indexOf(o)<0?1:0;case"NOT IN":return(i||[]).indexOf(o)<0?0:1;case"REGEX":return o.match(i).length?0:1;case"LIKE":return o.indexOf(i)<0?1:0;case"NOT LIKE":return o.indexOf(i)>=0?1:0;case"BETWEEN":return i[0]<=o&&i[1]>=o?0:1;case"HAVE":return(o||[]).indexOf(i)<0?1:0;case"NOT HAVE":return(o||[]).indexOf(i)<0?0:1;case"INTERSECT":return(o||[]).filter(function(e){return(i||[]).indexOf(e)>-1}).length>0?0:1;case"NOT INTERSECT":return 0===(o||[]).filter(function(e){return(i||[]).indexOf(e)>-1}).length?0:1;default:return 1}}},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(12),i=n(107),a=n(0),s=n(106),u=function(){function e(){this._queryPool=[],this._queryPtr=0}return e.prototype.willConnect=function(e,t){this.parent=e.parent,this._store=new s._NanoSQLStorage(e.parent,r({},e.config)),this._store.init(e.models,function(n){e.models=r({},e.models,n),t(e)})},e.prototype.doExec=function(e,t){e.state="complete",new i._NanoSQLStorageQuery(this._store).doQuery(e,t)},e.prototype.dumpTables=function(e){var t=this;return new a.Promise(function(n,r){var o={},i=e&&e.length?e:Object.keys(t._store.tableInfo);a.fastALL(i,function(e,n,r){o[e]=[],t._store.adapters[0].adapter.rangeRead(e,function(t,n,r){o[e].push(t),r()},r)}).then(function(){n(o)})})},e.prototype.importTables=function(e){var t=this;return new a.Promise(function(n,r){a.fastALL(Object.keys(e),function(n,r,o){var i=t._store.tableInfo[n]._pk;a.fastALL(e[n],function(e,r,o){e[i]?t._store.adapters[0].adapter.write(n,e[i],e,o):o()}).then(o)}).then(function(){n()})})},e.prototype.willDisconnect=function(e){a.fastALL(this._store.adapters||[],function(e,t,n){e.disconnect?e.disconnect(n):n()}).then(e)},e.prototype.extend=function(e,t,n){var r=this;switch(t[0]){case"clone":var i=new o.NanoSQLInstance;Object.keys(this.parent.dataModels).forEach(function(e){i.table(e).model(r.parent.dataModels[e],[],!0)}),i.config({id:this._store._id,mode:t[1]}).connect().then(function(){a.fastCHAIN(Object.keys(r.parent.dataModels),function(e,t,n){console.log("Importing "+e+"..."),r.parent.rawDump([e]).then(function(e){return i.rawImport(e)}).then(n)}).then(function(){e(t,[])})});break;case"flush":var s=[];s=t[1]?[t[1]]:this.parent.tableNames,a.fastCHAIN(s,function(e,t,n){r._store._drop(e,n)}).then(function(){e(t,s)});break;case"get_adapter":t[1]?e(t,[this._store.adapters[t[1]].adapter]):e(t,[this._store.adapters[0].adapter]);break;case"idx.length":case"idx":var u=t[1];Object.keys(this._store.tableInfo).indexOf(u)>-1?this._store.adapters[0].adapter.getIndex(u,"idx"!==t[0],function(n){e(t,n)}):e(t,[]);break;case"rebuild_idx":t[1]?this._store.rebuildIndexes(t[1],function(n){e(t,[n])}):a.fastALL(Object.keys(this._store.tableInfo),function(e,t,n){r._store.rebuildIndexes(e,n)}).then(function(n){e(t,n)});break;case"clear_cache":t[1]&&t[2]?this._store._invalidateCache(t[1],t[2]):t[1]?(this._store._cache[t[1]]={},this._store._cacheKeys[t[1]]={}):Object.keys(this._store.tableInfo).forEach(function(e){r._store._cache[e]={},r._store._cacheKeys[e]={}}),e(t,t[1]||Object.keys(this._store.tableInfo));break;default:e(t,n)}},e}();t.NanoSQLDefaultBackend=u},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.eventListeners={}}return e.prototype.on=function(e,t){this.eventListeners[e]||(this.eventListeners[e]=[]),this.eventListeners[e].push(t)},e.prototype.off=function(e,t){var n=this;this.eventListeners[e]&&this.eventListeners[e].length&&this.eventListeners[e].forEach(function(r,o){r===t&&n.eventListeners[e].splice(o,1)})},e.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.eventListeners[e]&&this.eventListeners[e].forEach(function(e){return e.apply(void 0,t)})},e}();t.ReallySmallEvents=n,t.RSE=new n},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,n,r,o){this.thisQ={state:"pending",table:n,action:e,actionArgs:t,queryID:o,transaction:!0,result:[],comments:[]},this._queries=r}return e.prototype.where=function(e){return this.thisQ.where=e,this},e.prototype.exec=function(){this._queries.push(this.thisQ)},e}();t._NanoSQLTransactionQuery=n},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i={affectedRowPKS:[],affectedRows:[]},a=function(e,t){1!==e._db.plugins.length||e._db.hasAnyEvents?o.fastCHAIN(e._db.plugins,function(t,n,r){t.doExec?t.doExec(e._query,function(t){e._query=t||e._query,r()}):r()}).then(function(){if(e._db.hasPK[e._query.table]?t(e._query.result):t(e._query.result.map(function(e){return r({},e,{_id_:void 0})})),e._db.hasAnyEvents||e._db.pluginHasDidExec){var n=function(){switch(e._query.action){case"select":return[e._query.action];case"delete":case"upsert":case"drop":return[e._query.action,"change"];default:return[]}}(),a=e._query.result&&e._query.result.length,s={table:e._query.table,query:e._query,time:Date.now(),result:e._query.result,notes:[],types:n,actionOrView:e._AV,transactionID:e._query.transaction?e._query.queryID:void 0,affectedRowPKS:a?(e._query.result[0]||i).affectedRowPKS:[],affectedRows:a?(e._query.result[0]||i).affectedRows:[]};o.fastCHAIN(e._db.plugins,function(e,t,n){e.didExec?e.didExec(s,function(e){s=e,n()}):n()}).then(function(){e._db.triggerEvent(s)})}}):e._db.plugins[0].doExec(e._query,function(n){e._query=n,e._db.hasPK[e._query.table]?t(e._query.result):t(e._query.result.map(function(e){return r({},e,{_id_:void 0})}))})},s={},u=function(){function e(e,t,n,r,o){this._db=e,this._AV=o||"",this._query={table:t,comments:[],state:"pending",queryID:Date.now()+"."+this._db.fastRand(),action:n,actionArgs:r,result:[]}}return e.prototype.where=function(e){return this._query.where=e,this},e.prototype.range=function(e,t){return this._query.range=[e,t],this},e.prototype.on=function(e){return this._query.on=e,this},e.prototype.debounce=function(e){return this._query.debounce=e||250,this},e.prototype.orm=function(e){return this._query.orm=e,this},e.prototype.orderBy=function(e){return this._query.orderBy=e,this},e.prototype.groupBy=function(e){return this._query.groupBy=e,this},e.prototype.having=function(e){return e.length&&Array.isArray(e)||(this._error="Having condition requires an array!"),this._query.having=e,this},e.prototype.join=function(e){if(Array.isArray(this._query.table))throw Error("Can't JOIN with instance table!");return e.table&&e.type||(this._error="Join command requires table and type arguments!"),this._query.join=e,this},e.prototype.limit=function(e){return this._query.limit=e,this},e.prototype.trieSearch=function(e,t){return this._query.trie={column:e,search:t},this},e.prototype.comment=function(e){return this._query.comments.push(e),this},e.prototype.extend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this._query.extend=e,this},e.prototype.offset=function(e){return this._query.offset=e,this},e.prototype.toCSV=function(e){var t=this;return new o.Promise(function(n,r){t.exec().then(function(r){var o=[];r.length||n("",t),e&&o.push(Object.keys(r[0]).join(",")),r.forEach(function(e){o.push(Object.keys(e).map(function(t){return null===e[t]||void 0===e[t]?"":"object"==typeof e[t]?'"'+JSON.stringify(e[t]).replace(/\"/g,"'")+'"':e[t]}).join(","))}),n(o.join("\n"),t)})})},e.prototype.manualExec=function(e){return this._query=r({},this._query,e),this.exec()},e.prototype.denormalizationQuery=function(e){var t=this;return new o.Promise(function(n,r){switch(e){case"tocolumn":var i={};t._query.actionArgs&&t._query.actionArgs.length?Object.keys(t._db.toColRules[t._query.table]).filter(function(e){return-1!==t._query.actionArgs.indexOf(e)}).forEach(function(e){i[e]=t._db.toColRules[t._query.table][e]}):i=t._db.toColRules[t._query.table],t._query.action="select",t._query.actionArgs=void 0;var s=Object.keys(i);a(t,function(e){o.fastCHAIN(e,function(e,n,r){Object.isFrozen(e)&&(e=o._assign(e)),o.fastALL(s,function(n,r,o){var a=t._db.toColFns[t._query.table][i[n][0]];a?a.apply(null,[e[n],function(t){e[n]=t,o()}].concat(i[n].filter(function(e,t){return t>0}).map(function(t){return e[t]}))):o()}).then(function(){t._db.query("upsert",e).manualExec({table:t._query.table}).then(r).catch(r)})}).then(function(){n({msg:e.length+" rows modified"})})});break;case"torow":var u=(t._query.actionArgs||"").replace("()","");if(!t._db.toRowFns[t._query.table]||!t._db.toRowFns[t._query.table][u])return void r("No function "+t._query.actionArgs+" found to perform updates!");var l=t._db.toRowFns[t._query.table][u],c=t._db.tablePKs[t._query.table];if(t._query.on&&t._query.on.length)return void o.fastALL(t._query.on,function(e,n,r){l(e,{},function(n){n[c]=e,t._db.query("upsert",n).manualExec({table:t._query.table}).then(r).catch(r)})}).then(function(){n([{msg:(t._query.on||[]).length+" rows modified or added."}])});t._query.action="select",t._query.actionArgs=void 0,a(t,function(e){o.fastALL(e,function(e,n,r){Object.isFrozen(e)&&(e=o._assign(e)),l(e[c],e,function(n){n[c]=e[c],t._db.query("upsert",n).manualExec({table:t._query.table}).then(r).catch(r)})}).then(function(){n({msg:e.length+" rows modified"})})})}})},e.prototype.exec=function(){var e=this;if("*"!==this._query.table){var t=this,n=this._query.action.toLowerCase();if(["tocolumn","torow"].indexOf(n)>-1){if(this._query.debounce){var r=o.hash(JSON.stringify([this._query.table,n,this._query.actionArgs,this._query.on,this._query.where].filter(function(e){return e})));return new o.Promise(function(t,o){s[r]&&clearTimeout(s[r]),s[r]=setTimeout(function(){e.denormalizationQuery(n).then(t)},e._query.debounce)})}return this.denormalizationQuery(n)}if(!(["select","upsert","delete","drop","show tables","describe"].indexOf(n)>-1))throw Error("No valid database action!");var i=this._query.actionArgs||("select"===n||"delete"===n?[]:{});if("upsert"===n){for(var u={},l=this._db.dataModels[this._query.table],c=0;c<l.length;)void 0!==i[l[c].key]&&(u[l[c].key]=o.cast(l[c].type,i[l[c].key])),c++;if(this._db.skipPurge[this._query.table]){var f=l.map(function(e){return e.key});Object.keys(i).filter(function(e){return-1===f.indexOf(e)}).forEach(function(e){u[e]=i[e]})}i=u}return this._query.action=n,this._query.actionArgs=this._query.actionArgs?i:void 0,new o.Promise(function(n,r){Array.isArray(e._query.table)?e._db.iB.doExec&&e._db.iB.doExec(e._query,function(e){n(e.result)}):(t._db.plugins.length||(t._error="No plugins, nothing to do!"),t._error?r(t._error,e._db):e._db.queryMod?e._db.queryMod(e._query,function(t){e._query=t,a(e,n)}):a(e,n))})}},e}();t._NanoSQLQuery=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AccountStatus=void 0;n(12);var r,o=n(99),i=n(98),a=(r=i)&&r.__esModule?r:{default:r};var s=(0,o.bindNSQL)(a.default);t.AccountStatus=s},function(e,t,n){"use strict";var r=/-(.)/g;e.exports=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})}},function(e,t,n){"use strict";var r=n(113),o=/^-ms-/;e.exports=function(e){return r(e.replace(o,"ms-"))}},function(e,t,n){"use strict";var r=/([A-Z])/g;e.exports=function(e){return e.replace(r,"-$1").toLowerCase()}},function(e,t,n){"use strict";var r=n(115),o=/^ms-/;e.exports=function(e){return r(e).replace(o,"-ms-")}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(117);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(118);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.1
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){var t=n(18),r=n(36),o=n(35),i=n(122),a=n(52),s=n(34),u=n(50),l=n(121),c=n(120),f=n(119),d=n(51),p=n(116),h=n(114);t||r(!1,"ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");var y=function(e,t,n,r,o,i,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this._caughtError=e,this._hasCaughtError=!0}};if("undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var m=document.createElement("react");y=function(e,t,n,o,i,a,s,u,l){"undefined"==typeof document&&r(!1,"The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");var c=document.createEvent("Event"),f=!0,d=Array.prototype.slice.call(arguments,3);var p=void 0,h=!1,y=!1;function v(e){p=e.error,h=!0,null===p&&0===e.colno&&0===e.lineno&&(y=!0)}var g="react-"+(e||"invokeguardedcallback");window.addEventListener("error",v),m.addEventListener(g,function e(){m.removeEventListener(g,e,!1),t.apply(n,d),f=!1},!1),c.initEvent(g,!1,!1),m.dispatchEvent(c),f?(h?y&&(p=new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.")):p=new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue."),this._hasCaughtError=!0,this._caughtError=p):(this._hasCaughtError=!1,this._caughtError=null),window.removeEventListener("error",v)}}var v=y,g={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){v.apply(g,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(g.invokeGuardedCallback.apply(this,arguments),g.hasCaughtError()){var l=g.clearCaughtError();g._hasRethrowError||(g._hasRethrowError=!0,g._rethrowError=l)}},rethrowCaughtError:function(){return b.apply(g,arguments)},hasCaughtError:function(){return g._hasCaughtError},clearCaughtError:function(){if(g._hasCaughtError){var e=g._caughtError;return g._caughtError=null,g._hasCaughtError=!1,e}r(!1,"clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.")}},b=function(){if(g._hasRethrowError){var e=g._rethrowError;throw g._rethrowError=null,g._hasRethrowError=!1,e}},_=null,w={};function x(){if(_)for(var e in w){var t=w[e],n=_.indexOf(e);if(n>-1||r(!1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e),!S[n]){t.extractEvents||r(!1,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e),S[n]=t;var o=t.eventTypes;for(var i in o)k(o[i],t,i)||r(!1,"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",i,e)}}}function k(e,t,n){T.hasOwnProperty(n)&&r(!1,"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",n),T[n]=e;var o=e.phasedRegistrationNames;if(o){for(var i in o){if(o.hasOwnProperty(i))C(o[i],t,n)}return!0}return!!e.registrationName&&(C(e.registrationName,t,n),!0)}function C(e,t,n){E[e]&&r(!1,"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e),E[e]=t,I[e]=t.eventTypes[n].dependencies;var o=e.toLowerCase();O[o]=e,"onDoubleClick"===e&&(O.ondblclick=e)}var S=[],T={},E={},I={},O={};function P(e){_&&r(!1,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."),_=Array.prototype.slice.call(e),x()}function R(e){var t=!1;for(var n in e)if(e.hasOwnProperty(n)){var o=e[n];w.hasOwnProperty(n)&&w[n]===o||(w[n]&&r(!1,"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",n),w[n]=o,t=!0)}t&&x()}var A=Object.freeze({plugins:S,eventNameDispatchConfigs:T,registrationNameModules:E,registrationNameDependencies:I,possibleRegistrationNames:O,injectEventPluginOrder:P,injectEventPluginsByName:R}),N=null,M=null,L=null,q=function(e){N=e.getFiberCurrentPropsFromNode,M=e.getInstanceFromNode,L=e.getNodeFromInstance,o(L&&M,"EventPluginUtils.injection.injectComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.")},j=void 0;function D(e,t,n,r){var o=e.type||"unknown-event";e.currentTarget=L(r),g.invokeGuardedCallbackAndCatchFirstError(o,n,void 0,e),e.currentTarget=null}function F(e,t){return null==t&&r(!1,"accumulateInto(...): Accumulated items must not be null or undefined."),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function U(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}j=function(e){var t=e._dispatchListeners,n=e._dispatchInstances,r=Array.isArray(t),i=r?t.length:t?1:0,a=Array.isArray(n),s=a?n.length:n?1:0;o(a===r&&s===i,"EventPluginUtils: Invalid `event`.")};var W=null,B=function(e,t){e&&(!function(e,t){var n=e._dispatchListeners,r=e._dispatchInstances;if(j(e),Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)D(e,0,n[o],r[o]);else n&&D(e,0,n,r);e._dispatchListeners=null,e._dispatchInstances=null}(e),e.isPersistent()||e.constructor.release(e))},H=function(e){return B(e)},z=function(e){return B(e)};var V={injectEventPluginOrder:P,injectEventPluginsByName:R};function K(e,t){var n,o=e.stateNode;if(!o)return null;var i=N(o);return i?(n=i[t],function(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||(r=t,"button"!==r&&"input"!==r&&"select"!==r&&"textarea"!==r));default:return!1}var r}(t,e.type,i)?null:(n&&"function"!=typeof n&&r(!1,"Expected `%s` listener to be a function, instead got a value of `%s` type.",t,typeof n),n)):null}function Q(e,t){null!==e&&(W=F(W,e));var n=W;W=null,n&&(U(n,t?H:z),W&&r(!1,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."),g.rethrowCaughtError())}function $(e,t,n,r){Q(function(e,t,n,r){for(var o=null,i=0;i<S.length;i++){var a=S[i];if(a){var s=a.extractEvents(e,t,n,r);s&&(o=F(o,s))}}return o}(e,t,n,r),!1)}var Y=Object.freeze({injection:V,getListener:K,runEventsInBatch:Q,runExtractedEventsInBatch:$}),J=0,G=1,X=2,Z=3,ee=4,te=5,ne=6,re=7,oe=8,ie=9,ae=10,se=11,ue=12,le=13,ce=14,fe=Math.random().toString(36).slice(2),de="__reactInternalInstance$"+fe,pe="__reactEventHandlers$"+fe;function he(e,t){t[de]=e}function ye(e){if(e[de])return e[de];for(;!e[de];){if(!e.parentNode)return null;e=e.parentNode}var t=e[de];return t.tag===te||t.tag===ne?t:null}function me(e){var t=e[de];return t&&(t.tag===te||t.tag===ne)?t:null}function ve(e){if(e.tag===te||e.tag===ne)return e.stateNode;r(!1,"getNodeFromInstance: Invalid argument.")}function ge(e){return e[pe]||null}function be(e,t){e[pe]=t}var _e=Object.freeze({precacheFiberNode:he,getClosestInstanceFromNode:ye,getInstanceFromNode:me,getNodeFromInstance:ve,getFiberCurrentPropsFromNode:ge,updateFiberProps:be});function we(e){do{e=e.return}while(e&&e.tag!==te);return e||null}function xe(e,t,n){for(var r=[];e;)r.push(e),e=we(e);var o=void 0;for(o=r.length;o-- >0;)t(r[o],"captured",n);for(o=0;o<r.length;o++)t(r[o],"bubbled",n)}function ke(e,t,n,r,o){for(var i=e&&t?function(e,t){for(var n=0,r=e;r;r=we(r))n++;for(var o=0,i=t;i;i=we(i))o++;for(;n-o>0;)e=we(e),n--;for(;o-n>0;)t=we(t),o--;for(var a=n;a--;){if(e===t||e===t.alternate)return e;e=we(e),t=we(t)}return null}(e,t):null,a=[];e&&e!==i;){var s=e.alternate;if(null!==s&&s===i)break;a.push(e),e=we(e)}for(var u=[];t&&t!==i;){var l=t.alternate;if(null!==l&&l===i)break;u.push(t),t=we(t)}for(var c=0;c<a.length;c++)n(a[c],"bubbled",r);for(var f=u.length;f-- >0;)n(u[f],"captured",o)}function Ce(e,t,n){o(e,"Dispatching inst must not be null");var r=function(e,t,n){return K(e,t.dispatchConfig.phasedRegistrationNames[n])}(e,n,t);r&&(n._dispatchListeners=F(n._dispatchListeners,r),n._dispatchInstances=F(n._dispatchInstances,e))}function Se(e){e&&e.dispatchConfig.phasedRegistrationNames&&xe(e._targetInst,Ce,e)}function Te(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;xe(t?we(t):null,Ce,e)}}function Ee(e,t,n){if(e&&n&&n.dispatchConfig.registrationName){var r=K(e,n.dispatchConfig.registrationName);r&&(n._dispatchListeners=F(n._dispatchListeners,r),n._dispatchInstances=F(n._dispatchInstances,e))}}function Ie(e){e&&e.dispatchConfig.registrationName&&Ee(e._targetInst,0,e)}function Oe(e){U(e,Se)}function Pe(e,t,n,r){ke(n,r,Ee,e,t)}var Re=Object.freeze({accumulateTwoPhaseDispatches:Oe,accumulateTwoPhaseDispatchesSkipTarget:function(e){U(e,Te)},accumulateEnterLeaveDispatches:Pe,accumulateDirectDispatches:function(e){U(e,Ie)}}),Ae=null;function Ne(){return!Ae&&i.canUseDOM&&(Ae="textContent"in document.documentElement?"textContent":"innerText"),Ae}var Me={_root:null,_startText:null,_fallbackText:null};function Le(){if(Me._fallbackText)return Me._fallbackText;var e=void 0,t=Me._startText,n=t.length,r=void 0,o=qe(),i=o.length;for(e=0;e<n&&t[e]===o[e];e++);var a=n-e;for(r=1;r<=a&&t[n-r]===o[i-r];r++);var s=r>1?1-r:void 0;return Me._fallbackText=o.slice(e,s),Me._fallbackText}function qe(){return"value"in Me._root?Me._root.value:Me._root[Ne()]}var je=!1,De=10,Fe=["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"],Ue={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function We(e,t,n,r){delete this.nativeEvent,delete this.preventDefault,delete this.stopPropagation,this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n;var o=this.constructor.Interface;for(var i in o)if(o.hasOwnProperty(i)){delete this[i];var a=o[i];a?this[i]=a(n):"target"===i?this.target=r:this[i]=n[i]}var u=null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue;return this.isDefaultPrevented=u?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function Be(e,t){var n="function"==typeof t;return{configurable:!0,set:function(e){return r(n?"setting the method":"setting the property","This is effectively a no-op"),e},get:function(){return r(n?"accessing the method":"accessing the property",n?"This is a no-op function":"This is set to null"),t}};function r(t,n){o(!1,"This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.",t,e,n)}}function He(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ze(e){e instanceof this||r(!1,"Trying to release an event instance  into a pool of a different type."),e.destructor(),this.eventPool.length<De&&this.eventPool.push(e)}function Ve(e){e.eventPool=[],e.getPooled=He,e.release=ze}a(We.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)Object.defineProperty(this,t,Be(t,e[t]));for(var n=0;n<Fe.length;n++)this[Fe[n]]=null;Object.defineProperty(this,"nativeEvent",Be("nativeEvent",null)),Object.defineProperty(this,"preventDefault",Be("preventDefault",s)),Object.defineProperty(this,"stopPropagation",Be("stopPropagation",s))}}),We.Interface=Ue,We.extend=function(e){var t=this,n=function(){};n.prototype=t.prototype;var r=new n;function o(){return t.apply(this,arguments)}return a(r,o.prototype),o.prototype=r,o.prototype.constructor=o,o.Interface=a({},t.Interface,e),o.extend=t.extend,Ve(o),o},"function"==typeof Proxy&&!Object.isSealed(new Proxy({},{}))&&(We=new Proxy(We,{construct:function(e,t){return this.apply(e,Object.create(e.prototype),t)},apply:function(e,t,n){return new Proxy(e.apply(t,n),{set:function(e,t,n){return"isPersistent"===t||e.constructor.Interface.hasOwnProperty(t)||-1!==Fe.indexOf(t)||(o(je||e.isPersistent(),"This synthetic event is reused for performance reasons. If you're seeing this, you're adding a new property in the synthetic event object. The property is never released. See https://fb.me/react-event-pooling for more information."),je=!0),e[t]=n,!0}})}})),Ve(We);var Ke=We,Qe=Ke.extend({data:null}),$e=Ke.extend({data:null}),Ye=[9,13,27,32],Je=229,Ge=i.canUseDOM&&"CompositionEvent"in window,Xe=null;i.canUseDOM&&"documentMode"in document&&(Xe=document.documentMode);var Ze=i.canUseDOM&&"TextEvent"in window&&!Xe,et=i.canUseDOM&&(!Ge||Xe&&Xe>8&&Xe<=11),tt=32,nt=String.fromCharCode(tt),rt={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},ot=!1;function it(e,t){switch(e){case"topKeyUp":return-1!==Ye.indexOf(t.keyCode);case"topKeyDown":return t.keyCode!==Je;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function at(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}var st=!1;function ut(e,t,n,r){var o=void 0,i=void 0;if(Ge?o=function(e){switch(e){case"topCompositionStart":return rt.compositionStart;case"topCompositionEnd":return rt.compositionEnd;case"topCompositionUpdate":return rt.compositionUpdate}}(e):st?it(e,n)&&(o=rt.compositionEnd):function(e,t){return"topKeyDown"===e&&t.keyCode===Je}(e,n)&&(o=rt.compositionStart),!o)return null;et&&(st||o!==rt.compositionStart?o===rt.compositionEnd&&st&&(i=Le()):st=function(e){return Me._root=e,Me._startText=qe(),!0}(r));var a=Qe.getPooled(o,t,n,r);if(i)a.data=i;else{var s=at(n);null!==s&&(a.data=s)}return Oe(a),a}function lt(e,t){if(st){if("topCompositionEnd"===e||!Ge&&it(e,t)){var n=Le();return Me._root=null,Me._startText=null,Me._fallbackText=null,st=!1,n}return null}switch(e){case"topPaste":return null;case"topKeyPress":if(!function(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}(t)){if(t.char&&t.char.length>1)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return et?null:t.data;default:return null}}function ct(e,t,n,r){var o=void 0;if(!(o=Ze?function(e,t){switch(e){case"topCompositionEnd":return at(t);case"topKeyPress":return t.which!==tt?null:(ot=!0,nt);case"topTextInput":var n=t.data;return n===nt&&ot?null:n;default:return null}}(e,n):lt(e,n)))return null;var i=$e.getPooled(rt.beforeInput,t,n,r);return i.data=o,Oe(i),i}var ft={eventTypes:rt,extractEvents:function(e,t,n,r){var o=ut(e,t,n,r),i=ct(e,t,n,r);return null===o?i:null===i?o:[o,i]}},dt=null,pt=null,ht=null;function yt(e){var t=M(e);if(t){dt&&"function"==typeof dt.restoreControlledState||r(!1,"Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");var n=N(t.stateNode);dt.restoreControlledState(t.stateNode,t.type,n)}}var mt={injectFiberControlledHostComponent:function(e){dt=e}};function vt(e){pt?ht?ht.push(e):ht=[e]:pt=e}function gt(){return null!==pt||null!==ht}function bt(){if(pt){var e=pt,t=ht;if(pt=null,ht=null,yt(e),t)for(var n=0;n<t.length;n++)yt(t[n])}}var _t=Object.freeze({injection:mt,enqueueStateRestore:vt,needsStateRestore:gt,restoreStateIfNeeded:bt}),wt=function(e,t){return e(t)},xt=function(e,t,n){return e(t,n)},kt=function(){},Ct=!1;function St(e,t){if(Ct)return e(t);Ct=!0;try{return wt(e,t)}finally{Ct=!1,gt()&&(kt(),bt())}}var Tt=function(e){wt=e.batchedUpdates,xt=e.interactiveUpdates,kt=e.flushInteractiveUpdates},Et={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function It(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Et[e.type]:"textarea"===t}var Ot=1,Pt=3,Rt=8,At=9,Nt=11;function Mt(e){var t=e.target||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===Pt?t.parentNode:t}
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function Lt(e,t){if(!i.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,r=n in document;if(!r){var o=document.createElement("div");o.setAttribute(n,"return;"),r="function"==typeof o[n]}return r}function qt(e){var t=e.type,n=e.nodeName;return n&&"input"===n.toLowerCase()&&("checkbox"===t||"radio"===t)}function jt(e){return e._valueTracker}function Dt(e){jt(e)||(e._valueTracker=function(e){var t=qt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){!function(e){e._valueTracker=null}(e),delete e[t]}}}(e))}function Ft(e){if(!e)return!1;var t=jt(e);if(!t)return!0;var n=t.getValue(),r=function(e){var t="";return e?t=qt(e)?e.checked?"true":"false":e.value:t}(e);return r!==n&&(t.setValue(r),!0)}var Ut=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Wt=Ut.ReactCurrentOwner,Bt=Ut.ReactDebugCurrentFrame,Ht=function(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")},zt="function"==typeof Symbol&&Symbol.for,Vt=zt?Symbol.for("react.element"):60103,Kt=zt?Symbol.for("react.call"):60104,Qt=zt?Symbol.for("react.return"):60105,$t=zt?Symbol.for("react.portal"):60106,Yt=zt?Symbol.for("react.fragment"):60107,Jt=zt?Symbol.for("react.strict_mode"):60108,Gt=zt?Symbol.for("react.provider"):60109,Xt=zt?Symbol.for("react.context"):60110,Zt=zt?Symbol.for("react.async_mode"):60111,en=zt?Symbol.for("react.forward_ref"):60112,tn="function"==typeof Symbol&&Symbol.iterator,nn="@@iterator";function rn(e){if(null===e||void 0===e)return null;var t=tn&&e[tn]||e[nn];return"function"==typeof t?t:null}function on(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case Yt:return"ReactFragment";case $t:return"ReactPortal";case Kt:return"ReactCall";case Qt:return"ReactReturn"}return null}function an(e){switch(e.tag){case J:case G:case X:case te:var t=e._debugOwner,n=e._debugSource,r=on(e),o=null;return t&&(o=on(t)),Ht(r,n,o);default:return""}}function sn(e){var t="",n=e;do{t+=an(n),n=n.return}while(n);return t}function un(){var e=ln.current;return null===e?null:sn(e)}var ln={current:null,phase:null,resetCurrentFiber:function(){Bt.getCurrentStack=null,ln.current=null,ln.phase=null},setCurrentFiber:function(e){Bt.getCurrentStack=un,ln.current=e,ln.phase=null},setCurrentPhase:function(e){ln.phase=e},getCurrentFiberOwnerName:function(){var e=ln.current;if(null===e)return null;var t=e._debugOwner;return null!==t&&void 0!==t?on(t):null},getCurrentFiberStackAddendum:un},cn=0,fn=2,dn=3,pn=4,hn=5,yn=6,mn=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",vn=mn+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",gn="data-reactroot",bn=new RegExp("^["+mn+"]["+vn+"]*$"),_n={},wn={};function xn(e){return!!wn.hasOwnProperty(e)||!_n.hasOwnProperty(e)&&(bn.test(e)?(wn[e]=!0,!0):(_n[e]=!0,o(!1,"Invalid attribute name: `%s`",e),!1))}function kn(e,t,n){return null!==t?t.type===cn:!n&&(e.length>2&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))}function Cn(e,t,n,r){if(null!==n&&n.type===cn)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":if(r)return!1;if(null!==n)return!n.acceptsBooleans;var o=e.toLowerCase().slice(0,5);return"data-"!==o&&"aria-"!==o;default:return!1}}function Sn(e,t,n,r){if(null===t||void 0===t)return!0;if(Cn(e,t,n,r))return!0;if(null!==n)switch(n.type){case dn:return!t;case pn:return!1===t;case hn:return isNaN(t);case yn:return isNaN(t)||t<1}return!1}function Tn(e){return In.hasOwnProperty(e)?In[e]:null}function En(e,t,n,r,o){this.acceptsBooleans=t===fn||t===dn||t===pn,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var In={};["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"].forEach(function(e){In[e]=new En(e,cn,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0],n=e[1];In[t]=new En(t,1,!1,n,null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){In[e]=new En(e,fn,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){In[e]=new En(e,fn,!1,e,null)}),["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach(function(e){In[e]=new En(e,dn,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){In[e]=new En(e,dn,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){In[e]=new En(e,pn,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){In[e]=new En(e,yn,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){In[e]=new En(e,hn,!1,e.toLowerCase(),null)});var On=/[\-\:]([a-z])/g,Pn=function(e){return e[1].toUpperCase()};function Rn(e,t,n,r){if(r.mustUseProperty)return e[r.propertyName];var o=r.attributeName,i=null;if(r.type===pn){if(e.hasAttribute(o)){var a=e.getAttribute(o);return""===a||(Sn(t,n,r,!1)?a:a===""+n?n:a)}}else if(e.hasAttribute(o)){if(Sn(t,n,r,!1))return e.getAttribute(o);if(r.type===dn)return n;i=e.getAttribute(o)}return Sn(t,n,r,!1)?null===i?n:i:i===""+n?n:i}function An(e,t,n){if(xn(t)){if(!e.hasAttribute(t))return void 0===n?void 0:null;var r=e.getAttribute(t);return r===""+n?n:r}}function Nn(e,t,n,r){var o=Tn(t);if(!kn(t,o,r))if(Sn(t,n,o,r)&&(n=null),r||null===o){if(xn(t)){var i=t;null===n?e.removeAttribute(i):e.setAttribute(i,""+n)}}else if(o.mustUseProperty){var a=o.propertyName;if(null===n){var s=o.type;e[a]=s!==dn&&""}else e[a]=n}else{var u=o.attributeName,l=o.attributeNamespace;if(null===n)e.removeAttribute(u);else{var c=o.type,f=void 0;f=c===dn||c===pn&&!0===n?"":""+n,l?e.setAttributeNS(l,u,f):e.setAttribute(u,f)}}}["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach(function(e){var t=e.replace(On,Pn);In[t]=new En(t,1,!1,e,null)}),["xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type"].forEach(function(e){var t=e.replace(On,Pn);In[t]=new En(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(On,Pn);In[t]=new En(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),In.tabIndex=new En("tabIndex",1,!1,"tabindex",null);var Mn={checkPropTypes:null},Ln={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},qn={value:function(e,t,n){return!e[t]||Ln[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}};Mn.checkPropTypes=function(e,t,n){u(qn,t,"prop",e,n)};var jn=ln.getCurrentFiberOwnerName,Dn=ln.getCurrentFiberStackAddendum,Fn=!1,Un=!1,Wn=!1,Bn=!1;function Hn(e){return"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}function zn(e,t){var n=e,r=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:n._wrapperState.initialChecked})}function Vn(e,t){Mn.checkPropTypes("input",t,Dn),void 0===t.checked||void 0===t.defaultChecked||Un||(o(!1,"%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",jn()||"A component",t.type),Un=!0),void 0===t.value||void 0===t.defaultValue||Fn||(o(!1,"%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",jn()||"A component",t.type),Fn=!0);var n=e,r=null==t.defaultValue?"":t.defaultValue;n._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:Gn(null!=t.value?t.value:r),controlled:Hn(t)}}function Kn(e,t){var n=e,r=t.checked;null!=r&&Nn(n,"checked",r,!1)}function Qn(e,t){var n=e,r=Hn(t);n._wrapperState.controlled||!r||Bn||(o(!1,"A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s",t.type,Dn()),Bn=!0),!n._wrapperState.controlled||r||Wn||(o(!1,"A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s",t.type,Dn()),Wn=!0),Kn(e,t);var i=Gn(t.value);null!=i&&("number"===t.type?(0===i&&""===n.value||n.value!=i)&&(n.value=""+i):n.value!==""+i&&(n.value=""+i)),t.hasOwnProperty("value")?Jn(n,t.type,i):t.hasOwnProperty("defaultValue")&&Jn(n,t.type,Gn(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(n.defaultChecked=!!t.defaultChecked)}function $n(e,t){var n=e;(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===n.value&&(n.value=""+n._wrapperState.initialValue),n.defaultValue=""+n._wrapperState.initialValue);var r=n.name;""!==r&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==r&&(n.name=r)}function Yn(e,t){var n=e;Qn(n,t),function(e,t){var n=t.name;if("radio"===t.type&&null!=n){for(var o=e;o.parentNode;)o=o.parentNode;for(var i=o.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),a=0;a<i.length;a++){var s=i[a];if(s!==e&&s.form===e.form){var u=ge(s);u||r(!1,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."),Ft(s),Qn(s,u)}}}}(n,t)}function Jn(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Gn(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}var Xn={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}};function Zn(e,t,n){var r=Ke.getPooled(Xn.change,e,t,n);return r.type="change",vt(n),Oe(r),r}var er=null,tr=null;function nr(e){Q(e,!1)}function rr(e){if(Ft(ve(e)))return e}function or(e,t){if("topChange"===e)return t}var ir=!1;function ar(){er&&(er.detachEvent("onpropertychange",sr),er=null,tr=null)}function sr(e){"value"===e.propertyName&&rr(tr)&&function(e){St(nr,Zn(tr,e,Mt(e)))}(e)}function ur(e,t,n){"topFocus"===e?(ar(),function(e,t){tr=t,(er=e).attachEvent("onpropertychange",sr)}(t,n)):"topBlur"===e&&ar()}function lr(e,t){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return rr(tr)}function cr(e,t){if("topClick"===e)return rr(t)}function fr(e,t){if("topInput"===e||"topChange"===e)return rr(t)}i.canUseDOM&&(ir=Lt("input")&&(!document.documentMode||document.documentMode>9));var dr={eventTypes:Xn,_isInputEventSupported:ir,extractEvents:function(e,t,n,r){var o,i,a=t?ve(t):window,s=void 0,u=void 0;if("select"===(i=(o=a).nodeName&&o.nodeName.toLowerCase())||"input"===i&&"file"===o.type?s=or:It(a)?ir?s=fr:(s=lr,u=ur):function(e){var t=e.nodeName;return t&&"input"===t.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}(a)&&(s=cr),s){var l=s(e,t);if(l)return Zn(l,n,r)}u&&u(e,a,t),"topBlur"===e&&function(e,t){if(null!=e){var n=e._wrapperState||t._wrapperState;n&&n.controlled&&"number"===t.type&&Jn(t,"number",t.value)}}(t,a)}},pr=Ke.extend({view:null,detail:null}),hr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function yr(e){var t=this.nativeEvent;if(t.getModifierState)return t.getModifierState(e);var n=hr[e];return!!n&&!!t[n]}function mr(e){return yr}var vr=pr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:mr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),gr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},br={eventTypes:gr,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=void 0;if(r.window===r)o=r;else{var i=r.ownerDocument;o=i?i.defaultView||i.parentWindow:window}var a=void 0,s=void 0;if("topMouseOut"===e){a=t;var u=n.relatedTarget||n.toElement;s=u?ye(u):null}else a=null,s=t;if(a===s)return null;var l=null==a?o:ve(a),c=null==s?o:ve(s),f=vr.getPooled(gr.mouseLeave,a,n,r);f.type="mouseleave",f.target=l,f.relatedTarget=c;var d=vr.getPooled(gr.mouseEnter,s,n,r);return d.type="mouseenter",d.target=c,d.relatedTarget=l,Pe(f,d,a,s),[f,d]}};function _r(e){return e._reactInternalFiber}var wr=0,xr=1,kr=2,Cr=4,Sr=6,Tr=8,Er=16,Ir=32,Or=64,Pr=128,Rr=256,Ar=2048,Nr=2559,Mr=512,Lr=1024,qr=1,jr=2,Dr=3;function Fr(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if((t.effectTag&kr)!==wr)return qr;for(;t.return;)if(((t=t.return).effectTag&kr)!==wr)return qr}return t.tag===Z?jr:Dr}function Ur(e){return Fr(e)===jr}function Wr(e){var t=Wt.current;if(null!==t&&t.tag===X){var n=t,r=n.stateNode;o(r._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",on(n)||"A component"),r._warnedAboutRefsInRender=!0}var i=_r(e);return!!i&&Fr(i)===jr}function Br(e){Fr(e)!==jr&&r(!1,"Unable to find node on an unmounted component.")}function Hr(e){var t=e.alternate;if(!t){var n=Fr(e);return n===Dr&&r(!1,"Unable to find node on an unmounted component."),n===qr?null:e}for(var o=e,i=t;;){var a=o.return,s=a?a.alternate:null;if(!a||!s)break;if(a.child===s.child){for(var u=a.child;u;){if(u===o)return Br(a),e;if(u===i)return Br(a),t;u=u.sibling}r(!1,"Unable to find node on an unmounted component.")}if(o.return!==i.return)o=a,i=s;else{for(var l=!1,c=a.child;c;){if(c===o){l=!0,o=a,i=s;break}if(c===i){l=!0,i=a,o=s;break}c=c.sibling}if(!l){for(c=s.child;c;){if(c===o){l=!0,o=s,i=a;break}if(c===i){l=!0,i=s,o=a;break}c=c.sibling}l||r(!1,"Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}o.alternate!==i&&r(!1,"Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}return o.tag!==Z&&r(!1,"Unable to find node on an unmounted component."),o.stateNode.current===o?e:t}var zr=Ke.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Vr=Ke.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=pr.extend({relatedTarget:null});function Qr(e){var t=void 0,n=e.keyCode;return"charCode"in e?0===(t=e.charCode)&&13===n&&(t=13):t=n,10===t&&(t=13),t>=32||13===t?t:0}var $r={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Yr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};var Jr=pr.extend({key:function(e){if(e.key){var t=$r[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=Qr(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?Yr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:mr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Gr=vr.extend({dataTransfer:null}),Xr=pr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:mr}),Zr=Ke.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),eo=vr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),to={},no={};function ro(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n,o="top"+n,i={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[o],isInteractive:t};to[e]=i,no[o]=i}["blur","cancel","click","close","contextMenu","copy","cut","doubleClick","dragEnd","dragStart","drop","focus","input","invalid","keyDown","keyPress","keyUp","mouseDown","mouseUp","paste","pause","play","rateChange","reset","seeked","submit","touchCancel","touchEnd","touchStart","volumeChange"].forEach(function(e){ro(e,!0)}),["abort","animationEnd","animationIteration","animationStart","canPlay","canPlayThrough","drag","dragEnter","dragExit","dragLeave","dragOver","durationChange","emptied","encrypted","ended","error","load","loadedData","loadedMetadata","loadStart","mouseMove","mouseOut","mouseOver","playing","progress","scroll","seeking","stalled","suspend","timeUpdate","toggle","touchMove","transitionEnd","waiting","wheel"].forEach(function(e){ro(e,!1)});var oo=["topAbort","topCancel","topCanPlay","topCanPlayThrough","topClose","topDurationChange","topEmptied","topEncrypted","topEnded","topError","topInput","topInvalid","topLoad","topLoadedData","topLoadedMetadata","topLoadStart","topPause","topPlay","topPlaying","topProgress","topRateChange","topReset","topSeeked","topSeeking","topStalled","topSubmit","topSuspend","topTimeUpdate","topToggle","topVolumeChange","topWaiting"],io={eventTypes:to,isInteractiveTopLevelEventType:function(e){var t=no[e];return void 0!==t&&!0===t.isInteractive},extractEvents:function(e,t,n,r){var i=no[e];if(!i)return null;var a=void 0;switch(e){case"topKeyPress":if(0===Qr(n))return null;case"topKeyDown":case"topKeyUp":a=Jr;break;case"topBlur":case"topFocus":a=Kr;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":a=vr;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":a=Gr;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":a=Xr;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":a=zr;break;case"topTransitionEnd":a=Zr;break;case"topScroll":a=pr;break;case"topWheel":a=eo;break;case"topCopy":case"topCut":case"topPaste":a=Vr;break;default:-1===oo.indexOf(e)&&o(!1,"SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.",e),a=Ke}var s=a.getPooled(i,t,n,r);return Oe(s),s}},ao=io.isInteractiveTopLevelEventType,so=10,uo=[];function lo(e){for(;e.return;)e=e.return;return e.tag!==Z?null:e.stateNode.containerInfo}function co(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=lo(n);if(!r)break;e.ancestors.push(n),n=ye(r)}while(n);for(var o=0;o<e.ancestors.length;o++)t=e.ancestors[o],$(e.topLevelType,t,e.nativeEvent,Mt(e.nativeEvent))}var fo=!0;function po(e){fo=!!e}function ho(){return fo}function yo(e,t,n){if(!n)return null;!function(e,t,n){e.addEventListener(t,n,!1)}(n,t,(ao(e)?vo:go).bind(null,e))}function mo(e,t,n){if(!n)return null;!function(e,t,n){e.addEventListener(t,n,!0)}(n,t,(ao(e)?vo:go).bind(null,e))}function vo(e,t){xt(go,e,t)}function go(e,t){if(fo){var n=ye(Mt(t));null===n||"number"!=typeof n.tag||Ur(n)||(n=null);var r,o=function(e,t,n){if(uo.length){var r=uo.pop();return r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,r}return{topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]}}(e,t,n);try{St(co,o)}finally{(r=o).topLevelType=null,r.nativeEvent=null,r.targetInst=null,r.ancestors.length=0,uo.length<so&&uo.push(r)}}}var bo=Object.freeze({get _enabled(){return fo},setEnabled:po,isEnabled:ho,trapBubbledEvent:yo,trapCapturedEvent:mo,dispatchEvent:go});function _o(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var wo={animationend:_o("Animation","AnimationEnd"),animationiteration:_o("Animation","AnimationIteration"),animationstart:_o("Animation","AnimationStart"),transitionend:_o("Transition","TransitionEnd")},xo={},ko={};function Co(e){if(xo[e])return xo[e];if(!wo[e])return e;var t=wo[e];for(var n in t)if(t.hasOwnProperty(n)&&n in ko)return xo[e]=t[n];return e}i.canUseDOM&&(ko=document.createElement("div").style,"AnimationEvent"in window||(delete wo.animationend.animation,delete wo.animationiteration.animation,delete wo.animationstart.animation),"TransitionEvent"in window||delete wo.transitionend.transition);var So={topAnimationEnd:Co("animationend"),topAnimationIteration:Co("animationiteration"),topAnimationStart:Co("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Co("transitionend"),topWheel:"wheel"},To={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Eo={},Io=0,Oo="_reactListenersID"+(""+Math.random()).slice(2);function Po(e){return Object.prototype.hasOwnProperty.call(e,Oo)||(e[Oo]=Io++,Eo[e[Oo]]={}),Eo[e[Oo]]}function Ro(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ao(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function No(e,t){for(var n=Ro(e),r=0,o=0;n;){if(n.nodeType===Pt){if(o=r+n.textContent.length,r<=t&&o>=t)return{node:n,offset:t-r};r=o}n=Ro(Ao(n))}}function Mo(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,r=t.anchorOffset,o=t.focusNode,i=t.focusOffset;try{n.nodeType,o.nodeType}catch(e){return null}return function(e,t,n,r,o){var i=0,a=-1,s=-1,u=0,l=0,c=e,f=null;e:for(;;){for(var d=null;c!==t||0!==n&&c.nodeType!==Pt||(a=i+n),c!==r||0!==o&&c.nodeType!==Pt||(s=i+o),c.nodeType===Pt&&(i+=c.nodeValue.length),null!==(d=c.firstChild);)f=c,c=d;for(;;){if(c===e)break e;if(f===t&&++u===n&&(a=i),f===r&&++l===o&&(s=i),null!==(d=c.nextSibling))break;f=(c=f).parentNode}c=d}if(-1===a||-1===s)return null;return{start:a,end:s}}(e,n,r,o,i)}function Lo(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}function qo(){var e=l();return{focusedElem:e,selectionRange:Lo(e)?function(e){var t=void 0;t="selectionStart"in e?{start:e.selectionStart,end:e.selectionEnd}:Mo(e);return t||{start:0,end:0}}(e):null}}function jo(e){var t,n=l(),r=e.focusedElem,o=e.selectionRange;if(n!==r&&(t=r,f(document.documentElement,t))){Lo(r)&&function(e,t){var n=t.start,r=t.end;void 0===r&&(r=n);"selectionStart"in e?(e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length)):function(e,t){if(window.getSelection){var n=window.getSelection(),r=e[Ne()].length,o=Math.min(t.start,r),i=void 0===t.end?o:Math.min(t.end,r);if(!n.extend&&o>i){var a=i;i=o,o=a}var s=No(e,o),u=No(e,i);if(s&&u){if(1===n.rangeCount&&n.anchorNode===s.node&&n.anchorOffset===s.offset&&n.focusNode===u.node&&n.focusOffset===u.offset)return;var l=document.createRange();l.setStart(s.node,s.offset),n.removeAllRanges(),o>i?(n.addRange(l),n.extend(u.node,u.offset)):(l.setEnd(u.node,u.offset),n.addRange(l))}}}(e,t)}(r,o);for(var i=[],a=r;a=a.parentNode;)a.nodeType===Ot&&i.push({element:a,left:a.scrollLeft,top:a.scrollTop});r.focus();for(var s=0;s<i.length;s++){var u=i[s];u.element.scrollLeft=u.left,u.element.scrollTop=u.top}}}var Do=i.canUseDOM&&"documentMode"in document&&document.documentMode<=11,Fo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},Uo=null,Wo=null,Bo=null,Ho=!1;function zo(e,t){if(Ho||null==Uo||Uo!==l())return null;var n=function(e){if("selectionStart"in e&&Lo(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}}(Uo);if(!Bo||!c(Bo,n)){Bo=n;var r=Ke.getPooled(Fo.select,Wo,e,t);return r.type="select",r.target=Uo,Oe(r),r}return null}var Vo={eventTypes:Fo,extractEvents:function(e,t,n,r){var o=r.window===r?r.document:r.nodeType===At?r:r.ownerDocument;if(!o||!function(e,t){for(var n=Po(t),r=I[e],o=0;o<r.length;o++){var i=r[o];if(!n.hasOwnProperty(i)||!n[i])return!1}return!0}("onSelect",o))return null;var i=t?ve(t):window;switch(e){case"topFocus":(It(i)||"true"===i.contentEditable)&&(Uo=i,Wo=t,Bo=null);break;case"topBlur":Uo=null,Wo=null,Bo=null;break;case"topMouseDown":Ho=!0;break;case"topContextMenu":case"topMouseUp":return Ho=!1,zo(n,r);case"topSelectionChange":if(Do)break;case"topKeyDown":case"topKeyUp":return zo(n,r)}return null}};V.injectEventPluginOrder(["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"]),q(_e),V.injectEventPluginsByName({SimpleEventPlugin:io,EnterLeaveEventPlugin:br,ChangeEventPlugin:dr,SelectEventPlugin:Vo,BeforeInputEventPlugin:ft});var Ko=1073741823,Qo=0,$o=1,Yo=Ko,Jo=10,Go=2;function Xo(e){return(e/Jo|0)+Go}function Zo(e){return(e-Go)*Jo}function ei(e,t,n){return(1+((e+t/Jo)/(r=n/Jo)|0))*r;var r}var ti=0,ni=1,ri=2,oi=void 0;oi=!1;try{var ii=Object.preventExtensions({}),ai=new Map([[ii,null]]),si=new Set([ii]);ai.set(0,0),si.add(0)}catch(e){oi=!0}var ui=void 0;ui=1;var li=function(e,t,n,r){return new function(e,t,n,r){this.tag=e,this.key=n,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.mode=r,this.effectTag=wr,this.nextEffect=null,this.firstEffect=null,this.lastEffect=null,this.expirationTime=Qo,this.alternate=null,this._debugID=ui++,this._debugSource=null,this._debugOwner=null,this._debugIsCurrentlyTiming=!1,oi||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}(e,t,n,r)};function ci(e,t,n){var r=e.alternate;return null===r?((r=li(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r._debugID=e._debugID,r._debugSource=e._debugSource,r._debugOwner=e._debugOwner,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=wr,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function fi(e,t,n){var r;r=e._owner;var o,i=void 0,a=e.type,s=e.key,u=e.props,l=void 0;if("function"==typeof a)l=(o=a).prototype&&o.prototype.isReactComponent?X:J;else if("string"==typeof a)l=te;else switch(a){case Yt:return pi(u.children,t,n,s);case Zt:l=se,t|=ni|ri;break;case Jt:l=se,t|=ri;break;case Kt:l=re;break;case Qt:l=ie;break;default:if("object"==typeof a&&null!==a)switch(a.$$typeof){case Gt:l=le;break;case Xt:l=ue;break;case en:l=ce;break;default:if("number"==typeof a.tag)return(i=a).pendingProps=u,i.expirationTime=n,i;di(a,r)}else di(a,r)}return(i=li(l,u,s,t)).type=a,i.expirationTime=n,i._debugSource=e._source,i._debugOwner=e._owner,i}function di(e,t){var n="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(n+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var o=t?on(t):null;o&&(n+="\n\nCheck the render method of `"+o+"`."),r(!1,"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==e?e:typeof e,n)}function pi(e,t,n,r){var o=li(ae,e,r,t);return o.expirationTime=n,o}function hi(e,t,n){var r=li(ne,e,null,t);return r.expirationTime=n,r}function yi(e,t,n){var r=null!==e.children?e.children:[],o=li(ee,r,e.key,t);return o.expirationTime=n,o.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},o}function mi(e,t){return null===e&&(e=li(J,null,null,ti)),e.tag=t.tag,e.key=t.key,e.type=t.type,e.stateNode=t.stateNode,e.return=t.return,e.child=t.child,e.sibling=t.sibling,e.index=t.index,e.ref=t.ref,e.pendingProps=t.pendingProps,e.memoizedProps=t.memoizedProps,e.updateQueue=t.updateQueue,e.memoizedState=t.memoizedState,e.mode=t.mode,e.effectTag=t.effectTag,e.nextEffect=t.nextEffect,e.firstEffect=t.firstEffect,e.lastEffect=t.lastEffect,e.expirationTime=t.expirationTime,e.alternate=t.alternate,e._debugID=t._debugID,e._debugSource=t._debugSource,e._debugOwner=t._debugOwner,e._debugIsCurrentlyTiming=t._debugIsCurrentlyTiming,e}function vi(e,t,n){var r=function(e){return li(Z,null,null,e?ni|ri:ti)}(t),o={current:r,containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:Qo,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:Qo,firstBatch:null,nextScheduledRoot:null};return r.stateNode=o,o}var gi=null,bi=null,_i=!1;function wi(e){return function(t){try{return e(t)}catch(e){_i||(_i=!0,o(!1,"React DevTools encountered an error: %s",e))}}}function xi(e){"function"==typeof gi&&gi(e)}function ki(e){"function"==typeof bi&&bi(e)}var Ci=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.warn(i);try{throw new Error(i)}catch(e){}}).apply(void 0,[t].concat(r))}},Si={discardPendingWarnings:function(){},flushPendingDeprecationWarnings:function(){},flushPendingUnsafeLifecycleWarnings:function(){},recordDeprecationWarnings:function(e,t){},recordUnsafeLifecycleWarnings:function(e,t){}},Ti={UNSAFE_componentWillMount:"componentDidMount",UNSAFE_componentWillReceiveProps:"static getDerivedStateFromProps",UNSAFE_componentWillUpdate:"componentDidUpdate"},Ei=[],Ii=[],Oi=[],Pi=new Map,Ri=new Set,Ai=new Set;Si.discardPendingWarnings=function(){Ei=[],Ii=[],Oi=[],Pi=new Map},Si.flushPendingUnsafeLifecycleWarnings=function(){Pi.forEach(function(e,t){var n=[];if(Object.keys(e).forEach(function(t){var r=e[t];if(r.length>0){var o=new Set;r.forEach(function(e){o.add(on(e)||"Component"),Ai.add(e.type)});var i=t.replace("UNSAFE_",""),a=Ti[t],s=Array.from(o).sort().join(", ");n.push(i+": Please update the following components to use "+a+" instead: "+s)}}),n.length>0){var r=sn(t);o(!1,"Unsafe lifecycle methods were found within a strict-mode tree:%s\n\n%s\n\nLearn more about this warning here:\nhttps://fb.me/react-strict-mode-warnings",r,n.join("\n\n"))}}),Pi=new Map};Si.flushPendingDeprecationWarnings=function(){if(Ei.length>0){var e=new Set;Ei.forEach(function(t){e.add(on(t)||"Component"),Ri.add(t.type)});var t=Array.from(e).sort().join(", ");Ci(!1,"componentWillMount is deprecated and will be removed in the next major version. Use componentDidMount instead. As a temporary workaround, you can rename to UNSAFE_componentWillMount.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",t),Ei=[]}if(Ii.length>0){var n=new Set;Ii.forEach(function(e){n.add(on(e)||"Component"),Ri.add(e.type)});var r=Array.from(n).sort().join(", ");Ci(!1,"componentWillReceiveProps is deprecated and will be removed in the next major version. Use static getDerivedStateFromProps instead.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",r),Ii=[]}if(Oi.length>0){var o=new Set;Oi.forEach(function(e){o.add(on(e)||"Component"),Ri.add(e.type)});var i=Array.from(o).sort().join(", ");Ci(!1,"componentWillUpdate is deprecated and will be removed in the next major version. Use componentDidUpdate instead. As a temporary workaround, you can rename to UNSAFE_componentWillUpdate.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",i),Oi=[]}},Si.recordDeprecationWarnings=function(e,t){Ri.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&Ei.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&Ii.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&Oi.push(e))},Si.recordUnsafeLifecycleWarnings=function(e,t){var n=function(e){for(var t=null;null!==e;)e.mode&ri&&(t=e),e=e.return;return t}(e);if(!Ai.has(e.type)&&("function"!=typeof t.componentWillMount||!0!==t.componentWillMount.__suppressDeprecationWarning)){var r=void 0;Pi.has(n)?r=Pi.get(n):(r={UNSAFE_componentWillMount:[],UNSAFE_componentWillReceiveProps:[],UNSAFE_componentWillUpdate:[]},Pi.set(n,r));var o=[];"function"!=typeof t.componentWillMount&&"function"!=typeof t.UNSAFE_componentWillMount||o.push("UNSAFE_componentWillMount"),"function"!=typeof t.componentWillReceiveProps&&"function"!=typeof t.UNSAFE_componentWillReceiveProps||o.push("UNSAFE_componentWillReceiveProps"),"function"!=typeof t.componentWillUpdate&&"function"!=typeof t.UNSAFE_componentWillUpdate||o.push("UNSAFE_componentWillUpdate"),o.length>0&&o.forEach(function(t){r[t].push(e)})}};var Ni=!0,Mi=!0,Li=!1,qi=!1,ji=!1,Di=!0,Fi=!0,Ui=!1,Wi="undefined"!=typeof performance&&"function"==typeof performance.mark&&"function"==typeof performance.clearMarks&&"function"==typeof performance.measure&&"function"==typeof performance.clearMeasures,Bi=null,Hi=null,zi=null,Vi=!1,Ki=!1,Qi=!1,$i=0,Yi=0,Ji=!1,Gi=new Set,Xi=function(e){return"⚛ "+e},Zi=function(e){performance.mark(Xi(e))},ea=function(e,t,n){var r=Xi(t),o=function(e,t){return(t?"⛔ ":"⚛ ")+e+(t?" Warning: "+t:"")}(e,n);try{performance.measure(o,r)}catch(e){}performance.clearMarks(r),performance.clearMeasures(o)},ta=function(e,t){return e+" (#"+t+")"},na=function(e,t,n){return null===n?e+" ["+(t?"update":"mount")+"]":e+"."+n},ra=function(e,t){var n=on(e)||"Unknown",r=e._debugID,o=null!==e.alternate,i=na(n,o,t);if(Vi&&Gi.has(i))return!1;Gi.add(i);var a=ta(i,r);return Zi(a),!0},oa=function(e,t){var n=on(e)||"Unknown",r=e._debugID,o=null!==e.alternate,i=na(n,o,t);!function(e){performance.clearMarks(Xi(e))}(ta(i,r))},ia=function(e,t,n){var r=on(e)||"Unknown",o=e._debugID,i=null!==e.alternate,a=na(r,i,t),s=ta(a,o);ea(a,s,n)},aa=function(e){switch(e.tag){case Z:case te:case ne:case ee:case re:case ie:case ae:case le:case ue:return!0;default:return!1}},sa=function(){null!==Hi&&null!==zi&&oa(zi,Hi),zi=null,Hi=null,Qi=!1},ua=function(){for(var e=Bi;e;)e._debugIsCurrentlyTiming&&ia(e,null,null),e=e.return},la=function(e){null!==e.return&&la(e.return),e._debugIsCurrentlyTiming&&ra(e,null)},ca=function(){null!==Bi&&la(Bi)};function fa(){Ni&&Yi++}function da(){Ni&&(Vi&&(Ki=!0),null!==Hi&&"componentWillMount"!==Hi&&"componentWillReceiveProps"!==Hi&&(Qi=!0))}function pa(e){if(Ni){if(!Wi||aa(e))return;e._debugIsCurrentlyTiming=!1,oa(e,null)}}function ha(e){if(Ni){if(!Wi||aa(e))return;if(Bi=e.return,!e._debugIsCurrentlyTiming)return;e._debugIsCurrentlyTiming=!1,ia(e,null,null)}}function ya(e){if(Ni){if(!Wi||aa(e))return;if(Bi=e.return,!e._debugIsCurrentlyTiming)return;e._debugIsCurrentlyTiming=!1;ia(e,null,"An error was thrown inside this error boundary")}}function ma(e,t){if(Ni){if(!Wi)return;if(sa(),!ra(e,t))return;zi=e,Hi=t}}function va(){if(Ni){if(!Wi)return;if(null!==Hi&&null!==zi)ia(zi,Hi,Qi?"Scheduled a cascading update":null);Hi=null,zi=null}}function ga(e,t){if(Ni){if(!Wi)return;var n=null;if(null!==e)if(e.tag===Z)n="A top-level update interrupted the previous render";else n="An update to "+(on(e)||"Unknown")+" interrupted the previous render";else $i>1&&(n="There were cascading updates");$i=0;var r=t?"(React Tree Reconciliation: Completed Root)":"(React Tree Reconciliation: Yielded)";ua(),ea(r,"(React Tree Reconciliation)",n)}}function ba(){if(Ni){if(!Wi)return;Vi=!0,Ki=!1,Gi.clear(),Zi("(Committing Changes)")}}function _a(){if(Ni){if(!Wi)return;var e=null;Ki?e="Lifecycle hook scheduled a cascading update":$i>0&&(e="Caused by a cascading update in earlier commit"),Ki=!1,$i++,Vi=!1,Gi.clear(),ea("(Committing Changes)","(Committing Changes)",e)}}var wa=void 0;function xa(e){var t={baseState:e,expirationTime:Qo,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null,isProcessing:!1};return t}function ka(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(e.expirationTime===Qo||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}wa=!1;var Ca=void 0,Sa=void 0;function Ta(e){Ca=Sa=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=xa(null));var r=void 0;null!==t?null===(r=t.updateQueue)&&(r=t.updateQueue=xa(null)):r=null,Ca=n,Sa=r=r!==n?r:null}function Ea(e,t){Ta(e);var n=Ca,r=Sa;if((n.isProcessing||null!==r&&r.isProcessing)&&!wa&&(o(!1,"An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."),wa=!0),null!==r){if(null===n.last||null===r.last)return ka(n,t),void ka(r,t);ka(n,t),r.last=t}else ka(n,t)}function Ia(e,t,n,r){var o=e.partialState;return"function"==typeof o?o.call(t,n,r):o}function Oa(e,t,n,r,o,i){if(null!==e&&e.updateQueue===n){var s=n;n=t.updateQueue={baseState:s.baseState,expirationTime:s.expirationTime,first:s.first,last:s.last,isInitialized:s.isInitialized,capturedValues:s.capturedValues,callbackList:null,hasForceUpdate:!1}}n.isProcessing=!0,n.expirationTime=Qo;var u=void 0;n.isInitialized?u=n.baseState:(u=n.baseState=t.memoizedState,n.isInitialized=!0);for(var l=!0,c=n.first,f=!1;null!==c;){var d=c.expirationTime;if(d>i){var p=n.expirationTime;(p===Qo||p>d)&&(n.expirationTime=d),f||(f=!0,n.baseState=u),c=c.next}else{f||(n.first=c.next,null===n.first&&(n.last=null)),(ji||Di&&t.mode&ri)&&Ia(c,r,u,o);var h=void 0;if(c.isReplace?(u=Ia(c,r,u,o),l=!0):(h=Ia(c,r,u,o))&&(u=l?a({},u,h):a(u,h),l=!1),c.isForced&&(n.hasForceUpdate=!0),null!==c.callback){var y=n.callbackList;null===y&&(y=n.callbackList=[]),y.push(c)}if(null!==c.capturedValue){var m=n.capturedValues;null===m?n.capturedValues=[c.capturedValue]:m.push(c.capturedValue)}c=c.next}}return null!==n.callbackList?t.effectTag|=Ir:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),f||(f=!0,n.baseState=u),n.isProcessing=!1,u}function Pa(e,t){var n=e.callbackList;if(null!==n){e.callbackList=null;for(var o=0;o<n.length;o++){var i=n[o],a=i.callback;i.callback=null,"function"!=typeof a&&r(!1,"Invalid argument passed as callback. Expected a function. Instead received: %s",a),a.call(t)}}}var Ra,Aa={},Na=Array.isArray,Ma=void 0,La=void 0,qa=void 0,ja=void 0,Da=void 0;Ma=new Set,La=new Set,qa=new Set,ja=new Set,Da=new Set;var Fa=new Set;function Ua(e,t){for(var n={},r=0;r<t.length;r++){var o=t[r].value,i=e.getDerivedStateFromCatch.call(null,o);null!==i&&void 0!==i&&a(n,i)}return n}Ra=function(e,t){if(null!==e&&"function"!=typeof e){var n=t+"_"+e;Fa.has(n)||(Fa.add(n),o(!1,"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e))}},Object.defineProperty(Aa,"_processChildContext",{enumerable:!1,value:function(){r(!1,"_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).")}}),Object.freeze(Aa);var Wa=function(e,t,n,r,i){var s=e.cacheContext,u=e.getMaskedContext,l=e.getUnmaskedContext,f=e.isContextConsumer,p=e.hasContextChanged,h={isMounted:Wr,enqueueSetState:function(e,r,o){var i=_r(e);Ra(o=void 0===o?null:o,"setState");var a=n(i);Ea(i,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(i,a)},enqueueReplaceState:function(e,r,o){var i=_r(e);Ra(o=void 0===o?null:o,"replaceState");var a=n(i);Ea(i,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(i,a)},enqueueForceUpdate:function(e,r){var o=_r(e);Ra(r=void 0===r?null:r,"forceUpdate");var i=n(o);Ea(o,{expirationTime:i,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(o,i)}};function y(e,t,n,r,i,a){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var s=e.stateNode,u=e.type;if("function"==typeof s.shouldComponentUpdate){ma(e,"shouldComponentUpdate");var l=s.shouldComponentUpdate(n,i,a);return va(),o(void 0!==l,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",on(e)||"Component"),l}return!u.prototype||!u.prototype.isPureReactComponent||(!c(t,n)||!c(r,i))}function m(e,t){t.props=e.memoizedProps,t.state=e.memoizedState}function v(e,t){var n;t.updater=h,e.stateNode=t,n=e,t._reactInternalFiber=n,t._reactInternalInstance=Aa}function g(e,t,n,r){var i=t.state;if(ma(e,"componentWillReceiveProps"),"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),va(),t.state!==i){var a=on(e)||"Component";Ma.has(a)||(Ma.add(a),o(!1,"%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",a)),h.enqueueReplaceState(t,t.state,null)}}function b(e,t,n,r){var i=e.type;if("function"==typeof i.getDerivedStateFromProps){(ji||Di&&e.mode&ri)&&i.getDerivedStateFromProps.call(null,n,r);var a=i.getDerivedStateFromProps.call(null,n,r);if(void 0===a){var s=on(e)||"Component";La.has(s)||(La.add(s),o(!1,"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",s))}return a}}return{adoptClassInstance:v,callGetDerivedStateFromProps:b,constructClassInstance:function(e,t){var n=e.type,r=l(e),i=f(e),c=i?u(e,r):d;(ji||Di&&e.mode&ri)&&new n(t,c);var p=new n(t,c),h=null!==p.state&&void 0!==p.state?p.state:null;if(v(e,p),"function"==typeof n.getDerivedStateFromProps&&null===h){var y=on(e)||"Component";qa.has(y)||(qa.add(y),o(!1,"%s: Did not properly initialize state during construction. Expected state to be an object, but it was %s.",y,null===p.state?"null":"undefined"))}if("function"==typeof n.getDerivedStateFromProps||"function"==typeof p.getSnapshotBeforeUpdate){var m=null,g=null,_=null;if("function"==typeof p.componentWillMount&&!0!==p.componentWillMount.__suppressDeprecationWarning?m="componentWillMount":"function"==typeof p.UNSAFE_componentWillMount&&(m="UNSAFE_componentWillMount"),"function"==typeof p.componentWillReceiveProps&&!0!==p.componentWillReceiveProps.__suppressDeprecationWarning?g="componentWillReceiveProps":"function"==typeof p.UNSAFE_componentWillReceiveProps&&(g="UNSAFE_componentWillReceiveProps"),"function"==typeof p.componentWillUpdate&&!0!==p.componentWillUpdate.__suppressDeprecationWarning?_="componentWillUpdate":"function"==typeof p.UNSAFE_componentWillUpdate&&(_="UNSAFE_componentWillUpdate"),null!==m||null!==g||null!==_){var w=on(e)||"Component",x="function"==typeof n.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";Da.has(w)||(Da.add(w),o(!1,"Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",w,x,null!==m?"\n  "+m:"",null!==g?"\n  "+g:"",null!==_?"\n  "+_:""))}}e.memoizedState=h;var k=b(e,0,t,h);return null!==k&&void 0!==k&&(e.memoizedState=a({},e.memoizedState,k)),i&&s(e,r,c),p},mountClassInstance:function(e,t){var n=e.type,r=e.alternate;!function(e){var t=e.stateNode,n=e.type,r=on(e)||"Component";t.render||(n.prototype&&"function"==typeof n.prototype.render?o(!1,"%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",r):o(!1,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",r));var i=!t.getInitialState||t.getInitialState.isReactClassApproved||t.state;o(i,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",r);var a=!t.getDefaultProps||t.getDefaultProps.isReactClassApproved;o(a,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",r);var s=!t.propTypes;o(s,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",r);var u=!t.contextTypes;o(u,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",r);var l="function"!=typeof t.componentShouldUpdate;o(l,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",r),n.prototype&&n.prototype.isPureReactComponent&&void 0!==t.shouldComponentUpdate&&o(!1,"%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",on(e)||"A pure component");var c="function"!=typeof t.componentDidUnmount;o(c,"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",r);var f="function"!=typeof t.componentDidReceiveProps;o(f,"%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",r);var d="function"!=typeof t.componentWillRecieveProps;o(d,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",r);var p="function"!=typeof t.UNSAFE_componentWillRecieveProps;o(p,"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",r);var h=t.props!==e.pendingProps;o(void 0===t.props||!h,"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",r,r);var y=!t.defaultProps;o(y,"Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",r,r),"function"!=typeof t.getSnapshotBeforeUpdate||"function"==typeof t.componentDidUpdate||"function"==typeof t.componentDidUpdate||ja.has(n)||(ja.add(n),o(!1,"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",on(e)));var m="function"!=typeof t.getDerivedStateFromProps;o(m,"%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",r);var v="function"!=typeof t.getDerivedStateFromCatch;o(v,"%s: getDerivedStateFromCatch() is defined as an instance method and will be ignored. Instead, declare it as a static method.",r);var g="function"!=typeof n.getSnapshotBeforeUpdate;o(g,"%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",r);var b=t.state;b&&("object"!=typeof b||Na(b))&&o(!1,"%s.state: must be set to an object or null",r),"function"==typeof t.getChildContext&&o("object"==typeof n.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",r)}(e);var i=e.stateNode,a=e.pendingProps,s=l(e);if(i.props=a,i.state=e.memoizedState,i.refs=d,i.context=u(e,s),e.mode&ri&&Si.recordUnsafeLifecycleWarnings(e,i),Ui&&Si.recordDeprecationWarnings(e,i),"function"!=typeof n.getDerivedStateFromProps&&"function"!=typeof i.getSnapshotBeforeUpdate&&("function"==typeof i.UNSAFE_componentWillMount||"function"==typeof i.componentWillMount)){!function(e,t){ma(e,"componentWillMount");var n=t.state;"function"==typeof t.componentWillMount&&t.componentWillMount(),"function"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),va(),n!==t.state&&(o(!1,"%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",on(e)||"Component"),h.enqueueReplaceState(t,t.state,null))}(e,i);var c=e.updateQueue;null!==c&&(i.state=Oa(r,e,c,i,a,t))}"function"==typeof i.componentDidMount&&(e.effectTag|=Cr)},resumeMountClassInstance:function(e,t){var n=e.type,o=e.stateNode;m(e,o);var s=e.memoizedProps,c=e.pendingProps,f=o.context,d=l(e),h=u(e,d),v="function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate;v||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||s===c&&f===h||g(e,o,c,h);var _=e.memoizedState,w=void 0,x=void 0;if(null!==e.updateQueue){w=Oa(null,e,e.updateQueue,o,c,t);var k=e.updateQueue;null!==k&&null!==k.capturedValues&&qi&&"function"==typeof n.getDerivedStateFromCatch&&(x=Ua(n,k.capturedValues))}else w=_;var C=void 0;if(s!==c&&(C=b(e,0,c,w)),null!==C&&void 0!==C){w=null===w||void 0===w?C:a({},w,C);var S=e.updateQueue;null!==S&&(S.baseState=a({},S.baseState,C))}if(null!==x&&void 0!==x){w=null===w||void 0===w?x:a({},w,x);var T=e.updateQueue;null!==T&&(T.baseState=a({},T.baseState,x))}if(!(s!==c||_!==w||p()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate))return"function"==typeof o.componentDidMount&&(e.effectTag|=Cr),!1;var E=y(e,s,c,_,w,h);return E?(v||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(ma(e,"componentWillMount"),"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),va()),"function"==typeof o.componentDidMount&&(e.effectTag|=Cr)):("function"==typeof o.componentDidMount&&(e.effectTag|=Cr),r(e,c),i(e,w)),o.props=c,o.state=w,o.context=h,E},updateClassInstance:function(e,t,n){var o=t.type,s=t.stateNode;m(t,s);var c=t.memoizedProps,f=t.pendingProps,d=s.context,h=l(t),v=u(t,h),_="function"==typeof o.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate;_||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||c===f&&d===v||g(t,s,f,v);var w=t.memoizedState,x=void 0,k=void 0;if(null!==t.updateQueue){x=Oa(e,t,t.updateQueue,s,f,n);var C=t.updateQueue;null!==C&&null!==C.capturedValues&&qi&&"function"==typeof o.getDerivedStateFromCatch&&(k=Ua(o,C.capturedValues))}else x=w;var S=void 0;if(c!==f&&(S=b(t,0,f,x)),null!==S&&void 0!==S){x=null===x||void 0===x?S:a({},x,S);var T=t.updateQueue;null!==T&&(T.baseState=a({},T.baseState,S))}if(null!==k&&void 0!==k){x=null===x||void 0===x?k:a({},x,k);var E=t.updateQueue;null!==E&&(E.baseState=a({},E.baseState,k))}if(!(c!==f||w!==x||p()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"==typeof s.componentDidUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Cr)),"function"==typeof s.getSnapshotBeforeUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Ar)),!1;var I=y(t,c,f,w,x,v);return I?(_||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||(ma(t,"componentWillUpdate"),"function"==typeof s.componentWillUpdate&&s.componentWillUpdate(f,x,v),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(f,x,v),va()),"function"==typeof s.componentDidUpdate&&(t.effectTag|=Cr),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=Ar)):("function"==typeof s.componentDidUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Cr)),"function"==typeof s.getSnapshotBeforeUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Ar)),r(t,f),i(t,x)),s.props=f,s.state=x,s.context=v,I}}},Ba=ln.getCurrentFiberStackAddendum,Ha=void 0,za=void 0,Va=void 0,Ka=void 0,Qa=function(e){};Ha=!1,za={},Va={},Ka={},Qa=function(e){if(null!==e&&"object"==typeof e&&e._store&&!e._store.validated&&null==e.key){"object"!=typeof e._store&&r(!1,"React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."),e._store.validated=!0;var t='Each child in an array or iterator should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.'+(Ba()||"");Va[t]||(Va[t]=!0,o(!1,'Each child in an array or iterator should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.%s',Ba()))}};var $a=Array.isArray;function Ya(e,t,n){var i=n.ref;if(null!==i&&"function"!=typeof i&&"object"!=typeof i){if(e.mode&ri){var a=on(e)||"Component";za[a]||(o(!1,'A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using createRef() instead.\n%s\n\nLearn more about using refs safely here:\nhttps://fb.me/react-strict-mode-string-ref',i,sn(e)),za[a]=!0)}if(n._owner){var s=n._owner,u=void 0;if(s){var l=s;l.tag!==X&&r(!1,"Stateless function components cannot have refs."),u=l.stateNode}u||r(!1,"Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.",i);var c=""+i;if(null!==t&&null!==t.ref&&t.ref._stringRef===c)return t.ref;var f=function(e){var t=u.refs===d?u.refs={}:u.refs;null===e?delete t[c]:t[c]=e};return f._stringRef=c,f}"string"!=typeof i&&r(!1,"Expected ref to be a function or a string."),n._owner||r(!1,"Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.",i)}return i}function Ja(e,t){if("textarea"!==e.type){var n;n=" If you meant to render a collection of children, use an array instead."+(Ba()||""),r(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,n)}}function Ga(){var e="Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."+(Ba()||"");Ka[e]||(Ka[e]=!0,o(!1,"Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.%s",Ba()||""))}function Xa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=Tr}}function n(n,r){if(!e)return null;for(var o=r;null!==o;)t(n,o),o=o.sibling;return null}function i(e,t){for(var n=new Map,r=t;null!==r;)null!==r.key?n.set(r.key,r):n.set(r.index,r),r=r.sibling;return n}function a(e,t,n){var r=ci(e,t,n);return r.index=0,r.sibling=null,r}function s(t,n,r){if(t.index=r,!e)return n;var o=t.alternate;if(null!==o){var i=o.index;return i<n?(t.effectTag=kr,n):i}return t.effectTag=kr,n}function u(t){return e&&null===t.alternate&&(t.effectTag=kr),t}function l(e,t,n,r){if(null===t||t.tag!==ne){var o=hi(n,e.mode,r);return o.return=e,o}var i=a(t,n,r);return i.return=e,i}function c(e,t,n,r){if(null!==t&&t.type===n.type){var o=a(t,n.props,r);return o.ref=Ya(e,t,n),o.return=e,o._debugSource=n._source,o._debugOwner=n._owner,o}var i=fi(n,e.mode,r);return i.ref=Ya(e,t,n),i.return=e,i}function f(e,t,n,r){if(null===t||t.tag!==ee||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation){var o=yi(n,e.mode,r);return o.return=e,o}var i=a(t,n.children||[],r);return i.return=e,i}function d(e,t,n,r,o){if(null===t||t.tag!==ae){var i=pi(n,e.mode,r,o);return i.return=e,i}var s=a(t,n,r);return s.return=e,s}function p(e,t,n){if("string"==typeof t||"number"==typeof t){var r=hi(""+t,e.mode,n);return r.return=e,r}if("object"==typeof t&&null!==t){switch(t.$$typeof){case Vt:var o=fi(t,e.mode,n);return o.ref=Ya(e,null,t),o.return=e,o;case $t:var i=yi(t,e.mode,n);return i.return=e,i}if($a(t)||rn(t)){var a=pi(t,e.mode,n,null);return a.return=e,a}Ja(e,t)}return"function"==typeof t&&Ga(),null}function h(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Vt:return n.key===o?n.type===Yt?d(e,t,n.props.children,r,o):c(e,t,n,r):null;case $t:return n.key===o?f(e,t,n,r):null}if($a(n)||rn(n))return null!==o?null:d(e,t,n,r,null);Ja(e,n)}return"function"==typeof n&&Ga(),null}function y(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Vt:var i=e.get(null===r.key?n:r.key)||null;return r.type===Yt?d(t,i,r.props.children,o,r.key):c(t,i,r,o);case $t:return f(t,e.get(null===r.key?n:r.key)||null,r,o)}if($a(r)||rn(r))return d(t,e.get(n)||null,r,o,null);Ja(t,r)}return"function"==typeof r&&Ga(),null}function m(e,t){if("object"!=typeof e||null===e)return t;switch(e.$$typeof){case Vt:case $t:Qa(e);var n=e.key;if("string"!=typeof n)break;if(null===t){(t=new Set).add(n);break}if(!t.has(n)){t.add(n);break}o(!1,"Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.%s",n,Ba())}return t}return function(l,c,f,d){"object"==typeof f&&null!==f&&f.type===Yt&&null===f.key&&(f=f.props.children);var v="object"==typeof f&&null!==f;if(v)switch(f.$$typeof){case Vt:return u(function(e,r,o,i){for(var s=o.key,u=r;null!==u;){if(u.key===s){if(u.tag===ae?o.type===Yt:u.type===o.type){n(e,u.sibling);var l=a(u,o.type===Yt?o.props.children:o.props,i);return l.ref=Ya(e,u,o),l.return=e,l._debugSource=o._source,l._debugOwner=o._owner,l}n(e,u);break}t(e,u),u=u.sibling}if(o.type===Yt){var c=pi(o.props.children,e.mode,i,o.key);return c.return=e,c}var f=fi(o,e.mode,i);return f.ref=Ya(e,r,o),f.return=e,f}(l,c,f,d));case $t:return u(function(e,r,o,i){for(var s=o.key,u=r;null!==u;){if(u.key===s){if(u.tag===ee&&u.stateNode.containerInfo===o.containerInfo&&u.stateNode.implementation===o.implementation){n(e,u.sibling);var l=a(u,o.children||[],i);return l.return=e,l}n(e,u);break}t(e,u),u=u.sibling}var c=yi(o,e.mode,i);return c.return=e,c}(l,c,f,d))}if("string"==typeof f||"number"==typeof f)return u(function(e,t,r,o){if(null!==t&&t.tag===ne){n(e,t.sibling);var i=a(t,r,o);return i.return=e,i}n(e,t);var s=hi(r,e.mode,o);return s.return=e,s}(l,c,""+f,d));if($a(f))return function(r,o,a,u){for(var l=null,c=0;c<a.length;c++)l=m(a[c],l);for(var f=null,d=null,v=o,g=0,b=0,_=null;null!==v&&b<a.length;b++){v.index>b?(_=v,v=null):_=v.sibling;var w=h(r,v,a[b],u);if(null===w){null===v&&(v=_);break}e&&v&&null===w.alternate&&t(r,v),g=s(w,g,b),null===d?f=w:d.sibling=w,d=w,v=_}if(b===a.length)return n(r,v),f;if(null===v){for(;b<a.length;b++){var x=p(r,a[b],u);x&&(g=s(x,g,b),null===d?f=x:d.sibling=x,d=x)}return f}for(var k=i(0,v);b<a.length;b++){var C=y(k,r,b,a[b],u);C&&(e&&null!==C.alternate&&k.delete(null===C.key?b:C.key),g=s(C,g,b),null===d?f=C:d.sibling=C,d=C)}return e&&k.forEach(function(e){return t(r,e)}),f}(l,c,f,d);if(rn(f))return function(a,u,l,c){var f=rn(l);"function"!=typeof f&&r(!1,"An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."),"function"==typeof l.entries&&l.entries===f&&(o(Ha,"Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.%s",Ba()),Ha=!0);var d=f.call(l);if(d)for(var v=null,g=d.next();!g.done;g=d.next())v=m(g.value,v);var b=f.call(l);null==b&&r(!1,"An iterable object provided no iterator.");for(var _=null,w=null,x=u,k=0,C=0,S=null,T=b.next();null!==x&&!T.done;C++,T=b.next()){x.index>C?(S=x,x=null):S=x.sibling;var E=h(a,x,T.value,c);if(null===E){x||(x=S);break}e&&x&&null===E.alternate&&t(a,x),k=s(E,k,C),null===w?_=E:w.sibling=E,w=E,x=S}if(T.done)return n(a,x),_;if(null===x){for(;!T.done;C++,T=b.next()){var I=p(a,T.value,c);null!==I&&(k=s(I,k,C),null===w?_=I:w.sibling=I,w=I)}return _}for(var O=i(0,x);!T.done;C++,T=b.next()){var P=y(O,a,C,T.value,c);null!==P&&(e&&null!==P.alternate&&O.delete(null===P.key?C:P.key),k=s(P,k,C),null===w?_=P:w.sibling=P,w=P)}return e&&O.forEach(function(e){return t(a,e)}),_}(l,c,f,d);if(v&&Ja(l,f),"function"==typeof f&&Ga(),void 0===f)switch(l.tag){case X:if(l.stateNode.render._isMockFunction)break;case G:var g=l.type;r(!1,"%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.",g.displayName||g.name||"Component")}return n(l,c)}}var Za=Xa(!0),es=Xa(!1);var ts=void 0,ns=void 0,rs=void 0;ts={},ns={},rs={};var os=function(e,t,n,i,s,u,l){var c=e.shouldSetTextContent,f=e.shouldDeprioritizeSubtree,d=t.pushHostContext,p=t.pushHostContainer,h=i.pushProvider,y=n.getMaskedContext,m=n.getUnmaskedContext,v=n.hasContextChanged,g=n.pushContextProvider,b=n.pushTopLevelContextObject,_=n.invalidateContextProvider,w=s.enterHydrationState,x=s.resetHydrationState,k=s.tryToClaimNextHydratableInstance,C=Wa(n,u,l,D,F),S=C.adoptClassInstance,T=C.callGetDerivedStateFromProps,E=C.constructClassInstance,I=C.mountClassInstance,O=C.resumeMountClassInstance,P=C.updateClassInstance;function R(e,t,n){A(e,t,n,t.expirationTime)}function A(e,t,n,r){t.child=null===e?es(t,null,n,r):Za(t,e.child,n,r)}function N(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=Pr)}function M(e,t,n,r,o,i){if(N(e,t),!n&&!o)return r&&_(t,!1),j(e,t);var a=t.type,s=t.stateNode;Wt.current=t;var u=void 0;return!o||qi&&"function"==typeof a.getDerivedStateFromCatch?(ln.setCurrentPhase("render"),u=s.render(),(ji||Di&&t.mode&ri)&&s.render(),ln.setCurrentPhase(null)):u=null,t.effectTag|=xr,o&&(A(e,t,null,i),t.child=null),A(e,t,u,i),F(t,s.state),D(t,s.props),r&&_(t,!0),t.child}function L(e){var t=e.stateNode;t.pendingContext?b(e,t.pendingContext,t.pendingContext!==t.context):t.context&&b(e,t.context,!1),p(e,t.containerInfo)}function q(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var i=void 0;switch(o.tag){case ue:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(var s=o;null!==s;){var u=s.alternate;if(s.expirationTime===Qo||s.expirationTime>r)s.expirationTime=r,null!==u&&(u.expirationTime===Qo||u.expirationTime>r)&&(u.expirationTime=r);else{if(null===u||!(u.expirationTime===Qo||u.expirationTime>r))break;u.expirationTime=r}s=s.return}i=null}else i=o.child;break;case le:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}var l=i.sibling;if(null!==l){i=l;break}i=i.return}o=i}}function j(e,t){return pa(t),function(e,t){if(null!==e&&t.child!==e.child&&r(!1,"Resuming work not yet implemented."),null!==t.child){var n=t.child,o=ci(n,n.pendingProps,n.expirationTime);for(t.child=o,o.return=t;null!==n.sibling;)n=n.sibling,(o=o.sibling=ci(n,n.pendingProps,n.expirationTime)).return=t;o.sibling=null}}(e,t),t.child}function D(e,t){e.memoizedProps=t}function F(e,t){e.memoizedState=t}return{beginWork:function(e,t,n){if(t.expirationTime===Qo||t.expirationTime>n)return function(e,t){switch(pa(t),t.tag){case Z:L(t);break;case X:g(t);break;case ee:p(t,t.stateNode.containerInfo);break;case le:h(t)}return null}(0,t);switch(t.tag){case J:return function(e,t,n){null!==e&&r(!1,"An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");var i,s=t.type,u=t.pendingProps,l=m(t),c=y(t,l);if(s.prototype&&"function"==typeof s.prototype.render){var f=on(t)||"Unknown";ts[f]||(o(!1,"The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",f,f),ts[f]=!0)}if(Wt.current=t,i=s(u,c),t.effectTag|=xr,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){var d=t.type;if(t.tag=X,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,"function"==typeof d.getDerivedStateFromProps){var p=T(t,i,u,t.memoizedState);null!==p&&void 0!==p&&(t.memoizedState=a({},t.memoizedState,p))}var h=g(t);return S(t,i),I(t,n),M(e,t,!0,h,!1,n)}t.tag=G;var v=t.type;if(v&&o(!v.childContextTypes,"%s(...): childContextTypes cannot be defined on a functional component.",v.displayName||v.name||"Component"),null!==t.ref){var b="",_=ln.getCurrentFiberOwnerName();_&&(b+="\n\nCheck the render method of `"+_+"`.");var w=_||t._debugID||"",x=t._debugSource;x&&(w=x.fileName+":"+x.lineNumber),rs[w]||(rs[w]=!0,o(!1,"Stateless function components cannot be given refs. Attempts to access this ref will fail.%s%s",b,ln.getCurrentFiberStackAddendum()))}if("function"==typeof s.getDerivedStateFromProps){var k=on(t)||"Unknown";ns[k]||(o(!1,"%s: Stateless functional components do not support getDerivedStateFromProps.",k),ns[k]=!0)}return R(e,t,i),D(t,u),t.child}(e,t,n);case G:return function(e,t){var n=t.type,r=t.pendingProps;if(v());else if(t.memoizedProps===r)return j(e,t);var o,i=m(t),a=y(t,i);return Wt.current=t,ln.setCurrentPhase("render"),o=n(r,a),ln.setCurrentPhase(null),t.effectTag|=xr,R(e,t,o),D(t,r),t.child}(e,t);case X:return function(e,t,n){var r=g(t),o=void 0;null===e?null===t.stateNode?(E(t,t.pendingProps),I(t,n),o=!0):o=O(t,n):o=P(e,t,n);var i=!1,a=t.updateQueue;return null!==a&&null!==a.capturedValues&&(o=!0,i=!0),M(e,t,o,r,i,n)}(e,t,n);case Z:return function(e,t,n){L(t);var r=t.updateQueue;if(null!==r){var o=t.memoizedState,i=Oa(e,t,r,null,null,n);F(t,i);var a=void 0;if(null!==(r=t.updateQueue)&&null!==r.capturedValues)a=null;else{if(o===i)return x(),j(e,t);a=i.element}var s=t.stateNode;return(null===e||null===e.child)&&s.hydrate&&w(t)?(t.effectTag|=kr,t.child=es(t,null,a,n)):(x(),R(e,t,a)),F(t,i),t.child}return x(),j(e,t)}(e,t,n);case te:return function(e,t,n){d(t),null===e&&k(t);var r=t.type,o=t.memoizedProps,i=t.pendingProps,a=null!==e?e.memoizedProps:null;if(v());else if(o===i){var s=t.mode&ni&&f(r,i);if(s&&(t.expirationTime=Yo),!s||n!==Yo)return j(e,t)}var u=i.children;return c(r,i)?u=null:a&&c(r,a)&&(t.effectTag|=Er),N(e,t),n!==Yo&&t.mode&ni&&f(r,i)?(t.expirationTime=Yo,t.memoizedProps=i,null):(R(e,t,u),D(t,i),t.child)}(e,t,n);case ne:return function(e,t){return null===e&&k(t),D(t,t.pendingProps),null}(e,t);case oe:t.tag=re;case re:return function(e,t,n){var r=t.pendingProps;v()||t.memoizedProps===r&&(r=t.memoizedProps);var o=r.children;return t.stateNode=null===e?es(t,t.stateNode,o,n):Za(t,e.stateNode,o,n),D(t,r),t.stateNode}(e,t,n);case ie:return null;case ee:return function(e,t,n){p(t,t.stateNode.containerInfo);var r=t.pendingProps;if(v());else if(t.memoizedProps===r)return j(e,t);return null===e?(t.child=Za(t,null,r,n),D(t,r)):(R(e,t,r),D(t,r)),t.child}(e,t,n);case ce:return function(e,t){var n=(0,t.type.render)(t.pendingProps,t.ref);return R(e,t,n),D(t,n),t.child}(e,t);case ae:return function(e,t){var n=t.pendingProps;if(v());else if(t.memoizedProps===n)return j(e,t);return R(e,t,n),D(t,n),t.child}(e,t);case se:return function(e,t){var n=t.pendingProps.children;if(v());else if(null===n||t.memoizedProps===n)return j(e,t);return R(e,t,n),D(t,n),t.child}(e,t);case le:return function(e,t,n){var r=t.type._context,i=t.pendingProps,a=t.memoizedProps;if(v());else if(a===i)return t.stateNode=0,h(t),j(e,t);var s=i.value;t.memoizedProps=i;var u=void 0;if(null===a)u=Ko;else if(a.value===i.value){if(a.children===i.children)return t.stateNode=0,h(t),j(e,t);u=0}else{var l=a.value;if(l===s&&(0!==l||1/l==1/s)||l!=l&&s!=s){if(a.children===i.children)return t.stateNode=0,h(t),j(e,t);u=0}else if(u="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,s):Ko,o((u&Ko)===u,"calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s",u),0==(u|=0)){if(a.children===i.children)return t.stateNode=0,h(t),j(e,t)}else q(t,r,u,n)}return t.stateNode=u,h(t),R(e,t,i.children),t.child}(e,t,n);case ue:return function(e,t,n){var r=t.type,i=t.pendingProps,a=t.memoizedProps,s=r._currentValue,u=r._changedBits;if(v());else if(0===u&&a===i)return j(e,t);t.memoizedProps=i;var l=i.unstable_observedBits;void 0!==l&&null!==l||(l=Ko),t.stateNode=l,0!=(u&l)&&q(t,r,u,n);var c=i.children;return o("function"==typeof c,"A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),R(e,t,c(s)),t.child}(e,t,n);default:r(!1,"Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.")}}}},is=function(e,t,n,o,i){var a=e.createInstance,s=e.createTextInstance,u=e.appendInitialChild,l=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.mutation,d=e.persistence,p=t.getRootHostContainer,h=t.popHostContext,y=t.getHostContext,m=t.popHostContainer,v=n.popContextProvider,g=n.popTopLevelContextObject,b=o.popProvider,_=i.prepareToHydrateHostInstance,w=i.prepareToHydrateHostTextInstance,x=i.popHydrationState;function k(e){e.effectTag|=Cr}function C(e){e.effectTag|=Pr}function S(e,t,n){var o=t.memoizedProps;o||r(!1,"Should be resolved by now. This error is likely caused by a bug in React. Please file an issue."),t.tag=oe;var i=[];!function(e,t){var n=t.stateNode;for(n&&(n.return=t);null!==n;){if(n.tag===te||n.tag===ne||n.tag===ee)r(!1,"A call cannot have host component children.");else if(n.tag===ie)e.push(n.pendingProps.value);else if(null!==n.child){n.child.return=n,n=n.child;continue}for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(i,t);var a=(0,o.handler)(o.props,i),s=null!==e?e.child:null;return t.child=Za(t,s,a,n),t.child}function T(e,t){for(var n=t.child;null!==n;){if(n.tag===te||n.tag===ne)u(e,n.stateNode);else if(n.tag===ee);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)return;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}var E=void 0,I=void 0,O=void 0;if(f)Mi?(E=function(e){},I=function(e,t,n,r,o,i,a,s){t.updateQueue=n,n&&k(t)},O=function(e,t,n,r){n!==r&&k(t)}):r(!1,"Mutating reconciler is disabled.");else if(d)if(Li){var P=d.cloneInstance,R=d.createContainerChildSet,A=d.appendChildToContainerChildSet,N=d.finalizeContainerChildren;E=function(e){var t=e.stateNode;if(null===e.firstEffect);else{var n=t.containerInfo,r=R(n);!function(e,t){for(var n=t.child;null!==n;){if(n.tag===te||n.tag===ne)A(e,n.stateNode);else if(n.tag===ee);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)return;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(r,e),t.pendingChildren=r,k(e),N(n,r)}},I=function(e,t,n,r,o,i,a,s){var u=null===t.firstEffect,c=e.stateNode;if(u&&null===n)t.stateNode=c;else{var f=t.stateNode,d=P(c,n,r,o,i,t,u,f);l(d,r,i,a,s)&&k(t),t.stateNode=d,u?k(t):T(d,t)}},O=function(e,t,n,r){if(n!==r){var o=p(),i=y();t.stateNode=s(r,o,i,t),k(t)}}}else r(!1,"Persistent reconciler is disabled.");else r(!1,"Noop reconciler is disabled.");return{completeWork:function(e,t,n){var o=t.pendingProps;switch(t.tag){case G:return null;case X:v(t);var i=t.stateNode,u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(t.effectTag&=~Or,"function"==typeof i.componentDidCatch?t.effectTag|=Rr:u.capturedValues=null),null;case Z:m(t),g(t);var f=t.stateNode;f.pendingContext&&(f.context=f.pendingContext,f.pendingContext=null),null!==e&&null!==e.child||(x(t),t.effectTag&=~kr),E(t);var d=t.updateQueue;return null!==d&&null!==d.capturedValues&&(t.effectTag|=Rr),null;case te:h(t);var P=p(),R=t.type;if(null!==e&&null!=t.stateNode){var A=e.memoizedProps,N=t.stateNode,M=y(),L=c(N,R,A,o,P,M);I(e,t,L,R,A,o,P,M),e.ref!==t.ref&&C(t)}else{if(!o)return null===t.stateNode&&r(!1,"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."),null;var q=y();if(x(t))_(t,P,q)&&k(t);else{var j=a(R,o,P,q,t);T(j,t),l(j,R,o,P,q)&&k(t),t.stateNode=j}null!==t.ref&&C(t)}return null;case ne:var D=o;if(e&&null!=t.stateNode){var F=e.memoizedProps;O(e,t,F,D)}else{if("string"!=typeof D)return null===t.stateNode&&r(!1,"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."),null;var U=p(),W=y();x(t)?w(t)&&k(t):t.stateNode=s(D,U,W,t)}return null;case re:return S(e,t,n);case oe:return t.tag=re,null;case ie:case ce:case ae:case se:return null;case ee:return m(t),E(t),null;case le:return b(t),null;case ue:return null;case J:r(!1,"An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");default:r(!1,"Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.")}}}};function as(e,t){return{value:e,source:t,stack:sn(t)}}var ss=g.invokeGuardedCallback,us=g.hasCaughtError,ls=g.clearCaughtError,cs=null;function fs(e,t){var n=t.source,r=t.stack;null===r&&(r=sn(n));var o={componentName:null!==n?on(n):null,componentStack:null!==r?r:"",error:t.value,errorBoundary:null,errorBoundaryName:null,errorBoundaryFound:!1,willRetry:!1};null!==e&&e.tag===X&&(o.errorBoundary=e.stateNode,o.errorBoundaryName=on(e),o.errorBoundaryFound=!0,o.willRetry=!0);try{!function(e){var t=e.error;if(!t||!t.suppressReactErrorLogging){var n=e.componentName,r=e.componentStack,o=e.errorBoundaryName,i=e.errorBoundaryFound,a=e.willRetry,s=(n?"The above error occurred in the <"+n+"> component:":"The above error occurred in one of your React components:")+r+"\n\n"+(i&&o?a?"React will try to recreate this component tree from scratch using the error boundary you provided, "+o+".":"This error was initially handled by the error boundary "+o+".\nRecreating the tree from scratch failed so React will unmount the tree.":"Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.");console.error(s)}}(o)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}cs=new Set;var ds=function(e,t,n,i,a,s){var u=e.getPublicInstance,l=e.mutation,c=e.persistence,f=function(e,t){ma(e,"componentWillUnmount"),t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount(),va()};function d(e){var n=e.ref;if(null!==n)if("function"==typeof n){if(ss(null,n,null,null),us()){var r=ls();t(e,r)}}else n.current=null}function p(e,t){switch(t.tag){case X:if(t.effectTag&Ar&&null!==e){var n=e.memoizedProps,i=e.memoizedState;ma(t,"getSnapshotBeforeUpdate");var a=t.stateNode;a.props=t.memoizedProps,a.state=t.memoizedState;var s=a.getSnapshotBeforeUpdate(n,i),u=cs;void 0!==s||u.has(t.type)||(u.add(t.type),o(!1,"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",on(t))),a.__reactInternalSnapshotBeforeUpdate=s,va()}return;case Z:case te:case ne:case ee:return;default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}}function h(e,t,n,o,i){switch(n.tag){case X:var a=n.stateNode;if(n.effectTag&Cr)if(null===t)ma(n,"componentDidMount"),a.props=n.memoizedProps,a.state=n.memoizedState,a.componentDidMount(),va();else{var s=t.memoizedProps,l=t.memoizedState;ma(n,"componentDidUpdate"),a.props=n.memoizedProps,a.state=n.memoizedState,a.componentDidUpdate(s,l,a.__reactInternalSnapshotBeforeUpdate),va()}var c=n.updateQueue;return void(null!==c&&Pa(c,a));case Z:var f=n.updateQueue;if(null!==f){var d=null;if(null!==n.child)switch(n.child.tag){case te:d=u(n.child.stateNode);break;case X:d=n.child.stateNode}Pa(f,d)}return;case te:var p=n.stateNode;if(null===t&&n.effectTag&Cr){var h=n.type,y=n.memoizedProps;S(p,h,y,n)}return;case ne:case ee:return;default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}}function y(e,t){switch(e.tag){case X:var n=e.type,o=e.stateNode,i=e.updateQueue;(null===i||null===i.capturedValues)&&r(!1,"An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");var s=i.capturedValues;i.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&a(o),o.props=e.memoizedProps,o.state=e.memoizedState;for(var u=0;u<s.length;u++){var l=s[u],c=l.value,f=l.stack;fs(e,l),o.componentDidCatch(c,{componentStack:null!==f?f:""})}break;case Z:var d=e.updateQueue;(null===d||null===d.capturedValues)&&r(!1,"An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");var p=d.capturedValues;d.capturedValues=null;for(var h=0;h<p.length;h++){var y=p[h];fs(e,y),t(y.value)}break;default:r(!1,"This unit of work tag cannot capture errors.  This error is likely caused by a bug in React. Please file an issue.")}}function m(e){var t=e.ref;if(null!==t){var n=e.stateNode,r=void 0;switch(e.tag){case te:r=u(n);break;default:r=n}"function"==typeof t?t(r):(t.hasOwnProperty("current")||o(!1,"Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s",on(e),sn(e)),t.current=r)}}function v(e){var t=e.ref;null!==t&&("function"==typeof t?t(null):t.current=null)}function g(e){switch(ki(e),e.tag){case X:d(e);var n=e.stateNode;return void("function"==typeof n.componentWillUnmount&&function(e,n){if(ss(null,f,null,e,n),us()){var r=ls();t(e,r)}}(e,n));case te:return void d(e);case re:return void b(e.stateNode);case ee:return void(Mi&&l?q(e):Li&&c&&w(e))}}function b(e){for(var t=e;;)if(g(t),null===t.child||l&&t.tag===ee){if(t===e)return;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function _(e){e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)}var w=void 0;if(!l){var x=void 0;if(c){var k=c.replaceContainerChildren,C=c.createContainerChildSet;w=function(e){var t=e.stateNode.containerInfo,n=C(t);k(t,n)},x=function(e){switch(e.tag){case X:case te:case ne:return;case Z:case ee:var t=e.stateNode,n=t.containerInfo,o=t.pendingChildren;return void k(n,o);default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}}}else x=function(e){};if(Li)return{commitResetTextContent:function(e){},commitPlacement:function(e){},commitDeletion:function(e){b(e),_(e)},commitWork:function(e,t){x(t)},commitLifeCycles:h,commitBeforeMutationLifeCycles:p,commitErrorLogging:y,commitAttachRef:m,commitDetachRef:v};r(!1,c?"Persistent reconciler is disabled.":"Noop reconciler is disabled.")}var S=l.commitMount,T=l.commitUpdate,E=l.resetTextContent,I=l.commitTextUpdate,O=l.appendChild,P=l.appendChildToContainer,R=l.insertBefore,A=l.insertInContainerBefore,N=l.removeChild,M=l.removeChildFromContainer;function L(e){return e.tag===te||e.tag===Z||e.tag===ee}function q(e){for(var t=e,n=!1,o=void 0,i=void 0;;){if(!n){var a=t.return;e:for(;;){switch(null===a&&r(!1,"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."),a.tag){case te:o=a.stateNode,i=!1;break e;case Z:case ee:o=a.stateNode.containerInfo,i=!0;break e}a=a.return}n=!0}if(t.tag===te||t.tag===ne)b(t),i?M(o,t.stateNode):N(o,t.stateNode);else if(t.tag===ee){if(o=t.stateNode.containerInfo,null!==t.child){t.child.return=t,t=t.child;continue}}else if(g(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)return;for(;null===t.sibling;){if(null===t.return||t.return===e)return;(t=t.return).tag===ee&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}if(Mi)return{commitBeforeMutationLifeCycles:p,commitResetTextContent:function(e){E(e.stateNode)},commitPlacement:function(e){var t=function(e){for(var t=e.return;null!==t;){if(L(t))return t;t=t.return}r(!1,"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.")}(e),n=void 0,o=void 0;switch(t.tag){case te:n=t.stateNode,o=!1;break;case Z:case ee:n=t.stateNode.containerInfo,o=!0;break;default:r(!1,"Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}t.effectTag&Er&&(E(n),t.effectTag&=~Er);for(var i=function(e){var t=e;e:for(;;){for(;null===t.sibling;){if(null===t.return||L(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==te&&t.tag!==ne;){if(t.effectTag&kr)continue e;if(null===t.child||t.tag===ee)continue e;t.child.return=t,t=t.child}if(!(t.effectTag&kr))return t.stateNode}}(e),a=e;;){if(a.tag===te||a.tag===ne)i?o?A(n,a.stateNode,i):R(n,a.stateNode,i):o?P(n,a.stateNode):O(n,a.stateNode);else if(a.tag===ee);else if(null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)return;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}},commitDeletion:function(e){q(e),_(e)},commitWork:function(e,t){switch(t.tag){case X:return;case te:var n=t.stateNode;if(null!=n){var o=t.memoizedProps,i=null!==e?e.memoizedProps:o,a=t.type,s=t.updateQueue;t.updateQueue=null,null!==s&&T(n,s,a,i,o,t)}return;case ne:null===t.stateNode&&r(!1,"This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");var u=t.stateNode,l=t.memoizedProps,c=null!==e?e.memoizedProps:l;return void I(u,c,l);case Z:return;default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}},commitLifeCycles:h,commitErrorLogging:y,commitAttachRef:m,commitDetachRef:v};r(!1,"Mutating reconciler is disabled.")},ps={},hs=function(e){var t=e.shouldSetTextContent,n=e.hydration;if(!n)return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){r(!1,"Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.")},prepareToHydrateHostTextInstance:function(){r(!1,"Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.")},popHydrationState:function(e){return!1}};var o=n.canHydrateInstance,i=n.canHydrateTextInstance,a=n.getNextHydratableSibling,s=n.getFirstHydratableChild,u=n.hydrateInstance,l=n.hydrateTextInstance,c=n.didNotMatchHydratedContainerTextInstance,f=n.didNotMatchHydratedTextInstance,d=n.didNotHydrateContainerInstance,p=n.didNotHydrateInstance,h=n.didNotFindHydratableContainerInstance,y=n.didNotFindHydratableContainerTextInstance,m=n.didNotFindHydratableInstance,v=n.didNotFindHydratableTextInstance,g=null,b=null,_=!1;function w(e,t){switch(e.tag){case Z:d(e.stateNode.containerInfo,t);break;case te:p(e.type,e.memoizedProps,e.stateNode,t)}var n,r=((n=li(te,null,null,ti)).type="DELETED",n);r.stateNode=t,r.return=e,r.effectTag=Tr,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function x(e,t){switch(t.effectTag|=kr,e.tag){case Z:var n=e.stateNode.containerInfo;switch(t.tag){case te:var r=t.type,o=t.pendingProps;h(n,r,o);break;case ne:var i=t.pendingProps;y(n,i)}break;case te:var a=e.type,s=e.memoizedProps,u=e.stateNode;switch(t.tag){case te:var l=t.type,c=t.pendingProps;m(a,s,u,l,c);break;case ne:var f=t.pendingProps;v(a,s,u,f)}break;default:return}}function k(e,t){switch(e.tag){case te:var n=e.type,r=e.pendingProps,a=o(t,n,r);return null!==a&&(e.stateNode=a,!0);case ne:var s=e.pendingProps,u=i(t,s);return null!==u&&(e.stateNode=u,!0);default:return!1}}function C(e){for(var t=e.return;null!==t&&t.tag!==te&&t.tag!==Z;)t=t.return;g=t}return{enterHydrationState:function(e){var t=e.stateNode.containerInfo;return b=s(t),g=e,_=!0,!0},resetHydrationState:function(){g=null,b=null,_=!1},tryToClaimNextHydratableInstance:function(e){if(_){var t=b;if(!t)return x(g,e),_=!1,void(g=e);if(!k(e,t)){if(!(t=a(t))||!k(e,t))return x(g,e),_=!1,void(g=e);w(g,b)}g=e,b=s(t)}},prepareToHydrateHostInstance:function(e,t,n){var r=e.stateNode,o=u(r,e.type,e.memoizedProps,t,n,e);return e.updateQueue=o,null!==o},prepareToHydrateHostTextInstance:function(e){var t=e.stateNode,n=e.memoizedProps,r=l(t,n,e);if(r){var o=g;if(null!==o)switch(o.tag){case Z:var i=o.stateNode.containerInfo;c(i,t,n);break;case te:var a=o.type,s=o.memoizedProps,u=o.stateNode;f(a,s,u,t,n)}}return r},popHydrationState:function(e){if(e!==g)return!1;if(!_)return C(e),_=!0,!1;var n=e.type;if(e.tag!==te||"head"!==n&&"body"!==n&&!t(n,e.memoizedProps))for(var r=b;r;)w(e,r),r=a(r);return C(e),b=g?a(e.stateNode):null,!0}}},ys={debugTool:null},ms=void 0;ms={};var vs=g.invokeGuardedCallback,gs=g.hasCaughtError,bs=g.clearCaughtError,_s=void 0,ws=void 0,xs=void 0,ks=void 0;_s=!1,ws=!1;var Cs={};xs=function(e){var t=on(e)||"ReactClass";Cs[t]||(o(!1,"Can't call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.%s",sn(e)),Cs[t]=!0)},ks=function(e){switch(ln.phase){case"getChildContext":if(ws)return;o(!1,"setState(...): Cannot call setState() inside getChildContext()"),ws=!0;break;case"render":if(_s)return;o(!1,"Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`."),_s=!0}};var Ss=function(e){var t=function(){var e=[],t=void 0;t=[];var n=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===n},pop:function(r,i){n<0?o(!1,"Unexpected pop."):(i!==t[n]&&o(!1,"Unexpected Fiber popped."),r.current=e[n],e[n]=null,t[n]=null,n--)},push:function(r,o,i){e[++n]=r.current,t[n]=i,r.current=o},checkThatStackIsEmpty:function(){-1!==n&&o(!1,"Expected an empty stack. Something was not reset properly.")},resetStackAfterFatalErrorInDev:function(){n=-1,e.length=0,t.length=0}}}(),n=function(e,t){var n=e.getChildHostContext,o=e.getRootHostContext,i=t.createCursor,a=t.push,s=t.pop,u=i(ps),l=i(ps),c=i(ps);function f(e){return e===ps&&r(!1,"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."),e}return{getHostContext:function(){return f(u.current)},getRootHostContainer:function(){return f(c.current)},popHostContainer:function(e){s(u,e),s(l,e),s(c,e)},popHostContext:function(e){l.current===e&&(s(u,e),s(l,e))},pushHostContainer:function(e,t){a(c,t,e),a(l,e,e),a(u,ps,e);var n=o(t);s(u,e),a(u,n,e)},pushHostContext:function(e){var t=f(c.current),r=f(u.current),o=n(r,e.type,t);r!==o&&(a(l,e,e),a(u,o,e))}}}(e,t),i=function(e){var t=e.createCursor,n=e.push,i=e.pop,s=t(d),l=t(!1),c=d;function f(e,t,n){var r=e.stateNode;r.__reactInternalMemoizedUnmaskedChildContext=t,r.__reactInternalMemoizedMaskedChildContext=n}function p(e){return e.tag===X&&null!=e.type.childContextTypes}function h(e,t){var n,i=e.stateNode,s=e.type.childContextTypes;if("function"!=typeof i.getChildContext){var l=on(e)||"Unknown";return ms[l]||(ms[l]=!0,o(!1,"%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",l,l)),t}for(var c in ln.setCurrentPhase("getChildContext"),ma(e,"getChildContext"),n=i.getChildContext(),va(),ln.setCurrentPhase(null),n)c in s||r(!1,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',on(e)||"Unknown",c);var f=on(e)||"Unknown";return u(s,n,"child context",f,ln.getCurrentFiberStackAddendum),a({},t,n)}return{getUnmaskedContext:function(e){return p(e)?c:s.current},cacheContext:f,getMaskedContext:function(e,t){var n=e.type.contextTypes;if(!n)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={};for(var i in n)o[i]=t[i];var a=on(e)||"Unknown";return u(n,o,"context",a,ln.getCurrentFiberStackAddendum),r&&f(e,t,o),o},hasContextChanged:function(){return l.current},isContextConsumer:function(e){return e.tag===X&&null!=e.type.contextTypes},isContextProvider:p,popContextProvider:function(e){p(e)&&(i(l,e),i(s,e))},popTopLevelContextObject:function(e){i(l,e),i(s,e)},pushTopLevelContextObject:function(e,t,o){null!=s.cursor&&r(!1,"Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."),n(s,t,e),n(l,o,e)},processChildContext:h,pushContextProvider:function(e){if(!p(e))return!1;var t=e.stateNode,r=t&&t.__reactInternalMemoizedMergedChildContext||d;return c=s.current,n(s,r,e),n(l,l.current,e),!0},invalidateContextProvider:function(e,t){var o=e.stateNode;if(o||r(!1,"Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."),t){var a=h(e,c);o.__reactInternalMemoizedMergedChildContext=a,i(l,e),i(s,e),n(s,a,e),n(l,t,e)}else i(l,e),n(l,t,e)},findCurrentUnmaskedContext:function(e){Ur(e)&&e.tag===X||r(!1,"Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");for(var t=e;t.tag!==Z;){if(p(t))return t.stateNode.__reactInternalMemoizedMergedChildContext;var n=t.return;n||r(!1,"Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."),t=n}return t.stateNode.context}}}(t),s=function(e){var t=e.createCursor,n=e.push,r=e.pop,i=t(null),a=t(null),s=t(0),u=void 0;return u={},{pushProvider:function(e){var t=e.type._context;n(s,t._changedBits,e),n(a,t._currentValue,e),n(i,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode,o(null===t._currentRenderer||t._currentRenderer===u,"Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),t._currentRenderer=u},popProvider:function(e){var t=s.current,n=a.current;r(i,e),r(a,e),r(s,e);var o=e.type._context;o._currentValue=n,o._changedBits=t}}}(t),l=n.popHostContext,c=n.popHostContainer,f=i.popTopLevelContextObject,p=i.popContextProvider,h=s.popProvider,y=hs(e),m=os(e,n,i,s,y,we,_e).beginWork,v=is(e,n,i,s,y).completeWork,g=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,s=t.popContextProvider,u=t.popTopLevelContextObject,l=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=Mr,t.firstEffect=t.lastEffect=null;var r=as(n,t),i=e;do{switch(i.tag){case Z:var a=r;return Ta(i),i.updateQueue.capturedValues=[a],void(i.effectTag|=Lr);case X:var s=i.type,u=i.stateNode;if((i.effectTag&Or)===wr&&("function"==typeof s.getDerivedStateFromCatch&&qi||null!==u&&"function"==typeof u.componentDidCatch&&!o(u))){Ta(i);var l=i.updateQueue,c=l.capturedValues;return null===c?l.capturedValues=[r]:c.push(r),void(i.effectTag|=Lr)}}i=i.return}while(null!==i)},unwindWork:function(e){switch(e.tag){case X:s(e);var t=e.effectTag;return t&Lr?(e.effectTag=t&~Lr|Or,e):null;case Z:i(e),u(e);var n=e.effectTag;return n&Lr?(e.effectTag=n&~Lr|Or,e):null;case te:return a(e),null;case ee:return i(e),null;case le:return l(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case X:s(e);break;case Z:i(e),u(e);break;case te:a(e);break;case ee:i(e);break;case le:l(e)}}}}(n,i,s,0,ce),b=g.throwException,_=g.unwindWork,w=g.unwindInterruptedWork,x=ds(e,ge,0,0,function(e){null===$?$=new Set([e]):$.add(e)}),k=x.commitBeforeMutationLifeCycles,C=x.commitResetTextContent,S=x.commitPlacement,T=x.commitDeletion,E=x.commitWork,I=x.commitLifeCycles,O=x.commitErrorLogging,P=x.commitAttachRef,R=x.commitDetachRef,A=e.now,N=e.scheduleDeferredCallback,M=e.cancelDeferredCallback,L=e.prepareForCommit,q=e.resetAfterCommit,j=A(),D=(Xo(0),j),F=0,U=Qo,W=!1,B=null,H=null,z=Qo,V=null,K=!1,Q=!1,$=null,Y=null,J=void 0,G=void 0,ne=void 0,re=void 0,oe=void 0;function ie(){if(null!==B)for(var e=B.return;null!==e;)w(e),e=e.return;Si.discardPendingWarnings(),t.checkThatStackIsEmpty(),H=null,z=Qo,B=null,Q=!1}function ae(){for(;null!==V;){ln.setCurrentFiber(V),fa();var e=V.effectTag;if(e&Er&&C(V),e&Pr){var t=V.alternate;null!==t&&R(t)}switch(e&(kr|Cr|Tr)){case kr:S(V),V.effectTag&=~kr;break;case Sr:S(V),V.effectTag&=~kr;var n=V.alternate;E(n,V);break;case Cr:var r=V.alternate;E(r,V);break;case Tr:T(V)}V=V.nextEffect}ln.resetCurrentFiber()}function se(){for(;null!==V;){if(V.effectTag&Ar){fa();var e=V.alternate;k(e,V)}V=V.nextEffect}}function ue(e,t,n){for(Si.flushPendingUnsafeLifecycleWarnings(),Ui&&Si.flushPendingDeprecationWarnings();null!==V;){var r=V.effectTag;if(r&(Cr|Ir)){fa();var o=V.alternate;I(e,o,V,t,n)}r&Rr&&O(V,Ze),r&Pr&&(fa(),P(V));var i=V.nextEffect;V.nextEffect=null,V=i}}function ce(e){return null!==$&&$.has(e)}function fe(e){W=!0,K=!0,ba();var t=e.stateNode;t.current===e&&r(!1,"Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");var n=t.pendingCommitExpirationTime;n===Qo&&r(!1,"Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue."),t.pendingCommitExpirationTime=Qo;var o=xe();Wt.current=null;var i=void 0;for(e.effectTag>xr?null!==e.lastEffect?(e.lastEffect.nextEffect=e,i=e.firstEffect):i=e:i=e.firstEffect,L(t.containerInfo),V=i,function(){if(Ni){if(!Wi)return;Yi=0,Zi("(Committing Snapshot Effects)")}}();null!==V;){var a=!1,s=void 0;vs(null,se,null),gs()&&(a=!0,s=bs()),a&&(null===V&&r(!1,"Should have next effect. This error is likely caused by a bug in React. Please file an issue."),ge(V,s),null!==V&&(V=V.nextEffect))}for(!function(){if(Ni){if(!Wi)return;var e=Yi;Yi=0,ea("(Committing Snapshot Effects: "+e+" Total)","(Committing Snapshot Effects)",null)}}(),V=i,function(){if(Ni){if(!Wi)return;Yi=0,Zi("(Committing Host Effects)")}}();null!==V;){var u=!1,l=void 0;vs(null,ae,null),gs()&&(u=!0,l=bs()),u&&(null===V&&r(!1,"Should have next effect. This error is likely caused by a bug in React. Please file an issue."),ge(V,l),null!==V&&(V=V.nextEffect))}for(!function(){if(Ni){if(!Wi)return;var e=Yi;Yi=0,ea("(Committing Host Effects: "+e+" Total)","(Committing Host Effects)",null)}}(),q(t.containerInfo),t.current=e,V=i,function(){if(Ni){if(!Wi)return;Yi=0,Zi("(Calling Lifecycle Methods)")}}();null!==V;){var c=!1,f=void 0;vs(null,ue,null,t,o,n),gs()&&(c=!0,f=bs()),c&&(null===V&&r(!1,"Should have next effect. This error is likely caused by a bug in React. Please file an issue."),ge(V,f),null!==V&&(V=V.nextEffect))}K=!1,W=!1,function(){if(Ni){if(!Wi)return;var e=Yi;Yi=0,ea("(Calling Lifecycle Methods: "+e+" Total)","(Calling Lifecycle Methods)",null)}}(),_a(),xi(e.stateNode),ys.debugTool&&ys.debugTool.onCommitWork(e);var d=t.current.expirationTime;return d===Qo&&($=null),d}function de(e,t){if(t===Yo||e.expirationTime!==Yo){for(var n=function(e){switch(e.tag){case Z:case X:var t=e.updateQueue;return null===t?Qo:t.expirationTime;default:return Qo}}(e),r=e.child;null!==r;)r.expirationTime!==Qo&&(n===Qo||n>r.expirationTime)&&(n=r.expirationTime),r=r.sibling;e.expirationTime=n}}function pe(e){for(;;){var t=e.alternate;ln.setCurrentFiber(e);var n=e.return,r=e.sibling;if((e.effectTag&Mr)===wr){var o=v(t,e,z);if(ha(e),de(e,z),ln.resetCurrentFiber(),null!==o)return ha(e),ys.debugTool&&ys.debugTool.onCompleteWork(e),o;if(null!==n&&(n.effectTag&Mr)===wr)null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),e.effectTag>xr&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e);if(ys.debugTool&&ys.debugTool.onCompleteWork(e),null!==r)return r;if(null!==n){e=n;continue}return Q=!0,null}var i=_(e);if(e.effectTag&Or?ya(e):ha(e),ln.resetCurrentFiber(),null!==i)return ha(e),ys.debugTool&&ys.debugTool.onCompleteWork(e),i.effectTag&=Nr,i;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=Mr),ys.debugTool&&ys.debugTool.onCompleteWork(e),null!==r)return r;if(null===n)return null;e=n}return null}function he(e){var t=e.alternate;!function(e){if(Ni){if(!Wi||aa(e))return;if(Bi=e,!ra(e,null))return;e._debugIsCurrentlyTiming=!0}}(e),ln.setCurrentFiber(e),Fi&&(J=mi(J,e));var n=m(t,e,z);return ln.resetCurrentFiber(),ne&&oe(),ys.debugTool&&ys.debugTool.onBeginWork(e),null===n&&(n=pe(e)),Wt.current=null,n}function ye(e){if(e)for(;null!==B&&!Xe();)B=he(B);else for(;null!==B;)B=he(B)}function me(e,n,o){W&&r(!1,"renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue."),W=!0,n===z&&e===H&&null!==B||(ie(),z=n,B=ci((H=e).current,null,z),e.pendingCommitExpirationTime=Qo);var i=!1;for(!function(e){if(Ni){if(Bi=e,!Wi)return;$i=0,Zi("(React Tree Reconciliation)"),ca()}}(B);;){try{ye(o)}catch(e){if(null===B){i=!0,Ze(e);break}if(Fi)G(B,e,o);var a=B,s=a.return;if(null===s){i=!0,Ze(e);break}b(s,a,e),B=pe(a)}break}var u=!1;return W=!1,i?(ga(Y,u),Y=null,t.resetStackAfterFatalErrorInDev(),null):null!==B?(ga(Y,u),Y=null,null):Q?(ga(Y,u=!0),Y=null,e.pendingCommitExpirationTime=n,e.current.alternate):(ga(Y,u),Y=null,void r(!1,"Expired work should have completed. This error is likely caused by a bug in React. Please file an issue."))}function ve(e,t,n,r){Ea(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:as(n,e),next:null}),we(t,r)}function ge(e,t){return function(e,t,n){W&&!K&&r(!1,"dispatch: Cannot dispatch during the render phase.");for(var o=e.return;null!==o;){switch(o.tag){case X:var i=o.type,a=o.stateNode;if("function"==typeof i.getDerivedStateFromCatch||"function"==typeof a.componentDidCatch&&!ce(a))return void ve(e,o,t,n);break;case Z:return void ve(e,o,t,n)}o=o.return}e.tag===Z&&ve(e,e,t,n)}(e,t,$o)}function be(e){return ei(e,5e3,250)}function _e(e){var t=void 0;if(U!==Qo)t=U;else if(W)t=K?$o:z;else{if(e.mode&ni)if(De)t=function(e){return ei(e,500,100)}(xe());else t=be(xe());else t=$o}return De&&(Re===Qo||t>Re)&&(Re=t),t}function we(e,t){return function(e,t,n){if(da(),!n&&e.tag===X){var o=e.stateNode;ks(o)}var i=e;for(;null!==i;){if((i.expirationTime===Qo||i.expirationTime>t)&&(i.expirationTime=t),null!==i.alternate&&(i.alternate.expirationTime===Qo||i.alternate.expirationTime>t)&&(i.alternate.expirationTime=t),null===i.return){if(i.tag!==Z)return void(n||e.tag!==X||xs(e));var a=i.stateNode;!W&&z!==Qo&&t<z&&(Y=e,ie()),W&&!K&&H===a||ze(a,t),We>Ue&&r(!1,"Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.")}i=i.return}}(e,t,!1)}function xe(){return D=A()-j,Xo(D)}function ke(e,t,n,r,o){var i=U;U=$o;try{return e(t,n,r,o)}finally{U=i}}Fi&&(J=null,ne=!1,re=null,G=function(e,t,n){switch(mi(e,J),e.tag){case Z:c(e),f(e);break;case te:l(e);break;case X:p(e);break;case ee:c(e);break;case le:h(e)}ne=!0,re=t,vs(null,ye,null,n),ne=!1,re=null,gs()?bs():B=e},oe=function(){throw re});var Ce=null,Se=null,Te=Qo,Ee=-1,Ie=!1,Oe=null,Pe=Qo,Re=Qo,Ae=!1,Ne=!1,Me=null,Le=null,qe=!1,je=!1,De=!1,Fe=null,Ue=1e3,We=0,Be=1;function He(e){if(Te!==Qo){if(e>Te)return;M(Ee)}else Ni&&Wi&&!Ji&&(Ji=!0,Zi("(Waiting for async callback...)"));var t=A()-j,n=Zo(e);Te=e,Ee=N(Ke,{timeout:n-t})}function ze(e,t){!function(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Se?(Ce=Se=e,e.nextScheduledRoot=e):(Se.nextScheduledRoot=e,(Se=e).nextScheduledRoot=Ce);else{var n=e.remainingExpirationTime;(n===Qo||t<n)&&(e.remainingExpirationTime=t)}}(e,t),Ie||(qe?je&&(Oe=e,Pe=$o,Je(e,$o,!1)):t===$o?Qe():He(t))}function Ve(){var e=Qo,t=null;if(null!==Se)for(var n=Se,o=Ce;null!==o;){var i=o.remainingExpirationTime;if(i===Qo){if((null===n||null===Se)&&r(!1,"Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue."),o===o.nextScheduledRoot){o.nextScheduledRoot=null,Ce=Se=null;break}if(o===Ce){var a=o.nextScheduledRoot;Ce=a,Se.nextScheduledRoot=a,o.nextScheduledRoot=null}else{if(o===Se){(Se=n).nextScheduledRoot=Ce,o.nextScheduledRoot=null;break}n.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=n.nextScheduledRoot}else{if((e===Qo||i<e)&&(e=i,t=o),o===Se)break;n=o,o=o.nextScheduledRoot}}null!==Oe&&Oe===t&&e===$o?We++:We=0,Oe=t,Pe=e}function Ke(e){$e(Qo,!0,e)}function Qe(){$e($o,!1,null)}function $e(e,t,n){(Le=n,Ve(),Ni&&null!==Le)&&function(e,t){Ni&&Wi&&(Ji=!1,ea("(Waiting for async callback... will force flush in "+t+" ms)","(Waiting for async callback...)",e?"React was blocked by main thread":null))}(Pe<xe(),Zo(Pe));if(t)for(;null!==Oe&&Pe!==Qo&&(e===Qo||e>=Pe)&&(!Ae||xe()>=Pe);)Je(Oe,Pe,!Ae),Ve();else for(;null!==Oe&&Pe!==Qo&&(e===Qo||e>=Pe);)Je(Oe,Pe,!1),Ve();null!==Le&&(Te=Qo,Ee=-1),Pe!==Qo&&He(Pe),Le=null,Ae=!1,Ye()}function Ye(){if(We=0,null!==Fe){var e=Fe;Fe=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(r){Ne||(Ne=!0,Me=r)}}}if(Ne){var r=Me;throw Me=null,Ne=!1,r}}function Je(e,t,n){if(Ie&&r(!1,"performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue."),Ie=!0,n){var o=e.finishedWork;null!==o?Ge(e,o,t):(e.finishedWork=null,null!==(o=me(e,t,!0))&&(Xe()?e.finishedWork=o:Ge(e,o,t)))}else{var i=e.finishedWork;null!==i?Ge(e,i,t):(e.finishedWork=null,null!==(i=me(e,t,!1))&&Ge(e,i,t))}Ie=!1}function Ge(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Fe?Fe=[r]:Fe.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=Qo);e.finishedWork=null,e.remainingExpirationTime=fe(t)}function Xe(){return null!==Le&&(!(Le.timeRemaining()>Be)&&(Ae=!0,!0))}function Ze(e){null===Oe&&r(!1,"Should be working on a root. This error is likely caused by a bug in React. Please file an issue."),Oe.remainingExpirationTime=Qo,Ne||(Ne=!0,Me=e)}return{recalculateCurrentTime:xe,computeExpirationForFiber:_e,scheduleWork:we,requestWork:ze,flushRoot:function(e,t){Ie&&r(!1,"work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method."),Oe=e,Pe=t,Je(e,t,!1),Qe(),Ye()},batchedUpdates:function(e,t){var n=qe;qe=!0;try{return e(t)}finally{(qe=n)||Ie||Qe()}},unbatchedUpdates:function(e,t){if(qe&&!je){je=!0;try{return e(t)}finally{je=!1}}return e(t)},flushSync:function(e,t){Ie&&r(!1,"flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");var n=qe;qe=!0;try{return ke(e,t)}finally{qe=n,Qe()}},flushControlled:function(e){var t=qe;qe=!0;try{ke(e)}finally{(qe=t)||Ie||$e($o,!1,null)}},deferredUpdates:function(e){var t=U,n=xe();U=be(n);try{return e()}finally{U=t}},syncUpdates:ke,interactiveUpdates:function(e,t,n){if(De)return e(t,n);qe||Ie||Re===Qo||($e(Re,!1,null),Re=Qo);var r=De,o=qe;De=!0,qe=!0;try{return e(t,n)}finally{De=r,(qe=o)||Ie||Qe()}},flushInteractiveUpdates:function(){Ie||Re===Qo||($e(Re,!1,null),Re=Qo)},computeUniqueAsyncExpiration:function(){var e=be(xe());return e<=F&&(e=F+1),F=e},legacyContext:i}},Ts=void 0;Ts=!1;var Es=function(e){var t=e.getPublicInstance,n=Ss(e),r=n.computeUniqueAsyncExpiration,i=n.recalculateCurrentTime,s=n.computeExpirationForFiber,u=n.scheduleWork,l=n.requestWork,c=n.flushRoot,f=n.batchedUpdates,p=n.unbatchedUpdates,h=n.flushSync,y=n.flushControlled,m=n.deferredUpdates,v=n.syncUpdates,g=n.interactiveUpdates,b=n.flushInteractiveUpdates,_=n.legacyContext,w=_.findCurrentUnmaskedContext,x=_.isContextProvider,k=_.processChildContext;function C(e,t,n,r,i,a){var s=t.current;ys.debugTool&&(null===s.alternate?ys.debugTool.onMountContainer(t):null===e?ys.debugTool.onUnmountContainer(t):ys.debugTool.onUpdateContainer(t));var l=function(e){if(!e)return d;var t=_r(e),n=w(t);return x(t)?k(t,n):n}(n);return null===t.context?t.context=l:t.pendingContext=l,function(e,t,n,r,i){return"render"!==ln.phase||null===ln.current||Ts||(Ts=!0,o(!1,"Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",on(ln.current)||"Unknown")),o(null===(i=void 0===i?null:i)||"function"==typeof i,"render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",i),Ea(e,{expirationTime:r,partialState:{element:t},callback:i,isReplace:!1,isForced:!1,capturedValue:null,next:null}),u(e,r),r}(s,e,0,i,a)}function S(e){var t=function(e){var t=Hr(e);if(!t)return null;for(var n=t;;){if(n.tag===te||n.tag===ne)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}(e);return null===t?null:t.stateNode}return{createContainer:function(e,t,n){return vi(e,t,n)},updateContainer:function(e,t,n,r){var o=t.current;i();return C(e,t,n,0,s(o),r)},updateContainerAtExpirationTime:function(e,t,n,r,o){i();return C(e,t,n,0,r,o)},flushRoot:c,requestWork:l,computeUniqueAsyncExpiration:r,batchedUpdates:f,unbatchedUpdates:p,deferredUpdates:m,syncUpdates:v,interactiveUpdates:g,flushInteractiveUpdates:b,flushControlled:y,flushSync:h,getPublicRootInstance:function(e){var n=e.current;if(!n.child)return null;switch(n.child.tag){case te:return t(n.child.stateNode);default:return n.child.stateNode}},findHostInstance:S,findHostInstanceWithNoPortals:function(e){var t=function(e){var t=Hr(e);if(!t)return null;for(var n=t;;){if(n.tag===te||n.tag===ne)return n;if(n.child&&n.tag!==ee)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}(e);return null===t?null:t.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return o(!1,"The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools"),!0;try{var n=t.inject(e);gi=wi(function(e){return t.onCommitFiberRoot(n,e)}),bi=wi(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){o(!1,"React DevTools encountered an error: %s.",e)}return!0}(a({},e,{findHostInstanceByFiber:function(e){return S(e)},findFiberByHostInstance:function(e){return t?t(e):null}}))}}},Is=Object.freeze({default:Es}),Os=Is&&Es||Is,Ps=Os.default?Os.default:Os;i.canUseDOM&&"function"!=typeof requestAnimationFrame&&o(!1,"React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");var Rs="object"==typeof performance&&"function"==typeof performance.now,As=void 0;As=Rs?function(){return performance.now()}:function(){return Date.now()};var Ns=void 0,Ms=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Ls=null,qs=!1,js=-1,Ds=!1,Fs=0,Us=33,Ws=33,Bs=void 0;Bs=Rs?{didTimeout:!1,timeRemaining:function(){var e=Fs-performance.now();return e>0?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Fs-Date.now();return e>0?e:0}};var Hs="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Hs){qs=!1;var t=As();if(Fs-t<=0){if(!(-1!==js&&js<=t))return void(Ds||(Ds=!0,requestAnimationFrame(zs)));Bs.didTimeout=!0}else Bs.didTimeout=!1;js=-1;var n=Ls;Ls=null,null!==n&&n(Bs)}},!1);var zs=function(e){Ds=!1;var t=e-Fs+Ws;t<Ws&&Us<Ws?(t<8&&(t=8),Ws=t<Us?Us:t):Us=t,Fs=e+Ws,qs||(qs=!0,window.postMessage(Hs,"*"))};Ns=function(e,t){return Ls=e,null!=t&&"number"==typeof t.timeout&&(js=As()+t.timeout),Ds||(Ds=!0,requestAnimationFrame(zs)),0},Ms=function(){Ls=null,qs=!1,js=-1}}else Ns=window.requestIdleCallback,Ms=window.cancelIdleCallback;else Ns=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Ms=function(e){clearTimeout(e)};var Vs=!1;function Ks(e,t){null==t.selected||Vs||(o(!1,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),Vs=!0)}function Qs(e,n){var r=a({children:void 0},n),o=function(e){var n="";return t.Children.forEach(e,function(e){null!=e&&("string"!=typeof e&&"number"!=typeof e||(n+=e))}),n}(n.children);return o&&(r.children=o),r}var $s=ln.getCurrentFiberOwnerName,Ys=ln.getCurrentFiberStackAddendum,Js=void 0;function Gs(){var e=$s();return e?"\n\nCheck the render method of `"+e+"`.":""}Js=!1;var Xs=["value","defaultValue"];function Zs(e,t,n,r){var o=e.options;if(t){for(var i=n,a={},s=0;s<i.length;s++)a["$"+i[s]]=!0;for(var u=0;u<o.length;u++){var l=a.hasOwnProperty("$"+o[u].value);o[u].selected!==l&&(o[u].selected=l),l&&r&&(o[u].defaultSelected=!0)}}else{for(var c=""+n,f=null,d=0;d<o.length;d++){if(o[d].value===c)return o[d].selected=!0,void(r&&(o[d].defaultSelected=!0));null!==f||o[d].disabled||(f=o[d])}null!==f&&(f.selected=!0)}}function eu(e,t){return a({},t,{value:void 0})}function tu(e,t){var n=e;!function(e){Mn.checkPropTypes("select",e,Ys);for(var t=0;t<Xs.length;t++){var n=Xs[t];if(null!=e[n]){var r=Array.isArray(e[n]);e.multiple&&!r?o(!1,"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",n,Gs()):!e.multiple&&r&&o(!1,"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",n,Gs())}}}(t);var r=t.value;n._wrapperState={initialValue:null!=r?r:t.defaultValue,wasMultiple:!!t.multiple},void 0===t.value||void 0===t.defaultValue||Js||(o(!1,"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components"),Js=!0)}var nu=ln.getCurrentFiberStackAddendum,ru=!1;function ou(e,t){var n=e;return null!=t.dangerouslySetInnerHTML&&r(!1,"`dangerouslySetInnerHTML` does not make sense on <textarea>."),a({},t,{value:void 0,defaultValue:void 0,children:""+n._wrapperState.initialValue})}function iu(e,t){var n=e;Mn.checkPropTypes("textarea",t,nu),void 0===t.value||void 0===t.defaultValue||ru||(o(!1,"Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components"),ru=!0);var i=t.value;if(null==i){var a=t.defaultValue,s=t.children;null!=s&&(o(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."),null!=a&&r(!1,"If you supply `defaultValue` on a <textarea>, do not pass children."),Array.isArray(s)&&(s.length<=1||r(!1,"<textarea> can only have at most one child."),s=s[0]),a=""+s),null==a&&(a=""),i=a}n._wrapperState={initialValue:""+i}}function au(e,t){var n=e,r=t.value;if(null!=r){var o=""+r;o!==n.value&&(n.value=o),null==t.defaultValue&&(n.defaultValue=o)}null!=t.defaultValue&&(n.defaultValue=t.defaultValue)}function su(e,t){var n=e,r=n.textContent;r===n._wrapperState.initialValue&&(n.value=r)}var uu="http://www.w3.org/1999/xhtml",lu="http://www.w3.org/1998/Math/MathML",cu="http://www.w3.org/2000/svg",fu={html:uu,mathml:lu,svg:cu};function du(e){switch(e){case"svg":return cu;case"math":return lu;default:return uu}}function pu(e,t){return null==e||e===uu?du(t):e===cu&&"foreignObject"===t?uu:e}var hu,yu=void 0,mu=(hu=function(e,t){if(e.namespaceURI!==fu.svg||"innerHTML"in e)e.innerHTML=t;else{(yu=yu||document.createElement("div")).innerHTML="<svg>"+t+"</svg>";for(var n=yu.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return hu(e,t,n,r)})}:hu),vu=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===Pt)return void(n.nodeValue=t)}e.textContent=t},gu={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var bu=["Webkit","ms","Moz","O"];function _u(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||gu.hasOwnProperty(e)&&gu[e]?(""+t).trim():t+"px"}Object.keys(gu).forEach(function(e){bu.forEach(function(t){gu[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=gu[e]})});var wu=/^(?:webkit|moz|o)[A-Z]/,xu=/;\s*$/,ku={},Cu={},Su=!1,Tu=!1,Eu=function(e,t,n){e.indexOf("-")>-1?function(e,t){ku.hasOwnProperty(e)&&ku[e]||(ku[e]=!0,o(!1,"Unsupported style property %s. Did you mean %s?%s",e,h(e),t()))}(e,n):wu.test(e)?function(e,t){ku.hasOwnProperty(e)&&ku[e]||(ku[e]=!0,o(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?%s",e,e.charAt(0).toUpperCase()+e.slice(1),t()))}(e,n):xu.test(t)&&function(e,t,n){Cu.hasOwnProperty(t)&&Cu[t]||(Cu[t]=!0,o(!1,'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.%s',e,t.replace(xu,""),n()))}(e,t,n),"number"==typeof t&&(isNaN(t)?function(e,t,n){Su||(Su=!0,o(!1,"`NaN` is an invalid value for the `%s` css style property.%s",e,n()))}(e,0,n):isFinite(t)||function(e,t,n){Tu||(Tu=!0,o(!1,"`Infinity` is an invalid value for the `%s` css style property.%s",e,n()))}(e,0,n))};function Iu(e){var t="",n="";for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];if(null!=o){var i=0===r.indexOf("--");t+=n+p(r)+":",t+=_u(r,o,i),n=";"}}return t||null}function Ou(e,t,n){var r=e.style;for(var o in t)if(t.hasOwnProperty(o)){var i=0===o.indexOf("--");i||Eu(o,t[o],n);var a=_u(o,t[o],i);"float"===o&&(o="cssFloat"),i?r.setProperty(o,a):r[o]=a}}var Pu=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),Ru="__html";function Au(e,t,n){t&&(Pu[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&r(!1,"%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&r(!1,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."),"object"==typeof t.dangerouslySetInnerHTML&&Ru in t.dangerouslySetInnerHTML||r(!1,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.")),o(t.suppressContentEditableWarning||!t.contentEditable||null==t.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.%s",n()),null!=t.style&&"object"!=typeof t.style&&r(!1,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",n()))}function Nu(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Mu={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",download:"download",draggable:"draggable",enctype:"encType",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},Lu={"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},qu={},ju=new RegExp("^(aria)-["+vn+"]*$"),Du=new RegExp("^(aria)[A-Z]["+vn+"]*$"),Fu=Object.prototype.hasOwnProperty;function Uu(){var e=Bt.getStackAddendum();return null!=e?e:""}function Wu(e,t){if(Fu.call(qu,t)&&qu[t])return!0;if(Du.test(t)){var n="aria-"+t.slice(4).toLowerCase(),r=Lu.hasOwnProperty(n)?n:null;if(null==r)return o(!1,"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s",t,Uu()),qu[t]=!0,!0;if(t!==r)return o(!1,"Invalid ARIA attribute `%s`. Did you mean `%s`?%s",t,r,Uu()),qu[t]=!0,!0}if(ju.test(t)){var i=t.toLowerCase(),a=Lu.hasOwnProperty(i)?i:null;if(null==a)return qu[t]=!0,!1;if(t!==a)return o(!1,"Unknown ARIA attribute `%s`. Did you mean `%s`?%s",t,a,Uu()),qu[t]=!0,!0}return!0}function Bu(e,t){Nu(e,t)||function(e,t){var n=[];for(var r in t)Wu(0,r)||n.push(r);var i=n.map(function(e){return"`"+e+"`"}).join(", ");1===n.length?o(!1,"Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",i,e,Uu()):n.length>1&&o(!1,"Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",i,e,Uu())}(e,t)}var Hu=!1;function zu(){var e=Bt.getStackAddendum();return null!=e?e:""}function Vu(){var e=Bt.getStackAddendum();return null!=e?e:""}var Ku,Qu={},$u=Object.prototype.hasOwnProperty,Yu=/^on./,Ju=/^on[^A-Z]/,Gu=new RegExp("^(aria)-["+vn+"]*$"),Xu=new RegExp("^(aria)[A-Z]["+vn+"]*$");Ku=function(e,t,n,r){if($u.call(Qu,t)&&Qu[t])return!0;var i=t.toLowerCase();if("onfocusin"===i||"onfocusout"===i)return o(!1,"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),Qu[t]=!0,!0;if(r){if(E.hasOwnProperty(t))return!0;var a=O.hasOwnProperty(i)?O[i]:null;if(null!=a)return o(!1,"Invalid event handler property `%s`. Did you mean `%s`?%s",t,a,Vu()),Qu[t]=!0,!0;if(Yu.test(t))return o(!1,"Unknown event handler property `%s`. It will be ignored.%s",t,Vu()),Qu[t]=!0,!0}else if(Yu.test(t))return Ju.test(t)&&o(!1,"Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.%s",t,Vu()),Qu[t]=!0,!0;if(Gu.test(t)||Xu.test(t))return!0;if("innerhtml"===i)return o(!1,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),Qu[t]=!0,!0;if("aria"===i)return o(!1,"The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),Qu[t]=!0,!0;if("is"===i&&null!==n&&void 0!==n&&"string"!=typeof n)return o(!1,"Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.%s",typeof n,Vu()),Qu[t]=!0,!0;if("number"==typeof n&&isNaN(n))return o(!1,"Received NaN for the `%s` attribute. If this is expected, cast the value to a string.%s",t,Vu()),Qu[t]=!0,!0;var s=Tn(t),u=null!==s&&s.type===cn;if(Mu.hasOwnProperty(i)){var l=Mu[i];if(l!==t)return o(!1,"Invalid DOM property `%s`. Did you mean `%s`?%s",t,l,Vu()),Qu[t]=!0,!0}else if(!u&&t!==i)return o(!1,"React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.%s",t,i,Vu()),Qu[t]=!0,!0;return"boolean"==typeof n&&Cn(t,n,s,!1)?(n?o(!1,'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.%s',n,t,t,n,t,Vu()):o(!1,'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.%s',n,t,t,n,t,t,t,Vu()),Qu[t]=!0,!0):!!u||(!Cn(t,n,s,!1)||(Qu[t]=!0,!1))};var Zu=function(e,t,n){var r=[];for(var i in t){Ku(0,i,t[i],n)||r.push(i)}var a=r.map(function(e){return"`"+e+"`"}).join(", ");1===r.length?o(!1,"Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior%s",a,e,Vu()):r.length>1&&o(!1,"Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior%s",a,e,Vu())};var el,tl=ln.getCurrentFiberOwnerName,nl=ln.getCurrentFiberStackAddendum,rl=!1,ol=!1,il="dangerouslySetInnerHTML",al="suppressContentEditableWarning",sl="suppressHydrationWarning",ul="autoFocus",ll="children",cl="style",fl="__html",dl=fu.html,pl=s.thatReturns(""),hl=void 0,yl=void 0,ml=void 0,vl=void 0,gl=void 0,bl=void 0,_l=void 0,wl=void 0;pl=nl,hl={time:!0,dialog:!0},ml=function(e,t){Bu(e,t),function(e,t){"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||Hu||(Hu=!0,"select"===e&&t.multiple?o(!1,"`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.%s",e,zu()):o(!1,"`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.%s",e,zu()))}(e,t),function(e,t,n){Nu(e,t)||Zu(e,t,n)}(e,t,!0)};var xl=/\r\n?/g,kl=/\u0000|\uFFFD/g;function Cl(e,t){!function(e,t){for(var n=t,r=Po(n),o=I[e],i=0;i<o.length;i++){var a=o[i];r.hasOwnProperty(a)&&r[a]||("topScroll"===a?mo("topScroll","scroll",n):"topFocus"===a||"topBlur"===a?(mo("topFocus","focus",n),mo("topBlur","blur",n),r.topBlur=!0,r.topFocus=!0):"topCancel"===a?(Lt("cancel",!0)&&mo("topCancel","cancel",n),r.topCancel=!0):"topClose"===a?(Lt("close",!0)&&mo("topClose","close",n),r.topClose=!0):So.hasOwnProperty(a)&&yo(a,So[a],n),r[a]=!0)}}(t,e.nodeType===At||e.nodeType===Nt?e:e.ownerDocument)}function Sl(e){return e.nodeType===At?e:e.ownerDocument}function Tl(e){e.onclick=s}function El(e,t,n,r){var i=void 0,a=Sl(n),s=void 0,u=r;if(u===dl&&(u=du(e)),u===dl)if(i=Nu(e,t),o(i||e===e.toLowerCase(),"<%s /> is using uppercase HTML. Always use lowercase HTML tags in React.",e),"script"===e){var l=a.createElement("div");l.innerHTML="<script><\/script>";var c=l.firstChild;s=l.removeChild(c)}else s="string"==typeof t.is?a.createElement(e,{is:t.is}):a.createElement(e);else s=a.createElementNS(u,e);return u===dl&&(i||"[object HTMLUnknownElement]"!==Object.prototype.toString.call(s)||Object.prototype.hasOwnProperty.call(hl,e)||(hl[e]=!0,o(!1,"The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",e))),s}function Il(e,t){return Sl(t).createTextNode(e)}function Ol(e,t,n,r){var i=Nu(t,n);ml(t,n),i&&!ol&&e.shadyRoot&&(o(!1,"%s is using shady DOM. Using shady DOM with React can cause things to break subtly.",tl()||"A component"),ol=!0);var a=void 0;switch(t){case"iframe":case"object":yo("topLoad","load",e),a=n;break;case"video":case"audio":for(var s in To)To.hasOwnProperty(s)&&yo(s,To[s],e);a=n;break;case"source":yo("topError","error",e),a=n;break;case"img":case"image":case"link":yo("topError","error",e),yo("topLoad","load",e),a=n;break;case"form":yo("topReset","reset",e),yo("topSubmit","submit",e),a=n;break;case"details":yo("topToggle","toggle",e),a=n;break;case"input":Vn(e,n),a=zn(e,n),yo("topInvalid","invalid",e),Cl(r,"onChange");break;case"option":Ks(0,n),a=Qs(0,n);break;case"select":tu(e,n),a=eu(0,n),yo("topInvalid","invalid",e),Cl(r,"onChange");break;case"textarea":iu(e,n),a=ou(e,n),yo("topInvalid","invalid",e),Cl(r,"onChange");break;default:a=n}switch(Au(t,a,pl),function(e,t,n,r,o){for(var i in r)if(r.hasOwnProperty(i)){var a=r[i];if(i===cl)a&&Object.freeze(a),Ou(t,a,pl);else if(i===il){var s=a?a[fl]:void 0;null!=s&&mu(t,s)}else i===ll?"string"==typeof a?("textarea"!==e||""!==a)&&vu(t,a):"number"==typeof a&&vu(t,""+a):i===al||i===sl||i===ul||(E.hasOwnProperty(i)?null!=a&&("function"!=typeof a&&_l(i,a),Cl(n,i)):null!=a&&Nn(t,i,a,o))}}(t,e,r,a,i),t){case"input":Dt(e),$n(e,n);break;case"textarea":Dt(e),su(e);break;case"option":!function(e,t){null!=t.value&&e.setAttribute("value",t.value)}(e,n);break;case"select":!function(e,t){var n=e;n.multiple=!!t.multiple;var r=t.value;null!=r?Zs(n,!!t.multiple,r,!1):null!=t.defaultValue&&Zs(n,!!t.multiple,t.defaultValue,!0)}(e,n);break;default:"function"==typeof a.onClick&&Tl(e)}}function Pl(e,t,n,r,o){ml(t,r);var i=null,a=void 0,s=void 0;switch(t){case"input":a=zn(e,n),s=zn(e,r),i=[];break;case"option":a=Qs(0,n),s=Qs(0,r),i=[];break;case"select":a=eu(0,n),s=eu(0,r),i=[];break;case"textarea":a=ou(e,n),s=ou(e,r),i=[];break;default:s=r,"function"!=typeof(a=n).onClick&&"function"==typeof s.onClick&&Tl(e)}Au(t,s,pl);var u=void 0,l=void 0,c=null;for(u in a)if(!s.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if(u===cl){var f=a[u];for(l in f)f.hasOwnProperty(l)&&(c||(c={}),c[l]="")}else u===il||u===ll||u===al||u===sl||u===ul||(E.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in s){var d=s[u],p=null!=a?a[u]:void 0;if(s.hasOwnProperty(u)&&d!==p&&(null!=d||null!=p))if(u===cl)if(d&&Object.freeze(d),p){for(l in p)!p.hasOwnProperty(l)||d&&d.hasOwnProperty(l)||(c||(c={}),c[l]="");for(l in d)d.hasOwnProperty(l)&&p[l]!==d[l]&&(c||(c={}),c[l]=d[l])}else c||(i||(i=[]),i.push(u,c)),c=d;else if(u===il){var h=d?d[fl]:void 0,y=p?p[fl]:void 0;null!=h&&y!==h&&(i=i||[]).push(u,""+h)}else u===ll?p===d||"string"!=typeof d&&"number"!=typeof d||(i=i||[]).push(u,""+d):u===al||u===sl||(E.hasOwnProperty(u)?(null!=d&&("function"!=typeof d&&_l(u,d),Cl(o,u)),i||p===d||(i=[])):(i=i||[]).push(u,d))}return c&&(i=i||[]).push(cl,c),i}function Rl(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Kn(e,o);Nu(n,r);switch(function(e,t,n,r){for(var o=0;o<t.length;o+=2){var i=t[o],a=t[o+1];i===cl?Ou(e,a,pl):i===il?mu(e,a):i===ll?vu(e,a):Nn(e,i,a,r)}}(e,t,0,Nu(n,o)),n){case"input":Qn(e,o);break;case"textarea":au(e,o);break;case"select":!function(e,t){var n=e;n._wrapperState.initialValue=void 0;var r=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!t.multiple;var o=t.value;null!=o?Zs(n,!!t.multiple,o,!1):r!==!!t.multiple&&(null!=t.defaultValue?Zs(n,!!t.multiple,t.defaultValue,!0):Zs(n,!!t.multiple,t.multiple?[]:"",!1))}(e,o)}}function Al(e,t,n,r,i){var a,s=void 0;switch(yl=!0===n[sl],a=Nu(t,n),ml(t,n),a&&!ol&&e.shadyRoot&&(o(!1,"%s is using shady DOM. Using shady DOM with React can cause things to break subtly.",tl()||"A component"),ol=!0),t){case"iframe":case"object":yo("topLoad","load",e);break;case"video":case"audio":for(var u in To)To.hasOwnProperty(u)&&yo(u,To[u],e);break;case"source":yo("topError","error",e);break;case"img":case"image":case"link":yo("topError","error",e),yo("topLoad","load",e);break;case"form":yo("topReset","reset",e),yo("topSubmit","submit",e);break;case"details":yo("topToggle","toggle",e);break;case"input":Vn(e,n),yo("topInvalid","invalid",e),Cl(i,"onChange");break;case"option":Ks(0,n);break;case"select":tu(e,n),yo("topInvalid","invalid",e),Cl(i,"onChange");break;case"textarea":iu(e,n),yo("topInvalid","invalid",e),Cl(i,"onChange")}Au(t,n,pl),s=new Set;for(var l=e.attributes,c=0;c<l.length;c++){switch(l[c].name.toLowerCase()){case"data-reactroot":case"value":case"checked":case"selected":break;default:s.add(l[c].name)}}var f,d=null;for(var p in n)if(n.hasOwnProperty(p)){var h=n[p];if(p===ll)"string"==typeof h?e.textContent!==h&&(yl||vl(e.textContent,h),d=[ll,h]):"number"==typeof h&&e.textContent!==""+h&&(yl||vl(e.textContent,h),d=[ll,""+h]);else if(E.hasOwnProperty(p))null!=h&&("function"!=typeof h&&_l(p,h),Cl(i,p));else if("boolean"==typeof a){var y=void 0,m=Tn(p);if(yl);else if(p===al||p===sl||"value"===p||"checked"===p||"selected"===p);else if(p===il){var v=h&&h[fl]||"",g=e.innerHTML,b=wl(e,v);b!==g&&gl(p,g,b)}else if(p===cl){s.delete(p);var _=Iu(h);_!==(y=e.getAttribute("style"))&&gl(p,y,_)}else if(a)s.delete(p.toLowerCase()),h!==(y=An(e,p,h))&&gl(p,y,h);else if(!kn(p,m,a)&&!Sn(p,h,m,a)){var w=!1;if(null!==m)s.delete(m.attributeName),y=Rn(e,p,h,m);else{var x=r;if(x===dl&&(x=du(t)),x===dl)s.delete(p.toLowerCase());else{var k=(void 0,f=p.toLowerCase(),Mu.hasOwnProperty(f)&&Mu[f]||null);null!==k&&k!==p&&(w=!0,s.delete(k)),s.delete(p)}y=An(e,p,h)}h===y||w||gl(p,y,h)}}}switch(s.size>0&&!yl&&bl(s),t){case"input":Dt(e),$n(e,n);break;case"textarea":Dt(e),su(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&Tl(e)}return d}function Nl(e,t){return e.nodeValue!==t}function Ml(e,t){vl(e.nodeValue,t)}function Ll(e,t){rl||(rl=!0,o(!1,"Did not expect server HTML to contain a <%s> in <%s>.",t.nodeName.toLowerCase(),e.nodeName.toLowerCase()))}function ql(e,t){rl||(rl=!0,o(!1,'Did not expect server HTML to contain the text node "%s" in <%s>.',t.nodeValue,e.nodeName.toLowerCase()))}function jl(e,t,n){rl||(rl=!0,o(!1,"Expected server HTML to contain a matching <%s> in <%s>.",t,e.nodeName.toLowerCase()))}function Dl(e,t){""!==t&&(rl||(rl=!0,o(!1,'Expected server HTML to contain a matching text node for "%s" in <%s>.',t,e.nodeName.toLowerCase())))}el=function(e){return("string"==typeof e?e:""+e).replace(xl,"\n").replace(kl,"")},vl=function(e,t){if(!rl){var n=el(t),r=el(e);r!==n&&(rl=!0,o(!1,'Text content did not match. Server: "%s" Client: "%s"',r,n))}},gl=function(e,t,n){if(!rl){var r=el(n),i=el(t);i!==r&&(rl=!0,o(!1,"Prop `%s` did not match. Server: %s Client: %s",e,JSON.stringify(i),JSON.stringify(r)))}},bl=function(e){if(!rl){rl=!0;var t=[];e.forEach(function(e){t.push(e)}),o(!1,"Extra attributes from the server: %s",t)}},_l=function(e,t){!1===t?o(!1,"Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.%s",e,e,e,nl()):o(!1,"Expected `%s` listener to be a function, instead got a value of `%s` type.%s",e,typeof t,nl())},wl=function(e,t){var n=e.namespaceURI===dl?e.ownerDocument.createElement(e.tagName):e.ownerDocument.createElementNS(e.namespaceURI,e.tagName);return n.innerHTML=t,n.innerHTML};var Fl,Ul=Object.freeze({createElement:El,createTextNode:Il,setInitialProperties:Ol,diffProperties:Pl,updateProperties:Rl,diffHydratedProperties:Al,diffHydratedText:Nl,warnForUnmatchedText:Ml,warnForDeletedHydratableElement:Ll,warnForDeletedHydratableText:ql,warnForInsertedHydratedElement:jl,warnForInsertedHydratedText:Dl,restoreControlledState:function(e,t,n){switch(t){case"input":return void Yn(e,n);case"textarea":return void function(e,t){au(e,t)}(e,n);case"select":return void function(e,t){var n=e,r=t.value;null!=r&&Zs(n,!!t.multiple,r,!1)}(e,n)}}}),Wl=ln.getCurrentFiberStackAddendum,Bl=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],Hl=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],zl=Hl.concat(["button"]),Vl=["dd","dt","li","option","optgroup","p","rp","rt"],Kl={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null},Ql={};(Fl=function(e,t,n){var r=(n=n||Kl).current,i=r&&r.tag;null!=t&&(o(null==e,"validateDOMNesting: when childText is passed, childTag should be null"),e="#text");var a=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===Vl.indexOf(t);case"body":case"caption":case"col":case"colgroup":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0}(e,i)?null:r,s=a?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,n),u=a||s;if(u){var l=u.tag,c=Wl(),f=!!a+"|"+e+"|"+l+"|"+c;if(!Ql[f]){Ql[f]=!0;var d=e,p="";if("#text"===e?/\S/.test(t)?d="Text nodes":(d="Whitespace text nodes",p=" Make sure you don't have any extra whitespace between tags on each line of your source code."):d="<"+e+">",a){var h="";"table"===l&&"tr"===e&&(h+=" Add a <tbody> to your code to match the DOM tree generated by the browser."),o(!1,"validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s",d,l,p,h,c)}else o(!1,"validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s",d,l,c)}}}).updatedAncestorInfo=function(e,t,n){var r=a({},e||Kl),o={tag:t,instance:n};return-1!==Hl.indexOf(t)&&(r.aTagInScope=null,r.buttonTagInScope=null,r.nobrTagInScope=null),-1!==zl.indexOf(t)&&(r.pTagInButtonScope=null),-1!==Bl.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(r.listItemTagAutoclosing=null,r.dlItemTagAutoclosing=null),r.current=o,"form"===t&&(r.formTag=o),"a"===t&&(r.aTagInScope=o),"button"===t&&(r.buttonTagInScope=o),"nobr"===t&&(r.nobrTagInScope=o),"p"===t&&(r.pTagInButtonScope=o),"li"===t&&(r.listItemTagAutoclosing=o),"dd"!==t&&"dt"!==t||(r.dlItemTagAutoclosing=o),r};var $l,Yl=Fl,Jl=El,Gl=Il,Xl=Ol,Zl=Pl,ec=Rl,tc=Al,nc=Nl,rc=Ml,oc=Ll,ic=ql,ac=jl,sc=Dl,uc=Yl.updatedAncestorInfo,lc=he,cc=be,fc=void 0,dc=!1;"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||o(!1,"React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),fc=function(e){if(e._reactRootContainer&&e.nodeType!==Rt){var t=wc.findHostInstanceWithNoPortals(e._reactRootContainer._internalRoot.current);t&&o(t.parentNode===e,"render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.")}var n=!!e._reactRootContainer,r=bc(e),i=!(!r||!me(r));o(!i||n,"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."),o(e.nodeType!==Ot||!e.tagName||"BODY"!==e.tagName.toUpperCase(),"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.")},$l=function(e,t){o(null===e||"function"==typeof e,"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e)},mt.injectFiberControlledHostComponent(Ul);var pc=null,hc=null;function yc(e){var t=wc.computeUniqueAsyncExpiration();this._expirationTime=t,this._root=e,this._next=null,this._callbacks=null,this._didComplete=!1,this._hasChildren=!1,this._children=null,this._defer=!0}function mc(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function vc(e,t,n){var r=wc.createContainer(e,t,n);this._internalRoot=r}function gc(e){return!(!e||e.nodeType!==Ot&&e.nodeType!==At&&e.nodeType!==Nt&&(e.nodeType!==Rt||" react-mount-point-unstable "!==e.nodeValue))}function bc(e){return e?e.nodeType===At?e.documentElement:e.firstChild:null}function _c(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}yc.prototype.render=function(e){this._defer||r(!1,"batch.render: Cannot render a batch that already committed."),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,o=new mc;return wc.updateContainerAtExpirationTime(e,t,null,n,o._onCommit),o},yc.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},yc.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||r(!1,"batch.commit: Cannot commit a batch multiple times."),!this._hasChildren)return this._next=null,void(this._defer=!1);var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var o=null,i=t;i!==this;)o=i,i=i._next;null===o&&r(!1,"batch.commit: Cannot commit a batch multiple times."),o._next=i._next,this._next=t,t=e.firstBatch=this}this._defer=!1,wc.flushRoot(e,n);var a=this._next;this._next=null,null!==(t=e.firstBatch=a)&&t._hasChildren&&t.render(t._children)},yc.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){(0,e[t])()}}},mc.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},mc.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&r(!1,"Invalid argument passed as callback. Expected a function. Instead received: %s",n),n()}}},vc.prototype.render=function(e,t){var n=this._internalRoot,r=new mc;return $l(t=void 0===t?null:t,"render"),null!==t&&r.then(t),wc.updateContainer(e,n,null,r._onCommit),r},vc.prototype.unmount=function(e){var t=this._internalRoot,n=new mc;return $l(e=void 0===e?null:e,"render"),null!==e&&n.then(e),wc.updateContainer(null,t,null,n._onCommit),n},vc.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new mc;return $l(n=void 0===n?null:n,"render"),null!==n&&o.then(n),wc.updateContainer(t,r,e,o._onCommit),o},vc.prototype.createBatch=function(){var e=new yc(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(var o=null,i=r;null!==i&&i._expirationTime<=t;)o=i,i=i._next;e._next=i,null!==o&&(o._next=e)}return e};var wc=Ps({getRootHostContext:function(e){var t=void 0,n=void 0,r=e.nodeType;switch(r){case At:case Nt:t=r===At?"#document":"#fragment";var o=e.documentElement;n=o?o.namespaceURI:pu(null,"");break;default:var i=r===Rt?e.parentNode:e;n=pu(i.namespaceURI||null,t=i.tagName)}var a=t.toLowerCase();return{namespace:n,ancestorInfo:uc(null,a,null)}},getChildHostContext:function(e,t){var n=e;return{namespace:pu(n.namespace,t),ancestorInfo:uc(n.ancestorInfo,t,null)}},getPublicInstance:function(e){return e},prepareForCommit:function(){pc=ho(),hc=qo(),po(!1)},resetAfterCommit:function(){jo(hc),hc=null,po(pc),pc=null},createInstance:function(e,t,n,r,o){var i,a=r;if(Yl(e,null,a.ancestorInfo),"string"==typeof t.children||"number"==typeof t.children){var s=""+t.children,u=uc(a.ancestorInfo,e,null);Yl(null,s,u)}i=a.namespace;var l=Jl(e,t,n,i);return lc(o,l),cc(l,t),l},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return Xl(e,t,n,r),_c(t,n)},prepareUpdate:function(e,t,n,r,o,i){var a=i;if(typeof r.children!=typeof n.children&&("string"==typeof r.children||"number"==typeof r.children)){var s=""+r.children,u=uc(a.ancestorInfo,t,null);Yl(null,s,u)}return Zl(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){Yl(null,e,n.ancestorInfo);var o=Gl(e,t);return lc(r,o),o},now:As,mutation:{commitMount:function(e,t,n,r){_c(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o,i){cc(e,o),ec(e,t,n,r,o)},resetTextContent:function(e){vu(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){e.nodeType===Rt?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){e.nodeType===Rt?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){e.nodeType===Rt?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t,n){return e.nodeType!==Ot||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||e.nodeType!==Pt?null:e},getNextHydratableSibling:function(e){for(var t=e.nextSibling;t&&t.nodeType!==Ot&&t.nodeType!==Pt;)t=t.nextSibling;return t},getFirstHydratableChild:function(e){for(var t=e.firstChild;t&&t.nodeType!==Ot&&t.nodeType!==Pt;)t=t.nextSibling;return t},hydrateInstance:function(e,t,n,r,o,i){lc(i,e),cc(e,n);var a;return a=o.namespace,tc(e,t,n,a,r)},hydrateTextInstance:function(e,t,n){return lc(n,e),nc(e,t)},didNotMatchHydratedContainerTextInstance:function(e,t,n){rc(t,n)},didNotMatchHydratedTextInstance:function(e,t,n,r,o){!0!==t.suppressHydrationWarning&&rc(r,o)},didNotHydrateContainerInstance:function(e,t){1===t.nodeType?oc(e,t):ic(e,t)},didNotHydrateInstance:function(e,t,n,r){!0!==t.suppressHydrationWarning&&(1===r.nodeType?oc(n,r):ic(n,r))},didNotFindHydratableContainerInstance:function(e,t,n){ac(e,t,n)},didNotFindHydratableContainerTextInstance:function(e,t){sc(e,t)},didNotFindHydratableInstance:function(e,t,n,r,o){!0!==t.suppressHydrationWarning&&ac(n,r,o)},didNotFindHydratableTextInstance:function(e,t,n,r){!0!==t.suppressHydrationWarning&&sc(n,r)}},scheduleDeferredCallback:Ns,cancelDeferredCallback:Ms});Tt(wc);var xc=!1;function kc(e,t){var n=t||function(e){var t=bc(e);return!(!t||t.nodeType!==Ot||!t.hasAttribute(gn))}(e);if(!n)for(var r=!1,i=void 0;i=e.lastChild;)!r&&i.nodeType===Ot&&i.hasAttribute(gn)&&(r=!0,o(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.")),e.removeChild(i);!n||t||xc||(xc=!0,Ci(!1,"render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML."));return new vc(e,!1,n)}function Cc(e,t,n,o,i){gc(n)||r(!1,"Target container is not a DOM element."),fc(n);var a=n._reactRootContainer;if(a){if("function"==typeof i){var s=i;i=function(){var e=wc.getPublicRootInstance(a._internalRoot);s.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,i):a.render(t,i)}else{if(a=n._reactRootContainer=kc(n,o),"function"==typeof i){var u=i;i=function(){var e=wc.getPublicRootInstance(a._internalRoot);u.call(e)}}wc.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,i):a.render(t,i)})}return wc.getPublicRootInstance(a._internalRoot)}function Sc(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return gc(t)||r(!1,"Target container is not a DOM element."),function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$t,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}var Tc={createPortal:Sc,findDOMNode:function(e){var t=Wt.current;if(null!==t&&null!==t.stateNode){var n=t.stateNode._warnedAboutRefsInRender;o(n,"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",on(t)||"A component"),t.stateNode._warnedAboutRefsInRender=!0}if(null==e)return null;if(e.nodeType===Ot)return e;var i=_r(e);if(i)return wc.findHostInstance(i);"function"==typeof e.render?r(!1,"Unable to find node on an unmounted component."):r(!1,"Element appears to be neither ReactComponent nor DOMNode. Keys: %s",Object.keys(e))},hydrate:function(e,t,n){return Cc(null,e,t,!0,n)},render:function(e,t,n){return Cc(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,o){return(null==e||void 0===e._reactInternalFiber)&&r(!1,"parentComponent must be a valid React Component"),Cc(e,t,n,!1,o)},unmountComponentAtNode:function(e){if(gc(e)||r(!1,"unmountComponentAtNode(...): Target container is not a DOM element."),e._reactRootContainer){var t=bc(e),n=t&&!me(t);return o(!n,"unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."),wc.unbatchedUpdates(function(){Cc(null,null,e,!1,function(){e._reactRootContainer=null})}),!0}var i=bc(e),a=!(!i||!me(i)),s=1===e.nodeType&&gc(e.parentNode)&&!!e.parentNode._reactRootContainer;return o(!a,"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",s?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."),!1},unstable_createPortal:function(){return dc||(dc=!0,Ci(!1,'The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.')),Sc.apply(void 0,arguments)},unstable_batchedUpdates:wc.batchedUpdates,unstable_deferredUpdates:wc.deferredUpdates,flushSync:wc.flushSync,unstable_flushControlled:wc.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Y,EventPluginRegistry:A,EventPropagators:Re,ReactControlledComponent:_t,ReactDOMComponentTree:_e,ReactDOMEventListener:bo},unstable_createRoot:function(e,t){return new vc(e,!0,null!=t&&!0===t.hydrate)}};if(!wc.injectIntoDevTools({findFiberByHostInstance:ye,bundleType:1,version:"16.3.1",rendererPackageName:"react-dom"})&&i.canUseDOM&&window.top===window.self&&(navigator.userAgent.indexOf("Chrome")>-1&&-1===navigator.userAgent.indexOf("Edge")||navigator.userAgent.indexOf("Firefox")>-1)){var Ec=window.location.protocol;/^(https?|file):$/.test(Ec)&&console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools"+("file:"===Ec?"\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq":""),"font-weight:bold")}var Ic=Object.freeze({default:Tc}),Oc=Ic&&Tc||Ic,Pc=Oc.default?Oc.default:Oc;e.exports=Pc})()},function(e,t,n){"use strict";e.exports=n(123)},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.3.1
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){var t=n(52),r=n(51),o=n(36),i=n(35),a=n(34),s=n(50),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,c=u?Symbol.for("react.call"):60104,f=u?Symbol.for("react.return"):60105,d=u?Symbol.for("react.portal"):60106,p=u?Symbol.for("react.fragment"):60107,h=u?Symbol.for("react.strict_mode"):60108,y=u?Symbol.for("react.provider"):60109,m=u?Symbol.for("react.context"):60110,v=u?Symbol.for("react.async_mode"):60111,g=u?Symbol.for("react.forward_ref"):60112,b="function"==typeof Symbol&&Symbol.iterator,_="@@iterator";function w(e){if(null===e||void 0===e)return null;var t=b&&e[b]||e[_];return"function"==typeof t?t:null}var x=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.warn(i);try{throw new Error(i)}catch(e){}}).apply(void 0,[t].concat(r))}},k={};function C(e,t){var n=e.constructor,r=n&&(n.displayName||n.name)||"ReactClass",o=r+"."+t;k[o]||(i(!1,"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,r),k[o]=!0)}var S={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,n){C(e,"forceUpdate")},enqueueReplaceState:function(e,t,n,r){C(e,"replaceState")},enqueueSetState:function(e,t,n,r){C(e,"setState")}};function T(e,t,n){this.props=e,this.context=t,this.refs=r,this.updater=n||S}T.prototype.isReactComponent={},T.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&o(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."),this.updater.enqueueSetState(this,e,t,"setState")},T.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var E={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},I=function(e,t){Object.defineProperty(T.prototype,e,{get:function(){x(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var O in E)E.hasOwnProperty(O)&&I(O,E[O]);function P(){}function R(e,t,n){this.props=e,this.context=t,this.refs=r,this.updater=n||S}P.prototype=T.prototype;var A=R.prototype=new P;A.constructor=R,t(A,T.prototype),A.isPureReactComponent=!0;var N={current:null},M=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0},q=void 0,j=void 0;function D(e){if(M.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function F(e){if(M.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}var U=function(e,t,n,r,o,i,a){var s={$$typeof:l,type:e,key:t,ref:n,props:a,_owner:i,_store:{}};return Object.defineProperty(s._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(s,"_self",{configurable:!1,enumerable:!1,writable:!1,value:r}),Object.defineProperty(s,"_source",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.freeze&&(Object.freeze(s.props),Object.freeze(s)),s};function W(e,t,n){var r=void 0,o={},a=null,s=null,u=null,c=null;if(null!=t)for(r in D(t)&&(s=t.ref),F(t)&&(a=""+t.key),u=void 0===t.__self?null:t.__self,c=void 0===t.__source?null:t.__source,t)M.call(t,r)&&!L.hasOwnProperty(r)&&(o[r]=t[r]);var f=arguments.length-2;if(1===f)o.children=n;else if(f>1){for(var d=Array(f),p=0;p<f;p++)d[p]=arguments[p+2];Object.freeze&&Object.freeze(d),o.children=d}if(e&&e.defaultProps){var h=e.defaultProps;for(r in h)void 0===o[r]&&(o[r]=h[r])}if((a||s)&&(void 0===o.$$typeof||o.$$typeof!==l)){var y="function"==typeof e?e.displayName||e.name||"Unknown":e;a&&function(e,t){var n=function(){q||(q=!0,i(!1,"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(o,y),s&&function(e,t){var n=function(){j||(j=!0,i(!1,"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}(o,y)}return U(e,a,s,u,c,N.current,o)}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var H={getCurrentStack:null,getStackAddendum:function(){var e=H.getCurrentStack;return e?e():null}},z=".",V=":";var K=!1,Q=/\/+/g;function $(e){return(""+e).replace(Q,"$&/")}var Y=10,J=[];function G(e,t,n,r){if(J.length){var o=J.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function X(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,J.length<Y&&J.push(e)}function Z(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case l:case d:u=!0}}if(u)return r(a,t,""===n?z+ee(t,0):n),1;var c=void 0,f=0,p=""===n?z:n+V;if(Array.isArray(t))for(var h=0;h<t.length;h++)f+=e(c=t[h],p+ee(c,h),r,a);else{var y=w(t);if("function"==typeof y){y===t.entries&&(i(K,"Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.%s",H.getStackAddendum()),K=!0);for(var m=y.call(t),v=void 0,g=0;!(v=m.next()).done;)f+=e(c=v.value,p+ee(c,g++),r,a)}else if("object"===s){var b;b=" If you meant to render a collection of children, use an array instead."+H.getStackAddendum();var _=""+t;o(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===_?"object with keys {"+Object.keys(t).join(", ")+"}":_,b)}}return f}(e,"",t,n)}function ee(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=e.key,r={"=":"=0",":":"=2"},"$"+(""+n).replace(/[=:]/g,function(e){return r[e]})):t.toString(36);var n,r}function te(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function ne(e,t,n){var r,o,i=e.result,s=e.keyPrefix,u=e.func,l=e.context,c=u.call(l,t,e.count++);Array.isArray(c)?re(c,i,n,a.thatReturnsArgument):null!=c&&(B(c)&&(r=c,o=s+(!c.key||t&&t.key===c.key?"":$(c.key)+"/")+n,c=U(r.type,o,r.ref,r._self,r._source,r._owner,r.props)),i.push(c))}function re(e,t,n,r,o){var i="";null!=n&&(i=$(n)+"/");var a=G(t,i,r,o);Z(e,ne,a),X(a)}function oe(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case p:return"ReactFragment";case d:return"ReactPortal";case c:return"ReactCall";case f:return"ReactReturn"}return null}var ie,ae=void 0,se=void 0,ue=function(){};function le(){if(N.current){var e=oe(N.current);if(e)return"\n\nCheck the render method of `"+e+"`."}return""}ae=null,se=!1,ie=function(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type===p?"React.Fragment":e.type.displayName||e.type.name||"Unknown"},ue=function(){var e="";if(ae){var t=ie(ae),n=ae._owner;e+=function(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}(t,ae._source,n&&oe(n))}return e+=H.getStackAddendum()||""};var ce={};function fe(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var n=function(e){var t=le();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t="\n\nCheck the top-level render call using <"+n+">.")}return t}(t);if(!ce[n]){ce[n]=!0;var r="";e&&e._owner&&e._owner!==N.current&&(r=" It was passed a child from "+oe(e._owner)+"."),ae=e,i(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s',n,r,ue()),ae=null}}}function de(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];B(r)&&fe(r,t)}else if(B(e))e._store&&(e._store.validated=!0);else if(e){var o=w(e);if("function"==typeof o&&o!==e.entries)for(var i=o.call(e),a=void 0;!(a=i.next()).done;)B(a.value)&&fe(a.value,t)}}function pe(e){var t=e.type;if("function"==typeof t){var n=t.displayName||t.name,r=t.propTypes;r?(ae=e,s(r,e.props,"prop",n,ue),ae=null):void 0===t.PropTypes||se||(se=!0,i(!1,"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",n||"Unknown")),"function"==typeof t.getDefaultProps&&i(t.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function he(e,t,n){var r=function(e){return"string"==typeof e||"function"==typeof e||e===p||e===v||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===g)}(e);if(!r){var o="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(o+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var a=function(e){if(null!==e&&void 0!==e&&void 0!==e.__source){var t=e.__source;return"\n\nCheck your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+"."}return""}(t);o+=a||le(),o+=ue()||"";var s=void 0;s=null===e?"null":Array.isArray(e)?"array":typeof e,i(!1,"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",s,o)}var u=W.apply(this,arguments);if(null==u)return u;if(r)for(var l=2;l<arguments.length;l++)de(arguments[l],e);return e===p?function(e){ae=e;for(var t=Object.keys(e.props),n=0;n<t.length;n++){var r=t[n];if("children"!==r&&"key"!==r){i(!1,"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.%s",r,ue());break}}null!==e.ref&&i(!1,"Invalid attribute `ref` supplied to `React.Fragment`.%s",ue()),ae=null}(u):pe(u),u}var ye={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return re(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;var r=G(null,null,t,n);Z(e,te,r),X(r)},count:function(e,t){return Z(e,a.thatReturnsNull,null)},toArray:function(e){var t=[];return re(e,t,null,a.thatReturnsArgument),t},only:function(e){return B(e)||o(!1,"React.Children.only expected to receive a single React element child."),e}},createRef:function(){var e={current:null};return Object.seal(e),e},Component:T,PureComponent:R,createContext:function(e,t){void 0===t?t=null:i(null===t||"function"==typeof t,"createContext: Expected the optional second argument to be a function. Instead received: %s",t);var n={$$typeof:m,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null};return n.Provider={$$typeof:y,_context:n},n.Consumer=n,n._currentRenderer=null,n},forwardRef:function(e){return i("function"==typeof e,"forwardRef requires a render function but was given %s.",null===e?"null":typeof e),{$$typeof:g,render:e}},Fragment:p,StrictMode:h,unstable_AsyncMode:v,createElement:he,cloneElement:function(e,n,r){for(var o=function(e,n,r){var o=void 0,i=t({},e.props),a=e.key,s=e.ref,u=e._self,l=e._source,c=e._owner;if(null!=n){D(n)&&(s=n.ref,c=N.current),F(n)&&(a=""+n.key);var f=void 0;for(o in e.type&&e.type.defaultProps&&(f=e.type.defaultProps),n)M.call(n,o)&&!L.hasOwnProperty(o)&&(void 0===n[o]&&void 0!==f?i[o]=f[o]:i[o]=n[o])}var d=arguments.length-2;if(1===d)i.children=r;else if(d>1){for(var p=Array(d),h=0;h<d;h++)p[h]=arguments[h+2];i.children=p}return U(e.type,a,s,u,l,c,i)}.apply(this,arguments),i=2;i<arguments.length;i++)de(arguments[i],o.type);return pe(o),o},createFactory:function(e){var t=he.bind(null,e);return t.type=e,Object.defineProperty(t,"type",{enumerable:!1,get:function(){return x(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t},isValidElement:B,version:"16.3.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:N,assign:t}};t(ye.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,{ReactDebugCurrentFrame:H,ReactComponentTreeHook:{}});var me=Object.freeze({default:ye}),ve=me&&ye||me,ge=ve.default?ve.default:ve;e.exports=ge})()},function(e,t,n){"use strict";var r=s(n(18)),o=s(n(124)),i=n(112),a=n(12);function s(e){return e&&e.__esModule?e:{default:e}}s(n(53)).default.onConnected(function(e){return(0,a.nSQL)().query("upsert",{userId:"anton",balance:20}).exec()}),o.default.render(r.default.createElement(i.AccountStatus,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25hbm8tc3FsL2xpYi91dGlsaXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGllLXRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uYW5vLXNxbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25hbm8tc3FsL2xpYi9kYXRhYmFzZS9kYi1pZHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGIvYmFsYW5jZVRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY2NvdW50U3RhdHVzL0FjY291bnRTdGF0dXMuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uYW5vLXNxbC1yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmFuby1zcWwvbGliL2hpc3RvcnktcGx1Z2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uYW5vLXNxbC9saWIvZGF0YWJhc2UvYWRhcHRlci1sZXZlbERCLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uYW5vLXNxbC9saWIvZGF0YWJhc2UvYWRhcHRlci13ZWJzcWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25hbm8tc3FsL2xpYi9kYXRhYmFzZS9hZGFwdGVyLWluZGV4ZWREQi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmFuby1zcWwvbGliL2RhdGFiYXNlL2FkYXB0ZXItc3luYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJlZml4LXRyaWUtdHMvbm9kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmFuby1zcWwvbGliL2RhdGFiYXNlL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25hbm8tc3FsL2xpYi9kYXRhYmFzZS9xdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmFuby1zcWwvbGliL2RhdGFiYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFsbHktc21hbGwtZXZlbnRzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmFuby1zcWwvbGliL3F1ZXJ5L3RyYW5zYWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uYW5vLXNxbC9saWIvcXVlcnkvc3RkLXF1ZXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzIiwid2VicGFjazovLy8uL3Rlc3QvdmlzdWFsVGVzdHMuanN4Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJsaWVfdHNfMSIsIlByb21pc2UiLCJ3aW5kb3ciLCJfYXNzaWduIiwib2JqIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiZmFzdENIQUlOIiwiaXRlbXMiLCJjYWxsYmFjayIsInJlcyIsInJlaiIsImxlbmd0aCIsInJlc3VsdHMiLCJzdGVwIiwicmVzdWx0IiwicHVzaCIsInNldEZhc3QiLCJmYXN0UkFDRSIsInJlc29sdmVkIiwiY291bnRlciIsImZhc3RBTEwiLCJhbGwiLCJtYXAiLCJpdGVtIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc1NhZmFyaSIsInRlc3QiLCJpc01TQnJvd3NlciIsImluZGV4T2YiLCJpc0FuZHJvaWQiLCJyYW5kb20xNkJpdHMiLCJjcnlwdG8iLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJwb3ciLCJnZXRSYW5kb21WYWx1ZXMiLCJidWYiLCJVaW50MTZBcnJheSIsIl9jcnlwdG8iLCJyYW5kb21CeXRlcyIsInJlZHVjZSIsInByZXYiLCJjdXIiLCJ0aW1laWQiLCJtcyIsInRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsInRvU3RyaW5nIiwiaW50ZXJzZWN0IiwiYXJyMSIsImFycjIiLCJmaWx0ZXIiLCJ1dWlkIiwiYiIsInNsaWNlIiwiaWRUeXBlcyIsImludCIsInRpbWVJZCIsInRpbWVJZG1zIiwiaGFzaCIsInN0ciIsImNoYXJDb2RlQXQiLCJnZW5lcmF0ZUlEIiwicHJpbWFyeUtleVR5cGUiLCJpbmNyaW1lbnRWYWx1ZSIsImNsZWFuQXJncyIsImFyZ0RlY2xhcmF0aW9ucyIsImFyZ3MiLCJhIiwiazIiLCJzcGxpdCIsImNhc3QiLCJ1bmRlZmluZWQiLCJpc09iamVjdCIsInZhbCIsInR5cGUiLCJ0IiwiZW50aXR5TWFwIiwiJiIsIjwiLCI+IiwiXCIiLCInIiwiLyIsImAiLCI9IiwidHlwZXMiLCJyZXBsYWNlIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0IiwiQXJyYXkiLCJpc0FycmF5IiwiU3RyaW5nIiwibmV3VmFsIiwidG9Mb3dlckNhc2UiLCJhcnJheU9mXzEiLCJsYXN0SW5kZXhPZiIsInYiLCJpc05hTiIsInNvcnRlZEluc2VydCIsImFyciIsInN0YXJ0VmFsIiwiZW5kVmFsIiwic3BsaWNlIiwiYmluYXJ5U2VhcmNoIiwic3RhcnQiLCJlbmQiLCJmbG9vciIsInJlbW92ZUR1cGxpY2F0ZXMiLCJuZXdhcnIiLCJkZWVwRnJlZXplIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJwcm9wIiwiZnJlZXplIiwib2JqZWN0UGF0aENhY2hlIiwib2JqUXVlcnkiLCJwYXRoUXVlcnkiLCJpZ25vcmVGaXJzdFBhdGgiLCJzYWZlR2V0IiwiZ2V0UGF0aCIsInBhdGhJZHgiLCJjYWNoZUtleSIsInBhdGgiLCJjb25jYXQiLCJhcHBseSIsIm1hdGNoIiwiZmlyc3RQYXRoIiwic2hpZnQiLCJ1bnNoaWZ0IiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsImYiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJlIiwiVHlwZUVycm9yIiwiaXQiLCJrZXkiLCJzdG9yZSIsInVpZCIsIlN5bWJvbCIsIlVTRV9TWU1CT0wiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImNyZWF0ZURlc2MiLCJjdHgiLCJoaWRlIiwiaGFzIiwiJGV4cG9ydCIsInNvdXJjZSIsIm93biIsIm91dCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwidGFyZ2V0IiwiQyIsInRoaXMiLCJhcmd1bWVudHMiLCJ2aXJ0dWFsIiwiUiIsIlUiLCJzdG9yYWdlIiwiY2FuU2V0SW1tZWRpYXRlIiwiY2FuUG9zdCIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhblByb21pc2UiLCJmYXN0QXBwbHkiLCJldmVudCIsImRhdGEiLCJzZXRJbW1lZGlhdGVQb2x5ZmlsbCIsIl9pIiwiaWQiLCJyZXNvbHZlIiwidGhlbiIsInNldFRpbWVvdXQiLCJfSU5URVJOQUwiLCJfUkVKRUNURUQiLCJfRlVMRklMTEVEIiwiX1BFTkRJTkciLCJyZXNvbHZlciIsIl9zdGF0ZSIsIl9xdWV1ZSIsIl9vdXRjb21lIiwiX3NhZmVseVJlc29sdmVUaGVuYWJsZSIsImRvUG9seUZpbGwiLCJjYXRjaCIsIm9uUmVqZWN0ZWQiLCJvbkZ1bGZpbGxlZCIsInByb21pc2UiLCJfdW53cmFwIiwiX1F1ZXVlSXRlbSIsIl9oYW5kbGVycyIsIl9yZXNvbHZlIiwicmVqZWN0IiwicmVhc29uIiwiX3JlamVjdCIsIml0ZXJhYmxlIiwibWF5YmVSZXR1cm4iLCJpbmRleCIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiX2xvb3BfMSIsInJhY2UiLCJsZW4iLCJjYWxsZWQiLCJyZXNwb25zZSIsImVycm9yIiwiX3Byb21pc2UiLCJfb25GdWxmaWxsZWQiLCJfY2FsbEZ1bGZpbGxlZCIsIl9vdGhlckNhbGxGdWxmaWxsZWQiLCJfb25SZWplY3RlZCIsIl9jYWxsUmVqZWN0ZWQiLCJfb3RoZXJDYWxsUmVqZWN0ZWQiLCJmdW5jIiwicmV0dXJuVmFsdWUiLCJfdHJ5Q2F0Y2giLCJfZ2V0VGhlbiIsInRoZW5hYmxlIiwiX3ZhbHVlIiwiX3N0YXR1cyIsIm9uRXJyb3IiLCJvblN1Y2Nlc3MiLCJ2YWx1ZXMiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInN0ZF9xdWVyeV8xIiwidHJhbnNhY3Rpb25fMSIsInJlYWxseV9zbWFsbF9ldmVudHNfMSIsInV0aWxpdGllc18xIiwiaW5kZXhfMSIsImhpc3RvcnlfcGx1Z2luXzEiLCJWRVJTSU9OIiwiTmFub1NRTEluc3RhbmNlIiwiX29uQ29ubmVjdGVkQ2FsbEJhY2tzIiwiX2FjdGlvbnMiLCJfdmlld3MiLCJkYXRhTW9kZWxzIiwiX2V2ZW50cyIsIl9oYXNFdmVudHMiLCJ0YWJsZU5hbWVzIiwicGx1Z2lucyIsImhhc1BLIiwic2tpcFB1cmdlIiwidG9Sb3dGbnMiLCJ0YWJsZVBLcyIsInRvQ29sRm5zIiwidG9Db2xSdWxlcyIsIl9yYW5kb21zIiwiX3JhbmRvbVB0ciIsImhhc0FueUV2ZW50cyIsIl9jYWxsYmFja3MiLCJSZWFsbHlTbWFsbEV2ZW50cyIsImlCIiwiTmFub1NRTERlZmF1bHRCYWNrZW5kIiwiaW5zdGFuY2VDb25uZWN0QXJncyIsIm1vZGVscyIsImFjdGlvbnMiLCJ2aWV3cyIsImNvbmZpZyIsInBhcmVudCIsIndpbGxDb25uZWN0IiwiZGlkQ29ubmVjdCIsInRvQ29sdW1uIiwiY29sdW1uRm5zIiwic1RhYmxlIiwidG9Sb3ciLCJmYXN0UmFuZCIsInRhYmxlIiwiY29ubmVjdCIsIl90aGlzIiwiY29ubmVjdEFyZ3MiLCJfY29uZmlnIiwicHJvcHMiLCJoaXN0b3J5IiwidXNlIiwiX05hbm9TUUxIaXN0b3J5UGx1Z2luIiwiaGlzdG9yeU1vZGUiLCJtb2RlIiwibmV4dFAiLCJuZXdBcmdzIiwia2V5cyIsImhhc1dpbGQiLCJtb2RlbCIsInBsdWdpbiIsImRpZEV4ZWMiLCJwbHVnaW5IYXNEaWRFeGVjIiwiY29tcGxldGVDb25uZWN0IiwiaXNDb25uZWN0ZWQiLCJjYiIsInVwZGF0ZVZlcnNpb24iLCJyZWJ1aWxkSURYIiwicXVlcnkiLCJtYW51YWxFeGVjIiwiZXh0ZW5kIiwid2hlcmUiLCJyb3dzIiwiZ2V0QWN0aW9ucyIsImdldFZpZXdzIiwiZ2V0Q29uZmlnIiwiYXZGaWx0ZXIiLCJmaWx0ZXJGdW5jIiwiX0FWTW9kIiwib24iLCJjYWxsQmFjayIsIl9yZWZyZXNoRXZlbnRDaGVja2VyIiwib2ZmIiwiZXZlbnRMaXN0ZW5lcnMiLCJkYXRhTW9kZWwiLCJpZ25vcmVTYW5pdHlDaGVjayIsIkVycm9yIiwiZm5OYW1lIiwiZm5BcmdzIiwicG9wIiwidHJpbSIsInZpZXdBcnJheSIsImdldFZpZXciLCJ2aWV3TmFtZSIsInZpZXdBcmdzIiwiX2RvQVYiLCJhY3Rpb25BcnJheSIsImRvQWN0aW9uIiwiYWN0aW9uTmFtZSIsImFjdGlvbkFyZ3MiLCJxdWVyeUZpbHRlciIsInF1ZXJ5TW9kIiwiQVZUeXBlIiwiQVZMaXN0IiwiQVZOYW1lIiwiQVZhcmdzIiwic2VsQVYiLCJfYWN0aXZlQVYiLCJlcnIiLCJhY3Rpb24iLCJhdiIsIl9OYW5vU1FMUXVlcnkiLCJvbkNvbm5lY3RlZCIsInRyaWdnZXJFdmVudCIsImV2ZW50RGF0YSIsInRyaWdnZXIiLCJkZWZhdWx0IiwicmVwbGFjZU9iaiIsIm5ld09iaiIsInJhd0R1bXAiLCJ0YWJsZXMiLCJuZXh0IiwiZHVtcFRhYmxlcyIsInJhd0ltcG9ydCIsImltcG9ydFRhYmxlcyIsImRpc2Nvbm5lY3QiLCJ3aWxsRGlzY29ubmVjdCIsImRvVHJhbnNhY3Rpb24iLCJpbml0VHJhbnNhY3Rpb24iLCJxdWVyaWVzIiwidHJhbnNhY3Rpb25JRCIsInRyYW5zYWN0aW9uQmVnaW4iLCJ0YSIsIl9OYW5vU1FMVHJhbnNhY3Rpb25RdWVyeSIsInF1ZXIiLCJuZXh0UXVlcnkiLCJ0cmFuc2FjdGlvbiIsInF1ZXJ5SUQiLCJ0cmFuc2FjdGlvbkVuZCIsImlkeCIsImFjdGlvbk9yVmlldyIsIm5vdGVzIiwiYWZmZWN0ZWRSb3dQS1MiLCJhZmZlY3RlZFJvd3MiLCJuZXdBcmdzXzEiLCJyZXN1bHRfMSIsIm5BcmdzIiwibmV3UmVzdWx0IiwibG9hZEpTIiwidXNlVHJhbnNhY3Rpb24iLCJvblByb2dyZXNzIiwiZGIiLCJjb21wbGV0ZSIsInJvdyIsImV4ZWMiLCJuZXh0Um93IiwibG9hZENTViIsImNzdiIsInJvd0ZpbHRlciIsImZpZWxkcyIsInJvd0RhdGEiLCJrIiwicmVjb3JkIiwicm93XzEiLCJmaXRzIiwiZG9CcmVhayIsImZ1bmN0aW9ucyIsIkNPVU5UIiwiY29sdW1uIiwiTUFYIiwibWF4XzEiLCJNSU4iLCJtaW5fMSIsIkFWRyIsIlNVTSIsIkxPV0VSIiwiVVBQRVIiLCJ0b1VwcGVyQ2FzZSIsIkNBU1QiLCJBQlMiLCJhYnMiLCJDRUlMIiwiY2VpbCIsIlBPVyIsInBvd2VyIiwiUk9VTkQiLCJTUVJUIiwic3FydCIsIl9OYW5vU1FMU3RhdGljIiwiblNRTCIsInNldFRhYmxlUG9pbnRlciIsImJpdG1hcCIsIndyaXRhYmxlIiwicHgiLCJEYXRhYmFzZUluZGV4IiwiX3NvcnRlZCIsIl9pbmRleE9mIiwiYWkiLCJkb0FJIiwic2V0IiwiZ2V0TG9jYXRpb24iLCJhZGQiLCJyZW1vdmUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkxJQlJBUlkiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiY2hhckF0IiwiZGVmIiwiVEFHIiwidGFnIiwic3RhdCIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJkUHMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93IiwiZG9jdW1lbnQiLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiY3JlYXRlIiwiUHJvcGVydGllcyIsImZuIiwidmFsdWVPZiIsInNoYXJlZCIsImciLCJldmFsIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsIndhcm5pbmciLCJjb25kaXRpb24iLCJmb3JtYXQiLCJfbGVuMiIsIl9rZXkyIiwiX2xlbiIsIl9rZXkiLCJhcmdJbmRleCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwieCIsInZhbGlkYXRlRm9ybWF0IiwiZnJhbWVzVG9Qb3AiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwicmVkZWZpbmUiLCJJdGVyYXRvcnMiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJJVEVSQVRPUiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwibWV0aG9kcyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsInByb3RvIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJlbnRyaWVzIiwiX2l0ZXJhdG9yMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc3ltYm9sMiIsIl90eXBlb2YiLCJjb25zdHJ1Y3RvciIsImlzIiwiY3JlYXRlRWxlbWVudCIsImFGdW5jdGlvbiIsInRoYXQiLCJ0b09iamVjdCIsIk9iamVjdFByb3RvIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJ0eXBlU3BlY3MiLCJsb2NhdGlvbiIsImNvbXBvbmVudE5hbWUiLCJnZXRTdGFjayIsInR5cGVTcGVjTmFtZSIsImV4Iiwic3RhY2siLCJlbXB0eU9iamVjdCIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsImJhbGFuY2VUYWJsZSIsIiRPYmplY3QiLCJEIiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiX3NldFByb3RvdHlwZU9mMiIsIl9jcmVhdGUyIiwiX3R5cGVvZjMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJnT1BOIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImNvZiIsImdldEtleXMiLCJnT1BTIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJLRVkiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIkRFU0NSSVBUT1JTIiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJzZXR0ZXIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsIl9rIiwiaXNTeW1ib2wiLCJpdGVyYXRvciIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwiaiIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJkb25lIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX3QiLCJBcmd1bWVudHMiLCJUT19TVFJJTkdfVEFHIiwiRE9NSXRlcmFibGVzIiwiQ29sbGVjdGlvbiIsImRvY3VtZW50RWxlbWVudCIsInRvSW50ZWdlciIsIm1heCIsIm1pbiIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiZGVzY3JpcHRvciIsIlRPX1NUUklORyIsInBvcyIsIiRhdCIsInBvaW50IiwiX3R5cGVvZjIiLCJSZWZlcmVuY2VFcnJvciIsImRlc2MiLCJfZGVmaW5lUHJvcGVydHkiLCJfZGVmaW5lUHJvcGVydHkyIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiaW5zdGFuY2UiLCJmYWlscyIsImV4cCIsIiRnZXRQcm90b3R5cGVPZiIsIl9yZWFjdCIsIkFjY291bnRTdGF0dXMiLCJfcmVhY3QyIiwiblNRTGRhdGEiLCJsb2ciLCJpbmNsdWRlcyIsImJhbGFuY2UiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJSZWFjdCIsIm5hbm9fc3FsXzEiLCJiaW5kTlNRTCIsIkNvbXAiLCJfc3VwZXIiLCJjbGFzc18xIiwic3RhdGUiLCJpc0xvYWRpbmciLCJ1cGRhdGVTdGF0ZSIsImJpbmQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJvbkNoYW5nZSIsInByZXZUYWJsZSIsImNvbW1lbnRzIiwibm93IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJzZXRTdGF0ZSIsInJlbmRlciIsIm5TUUxsb2FkaW5nIiwiQ29tcG9uZW50Iiwic3RycyIsImhpc3RvcnlNb2RlQXJncyIsIl90YWJsZVBrS2V5cyIsIl90YWJsZVBrVHlwZXMiLCJfdGFibGVLZXlzIiwiaGlzdG9yeVRhYmxlcyIsImhpc3RNb2RlbCIsImlzTm90U3RyaW5nIiwiaGlzdG9yeVRhYmxlIiwiaGlzdG9yeVRhYmxlUG9pbnRlciIsImhpc3RvcnlNb2RlcyIsIl9oaXN0VGFibGUiLCJfZ2VuZXJhdGVIaXN0b3J5UG9pbnRlcnMiLCJoaXN0VGFibGUiLCJwdHIiLCJmaW5pc2hTZXR1cCIsInRhYmxlRG9uZSIsIl9wdXJnZVJvd0hpc3RvcnkiLCJyb3dQS3MiLCJjbGVhckFsbCIsInJvd0hpc3RUYWJsZSIsInJvd0lEWFRhYmxlIiwicGsiLCJyb3dEb25lIiwiaGlzdFJvd0lEWCIsImlzRnJvemVuIiwiZGVsSURzIiwiaGlzdFJvd3MiLCJoaXN0UHRyIiwiY29tbWVudCIsImV4aXN0aW5nUm93IiwiX3Vuc2hpZnRTaW5nbGVSb3ciLCJfcHVyZ2VUYWJsZUhpc3RvcnkiLCJoaXN0USIsInJhbmdlIiwiaGlzdFRhYmxlUm93cyIsInB1cmdlUm93cyIsIl9wdXJnZVBhcmVudEhpc3RvcnkiLCJfcHVyZ2VBbGxIaXN0b3J5Iiwicm93UEsiLCJyb3dJRHMiLCJfdW5zaGlmdFBhcmVudCIsImhpc3RSb3dJRHMiLCJldmVudFR5cGVzIiwic2tpcElEWCIsImFkanVzdEhpc3RvcnlJRFgiLCJhcHBlbmRJRCIsIl9pZCIsIl9zaGlmdEhpc3RvcnkiLCJkaWRBbnl0aGluZyIsIl9xdWVyeUhpc3RvcnkiLCJxUmVzdWx0IiwiX2dldFJldmlzaW9uSGlzdG9yeSIsImdldFJvd3MiLCJyZXN1bHRSb3dzIiwick9iaiIsInBvaW50ZXIiLCJyZXZpc2lvbnMiLCJyZXZlcnNlIiwiX2dldFRhYmxlSGlzdG9yeSIsIl9zaGlmdFRhYmxlSGlzdG9yeSIsImRpcmVjdGlvbiIsInJvd1B0ciIsIl9zaGlmdFJvd0hpc3RvcnkiLCJQSyIsInVwZGF0ZUlEWCIsInJvd0lEWCIsImhpc3RvcnlQSyIsImRiX2lkeF8xIiwiZGVsZXRlRm9sZGVyUmVjdXJzaXZlIiwiX2ZzIiwiZXhpc3RzU3luYyIsInJlYWRkaXJTeW5jIiwiZmlsZSIsImN1clBhdGgiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5IiwidW5saW5rU3luYyIsInJtZGlyU3luYyIsIl9MZXZlbFN0b3JlIiwid3JpdGVDYWNoZSIsInJlYWRDYWNoZSIsIl9wa0tleSIsIl9wa1R5cGUiLCJfZGJJbmRleCIsIl9sZXZlbERCcyIsIl9pc1BLbnVtIiwicGtzIiwiY3JlYXRlS2V5U3RyZWFtIiwiX0ludDY0QkUiLCJ0b051bWJlciIsInNldElEIiwiX3BhdGgiLCJta2RpclN5bmMiLCJtYWtlVGFibGUiLCJ0YWJsZU5hbWUiLCJfbGV2ZWx1cCIsIl9sZXZlbGRvd24iLCJjYWNoZVNpemUiLCJ3cml0ZUJ1ZmZlclNpemUiLCJfYSIsInB1dCIsInRvQnVmZmVyIiwiZGVsZXRlIiwiZGVsIiwicmVhZCIsInJhbmdlUmVhZCIsInJvd0NhbGxiYWNrIiwidXNlUEsiLCJ1c2VmdWxWYWx1ZXMiLCJyYW5nZXMiLCJsb3dlciIsImhpZ2hlciIsImNyZWF0ZVZhbHVlU3RyZWFtIiwiZ3RlIiwibHRlIiwiZ2V0Um93IiwiZHJvcCIsImdldEluZGV4IiwiZ2V0TGVuZ3RoIiwiZGVzdHJveSIsIl9XZWJTUUxTdG9yZSIsInNpemUiLCJfc2l6ZSIsIl9kYiIsIm9wZW5EYXRhYmFzZSIsIm5leHRLZXkiLCJfc3FsIiwiaV8xIiwic29ydCIsIl9jaGtUYWJsZSIsImFsbG93V3JpdGUiLCJzcWwiLCJ0eCIsImV4ZWN1dGVTcWwiLCJ0eDIiLCJyZWFkVHJhbnNhY3Rpb24iLCJfYiIsIm5ld1JvdyIsInJfMSIsInJfMiIsImJhdGNoUmVhZCIsInN0YXJ0SURYIiwic3RtbnQiLCJfZXZhbENvbnRleHQiLCJjb250ZXh0IiwiY29tcGlsZWQiLCJfSW5kZXhlZERCU3RvcmUiLCJ1c2VXb3JrZXIiLCJfd29ya2VyIiwiX3dhaXRpbmdDQnMiLCJfdXNlV29ya2VyIiwiX3ciLCJXb3JrZXIiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJCbG9iIiwiX2hhbmRsZVdXTWVzc2FnZSIsImRvIiwibGlzdGVuZXJzXzEiLCJtc2ciLCJsaXN0ZW5lciIsInRyYW5zZmVyIiwicGtLZXlzIiwiX1N5bmNTdG9yZSIsInVzZUxvY2FsU3RvcmFnZSIsIl9yb3dzIiwiX2xzIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiVHJpZSIsImlucHV0IiwiX3RyaWUiLCJzZXRJbmRleCIsInRyaWUiLCJhZGRXb3JkIiwid29yZCIsInByZXZpb3VzVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJjdXJyZW50SW5kZXgiLCJhcnJheSIsIl9hcHBlbmQiLCJyZW1vdmVXb3JkIiwiX2NoZWNrUHJlZml4IiwicHJlZml4Rm91bmQiLCJwcmVmaXhOb2RlIiwiZ2V0V29yZHMiLCJfcmVjdXJzZVByZWZpeCIsImdldFByZWZpeCIsInN0clByZWZpeCIsIl9pc1ByZWZpeCIsInByZWZpeCIsImV2ZXJ5IiwiYWNjdW11bGF0b3IiLCJub2RlIiwicHJlZml4ZXMiLCJicmFuY2giLCJwcmVmaXhfdHJpZV90c18xIiwiYWRhcHRlcl9zeW5jXzEiLCJhZGFwdGVyX2luZGV4ZWREQl8xIiwiYWRhcHRlcl93ZWJzcWxfMSIsImFkYXB0ZXJfbGV2ZWxEQl8xIiwiX05hbm9TUUxTdG9yYWdlIiwiX3RhYmxlTmFtZXMiLCJfbnNxbCIsIl9tb2RlIiwicGVyc2lzdGVudCIsImFkYXB0ZXJzIiwidGFibGVJbmZvIiwiX3RyaWVJbmRleGVzIiwiX2RvQ2FjaGUiLCJjYWNoZSIsIl9jYWNoZSIsIl9jYWNoZUtleXMiLCJhZGFwdGVyIiwid2FpdEZvcldyaXRlcyIsIl9kZXRlY3RTdG9yYWdlTWV0aG9kIiwiZGJQYXRoIiwiaW5pdCIsIl9jcmVhdGVTZWNvbmRhcnlJbmRleFRhYmxlcyIsIl9uZXdUYWJsZSIsIl9yZWxGcm9tVGFibGUiLCJfcmVsVG9UYWJsZSIsIl9yZWxhdGlvbkNvbHVtbnMiLCJfY29sdW1uc0FyZVRhYmxlcyIsIl92aWV3VGFibGVzIiwicGtDb2x1bW4iLCJtYXBUb18xIiwiX3RvVGFibGUiLCJfdGhpc1R5cGUiLCJfaGFzT1JNIiwiX3RvQ29sdW1uIiwiX3RvVHlwZSIsInJlbCIsIl90aGlzQ29sdW1uIiwiX2Zyb21UYWJsZSIsIl9mcm9tQ29sdW1uIiwiX2Zyb21UeXBlIiwic2V0TlNRTCIsInRyaWVDb2x1bW5zIiwiaWkiLCJuZXh0Q29sdW1uIiwiaWR4VGFibGUiLCJfaW52YWxpZGF0ZUNhY2hlIiwidmFsaWQiLCJyZWJ1aWxkSW5kZXhlcyIsInNlY29uZEluZGV4ZXMiLCJfc2Vjb25kYXJ5SW5kZXhlcyIsImlkeERvbmUiLCJfZHJvcCIsIl9wayIsImluZGV4R3JvdXBzIiwiX3JlYWQiLCJyb3dLZXkiLCJhZGFwdGVyV3JpdGUiLCJfc2Vjb25kYXJ5SW5kZXhLZXkiLCJzdWJzdHIiLCJpbmRleGVkREIiLCJ0ZXJtaW5hdGUiLCJkZWxldGVEYXRhYmFzZSIsIl9zZWNvbmRhcnlJbmRleFJlYWQiLCJzZWFyY2giLCJfcmFuZ2VSZWFkIiwidXNlUEtzIiwicSIsImtlZXAiLCJfdHJpZVJlYWQiLCJ3b3JkcyIsImFycmF5T2ZSb3dzIiwiX2NsZWFyU2Vjb25kYXJ5SW5kZXhlcyIsInNraXBDb2x1bW5zIiwiX3NldFNlY29uZGFyeUluZGV4ZXMiLCJpbmRleFJvdyIsIl93cml0ZSIsIm9sZFJvdyIsInNldFJvd18xIiwic2FtZUtleXNfMSIsIl9kZWxldGUiLCJhZGFwdGVyRGVsZXRlIiwiYWRhcHRlckRyb3AiLCJfdHJpZUNvbHVtbnMiLCJjbyIsImhhc0lEWCIsIl9rZXlzIiwiX2RlZmF1bHRzIiwiX25hbWUiLCJfbG9vcF8yIiwidGhpc18xIiwiaXMybmRJbmRleF8xIiwiX2hhc1ZpZXdzIiwiY29sdW1ucyIsInRoaXNDb2x1bW4iLCJvdGhlckNvbHVtbiIsInF1ZXJ5T2JqIiwic2VsZWN0IiwiX3NlbGVjdCIsInVwc2VydCIsIl91cHNlcnQiLCJzaG93IHRhYmxlcyIsIl9xdWVyeSIsIl9zdG9yZSIsImRlc2NyaWJlIiwiX05hbm9TUUxTdG9yYWdlUXVlcnkiLCJkb1F1ZXJ5IiwiX2lzSW5zdGFuY2VUYWJsZSIsIl9nZXRSb3dzIiwiSW5zdGFuY2VTZWxlY3Rpb24iLCJfUm93U2VsZWN0aW9uIiwiX3NldENhY2hlIiwiX2hhc2giLCJjYW5DYWNoZSIsIm9ybSIsIl9NdXRhdGVTZWxlY3Rpb24iLCJfZXhlY3V0ZVF1ZXJ5QXJndW1lbnRzIiwiX3VwZGF0ZU9STVJvd3MiLCJyZWxhdGlvbiIsImZyb21QS3MiLCJwcmltYXJ5S2V5IiwiaWR4T2YiLCJfc3luY09STSIsIm9sZFJvd3MiLCJuZXdSb3dzIiwidXNlUmVsYXRpb25zIiwiY250IiwiYXJyYSIsInJlbGF0aW9uRG9uZSIsInZhbDEiLCJ2YWwyIiwiZGVsUHJpbWFyeWtleSIsInVwZGF0ZUlEcyIsInByaW1hcnlLZXlfMSIsImFkZElkcyIsInJlbW92ZUlkcyIsImxpc3QiLCJhZGRSZWxhdGlvbiIsInZhbHVlc1RvQWRkIiwiX3VwZGF0ZVJvd1ZpZXdzIiwibmV3Um93RGF0YSIsImNvbCIsInJlZlJvd3MiLCJfdXBkYXRlUmVtb3RlVmlld3MiLCJ1cGRhdGVkUm93cyIsImRvRGVsIiwidmlldyIsInJlbGF0ZWRSb3dzIiwicmVsUEsiLCJyUm93IiwickRvbmUiLCJkb1VwZGF0ZSIsInJQayIsIl9kb0FmdGVyUXVlcnkiLCJ1cGRhdGVkQ29sdW1ucyIsIndyaXRlXzEiLCJfZ3JvdXBCeUNvbHVtbnMiLCJfam9pbiIsImpvaW5Db25kaXRpb25zIiwiX2xlZnQiLCJfY2hlY2siLCJfcmlnaHQiLCJsZWZ0VGFibGUiLCJyaWdodFRhYmxlIiwiX2RvSm9pbiIsImpvaW5lZFJvd3MiLCJfd2hlcmUiLCJfZ3JvdXBCeUtleSIsIl9ncm91cEJ5IiwiZ3JvdXBCeSIsInNvcnRlZFJvd3MiLCJfc29ydE9iaiIsImdyb3VwQnlLZXkiLCJfc29ydEdyb3VwcyIsIl9oYXZpbmciLCJoYXZpbmciLCJfb3JkZXJCeSIsIm9yZGVyQnkiLCJfb2Zmc2V0Iiwib2Zmc2V0IiwiX2xpbWl0IiwibGltaXQiLCJfb3JtIiwib3JtUXVlcmllcyIsInJvd1Jlc3VsdCIsIm9ybVJlc3VsdCIsInJlbGF0ZURhdGEiLCJMIiwiZmlyc3RUYWJsZURhdGEiLCJzZWNvblRhYmxlRGF0YSIsImRvSm9pblJvd3MiLCJsZWZ0Um93IiwicmlnaHRSb3ciLCJqb2luVGFibGUiLCJyaWdodEtleSIsInVzZWRTZWNvbmRUYWJsZVJvd3MiLCJzZWNvbmRSb3dDYWNoZSIsImZpcnN0Um93IiwiaGFzT25lUmVsYXRpb24iLCJzZWNvbmRSb3ciLCJpZHgyIiwia2VlcDIiLCJhZGRSb3dzIiwib2JqQSIsIm9iakIiLCJyZXNvbHZlUGF0aHMiLCJBIiwiX211dGF0ZVJvd3MiLCJjb2x1bW5TZWxlY3Rpb24iLCJmdW5jdGlvblJlc3VsdHMiLCJmbkdyb3VwQnlSZXN1bHRzIiwiaGFzQWdncmVnYXRlRnVuXzEiLCJjb2x1bW5EYXRhXzEiLCJjb2x1bW5Eb25lIiwiZm5BcmdzXzEiLCJmbkRvbmUiLCJkb011YXRlUm93cyIsImZuUmVzdWx0cyIsImhhc0Z1bmMiLCJhbGlhcyIsIm9uZVJvd18xIiwibmV3Um93c18xIiwidGhpc1JvdyIsImlucHV0Um93cyIsImFmdGVyTXV0YXRlIiwiYWZ0ZXJPUk0iLCJhZnRlckpvaW4iLCJfc2VsZWN0QnlUcmllIiwiX3NlbGVjdEJ5UmFuZ2UiLCJfaXNPcHRpbWl6ZWRXaGVyZSIsIl9zZWxlY3RCeUtleXMiLCJ3aGVyZVNsaWNlIiwiX2lzU3ViT3B0aW1pemVkV2hlcmUiLCJmYXN0V2hlcmUiLCJzbG93V2hlcmVfMSIsIl9mdWxsVGFibGVTY2FuIiwiX3NlbGVjdFJvd3NCeUluZGV4IiwicmVzdWx0Um93c18xIiwibGFzdENvbW1hbmRfMSIsIndBcmciLCJuZXh0V0FyZyIsImlkeF8xIiwic2Vjb25kYXJ5SW5kZXhLZXkiLCJjb3VudCIsImZyb21JZHgiLCJ0b0lkeCIsImhhc1doZXJlIiwiYXJyV2hlcmUiLCJ3QXJncyIsImxhc3RDaGVja18xIiwidGFibGVEYXRhIiwiZnJvbV8xIiwidG9fMSIsInNpbmdsZVJvdyIsImNvbW1hbmRzIiwiY2hlY2tXaGVyZV8xIiwiX2NvbXBhcmUiLCJjb21wYXJlIiwic2V0VmFsdWUiLCJjb2x1bW5WYWx1ZSIsImdpdmVuVmFsdWUiLCJxdWVyeV8xIiwic3RvcmFnZV8xIiwiX3F1ZXJ5UG9vbCIsIl9xdWVyeVB0ciIsIm5ld01vZGVscyIsImRvRXhlYyIsImV4ZWNBcmdzIiwiZHVtcCIsImV4cG9ydFRhYmxlcyIsInBrS2V5IiwiblNRTGlfMSIsInRhYmxlc18xIiwidGltZXMiLCJSU0UiLCJ0aGlzUSIsIl9xdWVyaWVzIiwiYmxhbmtSb3ciLCJydW5RdWVyeSIsIm5ld1EiLCJfaWRfIiwiaGFzTGVuZ3RoIiwiZXZlbnRfMSIsIl9BViIsIm5ld0UiLCJkZWJvdW5jZVRpbWVycyIsInF1ZXJ5QWN0aW9uIiwicXVlcnlBcmdzIiwicHJpbWFyeUtleXMiLCJkZWJvdW5jZSIsIm9ybUFyZ3MiLCJfZXJyb3IiLCJ0cmllU2VhcmNoIiwic3RyaW5nVG9TZWFyY2giLCJ0b0NTViIsImhlYWRlcnMiLCJqc29uIiwiZGVub3JtYWxpemF0aW9uUXVlcnkiLCJmbnNUb1J1bl8xIiwiY29sdW1uc18xIiwibmV3VmFsdWUiLCJmbktleSIsImZuXzEiLCJQS18xIiwiZGVub3JtYWxpemF0aW9uS2V5XzEiLCJjbGVhclRpbWVvdXQiLCJpbnB1dEFyZ3NfMSIsIm1vZGVsQ29sdW1uc18xIiwiX25hbm9TcWxSZWFjdCIsIl9BY2NvdW50U3RhdHVzIiwiYXNuc3FsIiwiX0FjY291bnRTdGF0dXMyIiwiX2h5cGhlblBhdHRlcm4iLCJzdHJpbmciLCJfIiwiY2hhcmFjdGVyIiwiY2FtZWxpemUiLCJtc1BhdHRlcm4iLCJfdXBwZXJjYXNlUGF0dGVybiIsImh5cGhlbmF0ZSIsImRlZmF1bHRWaWV3Iiwib3duZXJEb2N1bWVudCIsIk5vZGUiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNOb2RlIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsInBhcmVudE5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwieSIsImtleXNBIiwia2V5c0IiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJjaGVja1Byb3BUeXBlcyIsImdldEFjdGl2ZUVsZW1lbnQiLCJzaGFsbG93RXF1YWwiLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJjYW1lbGl6ZVN0eWxlTmFtZSIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsIl9oYXNDYXVnaHRFcnJvciIsIl9jYXVnaHRFcnJvciIsImZ1bmNBcmdzIiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiZmFrZU5vZGUiLCJldnQiLCJkaWRFcnJvciIsImRpZFNldEVycm9yIiwiaXNDcm9zc09yaWdpbkVycm9yIiwiY29sbm8iLCJsaW5lbm8iLCJldnRUeXBlIiwiY2FsbENhbGxiYWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImluaXRFdmVudCIsImludm9rZUd1YXJkZWRDYWxsYmFjayQxIiwiUmVhY3RFcnJvclV0aWxzIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJldmVudFBsdWdpbk9yZGVyIiwibmFtZXNUb1BsdWdpbnMiLCJyZWNvbXB1dGVQbHVnaW5PcmRlcmluZyIsInBsdWdpbk5hbWUiLCJwbHVnaW5Nb2R1bGUiLCJwbHVnaW5JbmRleCIsImV4dHJhY3RFdmVudHMiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudE5hbWUiLCJwdWJsaXNoRXZlbnRGb3JQbHVnaW4iLCJkaXNwYXRjaENvbmZpZyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicGhhc2VOYW1lIiwicHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUiLCJyZWdpc3RyYXRpb25OYW1lIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwibG93ZXJDYXNlZE5hbWUiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwib25kYmxjbGljayIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJpbmplY3RlZE5hbWVzVG9QbHVnaW5zIiwiaXNPcmRlcmluZ0RpcnR5IiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImluamVjdGlvbiQxIiwiSW5qZWN0ZWQiLCJ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyIsImV4ZWN1dGVEaXNwYXRjaCIsInNpbXVsYXRlZCIsImluc3QiLCJjdXJyZW50VGFyZ2V0IiwiYWNjdW11bGF0ZUludG8iLCJjdXJyZW50IiwiZm9yRWFjaEFjY3VtdWxhdGVkIiwic2NvcGUiLCJkaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaExpc3RlbmVycyIsImRpc3BhdGNoSW5zdGFuY2VzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwibGlzdGVuZXJzSXNBcnIiLCJsaXN0ZW5lcnNMZW4iLCJpbnN0YW5jZXNJc0FyciIsImluc3RhbmNlc0xlbiIsImV2ZW50UXVldWUiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlciIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJzaG91bGRQcmV2ZW50TW91c2VFdmVudCIsInJ1bkV2ZW50c0luQmF0Y2giLCJldmVudHMiLCJwcm9jZXNzaW5nRXZlbnRRdWV1ZSIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJ0b3BMZXZlbFR5cGUiLCJ0YXJnZXRJbnN0IiwibmF0aXZlRXZlbnQiLCJuYXRpdmVFdmVudFRhcmdldCIsInBvc3NpYmxlUGx1Z2luIiwiZXh0cmFjdGVkRXZlbnRzIiwiRXZlbnRQbHVnaW5IdWIiLCJJbmRldGVybWluYXRlQ29tcG9uZW50IiwiRnVuY3Rpb25hbENvbXBvbmVudCIsIkNsYXNzQ29tcG9uZW50IiwiSG9zdFJvb3QiLCJIb3N0UG9ydGFsIiwiSG9zdENvbXBvbmVudCIsIkhvc3RUZXh0IiwiQ2FsbENvbXBvbmVudCIsIkNhbGxIYW5kbGVyUGhhc2UiLCJSZXR1cm5Db21wb25lbnQiLCJGcmFnbWVudCIsIk1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJGb3J3YXJkUmVmIiwicmFuZG9tS2V5IiwiaW50ZXJuYWxJbnN0YW5jZUtleSIsImludGVybmFsRXZlbnRIYW5kbGVyc0tleSIsInByZWNhY2hlRmliZXJOb2RlJDEiLCJob3N0SW5zdCIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSQxIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSQxIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSQxIiwidXBkYXRlRmliZXJQcm9wcyQxIiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwicHJlY2FjaGVGaWJlck5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiZ2V0UGFyZW50IiwidHJhdmVyc2VUd29QaGFzZSIsInRyYXZlcnNlRW50ZXJMZWF2ZSIsImFyZ0Zyb20iLCJhcmdUbyIsImNvbW1vbiIsImluc3RBIiwiaW5zdEIiLCJkZXB0aEEiLCJ0ZW1wQSIsImRlcHRoQiIsInRlbXBCIiwiZGVwdGgiLCJhbHRlcm5hdGUiLCJnZXRMb3dlc3RDb21tb25BbmNlc3RvciIsInBhdGhGcm9tIiwicGF0aFRvIiwiX2FsdGVybmF0ZSIsImFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMiLCJwaGFzZSIsInByb3BhZ2F0aW9uUGhhc2UiLCJsaXN0ZW5lckF0UGhhc2UiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlIiwiX3RhcmdldEluc3QiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldCIsImFjY3VtdWxhdGVEaXNwYXRjaGVzIiwiaWdub3JlZERpcmVjdGlvbiIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImxlYXZlIiwiZW50ZXIiLCJFdmVudFByb3BhZ2F0b3JzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImNvbnRlbnRLZXkiLCJnZXRUZXh0Q29udGVudEFjY2Vzc29yIiwiY29tcG9zaXRpb25TdGF0ZSIsIl9yb290IiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJnZXREYXRhIiwic3RhcnRWYWx1ZSIsInN0YXJ0TGVuZ3RoIiwiZW5kVmFsdWUiLCJnZXRUZXh0IiwiZW5kTGVuZ3RoIiwibWluRW5kIiwic2xpY2VUYWlsIiwiZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkiLCJFVkVOVF9QT09MX1NJWkUiLCJzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcyIsIkV2ZW50SW50ZXJmYWNlIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIlN5bnRoZXRpY0V2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJJbnRlcmZhY2UiLCJwcm9wTmFtZSIsIm5vcm1hbGl6ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24iLCJnZXRWYWwiLCJpc0Z1bmN0aW9uIiwid2FybiIsImdldFBvb2xlZEV2ZW50IiwibmF0aXZlSW5zdCIsImV2ZW50UG9vbCIsInJlbGVhc2VQb29sZWRFdmVudCIsImRlc3RydWN0b3IiLCJhZGRFdmVudFBvb2xpbmdUbyIsIkV2ZW50Q29uc3RydWN0b3IiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiU3VwZXIiLCJDbGFzcyIsIlByb3h5IiwiaXNTZWFsZWQiLCJjb25zdHJ1Y3QiLCJTeW50aGV0aWNFdmVudCQxIiwiU3ludGhldGljQ29tcG9zaXRpb25FdmVudCIsIlN5bnRoZXRpY0lucHV0RXZlbnQiLCJFTkRfS0VZQ09ERVMiLCJTVEFSVF9LRVlDT0RFIiwiY2FuVXNlQ29tcG9zaXRpb25FdmVudCIsImRvY3VtZW50TW9kZSIsImNhblVzZVRleHRJbnB1dEV2ZW50IiwidXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEiLCJTUEFDRUJBUl9DT0RFIiwiU1BBQ0VCQVJfQ0hBUiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJoYXNTcGFjZUtleXByZXNzIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kIiwia2V5Q29kZSIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJpc0NvbXBvc2luZyIsImV4dHJhY3RDb21wb3NpdGlvbkV2ZW50IiwiZXZlbnRUeXBlIiwiZmFsbGJhY2tEYXRhIiwiZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCIsImluaXRpYWxpemUiLCJjdXN0b21EYXRhIiwiZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzIiwiY2hhcnMiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImlzS2V5cHJlc3NDb21tYW5kIiwiY2hhciIsIndoaWNoIiwiZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQiLCJnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImNvbXBvc2l0aW9uIiwiZmliZXJIb3N0Q29tcG9uZW50IiwicmVzdG9yZVRhcmdldCIsInJlc3RvcmVRdWV1ZSIsInJlc3RvcmVTdGF0ZU9mVGFyZ2V0IiwiaW50ZXJuYWxJbnN0YW5jZSIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJpbmplY3Rpb24kMiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJob3N0Q29tcG9uZW50SW1wbCIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwicXVldWVkVGFyZ2V0cyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIl9iYXRjaGVkVXBkYXRlcyIsImJvb2trZWVwaW5nIiwiX2ludGVyYWN0aXZlVXBkYXRlcyIsIl9mbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImlzQmF0Y2hpbmciLCJiYXRjaGVkVXBkYXRlcyIsImluamVjdGlvbiQzIiwicmVuZGVyZXIiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsInN1cHBvcnRlZElucHV0VHlwZXMiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwidGVsIiwidGV4dCIsInVybCIsIndlZWsiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJlbGVtIiwiRUxFTUVOVF9OT0RFIiwiVEVYVF9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiRE9DVU1FTlRfTk9ERSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJnZXRFdmVudFRhcmdldCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiaXNFdmVudFN1cHBvcnRlZCIsImV2ZW50TmFtZVN1ZmZpeCIsImNhcHR1cmUiLCJpc1N1cHBvcnRlZCIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJpc0NoZWNrYWJsZSIsImdldFRyYWNrZXIiLCJfdmFsdWVUcmFja2VyIiwidHJhY2siLCJ2YWx1ZUZpZWxkIiwiZ2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJkZXRhY2hUcmFja2VyIiwidHJhY2tWYWx1ZU9uTm9kZSIsInVwZGF0ZVZhbHVlSWZDaGFuZ2VkIiwidHJhY2tlciIsImxhc3RWYWx1ZSIsIm5leHRWYWx1ZSIsImNoZWNrZWQiLCJnZXRWYWx1ZUZyb21Ob2RlIiwiUmVhY3RJbnRlcm5hbHMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSIsImRlc2NyaWJlQ29tcG9uZW50RnJhbWUiLCJvd25lck5hbWUiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJoYXNTeW1ib2wiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9DQUxMX1RZUEUiLCJSRUFDVF9SRVRVUk5fVFlQRSIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfQVNZTkNfTU9ERV9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsIkZBVVhfSVRFUkFUT1JfU1lNQk9MIiwiZ2V0SXRlcmF0b3JGbiIsIm1heWJlSXRlcmFibGUiLCJtYXliZUl0ZXJhdG9yIiwiZ2V0Q29tcG9uZW50TmFtZSIsImZpYmVyIiwiZGlzcGxheU5hbWUiLCJkZXNjcmliZUZpYmVyIiwib3duZXIiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXIiLCJ3b3JrSW5Qcm9ncmVzcyIsImluZm8iLCJnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDEiLCJSZWFjdERlYnVnQ3VycmVudEZpYmVyIiwicmVzZXRDdXJyZW50RmliZXIiLCJnZXRDdXJyZW50U3RhY2siLCJzZXRDdXJyZW50RmliZXIiLCJzZXRDdXJyZW50UGhhc2UiLCJnZXRDdXJyZW50RmliZXJPd25lck5hbWUiLCJnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtIiwiUkVTRVJWRUQiLCJCT09MRUFOSVNIX1NUUklORyIsIkJPT0xFQU4iLCJPVkVSTE9BREVEX0JPT0xFQU4iLCJOVU1FUklDIiwiUE9TSVRJVkVfTlVNRVJJQyIsIkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIiLCJBVFRSSUJVVEVfTkFNRV9DSEFSIiwiUk9PVF9BVFRSSUJVVEVfTkFNRSIsIlZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYIiwiUmVnRXhwIiwiaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSIsInZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSIsImlzQXR0cmlidXRlTmFtZVNhZmUiLCJhdHRyaWJ1dGVOYW1lIiwic2hvdWxkSWdub3JlQXR0cmlidXRlIiwicHJvcGVydHlJbmZvIiwiaXNDdXN0b21Db21wb25lbnRUYWciLCJzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyIsImFjY2VwdHNCb29sZWFucyIsInNob3VsZFJlbW92ZUF0dHJpYnV0ZSIsImdldFByb3BlcnR5SW5mbyIsInByb3BlcnRpZXMiLCJQcm9wZXJ0eUluZm9SZWNvcmQiLCJtdXN0VXNlUHJvcGVydHkiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJwcm9wZXJ0eU5hbWUiLCJfcmVmIiwiQ0FNRUxJWkUiLCJjYXBpdGFsaXplIiwidG9rZW4iLCJnZXRWYWx1ZUZvclByb3BlcnR5IiwiZXhwZWN0ZWQiLCJzdHJpbmdWYWx1ZSIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImdldFZhbHVlRm9yQXR0cmlidXRlIiwic2V0VmFsdWVGb3JQcm9wZXJ0eSIsIl9hdHRyaWJ1dGVOYW1lIiwicmVtb3ZlQXR0cmlidXRlIiwiX3R5cGUiLCJhdHRyaWJ1dGVWYWx1ZSIsInNldEF0dHJpYnV0ZU5TIiwidGFiSW5kZXgiLCJSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcyIsImhhc1JlYWRPbmx5VmFsdWUiLCJidXR0b24iLCJjaGVja2JveCIsImltYWdlIiwiaGlkZGVuIiwicmFkaW8iLCJyZXNldCIsInN1Ym1pdCIsInByb3BUeXBlcyIsInJlYWRPbmx5IiwidGFnTmFtZSIsImRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSIsImRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQiLCJkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkIiwiZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCIsImlzQ29udHJvbGxlZCIsImdldEhvc3RQcm9wcyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiaW5pdFdyYXBwZXJTdGF0ZSIsImluaXRpYWxWYWx1ZSIsImdldFNhZmVWYWx1ZSIsImNvbnRyb2xsZWQiLCJ1cGRhdGVDaGVja2VkIiwidXBkYXRlV3JhcHBlciIsIl9jb250cm9sbGVkIiwic2V0RGVmYXVsdFZhbHVlIiwicG9zdE1vdW50V3JhcHBlciIsInJvb3ROb2RlIiwicXVlcnlSb290IiwiZ3JvdXAiLCJxdWVyeVNlbGVjdG9yQWxsIiwib3RoZXJOb2RlIiwiZm9ybSIsIm90aGVyUHJvcHMiLCJ1cGRhdGVOYW1lZENvdXNpbnMiLCJldmVudFR5cGVzJDEiLCJjaGFuZ2UiLCJjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQiLCJhY3RpdmVFbGVtZW50SW5zdCIsInJ1bkV2ZW50SW5CYXRjaCIsImdldEluc3RJZlZhbHVlQ2hhbmdlZCIsImdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsInN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiZGV0YWNoRXZlbnQiLCJoYW5kbGVQcm9wZXJ0eUNoYW5nZSIsIm1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQiLCJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsIiwiZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50IiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwidGFyZ2V0Tm9kZSIsImdldFRhcmdldEluc3RGdW5jIiwiaGFuZGxlRXZlbnRGdW5jIiwic2hvdWxkVXNlQ2xpY2tFdmVudCIsImhhbmRsZUNvbnRyb2xsZWRJbnB1dEJsdXIiLCJTeW50aGV0aWNVSUV2ZW50IiwibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwibW9kaWZpZXJTdGF0ZUdldHRlciIsImtleUFyZyIsImdldE1vZGlmaWVyU3RhdGUiLCJrZXlQcm9wIiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiU3ludGhldGljTW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50Iiwic3JjRWxlbWVudCIsInRvRWxlbWVudCIsImV2ZW50VHlwZXMkMiIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwid2luIiwicGFyZW50V2luZG93IiwicmVsYXRlZCIsImZyb21Ob2RlIiwidG9Ob2RlIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIk5vRWZmZWN0IiwiUGVyZm9ybWVkV29yayIsIlBsYWNlbWVudCIsIlVwZGF0ZSIsIlBsYWNlbWVudEFuZFVwZGF0ZSIsIkRlbGV0aW9uIiwiQ29udGVudFJlc2V0IiwiQ2FsbGJhY2siLCJEaWRDYXB0dXJlIiwiUmVmIiwiRXJyTG9nIiwiU25hcHNob3QiLCJIb3N0RWZmZWN0TWFzayIsIkluY29tcGxldGUiLCJTaG91bGRDYXB0dXJlIiwiTU9VTlRJTkciLCJNT1VOVEVEIiwiVU5NT1VOVEVEIiwiaXNGaWJlck1vdW50ZWRJbXBsIiwiZWZmZWN0VGFnIiwiaXNGaWJlck1vdW50ZWQiLCJpc01vdW50ZWQiLCJjb21wb25lbnQiLCJvd25lckZpYmVyIiwiX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyIiwiYXNzZXJ0SXNNb3VudGVkIiwiZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgiLCJwYXJlbnRBIiwicGFyZW50QiIsImNoaWxkIiwic2libGluZyIsImRpZEZpbmRDaGlsZCIsIl9jaGlsZCIsIlN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50IiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJnZXRFdmVudENoYXJDb2RlIiwiY2hhckNvZGUiLCJub3JtYWxpemVLZXkiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidHJhbnNsYXRlVG9LZXkiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsInJlcGVhdCIsImxvY2FsZSIsIlN5bnRoZXRpY0RyYWdFdmVudCIsImRhdGFUcmFuc2ZlciIsIlN5bnRoZXRpY1RvdWNoRXZlbnQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiU3ludGhldGljVHJhbnNpdGlvbkV2ZW50IiwiU3ludGhldGljV2hlZWxFdmVudCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiZXZlbnRUeXBlcyQ0IiwidG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnIiwiYWRkRXZlbnRUeXBlTmFtZVRvQ29uZmlnIiwiaXNJbnRlcmFjdGl2ZSIsImNhcGl0YWxpemVkRXZlbnQiLCJvbkV2ZW50IiwidG9wRXZlbnQiLCJldmVudFR5cGVOYW1lIiwia25vd25IVE1MVG9wTGV2ZWxUeXBlcyIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiQ0FMTEJBQ0tfQk9PS0tFRVBJTkdfUE9PTF9TSVpFIiwiY2FsbGJhY2tCb29ra2VlcGluZ1Bvb2wiLCJmaW5kUm9vdENvbnRhaW5lck5vZGUiLCJjb250YWluZXJJbmZvIiwiaGFuZGxlVG9wTGV2ZWwiLCJib29rS2VlcGluZyIsImFuY2VzdG9yIiwiYW5jZXN0b3JzIiwicm9vdCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwiaGFuZGxlckJhc2VOYW1lIiwiYWRkRXZlbnRCdWJibGVMaXN0ZW5lciIsImRpc3BhdGNoSW50ZXJhY3RpdmVFdmVudCIsInRyYXBDYXB0dXJlZEV2ZW50IiwiYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIiLCJnZXRUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmciLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJtYWtlUHJlZml4TWFwIiwic3R5bGVQcm9wIiwidmVuZG9yUHJlZml4ZXMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJ0b3BMZXZlbFR5cGVzIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJtZWRpYUV2ZW50VHlwZXMiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJhbHJlYWR5TGlzdGVuaW5nVG8iLCJyZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIiLCJ0b3BMaXN0ZW5lcnNJREtleSIsImdldExpc3RlbmluZ0ZvckRvY3VtZW50IiwibW91bnRBdCIsImdldExlYWZOb2RlIiwiZmlyc3RDaGlsZCIsImdldFNpYmxpbmdOb2RlIiwibmV4dFNpYmxpbmciLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Iiwibm9kZVN0YXJ0Iiwibm9kZUVuZCIsInRleHRDb250ZW50IiwiZ2V0T2Zmc2V0cyIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJpbmRleFdpdGhpbkFuY2hvciIsImluZGV4V2l0aGluRm9jdXMiLCJvdXRlciIsIm5vZGVWYWx1ZSIsImdldE1vZGVybk9mZnNldHNGcm9tUG9pbnRzIiwiaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzIiwiY29udGVudEVkaXRhYmxlIiwiZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb24iLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24kMSIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJwcmlvckZvY3VzZWRFbGVtIiwicHJpb3JTZWxlY3Rpb25SYW5nZSIsIm9mZnNldHMiLCJ0ZW1wIiwic3RhcnRNYXJrZXIiLCJlbmRNYXJrZXIiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzZXRPZmZzZXRzIiwic2V0U2VsZWN0aW9uIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsInNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCIsImV2ZW50VHlwZXMkMyIsImFjdGl2ZUVsZW1lbnQkMSIsImFjdGl2ZUVsZW1lbnRJbnN0JDEiLCJsYXN0U2VsZWN0aW9uIiwibW91c2VEb3duIiwiY29uc3RydWN0U2VsZWN0RXZlbnQiLCJjdXJyZW50U2VsZWN0aW9uIiwic3ludGhldGljRXZlbnQiLCJTZWxlY3RFdmVudFBsdWdpbiIsImlzTGlzdGVuaW5nIiwiZGVwZW5kZW5jeSIsImlzTGlzdGVuaW5nVG9BbGxEZXBlbmRlbmNpZXMiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJOb1dvcmsiLCJTeW5jIiwiTmV2ZXIiLCJVTklUX1NJWkUiLCJNQUdJQ19OVU1CRVJfT0ZGU0VUIiwibXNUb0V4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWVUb01zIiwiZXhwaXJhdGlvblRpbWUiLCJjb21wdXRlRXhwaXJhdGlvbkJ1Y2tldCIsImN1cnJlbnRUaW1lIiwiZXhwaXJhdGlvbkluTXMiLCJidWNrZXRTaXplTXMiLCJwcmVjaXNpb24iLCJOb0NvbnRleHQiLCJBc3luY01vZGUiLCJTdHJpY3RNb2RlIiwiaGFzQmFkTWFwUG9seWZpbGwiLCJub25FeHRlbnNpYmxlT2JqZWN0IiwidGVzdE1hcCIsIk1hcCIsInRlc3RTZXQiLCJTZXQiLCJkZWJ1Z0NvdW50ZXIiLCJjcmVhdGVGaWJlciIsInBlbmRpbmdQcm9wcyIsInJlZiIsIm1lbW9pemVkUHJvcHMiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkU3RhdGUiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJsYXN0RWZmZWN0IiwiX2RlYnVnSUQiLCJfZGVidWdJc0N1cnJlbnRseVRpbWluZyIsImNyZWF0ZVdvcmtJblByb2dyZXNzIiwiY3JlYXRlRmliZXJGcm9tRWxlbWVudCIsIl9vd25lciIsImZpYmVyVGFnIiwiaXNSZWFjdENvbXBvbmVudCIsImNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50IiwiY2hpbGRyZW4iLCIkJHR5cGVvZiIsInRocm93T25JbnZhbGlkRWxlbWVudFR5cGUiLCJfc291cmNlIiwiZWxlbWVudHMiLCJjcmVhdGVGaWJlckZyb21UZXh0IiwiY29udGVudCIsImNyZWF0ZUZpYmVyRnJvbVBvcnRhbCIsInBvcnRhbCIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiYXNzaWduRmliZXJQcm9wZXJ0aWVzSW5ERVYiLCJjcmVhdGVGaWJlclJvb3QiLCJpc0FzeW5jIiwiaHlkcmF0ZSIsInVuaW5pdGlhbGl6ZWRGaWJlciIsImNyZWF0ZUhvc3RSb290RmliZXIiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJmaW5pc2hlZFdvcmsiLCJwZW5kaW5nQ29udGV4dCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiZmlyc3RCYXRjaCIsIm5leHRTY2hlZHVsZWRSb290Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImhhc0xvZ2dlZEVycm9yIiwiY2F0Y2hFcnJvcnMiLCJvbkNvbW1pdFJvb3QiLCJvbkNvbW1pdFVubW91bnQiLCJsb3dQcmlvcml0eVdhcm5pbmckMSIsIlJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzIiwiZGlzY2FyZFBlbmRpbmdXYXJuaW5ncyIsImZsdXNoUGVuZGluZ0RlcHJlY2F0aW9uV2FybmluZ3MiLCJmbHVzaFBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncyIsInJlY29yZERlcHJlY2F0aW9uV2FybmluZ3MiLCJyZWNvcmRVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncyIsIkxJRkVDWUNMRV9TVUdHRVNUSU9OUyIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwicGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzIiwicGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyIsInBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MiLCJwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MiLCJkaWRXYXJuQWJvdXREZXByZWNhdGVkTGlmZWN5Y2xlcyIsImRpZFdhcm5BYm91dFVuc2FmZUxpZmVjeWNsZXMiLCJsaWZlY3ljbGVXYXJuaW5nc01hcCIsInN0cmljdFJvb3QiLCJsaWZlY3ljbGVzV2FybmluZ01lc2FnZXMiLCJsaWZlY3ljbGUiLCJsaWZlY3ljbGVXYXJuaW5ncyIsImNvbXBvbmVudE5hbWVzIiwiZm9ybWF0dGVkIiwic3VnZ2VzdGlvbiIsInNvcnRlZENvbXBvbmVudE5hbWVzIiwic3RyaWN0Um9vdENvbXBvbmVudFN0YWNrIiwidW5pcXVlTmFtZXMiLCJzb3J0ZWROYW1lcyIsIl91bmlxdWVOYW1lcyIsIl9zb3J0ZWROYW1lcyIsIl91bmlxdWVOYW1lczIiLCJfc29ydGVkTmFtZXMyIiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwibWF5YmVTdHJpY3RSb290IiwiZ2V0U3RyaWN0Um9vdCIsIndhcm5pbmdzRm9yUm9vdCIsInVuc2FmZUxpZmVjeWNsZXMiLCJlbmFibGVVc2VyVGltaW5nQVBJIiwiZW5hYmxlTXV0YXRpbmdSZWNvbmNpbGVyIiwiZW5hYmxlUGVyc2lzdGVudFJlY29uY2lsZXIiLCJlbmFibGVHZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMiLCJkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlIiwicmVwbGF5RmFpbGVkVW5pdE9mV29ya1dpdGhJbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJ3YXJuQWJvdXREZXByZWNhdGVkTGlmZWN5Y2xlcyIsInN1cHBvcnRzVXNlclRpbWluZyIsInBlcmZvcm1hbmNlIiwibWFyayIsImNsZWFyTWFya3MiLCJtZWFzdXJlIiwiY2xlYXJNZWFzdXJlcyIsImN1cnJlbnRGaWJlciIsImN1cnJlbnRQaGFzZSIsImN1cnJlbnRQaGFzZUZpYmVyIiwiaXNDb21taXR0aW5nIiwiaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50Q29tbWl0IiwiaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UiLCJjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wIiwiZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQiLCJpc1dhaXRpbmdGb3JDYWxsYmFjayIsImxhYmVsc0luQ3VycmVudENvbW1pdCIsImZvcm1hdE1hcmtOYW1lIiwibWFya05hbWUiLCJyZWFjdEVtb2ppIiwiYmVnaW5NYXJrIiwiZW5kTWFyayIsImxhYmVsIiwid2FybmluZyQkMSIsImZvcm1hdHRlZE1hcmtOYW1lIiwiZm9ybWF0dGVkTGFiZWwiLCJ3YXJuaW5nRW1vamkiLCJmb3JtYXRMYWJlbCIsImdldEZpYmVyTWFya05hbWUiLCJkZWJ1Z0lEIiwiZ2V0RmliZXJMYWJlbCIsImJlZ2luRmliZXJNYXJrIiwiY2xlYXJGaWJlck1hcmsiLCJjbGVhck1hcmsiLCJlbmRGaWJlck1hcmsiLCJzaG91bGRJZ25vcmVGaWJlciIsImNsZWFyUGVuZGluZ1BoYXNlTWVhc3VyZW1lbnQiLCJwYXVzZVRpbWVycyIsInJlc3VtZVRpbWVyc1JlY3Vyc2l2ZWx5IiwicmVzdW1lVGltZXJzIiwicmVjb3JkRWZmZWN0IiwicmVjb3JkU2NoZWR1bGVVcGRhdGUiLCJjYW5jZWxXb3JrVGltZXIiLCJzdG9wV29ya1RpbWVyIiwic3RvcEZhaWxlZFdvcmtUaW1lciIsInN0YXJ0UGhhc2VUaW1lciIsInN0b3BQaGFzZVRpbWVyIiwic3RvcFdvcmtMb29wVGltZXIiLCJpbnRlcnJ1cHRlZEJ5IiwiZGlkQ29tcGxldGVSb290Iiwic3RhcnRDb21taXRUaW1lciIsImNsZWFyIiwic3RvcENvbW1pdFRpbWVyIiwiZGlkV2FyblVwZGF0ZUluc2lkZVVwZGF0ZSIsImNyZWF0ZVVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwicXVldWUiLCJmaXJzdCIsImxhc3QiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsImlzUHJvY2Vzc2luZyIsImluc2VydFVwZGF0ZUludG9RdWV1ZSIsInVwZGF0ZSIsInExIiwicTIiLCJlbnN1cmVVcGRhdGVRdWV1ZXMiLCJhbHRlcm5hdGVGaWJlciIsInF1ZXVlMSIsInF1ZXVlMiIsImluc2VydFVwZGF0ZUludG9GaWJlciIsImdldFN0YXRlRnJvbVVwZGF0ZSIsInByZXZTdGF0ZSIsInBhcnRpYWxTdGF0ZSIsInByb2Nlc3NVcGRhdGVRdWV1ZSIsInJlbmRlckV4cGlyYXRpb25UaW1lIiwiY3VycmVudFF1ZXVlIiwiZG9udE11dGF0ZVByZXZTdGF0ZSIsImRpZFNraXAiLCJ1cGRhdGVFeHBpcmF0aW9uVGltZSIsIl9wYXJ0aWFsU3RhdGUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsIl9jYWxsYmFja0xpc3QiLCJjYXB0dXJlZFZhbHVlIiwiX2NhcHR1cmVkVmFsdWVzIiwiY29tbWl0Q2FsbGJhY2tzIiwiX2NhbGxiYWNrIiwid2Fybk9uSW52YWxpZENhbGxiYWNrJDEiLCJmYWtlSW50ZXJuYWxJbnN0YW5jZSIsImRpZFdhcm5BYm91dFN0YXRlQXNzaWdubWVudEZvckNvbXBvbmVudCIsImRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZSIsImRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZSIsImRpZFdhcm5BYm91dEdldFNuYXBzaG90QmVmb3JlVXBkYXRlV2l0aG91dERpZFVwZGF0ZSIsImRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUiLCJkaWRXYXJuT25JbnZhbGlkQ2FsbGJhY2siLCJjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY3RvciIsInJlc3VsdFN0YXRlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY2FsbGVyTmFtZSIsIlJlYWN0RmliZXJDbGFzc0NvbXBvbmVudCIsImxlZ2FjeUNvbnRleHQiLCJzY2hlZHVsZVdvcmsiLCJjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyIiwibWVtb2l6ZVByb3BzIiwibWVtb2l6ZVN0YXRlIiwiY2FjaGVDb250ZXh0IiwiZ2V0TWFza2VkQ29udGV4dCIsImdldFVubWFza2VkQ29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiaGFzQ29udGV4dENoYW5nZWQiLCJ1cGRhdGVyIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsIm9sZFN0YXRlIiwibmV3U3RhdGUiLCJuZXdDb250ZXh0Iiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwic2hvdWxkVXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJyZXNldElucHV0UG9pbnRlcnMiLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJfcmVhY3RJbnRlcm5hbEluc3RhbmNlIiwiY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibmV4dFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsInVubWFza2VkQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJfY29tcG9uZW50TmFtZSIsIm5ld0FwaU5hbWUiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJub0dldEluaXRpYWxTdGF0ZU9uRVM2IiwiZ2V0SW5pdGlhbFN0YXRlIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJub0dldERlZmF1bHRQcm9wc09uRVM2IiwiZ2V0RGVmYXVsdFByb3BzIiwibm9JbnN0YW5jZVByb3BUeXBlcyIsIm5vSW5zdGFuY2VDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZXMiLCJub0NvbXBvbmVudFNob3VsZFVwZGF0ZSIsImNvbXBvbmVudFNob3VsZFVwZGF0ZSIsIm5vQ29tcG9uZW50RGlkVW5tb3VudCIsImNvbXBvbmVudERpZFVubW91bnQiLCJub0NvbXBvbmVudERpZFJlY2VpdmVQcm9wcyIsImNvbXBvbmVudERpZFJlY2VpdmVQcm9wcyIsIm5vQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyIsImNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJub1Vuc2FmZUNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyIsImhhc011dGF0ZWRQcm9wcyIsIm5vSW5zdGFuY2VEZWZhdWx0UHJvcHMiLCJkZWZhdWx0UHJvcHMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJub0luc3RhbmNlR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibm9JbnN0YW5jZUdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsIm5vU3RhdGljR2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsImNoZWNrQ2xhc3NJbnN0YW5jZSIsInJlZnMiLCJjYWxsQ29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJvbGRDb250ZXh0IiwibmV3VW5tYXNrZWRDb250ZXh0IiwiaGFzTmV3TGlmZWN5Y2xlcyIsImRlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImRlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIl91cGRhdGVRdWV1ZSIsIl91cGRhdGVRdWV1ZTIiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiX3VwZGF0ZVF1ZXVlMyIsIl91cGRhdGVRdWV1ZTQiLCJnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDIiLCJkaWRXYXJuQWJvdXRNYXBzIiwiZGlkV2FybkFib3V0U3RyaW5nUmVmSW5TdHJpY3RNb2RlIiwib3duZXJIYXNLZXlVc2VXYXJuaW5nIiwib3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nIiwid2FybkZvck1pc3NpbmdLZXkiLCJ2YWxpZGF0ZWQiLCJjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvIiwiaXNBcnJheSQxIiwiY29lcmNlUmVmIiwicmV0dXJuRmliZXIiLCJtaXhlZFJlZiIsInN0cmluZ1JlZiIsIl9zdHJpbmdSZWYiLCJ0aHJvd09uSW52YWxpZE9iamVjdFR5cGUiLCJuZXdDaGlsZCIsImFkZGVuZHVtIiwid2Fybk9uRnVuY3Rpb25UeXBlIiwiQ2hpbGRSZWNvbmNpbGVyIiwic2hvdWxkVHJhY2tTaWRlRWZmZWN0cyIsImRlbGV0ZUNoaWxkIiwiY2hpbGRUb0RlbGV0ZSIsImRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuIiwiY3VycmVudEZpcnN0Q2hpbGQiLCJtYXBSZW1haW5pbmdDaGlsZHJlbiIsImV4aXN0aW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkIiwidXNlRmliZXIiLCJjbG9uZSIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4Iiwib2xkSW5kZXgiLCJwbGFjZVNpbmdsZUNoaWxkIiwidXBkYXRlVGV4dE5vZGUiLCJjcmVhdGVkIiwiZXhpc3RpbmciLCJ1cGRhdGVFbGVtZW50IiwidXBkYXRlUG9ydGFsIiwidXBkYXRlRnJhZ21lbnQiLCJmcmFnbWVudCIsImNyZWF0ZUNoaWxkIiwiX2NyZWF0ZWQiLCJfY3JlYXRlZDIiLCJfY3JlYXRlZDMiLCJ1cGRhdGVTbG90Iiwib2xkRmliZXIiLCJ1cGRhdGVGcm9tTWFwIiwibmV3SWR4IiwiX21hdGNoZWRGaWJlciIsIndhcm5PbkludmFsaWRLZXkiLCJrbm93bktleXMiLCJfY3JlYXRlZDQiLCJyZWNvbmNpbGVTaW5nbGVFbGVtZW50IiwicmVjb25jaWxlU2luZ2xlUG9ydGFsIiwicmVjb25jaWxlU2luZ2xlVGV4dE5vZGUiLCJuZXdDaGlsZHJlbiIsInJlc3VsdGluZ0ZpcnN0Q2hpbGQiLCJwcmV2aW91c05ld0ZpYmVyIiwibmV4dE9sZEZpYmVyIiwiX25ld0ZpYmVyIiwiX25ld0ZpYmVyMiIsInJlY29uY2lsZUNoaWxkcmVuQXJyYXkiLCJuZXdDaGlsZHJlbkl0ZXJhYmxlIiwiaXRlcmF0b3JGbiIsIl9uZXdDaGlsZHJlbiIsIl9zdGVwIiwiX25ld0ZpYmVyMyIsIl9uZXdGaWJlcjQiLCJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwiX2lzTW9ja0Z1bmN0aW9uIiwicmVjb25jaWxlQ2hpbGRGaWJlcnMiLCJtb3VudENoaWxkRmliZXJzIiwiZGlkV2FybkFib3V0QmFkQ2xhc3MiLCJkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uYWxDb21wb25lbnQiLCJkaWRXYXJuQWJvdXRTdGF0ZWxlc3NSZWZzIiwiUmVhY3RGaWJlckJlZ2luV29yayIsImhvc3RDb250ZXh0IiwiaHlkcmF0aW9uQ29udGV4dCIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwicHVzaFByb3ZpZGVyIiwiaGFzTGVnYWN5Q29udGV4dENoYW5nZWQiLCJwdXNoTGVnYWN5Q29udGV4dFByb3ZpZGVyIiwicHVzaENvbnRleHRQcm92aWRlciIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIl9SZWFjdEZpYmVyQ2xhc3NDb21wbyIsInJlY29uY2lsZUNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwicmVjb25jaWxlQ2hpbGRyZW5BdEV4cGlyYXRpb25UaW1lIiwibWFya1JlZiIsImZpbmlzaENsYXNzQ29tcG9uZW50IiwiaGFzQ29udGV4dCIsImRpZENhcHR1cmVFcnJvciIsImJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsiLCJwdXNoSG9zdFJvb3RDb250ZXh0IiwicHJvcGFnYXRlQ29udGV4dENoYW5nZSIsImNoYW5nZWRCaXRzIiwibmV4dEZpYmVyIiwib2JzZXJ2ZWRCaXRzIiwiY3VycmVudENoaWxkIiwiY2xvbmVDaGlsZEZpYmVycyIsIm5leHRTdGF0ZSIsImJlZ2luV29yayIsImJhaWxvdXRPbkxvd1ByaW9yaXR5IiwiX0NvbXBvbmVudCIsIndhcm5pbmdLZXkiLCJkZWJ1Z1NvdXJjZSIsIm1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudCIsInVwZGF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJ1cGRhdGVDbGFzc0NvbXBvbmVudCIsInVwZGF0ZUhvc3RSb290IiwicHJldlByb3BzIiwiaXNIaWRkZW4iLCJ1cGRhdGVIb3N0Q29tcG9uZW50IiwidXBkYXRlSG9zdFRleHQiLCJ1cGRhdGVDYWxsQ29tcG9uZW50IiwidXBkYXRlUG9ydGFsQ29tcG9uZW50IiwidXBkYXRlRm9yd2FyZFJlZiIsInVwZGF0ZU1vZGUiLCJfY29udGV4dCIsIm9sZFZhbHVlIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidXBkYXRlQ29udGV4dFByb3ZpZGVyIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVwZGF0ZUNvbnRleHRDb25zdW1lciIsIlJlYWN0RmliZXJDb21wbGV0ZVdvcmsiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsIm11dGF0aW9uIiwicGVyc2lzdGVuY2UiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJwb3BIb3N0Q29udGFpbmVyIiwicG9wTGVnYWN5Q29udGV4dFByb3ZpZGVyIiwicG9wQ29udGV4dFByb3ZpZGVyIiwicG9wVG9wTGV2ZWxMZWdhY3lDb250ZXh0T2JqZWN0IiwicG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwicG9wUHJvdmlkZXIiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UiLCJwb3BIeWRyYXRpb25TdGF0ZSIsIm1hcmtVcGRhdGUiLCJtb3ZlQ2FsbFRvSGFuZGxlclBoYXNlIiwicmV0dXJucyIsImFwcGVuZEFsbFJldHVybnMiLCJoYW5kbGVyIiwiYXBwZW5kQWxsQ2hpbGRyZW4iLCJ1cGRhdGVIb3N0Q29udGFpbmVyIiwidXBkYXRlUGF5bG9hZCIsInJvb3RDb250YWluZXJJbnN0YW5jZSIsImN1cnJlbnRIb3N0Q29udGV4dCIsIm9sZFRleHQiLCJuZXdUZXh0IiwiY2xvbmVJbnN0YW5jZSIsImNyZWF0ZUNvbnRhaW5lckNoaWxkU2V0IiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lckNoaWxkU2V0IiwiZmluYWxpemVDb250YWluZXJDaGlsZHJlbiIsInBvcnRhbE9yUm9vdCIsImNvbnRhaW5lciIsIm5ld0NoaWxkU2V0IiwiY29udGFpbmVyQ2hpbGRTZXQiLCJhcHBlbmRBbGxDaGlsZHJlblRvQ29udGFpbmVyIiwiY2hpbGRyZW5VbmNoYW5nZWQiLCJjdXJyZW50SW5zdGFuY2UiLCJyZWN5Y2xhYmxlSW5zdGFuY2UiLCJuZXdJbnN0YW5jZSIsImNvbXBsZXRlV29yayIsImNvbXBvbmVudERpZENhdGNoIiwiZmliZXJSb290IiwiX2luc3RhbmNlIiwiX2N1cnJlbnRIb3N0Q29udGV4dCIsIl9pbnN0YW5jZTIiLCJfcm9vdENvbnRhaW5lckluc3RhbmNlIiwiX2N1cnJlbnRIb3N0Q29udGV4dDIiLCJjcmVhdGVDYXB0dXJlZFZhbHVlIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrJDMiLCJoYXNDYXVnaHRFcnJvciQxIiwiY2xlYXJDYXVnaHRFcnJvciQxIiwiZGlkV2FybkFib3V0VW5kZWZpbmVkU25hcHNob3RCZWZvcmVVcGRhdGUiLCJsb2dFcnJvciIsImJvdW5kYXJ5IiwiZXJyb3JJbmZvIiwiY2FwdHVyZWRFcnJvciIsImNvbXBvbmVudFN0YWNrIiwiZXJyb3JCb3VuZGFyeSIsImVycm9yQm91bmRhcnlOYW1lIiwiZXJyb3JCb3VuZGFyeUZvdW5kIiwid2lsbFJldHJ5Iiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsImNvbWJpbmVkTWVzc2FnZSIsImxvZ0NhcHR1cmVkRXJyb3IiLCJSZWFjdEZpYmVyQ29tbWl0V29yayIsImNhcHR1cmVFcnJvciIsIm1hcmtMZWdhY3lFcnJvckJvdW5kYXJ5QXNGYWlsZWQiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJjYWxsQ29tcG9uZW50V2lsbFVubW91bnRXaXRoVGltZXIiLCJzYWZlbHlEZXRhY2hSZWYiLCJyZWZFcnJvciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsInNuYXBzaG90IiwiZGlkV2FyblNldCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0TGlmZUN5Y2xlcyIsImZpbmlzaGVkUm9vdCIsImNvbW1pdHRlZEV4cGlyYXRpb25UaW1lIiwiX2luc3RhbmNlMyIsIl9pbnN0YW5jZTQiLCJjb21taXRNb3VudCIsImNvbW1pdEVycm9yTG9nZ2luZyIsIm9uVW5jYXVnaHRFcnJvciIsIl9pbnN0YW5jZTUiLCJjYXB0dXJlZEVycm9ycyIsIl9jYXB0dXJlZEVycm9ycyIsIl9lcnJvckluZm8iLCJjb21taXRBdHRhY2hSZWYiLCJfaW5zdGFuY2U2IiwiaW5zdGFuY2VUb1VzZSIsImNvbW1pdERldGFjaFJlZiIsImN1cnJlbnRSZWYiLCJjb21taXRVbm1vdW50IiwiX2luc3RhbmNlNyIsInVubW91bnRFcnJvciIsInNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudCIsImNvbW1pdE5lc3RlZFVubW91bnRzIiwidW5tb3VudEhvc3RDb21wb25lbnRzIiwiZW1wdHlQb3J0YWxDb250YWluZXIiLCJkZXRhY2hGaWJlciIsImNvbW1pdENvbnRhaW5lciIsInJlcGxhY2VDb250YWluZXJDaGlsZHJlbiIsImVtcHR5Q2hpbGRTZXQiLCJfcGVuZGluZ0NoaWxkcmVuIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdFVwZGF0ZSIsInJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRUZXh0VXBkYXRlIiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVDaGlsZEZyb21Db250YWluZXIiLCJpc0hvc3RQYXJlbnQiLCJjdXJyZW50UGFyZW50SXNWYWxpZCIsImN1cnJlbnRQYXJlbnQiLCJjdXJyZW50UGFyZW50SXNDb250YWluZXIiLCJmaW5kUGFyZW50IiwicGFyZW50RmliZXIiLCJnZXRIb3N0UGFyZW50RmliZXIiLCJpc0NvbnRhaW5lciIsImJlZm9yZSIsInNpYmxpbmdzIiwiZ2V0SG9zdFNpYmxpbmciLCJfaW5zdGFuY2U4IiwidGV4dEluc3RhbmNlIiwiTk9fQ09OVEVYVCIsIlJlYWN0RmliZXJIeWRyYXRpb25Db250ZXh0IiwiaHlkcmF0aW9uIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiaHlkcmF0aW9uUGFyZW50RmliZXIiLCJuZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiaXNIeWRyYXRpbmciLCJkZWxldGVIeWRyYXRhYmxlSW5zdGFuY2UiLCJpbnNlcnROb25IeWRyYXRlZEluc3RhbmNlIiwicGFyZW50Q29udGFpbmVyIiwicGFyZW50VHlwZSIsInBhcmVudFByb3BzIiwicGFyZW50SW5zdGFuY2UiLCJfcHJvcHMiLCJfdGV4dCIsInRyeUh5ZHJhdGUiLCJuZXh0SW5zdGFuY2UiLCJwb3BUb05leHRIb3N0UGFyZW50IiwiUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xIiwiZGVidWdUb29sIiwid2FybmVkQWJvdXRNaXNzaW5nR2V0Q2hpbGRDb250ZXh0IiwiaW52b2tlR3VhcmRlZENhbGxiYWNrJDIiLCJkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24iLCJkaWRXYXJuU2V0U3RhdGVDaGlsZENvbnRleHQiLCJ3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZCIsIndhcm5BYm91dEludmFsaWRVcGRhdGVzIiwiZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50IiwiUmVhY3RGaWJlclNjaGVkdWxlciIsInZhbHVlU3RhY2siLCJmaWJlclN0YWNrIiwiY3JlYXRlQ3Vyc29yIiwiaXNFbXB0eSIsImN1cnNvciIsImNoZWNrVGhhdFN0YWNrSXNFbXB0eSIsInJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldiIsIlJlYWN0RmliZXJTdGFjayIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJjb250ZXh0U3RhY2tDdXJzb3IiLCJjb250ZXh0RmliZXJTdGFja0N1cnNvciIsInJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yIiwicmVxdWlyZWRDb250ZXh0IiwibmV4dFJvb3RJbnN0YW5jZSIsIm5leHRSb290Q29udGV4dCIsInJvb3RJbnN0YW5jZSIsIm5leHRDb250ZXh0IiwiUmVhY3RGaWJlckhvc3RDb250ZXh0IiwiZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciIsInByZXZpb3VzQ29udGV4dCIsIm1hc2tlZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiY2hpbGRDb250ZXh0IiwiY29udGV4dEtleSIsImRpZENoYW5nZSIsIm1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJtZXJnZWRDb250ZXh0IiwiZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQiLCJSZWFjdEZpYmVyTGVnYWN5Q29udGV4dCIsInByb3ZpZGVyQ3Vyc29yIiwidmFsdWVDdXJzb3IiLCJjaGFuZ2VkQml0c0N1cnNvciIsInJlbmRlcmVyU2lnaWwiLCJwcm92aWRlckZpYmVyIiwiX2N1cnJlbnRSZW5kZXJlciIsIlJlYWN0RmliZXJOZXdDb250ZXh0IiwiX1JlYWN0RmliZXJVbndpbmRXb3JrIiwiaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeSIsInRocm93RXhjZXB0aW9uIiwic291cmNlRmliZXIiLCJyYXdWYWx1ZSIsInVud2luZFdvcmsiLCJfZWZmZWN0VGFnIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiaW50ZXJydXB0ZWRXb3JrIiwiUmVhY3RGaWJlclVud2luZFdvcmsiLCJfUmVhY3RGaWJlckNvbW1pdFdvcmsiLCJvbkNvbW1pdFBoYXNlRXJyb3IiLCJsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCIsInNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayIsImNhbmNlbERlZmVycmVkQ2FsbGJhY2siLCJwcmVwYXJlRm9yQ29tbWl0IiwicmVzZXRBZnRlckNvbW1pdCIsIm9yaWdpbmFsU3RhcnRUaW1lTXMiLCJtb3N0UmVjZW50Q3VycmVudFRpbWVNcyIsImxhc3RVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJleHBpcmF0aW9uQ29udGV4dCIsImlzV29ya2luZyIsIm5leHRVbml0T2ZXb3JrIiwibmV4dFJvb3QiLCJuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUiLCJpc1Jvb3RSZWFkeUZvckNvbW1pdCIsInN0YXNoZWRXb3JrSW5Qcm9ncmVzc1Byb3BlcnRpZXMiLCJyZXBsYXlVbml0T2ZXb3JrIiwiaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrIiwib3JpZ2luYWxSZXBsYXlFcnJvciIsInJldGhyb3dPcmlnaW5hbEVycm9yIiwicmVzZXRTdGFjayIsImNvbW1pdEFsbEhvc3RFZmZlY3RzIiwiX2N1cnJlbnQiLCJfY3VycmVudDIiLCJjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVjeWNsZXMiLCJjb21taXRBbGxMaWZlQ3ljbGVzIiwiY29tbWl0Um9vdCIsInN0YXJ0Q29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIiLCJzdG9wQ29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIiLCJzdGFydENvbW1pdEhvc3RFZmZlY3RzVGltZXIiLCJfZGlkRXJyb3IiLCJzdG9wQ29tbWl0SG9zdEVmZmVjdHNUaW1lciIsInN0YXJ0Q29tbWl0TGlmZUN5Y2xlc1RpbWVyIiwiX2RpZEVycm9yMiIsIl9lcnJvcjIiLCJzdG9wQ29tbWl0TGlmZUN5Y2xlc1RpbWVyIiwib25Db21taXRXb3JrIiwicmVtYWluaW5nVGltZSIsInJlc2V0RXhwaXJhdGlvblRpbWUiLCJyZW5kZXJUaW1lIiwibmV3RXhwaXJhdGlvblRpbWUiLCJnZXRVcGRhdGVFeHBpcmF0aW9uVGltZSIsImNvbXBsZXRlVW5pdE9mV29yayIsInNpYmxpbmdGaWJlciIsIm9uQ29tcGxldGVXb3JrIiwiX25leHQiLCJwZXJmb3JtVW5pdE9mV29yayIsInN0YXJ0V29ya1RpbWVyIiwib25CZWdpbldvcmsiLCJ3b3JrTG9vcCIsInNob3VsZFlpZWxkIiwicmVuZGVyUm9vdCIsImRpZEZhdGFsIiwic3RhcnRXb3JrTG9vcFRpbWVyIiwidGhyb3duVmFsdWUiLCJzY2hlZHVsZUNhcHR1cmUiLCJib3VuZGFyeUZpYmVyIiwiZGlzcGF0Y2giLCJjb21wdXRlQXN5bmNFeHBpcmF0aW9uIiwiaXNCYXRjaGluZ0ludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVJbnRlcmFjdGl2ZUV4cGlyYXRpb24iLCJsb3dlc3RQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSIsImlzRXJyb3JSZWNvdmVyeSIsInJlcXVlc3RXb3JrIiwibmVzdGVkVXBkYXRlQ291bnQiLCJORVNURURfVVBEQVRFX0xJTUlUIiwic2NoZWR1bGVXb3JrSW1wbCIsInN5bmNVcGRhdGVzIiwicHJldmlvdXNFeHBpcmF0aW9uQ29udGV4dCIsImZhaWxlZFVuaXRPZldvcmsiLCJmaXJzdFNjaGVkdWxlZFJvb3QiLCJsYXN0U2NoZWR1bGVkUm9vdCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja0lEIiwiaXNSZW5kZXJpbmciLCJuZXh0Rmx1c2hlZFJvb3QiLCJuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lIiwiZGVhZGxpbmVEaWRFeHBpcmUiLCJoYXNVbmhhbmRsZWRFcnJvciIsInVuaGFuZGxlZEVycm9yIiwiZGVhZGxpbmUiLCJpc0JhdGNoaW5nVXBkYXRlcyIsImlzVW5iYXRjaGluZ1VwZGF0ZXMiLCJjb21wbGV0ZWRCYXRjaGVzIiwidGltZUhldXJpc3RpY0ZvclVuaXRPZldvcmsiLCJzY2hlZHVsZUNhbGxiYWNrV2l0aEV4cGlyYXRpb24iLCJjdXJyZW50TXMiLCJleHBpcmF0aW9uTXMiLCJwZXJmb3JtQXN5bmNXb3JrIiwidGltZW91dCIsImFkZFJvb3RUb1NjaGVkdWxlIiwicGVyZm9ybVdvcmtPblJvb3QiLCJwZXJmb3JtU3luY1dvcmsiLCJmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCIsImhpZ2hlc3RQcmlvcml0eVdvcmsiLCJoaWdoZXN0UHJpb3JpdHlSb290IiwicHJldmlvdXNTY2hlZHVsZWRSb290IiwiZGwiLCJwZXJmb3JtV29yayIsIm1pbkV4cGlyYXRpb25UaW1lIiwiZGlkRXhwaXJlIiwic3RvcFJlcXVlc3RDYWxsYmFja1RpbWVyIiwiZmluaXNoUmVuZGVyaW5nIiwiYmF0Y2hlcyIsImJhdGNoIiwiX29uQ29tcGxldGUiLCJfZmluaXNoZWRXb3JrIiwiY29tcGxldGVSb290IiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwidGltZVJlbWFpbmluZyIsImZsdXNoUm9vdCIsInByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwicHJldmlvdXNJc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzIiwiY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbiIsImRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMiLCJSZWFjdEZpYmVyUmVjb25jaWxlciQxIiwiX1JlYWN0RmliZXJTY2hlZHVsZXIiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwicGFyZW50Q29tcG9uZW50Iiwib25Nb3VudENvbnRhaW5lciIsIm9uVW5tb3VudENvbnRhaW5lciIsIm9uVXBkYXRlQ29udGFpbmVyIiwiZ2V0Q29udGV4dEZvclN1YnRyZWUiLCJzY2hlZHVsZVJvb3RVcGRhdGUiLCJmaW5kSG9zdEluc3RhbmNlIiwiaG9zdEZpYmVyIiwiZmluZEN1cnJlbnRIb3N0RmliZXIiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJjb250YWluZXJGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzIiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZGV2VG9vbHNDb25maWciLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImludGVybmFscyIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImhvb2siLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsInJlbmRlcmVySUQiLCJpbmplY3QiLCJpbmplY3RJbnRlcm5hbHMiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIlJlYWN0RmliZXJSZWNvbmNpbGVyJDIiLCJSZWFjdEZpYmVyUmVjb25jaWxlciQzIiwicmVhY3RSZWNvbmNpbGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3ciLCJySUMiLCJjSUMiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwic2NoZWR1bGVkUklDQ2FsbGJhY2siLCJpc0lkbGVTY2hlZHVsZWQiLCJ0aW1lb3V0VGltZSIsImlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQiLCJmcmFtZURlYWRsaW5lIiwicHJldmlvdXNGcmFtZVRpbWUiLCJhY3RpdmVGcmFtZVRpbWUiLCJmcmFtZURlYWRsaW5lT2JqZWN0IiwiZGlkVGltZW91dCIsInJlbWFpbmluZyIsIm1lc3NhZ2VLZXkiLCJhbmltYXRpb25UaWNrIiwicmFmVGltZSIsIm5leHRGcmFtZVRpbWUiLCJvcHRpb25zIiwiZnJhbWVDYWxsYmFjayIsIkluZmluaXR5IiwidGltZW91dElEIiwiZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24iLCJ2YWxpZGF0ZVByb3BzIiwic2VsZWN0ZWQiLCJnZXRIb3N0UHJvcHMkMSIsImhvc3RQcm9wcyIsIkNoaWxkcmVuIiwiZmxhdHRlbkNoaWxkcmVuIiwiZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lJDMiLCJnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDQiLCJkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSIsImdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSIsInZhbHVlUHJvcE5hbWVzIiwidXBkYXRlT3B0aW9ucyIsIm11bHRpcGxlIiwicHJvcFZhbHVlIiwic2V0RGVmYXVsdFNlbGVjdGVkIiwic2VsZWN0ZWRWYWx1ZXMiLCJzZWxlY3RlZFZhbHVlIiwiZGVmYXVsdFNlbGVjdGVkIiwiX3NlbGVjdGVkVmFsdWUiLCJfaTIiLCJnZXRIb3N0UHJvcHMkMiIsImluaXRXcmFwcGVyU3RhdGUkMSIsImNoZWNrU2VsZWN0UHJvcFR5cGVzIiwid2FzTXVsdGlwbGUiLCJnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDUiLCJkaWRXYXJuVmFsRGVmYXVsdFZhbCIsImdldEhvc3RQcm9wcyQzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJpbml0V3JhcHBlclN0YXRlJDIiLCJ1cGRhdGVXcmFwcGVyJDEiLCJwb3N0TW91bnRXcmFwcGVyJDMiLCJIVE1MX05BTUVTUEFDRSQxIiwiTUFUSF9OQU1FU1BBQ0UiLCJTVkdfTkFNRVNQQUNFIiwiTmFtZXNwYWNlcyIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJnZXRJbnRyaW5zaWNOYW1lc3BhY2UiLCJnZXRDaGlsZE5hbWVzcGFjZSIsInBhcmVudE5hbWVzcGFjZSIsInJldXNhYmxlU1ZHQ29udGFpbmVyIiwic2V0SW5uZXJIVE1MIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwic3ZnTm9kZSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJhcmcwIiwiYXJnMSIsImFyZzIiLCJhcmczIiwic2V0VGV4dENvbnRlbnQiLCJsYXN0Q2hpbGQiLCJpc1VuaXRsZXNzTnVtYmVyIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJkYW5nZXJvdXNTdHlsZVZhbHVlIiwiaXNDdXN0b21Qcm9wZXJ0eSIsInN1YnN0cmluZyIsInByZWZpeEtleSIsImJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybiIsImJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiIsIndhcm5lZFN0eWxlTmFtZXMiLCJ3YXJuZWRTdHlsZVZhbHVlcyIsIndhcm5lZEZvck5hTlZhbHVlIiwid2FybmVkRm9ySW5maW5pdHlWYWx1ZSIsIndhcm5WYWxpZFN0eWxlJDEiLCJ3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSIsIndhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSIsIndhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiIsIndhcm5TdHlsZVZhbHVlSXNOYU4iLCJpc0Zpbml0ZSIsIndhcm5TdHlsZVZhbHVlSXNJbmZpbml0eSIsImNyZWF0ZURhbmdlcm91c1N0cmluZ0ZvclN0eWxlcyIsInN0eWxlcyIsInNlcmlhbGl6ZWQiLCJkZWxpbWl0ZXIiLCJzdHlsZU5hbWUiLCJzdHlsZVZhbHVlIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJzZXRQcm9wZXJ0eSIsInZvaWRFbGVtZW50VGFncyIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwicGFyYW0iLCJ3YnIiLCJIVE1MJDEiLCJhc3NlcnRWYWxpZFByb3BzIiwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIiwiaXNDdXN0b21Db21wb25lbnQiLCJwb3NzaWJsZVN0YW5kYXJkTmFtZXMiLCJhY2NlcHQiLCJhY2NlcHRjaGFyc2V0IiwiYWNjZXB0LWNoYXJzZXQiLCJhY2Nlc3NrZXkiLCJhbGxvd2Z1bGxzY3JlZW4iLCJhbHQiLCJhcyIsImFzeW5jIiwiYXV0b2NhcGl0YWxpemUiLCJhdXRvY29tcGxldGUiLCJhdXRvY29ycmVjdCIsImF1dG9mb2N1cyIsImF1dG9wbGF5IiwiYXV0b3NhdmUiLCJjZWxscGFkZGluZyIsImNlbGxzcGFjaW5nIiwiY2hhbGxlbmdlIiwiY2hhcnNldCIsImNpdGUiLCJjbGFzcyIsImNsYXNzaWQiLCJjbGFzc25hbWUiLCJjb2xzIiwiY29sc3BhbiIsImNvbnRlbnRlZGl0YWJsZSIsImNvbnRleHRtZW51IiwiY29udHJvbHMiLCJjb250cm9sc2xpc3QiLCJjb29yZHMiLCJjcm9zc29yaWdpbiIsImRhbmdlcm91c2x5c2V0aW5uZXJodG1sIiwiZGVmYXVsdGNoZWNrZWQiLCJkZWZhdWx0dmFsdWUiLCJkZWZlciIsImRpciIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jdHlwZSIsImZvcm1tZXRob2QiLCJmb3JtYWN0aW9uIiwiZm9ybWVuY3R5cGUiLCJmb3Jtbm92YWxpZGF0ZSIsImZvcm10YXJnZXQiLCJmcmFtZWJvcmRlciIsImhlaWdodCIsImhpZ2giLCJocmVmIiwiaHJlZmxhbmciLCJodG1sZm9yIiwiaHR0cGVxdWl2IiwiaHR0cC1lcXVpdiIsImljb24iLCJpbm5lcmh0bWwiLCJpbnB1dG1vZGUiLCJpbnRlZ3JpdHkiLCJpdGVtaWQiLCJpdGVtcHJvcCIsIml0ZW1yZWYiLCJpdGVtc2NvcGUiLCJpdGVtdHlwZSIsImtleXBhcmFtcyIsImtleXR5cGUiLCJsYW5nIiwibG9vcCIsImxvdyIsIm1hbmlmZXN0IiwibWFyZ2lud2lkdGgiLCJtYXJnaW5oZWlnaHQiLCJtYXhsZW5ndGgiLCJtZWRpYSIsIm1lZGlhZ3JvdXAiLCJtZXRob2QiLCJtaW5sZW5ndGgiLCJtdXRlZCIsIm5vbW9kdWxlIiwibm9uY2UiLCJub3ZhbGlkYXRlIiwib3B0aW11bSIsInBhdHRlcm4iLCJwbGFjZWhvbGRlciIsInBsYXlzaW5saW5lIiwicG9zdGVyIiwicHJlbG9hZCIsInByb2ZpbGUiLCJyYWRpb2dyb3VwIiwicmVhZG9ubHkiLCJyZWZlcnJlcnBvbGljeSIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb2xlIiwicm93c3BhbiIsInNhbmRib3giLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNoYXBlIiwic2l6ZXMiLCJzcGFuIiwic3BlbGxjaGVjayIsInNyY2RvYyIsInNyY2xhbmciLCJzcmNzZXQiLCJzdW1tYXJ5IiwidGFiaW5kZXgiLCJ0aXRsZSIsInVzZW1hcCIsIndpZHRoIiwid21vZGUiLCJhYm91dCIsImFjY2VudGhlaWdodCIsImFjY2VudC1oZWlnaHQiLCJhY2N1bXVsYXRlIiwiYWRkaXRpdmUiLCJhbGlnbm1lbnRiYXNlbGluZSIsImFsaWdubWVudC1iYXNlbGluZSIsImFsbG93cmVvcmRlciIsImFscGhhYmV0aWMiLCJhbXBsaXR1ZGUiLCJhcmFiaWNmb3JtIiwiYXJhYmljLWZvcm0iLCJhc2NlbnQiLCJhdHRyaWJ1dGVuYW1lIiwiYXR0cmlidXRldHlwZSIsImF1dG9yZXZlcnNlIiwiYXppbXV0aCIsImJhc2VmcmVxdWVuY3kiLCJiYXNlbGluZXNoaWZ0IiwiYmFzZWxpbmUtc2hpZnQiLCJiYXNlcHJvZmlsZSIsImJib3giLCJiZWdpbiIsImJpYXMiLCJieSIsImNhbGNtb2RlIiwiY2FwaGVpZ2h0IiwiY2FwLWhlaWdodCIsImNsaXAiLCJjbGlwcGF0aCIsImNsaXAtcGF0aCIsImNsaXBwYXRodW5pdHMiLCJjbGlwcnVsZSIsImNsaXAtcnVsZSIsImNvbG9yaW50ZXJwb2xhdGlvbiIsImNvbG9yLWludGVycG9sYXRpb24iLCJjb2xvcmludGVycG9sYXRpb25maWx0ZXJzIiwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIiwiY29sb3Jwcm9maWxlIiwiY29sb3ItcHJvZmlsZSIsImNvbG9ycmVuZGVyaW5nIiwiY29sb3ItcmVuZGVyaW5nIiwiY29udGVudHNjcmlwdHR5cGUiLCJjb250ZW50c3R5bGV0eXBlIiwiY3giLCJjeSIsImRhdGF0eXBlIiwiZGVjZWxlcmF0ZSIsImRlc2NlbnQiLCJkaWZmdXNlY29uc3RhbnQiLCJkaXZpc29yIiwiZG9taW5hbnRiYXNlbGluZSIsImRvbWluYW50LWJhc2VsaW5lIiwiZHVyIiwiZHgiLCJkeSIsImVkZ2Vtb2RlIiwiZWxldmF0aW9uIiwiZW5hYmxlYmFja2dyb3VuZCIsImVuYWJsZS1iYWNrZ3JvdW5kIiwiZXhwb25lbnQiLCJleHRlcm5hbHJlc291cmNlc3JlcXVpcmVkIiwiZmlsbCIsImZpbGxvcGFjaXR5IiwiZmlsbC1vcGFjaXR5IiwiZmlsbHJ1bGUiLCJmaWxsLXJ1bGUiLCJmaWx0ZXJyZXMiLCJmaWx0ZXJ1bml0cyIsImZsb29kb3BhY2l0eSIsImZsb29kLW9wYWNpdHkiLCJmbG9vZGNvbG9yIiwiZmxvb2QtY29sb3IiLCJmb2N1c2FibGUiLCJmb250ZmFtaWx5IiwiZm9udC1mYW1pbHkiLCJmb250c2l6ZSIsImZvbnQtc2l6ZSIsImZvbnRzaXplYWRqdXN0IiwiZm9udC1zaXplLWFkanVzdCIsImZvbnRzdHJldGNoIiwiZm9udC1zdHJldGNoIiwiZm9udHN0eWxlIiwiZm9udC1zdHlsZSIsImZvbnR2YXJpYW50IiwiZm9udC12YXJpYW50IiwiZm9udHdlaWdodCIsImZvbnQtd2VpZ2h0IiwiZngiLCJmeSIsImcxIiwiZzIiLCJnbHlwaG5hbWUiLCJnbHlwaC1uYW1lIiwiZ2x5cGhvcmllbnRhdGlvbmhvcml6b250YWwiLCJnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIiwiZ2x5cGhvcmllbnRhdGlvbnZlcnRpY2FsIiwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwiLCJnbHlwaHJlZiIsImdyYWRpZW50dHJhbnNmb3JtIiwiZ3JhZGllbnR1bml0cyIsImhhbmdpbmciLCJob3JpemFkdngiLCJob3Jpei1hZHYteCIsImhvcml6b3JpZ2lueCIsImhvcml6LW9yaWdpbi14IiwiaWRlb2dyYXBoaWMiLCJpbWFnZXJlbmRlcmluZyIsImltYWdlLXJlbmRlcmluZyIsImluMiIsImluIiwiaW5saXN0IiwiaW50ZXJjZXB0IiwiazEiLCJrMyIsIms0Iiwia2VybmVsbWF0cml4Iiwia2VybmVsdW5pdGxlbmd0aCIsImtlcm5pbmciLCJrZXlwb2ludHMiLCJrZXlzcGxpbmVzIiwia2V5dGltZXMiLCJsZW5ndGhhZGp1c3QiLCJsZXR0ZXJzcGFjaW5nIiwibGV0dGVyLXNwYWNpbmciLCJsaWdodGluZ2NvbG9yIiwibGlnaHRpbmctY29sb3IiLCJsaW1pdGluZ2NvbmVhbmdsZSIsImxvY2FsIiwibWFya2VyZW5kIiwibWFya2VyLWVuZCIsIm1hcmtlcmhlaWdodCIsIm1hcmtlcm1pZCIsIm1hcmtlci1taWQiLCJtYXJrZXJzdGFydCIsIm1hcmtlci1zdGFydCIsIm1hcmtlcnVuaXRzIiwibWFya2Vyd2lkdGgiLCJtYXNrIiwibWFza2NvbnRlbnR1bml0cyIsIm1hc2t1bml0cyIsIm1hdGhlbWF0aWNhbCIsIm51bW9jdGF2ZXMiLCJvcGVyYXRvciIsIm9yaWVudCIsIm9yaWVudGF0aW9uIiwib3JpZ2luIiwib3ZlcmZsb3ciLCJvdmVybGluZXBvc2l0aW9uIiwib3ZlcmxpbmUtcG9zaXRpb24iLCJvdmVybGluZXRoaWNrbmVzcyIsIm92ZXJsaW5lLXRoaWNrbmVzcyIsInBhaW50b3JkZXIiLCJwYWludC1vcmRlciIsInBhbm9zZTEiLCJwYW5vc2UtMSIsInBhdGhsZW5ndGgiLCJwYXR0ZXJuY29udGVudHVuaXRzIiwicGF0dGVybnRyYW5zZm9ybSIsInBhdHRlcm51bml0cyIsInBvaW50ZXJldmVudHMiLCJwb2ludGVyLWV2ZW50cyIsInBvaW50cyIsInBvaW50c2F0eCIsInBvaW50c2F0eSIsInBvaW50c2F0eiIsInByZXNlcnZlYWxwaGEiLCJwcmVzZXJ2ZWFzcGVjdHJhdGlvIiwicHJpbWl0aXZldW5pdHMiLCJyYWRpdXMiLCJyZWZ4IiwicmVmeSIsInJlbmRlcmluZ2ludGVudCIsInJlbmRlcmluZy1pbnRlbnQiLCJyZXBlYXRjb3VudCIsInJlcGVhdGR1ciIsInJlcXVpcmVkZXh0ZW5zaW9ucyIsInJlcXVpcmVkZmVhdHVyZXMiLCJyZXNvdXJjZSIsInJlc3RhcnQiLCJyb3RhdGUiLCJyeCIsInJ5Iiwic2NhbGUiLCJzZWN1cml0eSIsInNlZWQiLCJzaGFwZXJlbmRlcmluZyIsInNoYXBlLXJlbmRlcmluZyIsInNsb3BlIiwic3BhY2luZyIsInNwZWN1bGFyY29uc3RhbnQiLCJzcGVjdWxhcmV4cG9uZW50Iiwic3BlZWQiLCJzcHJlYWRtZXRob2QiLCJzdGFydG9mZnNldCIsInN0ZGRldmlhdGlvbiIsInN0ZW1oIiwic3RlbXYiLCJzdGl0Y2h0aWxlcyIsInN0b3Bjb2xvciIsInN0b3AtY29sb3IiLCJzdG9wb3BhY2l0eSIsInN0b3Atb3BhY2l0eSIsInN0cmlrZXRocm91Z2hwb3NpdGlvbiIsInN0cmlrZXRocm91Z2gtcG9zaXRpb24iLCJzdHJpa2V0aHJvdWdodGhpY2tuZXNzIiwic3RyaWtldGhyb3VnaC10aGlja25lc3MiLCJzdHJva2UiLCJzdHJva2VkYXNoYXJyYXkiLCJzdHJva2UtZGFzaGFycmF5Iiwic3Ryb2tlZGFzaG9mZnNldCIsInN0cm9rZS1kYXNob2Zmc2V0Iiwic3Ryb2tlbGluZWNhcCIsInN0cm9rZS1saW5lY2FwIiwic3Ryb2tlbGluZWpvaW4iLCJzdHJva2UtbGluZWpvaW4iLCJzdHJva2VtaXRlcmxpbWl0Iiwic3Ryb2tlLW1pdGVybGltaXQiLCJzdHJva2V3aWR0aCIsInN0cm9rZS13aWR0aCIsInN0cm9rZW9wYWNpdHkiLCJzdHJva2Utb3BhY2l0eSIsInN1cHByZXNzY29udGVudGVkaXRhYmxld2FybmluZyIsInN1cHByZXNzaHlkcmF0aW9ud2FybmluZyIsInN1cmZhY2VzY2FsZSIsInN5c3RlbWxhbmd1YWdlIiwidGFibGV2YWx1ZXMiLCJ0YXJnZXR4IiwidGFyZ2V0eSIsInRleHRhbmNob3IiLCJ0ZXh0LWFuY2hvciIsInRleHRkZWNvcmF0aW9uIiwidGV4dC1kZWNvcmF0aW9uIiwidGV4dGxlbmd0aCIsInRleHRyZW5kZXJpbmciLCJ0ZXh0LXJlbmRlcmluZyIsInRyYW5zZm9ybSIsInR5cGVvZiIsInUxIiwidTIiLCJ1bmRlcmxpbmVwb3NpdGlvbiIsInVuZGVybGluZS1wb3NpdGlvbiIsInVuZGVybGluZXRoaWNrbmVzcyIsInVuZGVybGluZS10aGlja25lc3MiLCJ1bmljb2RlIiwidW5pY29kZWJpZGkiLCJ1bmljb2RlLWJpZGkiLCJ1bmljb2RlcmFuZ2UiLCJ1bmljb2RlLXJhbmdlIiwidW5pdHNwZXJlbSIsInVuaXRzLXBlci1lbSIsInVuc2VsZWN0YWJsZSIsInZhbHBoYWJldGljIiwidi1hbHBoYWJldGljIiwidmVjdG9yZWZmZWN0IiwidmVjdG9yLWVmZmVjdCIsInZlcnRhZHZ5IiwidmVydC1hZHYteSIsInZlcnRvcmlnaW54IiwidmVydC1vcmlnaW4teCIsInZlcnRvcmlnaW55IiwidmVydC1vcmlnaW4teSIsInZoYW5naW5nIiwidi1oYW5naW5nIiwidmlkZW9ncmFwaGljIiwidi1pZGVvZ3JhcGhpYyIsInZpZXdib3giLCJ2aWV3dGFyZ2V0IiwidmlzaWJpbGl0eSIsInZtYXRoZW1hdGljYWwiLCJ2LW1hdGhlbWF0aWNhbCIsInZvY2FiIiwid2lkdGhzIiwid29yZHNwYWNpbmciLCJ3b3JkLXNwYWNpbmciLCJ3cml0aW5nbW9kZSIsIndyaXRpbmctbW9kZSIsIngxIiwieDIiLCJ4Y2hhbm5lbHNlbGVjdG9yIiwieGhlaWdodCIsIngtaGVpZ2h0IiwieGxpbmthY3R1YXRlIiwieGxpbms6YWN0dWF0ZSIsInhsaW5rYXJjcm9sZSIsInhsaW5rOmFyY3JvbGUiLCJ4bGlua2hyZWYiLCJ4bGluazpocmVmIiwieGxpbmtyb2xlIiwieGxpbms6cm9sZSIsInhsaW5rc2hvdyIsInhsaW5rOnNob3ciLCJ4bGlua3RpdGxlIiwieGxpbms6dGl0bGUiLCJ4bGlua3R5cGUiLCJ4bGluazp0eXBlIiwieG1sYmFzZSIsInhtbDpiYXNlIiwieG1sbGFuZyIsInhtbDpsYW5nIiwieG1sbnMiLCJ4bWw6c3BhY2UiLCJ4bWxuc3hsaW5rIiwieG1sbnM6eGxpbmsiLCJ4bWxzcGFjZSIsInkxIiwieTIiLCJ5Y2hhbm5lbHNlbGVjdG9yIiwieiIsInpvb21hbmRwYW4iLCJhcmlhUHJvcGVydGllcyIsImFyaWEtY3VycmVudCIsImFyaWEtZGV0YWlscyIsImFyaWEtZGlzYWJsZWQiLCJhcmlhLWhpZGRlbiIsImFyaWEtaW52YWxpZCIsImFyaWEta2V5c2hvcnRjdXRzIiwiYXJpYS1sYWJlbCIsImFyaWEtcm9sZWRlc2NyaXB0aW9uIiwiYXJpYS1hdXRvY29tcGxldGUiLCJhcmlhLWNoZWNrZWQiLCJhcmlhLWV4cGFuZGVkIiwiYXJpYS1oYXNwb3B1cCIsImFyaWEtbGV2ZWwiLCJhcmlhLW1vZGFsIiwiYXJpYS1tdWx0aWxpbmUiLCJhcmlhLW11bHRpc2VsZWN0YWJsZSIsImFyaWEtb3JpZW50YXRpb24iLCJhcmlhLXBsYWNlaG9sZGVyIiwiYXJpYS1wcmVzc2VkIiwiYXJpYS1yZWFkb25seSIsImFyaWEtcmVxdWlyZWQiLCJhcmlhLXNlbGVjdGVkIiwiYXJpYS1zb3J0IiwiYXJpYS12YWx1ZW1heCIsImFyaWEtdmFsdWVtaW4iLCJhcmlhLXZhbHVlbm93IiwiYXJpYS12YWx1ZXRleHQiLCJhcmlhLWF0b21pYyIsImFyaWEtYnVzeSIsImFyaWEtbGl2ZSIsImFyaWEtcmVsZXZhbnQiLCJhcmlhLWRyb3BlZmZlY3QiLCJhcmlhLWdyYWJiZWQiLCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnQiLCJhcmlhLWNvbGNvdW50IiwiYXJpYS1jb2xpbmRleCIsImFyaWEtY29sc3BhbiIsImFyaWEtY29udHJvbHMiLCJhcmlhLWRlc2NyaWJlZGJ5IiwiYXJpYS1lcnJvcm1lc3NhZ2UiLCJhcmlhLWZsb3d0byIsImFyaWEtbGFiZWxsZWRieSIsImFyaWEtb3ducyIsImFyaWEtcG9zaW5zZXQiLCJhcmlhLXJvd2NvdW50IiwiYXJpYS1yb3dpbmRleCIsImFyaWEtcm93c3BhbiIsImFyaWEtc2V0c2l6ZSIsIndhcm5lZFByb3BlcnRpZXMiLCJyQVJJQSIsInJBUklBQ2FtZWwiLCJnZXRTdGFja0FkZGVuZHVtIiwidmFsaWRhdGVQcm9wZXJ0eSIsImFyaWFOYW1lIiwiY29ycmVjdE5hbWUiLCJzdGFuZGFyZE5hbWUiLCJ2YWxpZGF0ZVByb3BlcnRpZXMiLCJpbnZhbGlkUHJvcHMiLCJ1bmtub3duUHJvcFN0cmluZyIsIndhcm5JbnZhbGlkQVJJQVByb3BzIiwiZGlkV2FyblZhbHVlTnVsbCIsImdldFN0YWNrQWRkZW5kdW0kMSIsImdldFN0YWNrQWRkZW5kdW0kMiIsInZhbGlkYXRlUHJvcGVydHkkMSIsIndhcm5lZFByb3BlcnRpZXMkMSIsIl9oYXNPd25Qcm9wZXJ0eSIsIkVWRU5UX05BTUVfUkVHRVgiLCJJTlZBTElEX0VWRU5UX05BTUVfUkVHRVgiLCJyQVJJQSQxIiwickFSSUFDYW1lbCQxIiwiY2FuVXNlRXZlbnRTeXN0ZW0iLCJpc1Jlc2VydmVkIiwid2FyblVua25vd25Qcm9wZXJ0aWVzIiwidW5rbm93blByb3BzIiwibm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlIiwiZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lJDIiLCJnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDMiLCJkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiIsImRpZFdhcm5TaGFkeURPTSIsIkRBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MIiwiU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIiwiU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMSIsIkFVVE9GT0NVUyIsIkNISUxEUkVOIiwiU1RZTEUiLCJIVE1MIiwiSFRNTF9OQU1FU1BBQ0UiLCJ3YXJuZWRVbmtub3duVGFncyIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsInZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQiLCJ3YXJuRm9yVGV4dERpZmZlcmVuY2UiLCJ3YXJuRm9yUHJvcERpZmZlcmVuY2UiLCJ3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzIiwid2FybkZvckludmFsaWRFdmVudExpc3RlbmVyIiwibm9ybWFsaXplSFRNTCIsImRpYWxvZyIsInZhbGlkYXRlUHJvcGVydGllcyQxIiwidmFsaWRhdGVQcm9wZXJ0aWVzJDIiLCJOT1JNQUxJWkVfTkVXTElORVNfUkVHRVgiLCJOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgiLCJlbnN1cmVMaXN0ZW5pbmdUbyIsInJvb3RDb250YWluZXJFbGVtZW50IiwiY29udGVudERvY3VtZW50SGFuZGxlIiwibGlzdGVuVG8iLCJnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIiLCJ0cmFwQ2xpY2tPbk5vbkludGVyYWN0aXZlRWxlbWVudCIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50JDEiLCJkb21FbGVtZW50IiwiZGl2IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUkMSIsImNyZWF0ZVRleHROb2RlIiwic2V0SW5pdGlhbFByb3BlcnRpZXMkMSIsInJhd1Byb3BzIiwic2hhZHlSb290IiwicHJvcEtleSIsIm5leHRQcm9wIiwibmV4dEh0bWwiLCJzZXRJbml0aWFsRE9NUHJvcGVydGllcyIsInBvc3RNb3VudFdyYXBwZXIkMSIsInBvc3RNb3VudFdyYXBwZXIkMiIsIm9uQ2xpY2siLCJkaWZmUHJvcGVydGllcyQxIiwibGFzdFJhd1Byb3BzIiwibmV4dFJhd1Byb3BzIiwibGFzdFByb3BzIiwic3R5bGVVcGRhdGVzIiwibGFzdFN0eWxlIiwibGFzdFByb3AiLCJsYXN0SHRtbCIsInVwZGF0ZVByb3BlcnRpZXMkMSIsIndhc0N1c3RvbUNvbXBvbmVudFRhZyIsInVwZGF0ZURPTVByb3BlcnRpZXMiLCJwb3N0VXBkYXRlV3JhcHBlciIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMkMSIsImV4dHJhQXR0cmlidXRlTmFtZXMiLCJhdHRyaWJ1dGVzIiwic2VydmVyVmFsdWUiLCJyYXdIdG1sIiwic2VydmVySFRNTCIsImV4cGVjdGVkSFRNTCIsImV4cGVjdGVkU3R5bGUiLCJpc01pc21hdGNoRHVlVG9CYWRDYXNpbmciLCJvd25OYW1lc3BhY2UiLCJkaWZmSHlkcmF0ZWRUZXh0JDEiLCJ0ZXh0Tm9kZSIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0JDEiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50JDEiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0JDEiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQkMSIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCQxIiwibWFya3VwIiwic2VydmVyVGV4dCIsImNsaWVudFRleHQiLCJub3JtYWxpemVkQ2xpZW50VGV4dCIsIm5vcm1hbGl6ZWRTZXJ2ZXJUZXh0IiwiY2xpZW50VmFsdWUiLCJub3JtYWxpemVkQ2xpZW50VmFsdWUiLCJub3JtYWxpemVkU2VydmVyVmFsdWUiLCJhdHRyaWJ1dGVOYW1lcyIsInRlc3RFbGVtZW50IiwidmFsaWRhdGVET01OZXN0aW5nIiwiUmVhY3RET01GaWJlckNvbXBvbmVudCIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQzIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQyIiwiZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQ2Iiwic3BlY2lhbFRhZ3MiLCJpblNjb3BlVGFncyIsImJ1dHRvblNjb3BlVGFncyIsImltcGxpZWRFbmRUYWdzIiwiZW1wdHlBbmNlc3RvckluZm8iLCJmb3JtVGFnIiwiYVRhZ0luU2NvcGUiLCJidXR0b25UYWdJblNjb3BlIiwibm9iclRhZ0luU2NvcGUiLCJwVGFnSW5CdXR0b25TY29wZSIsImxpc3RJdGVtVGFnQXV0b2Nsb3NpbmciLCJkbEl0ZW1UYWdBdXRvY2xvc2luZyIsImRpZFdhcm4iLCJjaGlsZFRhZyIsImNoaWxkVGV4dCIsImFuY2VzdG9ySW5mbyIsInBhcmVudEluZm8iLCJwYXJlbnRUYWciLCJpbnZhbGlkUGFyZW50IiwiaXNUYWdWYWxpZFdpdGhQYXJlbnQiLCJpbnZhbGlkQW5jZXN0b3IiLCJmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnIiwiaW52YWxpZFBhcmVudE9yQW5jZXN0b3IiLCJhbmNlc3RvclRhZyIsIndhcm5LZXkiLCJ0YWdEaXNwbGF5TmFtZSIsIndoaXRlc3BhY2VJbmZvIiwidXBkYXRlZEFuY2VzdG9ySW5mbyIsIm9sZEluZm8iLCJ3YXJuT25JbnZhbGlkQ2FsbGJhY2siLCJ2YWxpZGF0ZURPTU5lc3RpbmckMSIsInRvcExldmVsVXBkYXRlV2FybmluZ3MiLCJkaWRXYXJuQWJvdXRVbnN0YWJsZUNyZWF0ZVBvcnRhbCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJob3N0SW5zdGFuY2UiLCJET01SZW5kZXJlciIsIl9pbnRlcm5hbFJvb3QiLCJpc1Jvb3RSZW5kZXJlZEJ5U29tZVJlYWN0Iiwicm9vdEVsIiwiZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyIiwiaGFzTm9uUm9vdFJlYWN0Q2hpbGQiLCJldmVudHNFbmFibGVkIiwic2VsZWN0aW9uSW5mb3JtYXRpb24iLCJSZWFjdEJhdGNoIiwiX2RpZENvbXBsZXRlIiwiX2hhc0NoaWxkcmVuIiwiX2NoaWxkcmVuIiwiUmVhY3RXb3JrIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIlJlYWN0Um9vdCIsImlzVmFsaWRDb250YWluZXIiLCJzaG91bGRBdXRvRm9jdXNIb3N0Q29tcG9uZW50IiwiYXV0b0ZvY3VzIiwiaW50ZXJuYWxSb290Iiwid29yayIsIm9uQ29tcGxldGUiLCJjYWxsYmFja3MiLCJjb21taXQiLCJwcmV2aW91cyIsIm9uQ29tbWl0IiwiX2NhbGxiYWNrMiIsInVubW91bnQiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjcmVhdGVCYXRjaCIsImluc2VydEFmdGVyIiwibmFtZXNwYWNlIiwidmFsaWRhdGVkVGFnIiwicGFyZW50SG9zdENvbnRleHQiLCJwYXJlbnRIb3N0Q29udGV4dERldiIsImludGVybmFsSW5zdGFuY2VIYW5kbGUiLCJob3N0Q29udGV4dERldiIsIm93bkFuY2VzdG9ySW5mbyIsIl9faHRtbCIsImJlZm9yZUNoaWxkIiwid2FybmVkQWJvdXRIeWRyYXRlQVBJIiwibGVnYWN5Q3JlYXRlUm9vdEZyb21ET01Db250YWluZXIiLCJmb3JjZUh5ZHJhdGUiLCJzaG91bGRIeWRyYXRlIiwicm9vdEVsZW1lbnQiLCJzaG91bGRIeWRyYXRlRHVlVG9MZWdhY3lIZXVyaXN0aWMiLCJ3YXJuZWQiLCJyb290U2libGluZyIsImxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiX29yaWdpbmFsQ2FsbGJhY2siLCJvcmlnaW5hbENhbGxiYWNrIiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlUG9ydGFsJDEiLCJSZWFjdERPTSIsImZpbmRET01Ob2RlIiwiY29tcG9uZW50T3JFbGVtZW50Iiwid2FybmVkQWJvdXRSZWZzSW5SZW5kZXIiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNvbnRhaW5lck5vZGUiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicmVuZGVyZWRCeURpZmZlcmVudFJlYWN0IiwiX3Jvb3RFbCIsImlzQ29udGFpbmVyUmVhY3RSb290IiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJwcm90b2NvbCIsIlJlYWN0RE9NJDIiLCJSZWFjdERPTSQzIiwicmVhY3REb20iLCJ3YXJuTm9vcCIsInB1YmxpY0luc3RhbmNlIiwiX2NvbnN0cnVjdG9yIiwiUmVhY3ROb29wVXBkYXRlUXVldWUiLCJjb21wbGV0ZVN0YXRlIiwiZm9yY2VVcGRhdGUiLCJkZXByZWNhdGVkQVBJcyIsInJlcGxhY2VTdGF0ZSIsImRlZmluZURlcHJlY2F0aW9uV2FybmluZyIsIm1ldGhvZE5hbWUiLCJDb21wb25lbnREdW1teSIsIlB1cmVDb21wb25lbnQiLCJwdXJlQ29tcG9uZW50UHJvdG90eXBlIiwiUkVTRVJWRURfUFJPUFMiLCJfX3NlbGYiLCJfX3NvdXJjZSIsInNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duIiwic3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24iLCJoYXNWYWxpZFJlZiIsImlzUmVhY3RXYXJuaW5nIiwiaGFzVmFsaWRLZXkiLCJSZWFjdEVsZW1lbnQiLCJjaGlsZHJlbkxlbmd0aCIsImNoaWxkQXJyYXkiLCJ3YXJuQWJvdXRBY2Nlc3NpbmdLZXkiLCJkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlciIsIndhcm5BYm91dEFjY2Vzc2luZ1JlZiIsImRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyIiwiaXNWYWxpZEVsZW1lbnQiLCJpbXBsIiwiU0VQQVJBVE9SIiwiU1VCU0VQQVJBVE9SIiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJlc2NhcGVVc2VyUHJvdmlkZWRLZXkiLCJQT09MX1NJWkUiLCJ0cmF2ZXJzZUNvbnRleHRQb29sIiwiZ2V0UG9vbGVkVHJhdmVyc2VDb250ZXh0IiwibWFwUmVzdWx0Iiwia2V5UHJlZml4IiwibWFwRnVuY3Rpb24iLCJtYXBDb250ZXh0IiwidHJhdmVyc2VDb250ZXh0IiwicmVsZWFzZVRyYXZlcnNlQ29udGV4dCIsInRyYXZlcnNlQWxsQ2hpbGRyZW4iLCJ0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbCIsIm5hbWVTb0ZhciIsImludm9rZUNhbGxiYWNrIiwiZ2V0Q29tcG9uZW50S2V5Iiwic3VidHJlZUNvdW50IiwibmV4dE5hbWVQcmVmaXgiLCJjaGlsZHJlblN0cmluZyIsImVzY2FwZXJMb29rdXAiLCI6IiwiZm9yRWFjaFNpbmdsZUNoaWxkIiwibWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCIsImNoaWxkS2V5Iiwib2xkRWxlbWVudCIsIm5ld0tleSIsIm1hcHBlZENoaWxkIiwibWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCIsIl9zZWxmIiwiZXNjYXBlZFByZWZpeCIsImdldERpc3BsYXlOYW1lIiwiY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQiLCJwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biIsInZhbGlkYXRlRXhwbGljaXRLZXkiLCJwYXJlbnROYW1lIiwiZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyIsImNoaWxkT3duZXIiLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsInZhbGlkYXRlUHJvcFR5cGVzIiwiY29tcG9uZW50Q2xhc3MiLCJQcm9wVHlwZXMiLCJjcmVhdGVFbGVtZW50V2l0aFZhbGlkYXRpb24iLCJ2YWxpZFR5cGUiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJzb3VyY2VJbmZvIiwiZWxlbWVudFByb3BzIiwiZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0iLCJ0eXBlU3RyaW5nIiwidmFsaWRhdGVGcmFnbWVudFByb3BzIiwiZm9yRWFjaEZ1bmMiLCJmb3JFYWNoQ29udGV4dCIsInRvQXJyYXkiLCJvbmx5IiwiY3JlYXRlUmVmIiwicmVmT2JqZWN0Iiwic2VhbCIsImNyZWF0ZUNvbnRleHQiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9kZWZhdWx0VmFsdWUiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNsb25lRWxlbWVudCIsIm5ld0VsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwidmFsaWRhdGVkRmFjdG9yeSIsIlJlYWN0Q29tcG9uZW50VHJlZUhvb2siLCJSZWFjdCQyIiwiUmVhY3QkMyIsInJlYWN0IiwiX2luZGV4IiwiX25hbm9TcWwiLCJ1c2VySWQiLCJfcmVhY3REb20yIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtB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QUFBLGVBQ0FDLGFBQUEsZUFDQUMsZ0JBQUEsZUFDQUMsVUFBQSxZQUNBQyxhQUFBLFlBQ0FDLFVBQUEsWUFDQUMsYUFBQSxZQUNBQyxVQUFBLFlBQ0FDLGFBQUEsWUFDQUMsV0FBQSxhQUNBQyxjQUFBLGFBQ0FDLFVBQUEsWUFDQUMsYUFBQSxZQUNBQyxRQUFBLFVBQ0FDLFdBQUEsVUFDQUMsUUFBQSxVQUNBQyxXQUFBLFVBQ0FDLE1BQUEsUUFDQUMsWUFBQSxXQUNBQyxXQUFBLGFBQ0FDLGNBQUEsYUFDQUMsU0FBQSxXQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQXBxRSxFQUFBLElBQ0FxcUUsaUJBQUEsbUJBQ0FDLEVBQUEsSUFDQUMsV0FBQSxjQUdBQyxJQUNBQyxlQUFBLEVBQ0FDLGVBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsY0FBQSxFQUNBQyxlQUFBLEVBQ0FDLG9CQUFBLEVBQ0FDLGFBQUEsRUFDQUMsdUJBQUEsRUFFQUMsb0JBQUEsRUFDQUMsZUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxhQUFBLEVBQ0FDLGFBQUEsRUFDQUMsaUJBQUEsRUFDQUMsdUJBQUEsRUFDQUMsbUJBQUEsRUFDQUMsbUJBQUEsRUFDQUMsZUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxZQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGlCQUFBLEVBRUFDLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxZQUFBLEVBQ0FDLGdCQUFBLEVBRUFDLGtCQUFBLEVBQ0FDLGVBQUEsRUFFQUMsd0JBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsZUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxtQkFBQSxFQUNBQyxvQkFBQSxFQUNBQyxjQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLFlBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsZUFBQSxFQUNBQyxlQUFBLEdBR0FDLE1BQ0FDLEdBQUEsSUFBQWwxRCxPQUFB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QixvREFFQUUseUJBR0FtdEUsNEJBTUEsSUFBQUMsR0FBQS94SCxPQUFBd0ksUUFDQXVQLFFBQUE2VSxLQUdBb2xHLEdBQUFELElBQUFubEcsSUFBQW1sRyxHQUlBRSxHQUFBRCxHQUFBLFFBQUFBLEdBQUEsUUFBQUEsR0FFQTN5SCxFQUFBRCxRQUFBNnlILElBaDNDQSxpQ0NkQSxRQUFBL3lILEVBQUEsU0FDQUEsRUFBQSxNQUNBZ3pILEVBQUFoekgsRUFBQSxLQUNBaXpILEVBQUFqekgsRUFBQSx5REFDQUEsRUFBQSxLQUVBNlksUUFBYUosWUFBWSxTQUFDaFcsR0FDeEIsT0FBTyxFQUFBd3dILEVBQUEzMUcsUUFBT3pILE1BQU0sVUFDbEJxOUcsT0FBUSxRQUFTNWxHLFFBQVMsS0FDekJuUyxTQUdMZzRHLEVBQUF0NkcsUUFBUzhWLE9BQ1B6QixFQUFBclUsUUFBQXVMLGNBQUE0dUcsRUFBQS9sRyxjQUFBLE1BQ0F2TixTQUFTMHpHLGVBQWUiLCJmaWxlIjoidmlzdWFsVGVzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEyNyk7XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBsaWVfdHNfMSA9IHJlcXVpcmUoXCJsaWUtdHNcIik7XHJcbmV4cG9ydHMuUHJvbWlzZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3dbXCJQcm9taXNlXCJdID8gd2luZG93W1wiUHJvbWlzZVwiXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsW1wiUHJvbWlzZVwiXSA/IGdsb2JhbFtcIlByb21pc2VcIl0gOiBsaWVfdHNfMS5Qcm9taXNlO1xyXG59KSgpO1xyXG4vKipcclxuICogT2JqZWN0LmFzc2lnbiwgYnV0IGJldHRlci5cclxuICpcclxuICogQHBhcmFtIHsqfSBvYmpcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydHMuX2Fzc2lnbiA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHJldHVybiBvYmogPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIDogbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIFF1aWNrbHkgYW5kIGVmZmljaWVudGx5IGZpcmUgYXN5bmNyb3Vub3VzIG9wZXJhdGlvbnMgaW4gc2VxdWVuY2UsIHJldHVybnMgb25jZSBhbGwgb3BlcmF0aW9ucyBjb21wbGV0ZS5cclxuICpcclxuICogQHBhcmFtIHthbnlbXX0gaXRlbXNcclxuICogQHBhcmFtIHsoaXRlbTogYW55LCBpOiBudW1iZXIsIG5leHQ6IChyZXN1bHQ/OiBhbnkpID0+IHZvaWQpID0+IHZvaWR9IGNhbGxiYWNrXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPGFueVtdPn1cclxuICovXHJcbmV4cG9ydHMuZmFzdENIQUlOID0gZnVuY3Rpb24gKGl0ZW1zLCBjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIG5ldyBleHBvcnRzLlByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XHJcbiAgICAgICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJlcyhbXSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICB2YXIgc3RlcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoIDwgaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpdGVtc1tyZXN1bHRzLmxlbmd0aF0sIHJlc3VsdHMubGVuZ3RoLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGllX3RzXzEuc2V0RmFzdChzdGVwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzKHJlc3VsdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzdGVwKCk7XHJcbiAgICB9KTtcclxufTtcclxuLyoqXHJcbiAqIFF1aWNrbHkgYW5kIGVmZmljaWVudGx5IGZpcmUgYXN5bmNyb3Vub3VzIG9wZXJhdGlvbnMgaW4gcGFyYWxsZWwsIHJldHVybnMgb25jZSBhbnkgb3BlcmF0aW9uIGNvbXBsZXRlcy5cclxuICpcclxuICogQHBhcmFtIHthbnlbXX0gaXRlbXNcclxuICogQHBhcmFtIHsoaXRlbTogYW55LCBpOiBudW1iZXIsIG5leHQ6IChyZXN1bHQ/OiBhbnkpID0+IHZvaWQpID0+IHZvaWR9IGNhbGxiYWNrXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPGFueVtdPn1cclxuICovXHJcbmV4cG9ydHMuZmFzdFJBQ0UgPSBmdW5jdGlvbiAoaXRlbXMsIGNhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gbmV3IGV4cG9ydHMuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmVzKFtdKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgY291bnRlciA9IDA7XHJcbiAgICAgICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3VudGVyIDwgaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpdGVtc1tjb3VudGVyXSwgY291bnRlciwgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMoW3Jlc3VsdF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY291bnRlcisrO1xyXG4gICAgICAgICAgICAgICAgc3RlcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzdGVwKCk7XHJcbiAgICB9KTtcclxufTtcclxuLyoqXHJcbiAqIFF1aWNrbHkgYW5kIGVmZmljaWVudGx5IGZpcmUgYXN5bmNyb3Vub3VzIG9wZXJhdGlvbnMgaW4gcGFyYWxsZWwsIHJldHVybnMgb25jZSBhbGwgb3BlcmF0aW9ucyBhcmUgY29tcGxldGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7YW55W119IGl0ZW1zXHJcbiAqIEBwYXJhbSB7KGl0ZW06IGFueSwgaTogbnVtYmVyLCBkb25lOiAocmVzdWx0PzogYW55KSA9PiB2b2lkKSA9PiB2b2lkfSBjYWxsYmFja1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxhbnlbXT59XHJcbiAqL1xyXG5leHBvcnRzLmZhc3RBTEwgPSBmdW5jdGlvbiAoaXRlbXMsIGNhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gZXhwb3J0cy5Qcm9taXNlLmFsbCgoaXRlbXMgfHwgW10pLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgZXhwb3J0cy5Qcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhpdGVtLCBpLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXMocmVzdWx0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KSk7XHJcbn07XHJcbnZhciB1YSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogKG5hdmlnYXRvci51c2VyQWdlbnQgfHwgXCJcIik7XHJcbi8vIERldGVjdHMgaU9TIGRldmljZSBPUiBTYWZhcmkgcnVubmluZyBvbiBkZXNrdG9wXHJcbmV4cG9ydHMuaXNTYWZhcmkgPSB1YS5sZW5ndGggPT09IDAgPyBmYWxzZSA6ICgvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KHVhKSkgfHwgKC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KHVhKSAmJiAhd2luZG93W1wiTVNTdHJlYW1cIl0pO1xyXG4vLyBEZXRlY3QgRWRnZSBvciBJbnRlcm5ldCBFeHBsb3JlclxyXG5leHBvcnRzLmlzTVNCcm93c2VyID0gdWEubGVuZ3RoID09PSAwID8gZmFsc2UgOiB1YS5pbmRleE9mKFwiTVNJRSBcIikgPiAwIHx8IHVhLmluZGV4T2YoXCJUcmlkZW50L1wiKSA+IDAgfHwgdWEuaW5kZXhPZihcIkVkZ2UvXCIpID4gMDtcclxuLy8gRGV0ZWN0IEFuZHJvaWQgRGV2aWNlXHJcbmV4cG9ydHMuaXNBbmRyb2lkID0gL0FuZHJvaWQvLnRlc3QodWEpO1xyXG4vKipcclxuICogR2VuZXJhdGUgYSByYW5kb20gMTYgYml0IG51bWJlciB1c2luZyBzdHJvbmdlc3QgY3J5cHRvIGF2YWlsYWJsZS5cclxuICpcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbmV4cG9ydHMucmFuZG9tMTZCaXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBjcnlwdG8gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgMTYpKTsgLy8gTGVzcyByYW5kb20gZmFsbGJhY2suXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgeyAvLyBCcm93c2VyIGNyeXB0b1xyXG4gICAgICAgICAgICB2YXIgYnVmID0gbmV3IFVpbnQxNkFycmF5KDEpO1xyXG4gICAgICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ1Zik7XHJcbiAgICAgICAgICAgIHJldHVybiBidWZbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLl9jcnlwdG8ucmFuZG9tQnl0ZXMpIHsgLy8gTm9kZUpTIGNyeXB0b1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsLl9jcnlwdG8ucmFuZG9tQnl0ZXMoMikucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHsgcmV0dXJuIGN1ciAqIHByZXY7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDIsIDE2KSk7IC8vIExlc3MgcmFuZG9tIGZhbGxiYWNrLlxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlIGEgVGltZUlEIGZvciB1c2UgaW4gdGhlIGRhdGFiYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFttc11cclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcbmV4cG9ydHMudGltZWlkID0gZnVuY3Rpb24gKG1zKSB7XHJcbiAgICB2YXIgdGltZSA9IE1hdGgucm91bmQoKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSAvIChtcyA/IDEgOiAxMDAwKSkudG9TdHJpbmcoKTtcclxuICAgIHdoaWxlICh0aW1lLmxlbmd0aCA8IChtcyA/IDEzIDogMTApKSB7XHJcbiAgICAgICAgdGltZSA9IFwiMFwiICsgdGltZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aW1lICsgXCItXCIgKyAoZXhwb3J0cy5yYW5kb20xNkJpdHMoKSArIGV4cG9ydHMucmFuZG9tMTZCaXRzKCkpLnRvU3RyaW5nKDE2KTtcclxufTtcclxuLyoqXHJcbiAqIFNlZSBpZiB0d28gYXJyYXlzIGludGVyc2VjdC5cclxuICpcclxuICogQHBhcmFtIHthbnlbXX0gYXJyMVxyXG4gKiBAcGFyYW0ge2FueVtdfSBhcnIyXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuZXhwb3J0cy5pbnRlcnNlY3QgPSBmdW5jdGlvbiAoYXJyMSwgYXJyMikge1xyXG4gICAgaWYgKCFhcnIxIHx8ICFhcnIyKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmICghYXJyMS5sZW5ndGggfHwgIWFycjIubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiAoYXJyMSB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAoYXJyMiB8fCBbXSkuaW5kZXhPZihpdGVtKSAhPT0gLTE7IH0pLmxlbmd0aCA+IDA7XHJcbn07XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSB2YWxpZCBWNCBVVUlEIHVzaW5nIHRoZSBzdHJvbmdlc3QgY3J5cHRvIGF2YWlsYWJsZS5cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcbmV4cG9ydHMudXVpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciByLCBzLCBiID0gXCJcIjtcclxuICAgIHJldHVybiBbYiwgYiwgYiwgYiwgYiwgYiwgYiwgYl0ucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIsIGkpIHtcclxuICAgICAgICByID0gZXhwb3J0cy5yYW5kb20xNkJpdHMoKTtcclxuICAgICAgICBzID0gKGkgPT09IDMgPyA0IDogKGkgPT09IDQgPyAociAlIDE2ICYgMHgzIHwgMHg4KS50b1N0cmluZygxNikgOiBiKSk7XHJcbiAgICAgICAgciA9IHIudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgIHdoaWxlIChyLmxlbmd0aCA8IDQpXHJcbiAgICAgICAgICAgIHIgPSBcIjBcIiArIHI7XHJcbiAgICAgICAgcmV0dXJuIHByZXYgKyAoWzIsIDMsIDQsIDVdLmluZGV4T2YoaSkgPiAtMSA/IFwiLVwiIDogYikgKyAocyArIHIpLnNsaWNlKDAsIDQpO1xyXG4gICAgfSwgYik7XHJcbn07XHJcbnZhciBpZFR5cGVzID0ge1xyXG4gICAgXCJpbnRcIjogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfSxcclxuICAgIFwidXVpZFwiOiBleHBvcnRzLnV1aWQsXHJcbiAgICBcInRpbWVJZFwiOiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHBvcnRzLnRpbWVpZCgpOyB9LFxyXG4gICAgXCJ0aW1lSWRtc1wiOiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHBvcnRzLnRpbWVpZCh0cnVlKTsgfVxyXG59O1xyXG4vKipcclxuICogQSBxdWljayBhbmQgZGlydHkgaGFzaGluZyBmdW5jdGlvbiwgdHVybnMgYSBzdHJpbmcgaW50byBhIG1kNSBzdHlsZSBoYXNoLlxyXG4gKiBzdG9sZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZGFya3NreWFwcC9zdHJpbmctaGFzaFxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL1xyXG5leHBvcnRzLmhhc2ggPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB2YXIgaGFzaCA9IDUzODEsIGkgPSBzdHIubGVuZ3RoO1xyXG4gICAgd2hpbGUgKGkpIHtcclxuICAgICAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChoYXNoID4+PiAwKS50b1N0cmluZygxNik7XHJcbn07XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBhIHJvdyBJRCBnaXZlbiB0aGUgcHJpbWFyeSBrZXkgdHlwZS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHByaW1hcnlLZXlUeXBlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW5jcmltZW50VmFsdWVdXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxuZXhwb3J0cy5nZW5lcmF0ZUlEID0gZnVuY3Rpb24gKHByaW1hcnlLZXlUeXBlLCBpbmNyaW1lbnRWYWx1ZSkge1xyXG4gICAgcmV0dXJuIGlkVHlwZXNbcHJpbWFyeUtleVR5cGVdID8gaWRUeXBlc1twcmltYXJ5S2V5VHlwZV0oaW5jcmltZW50VmFsdWUgfHwgMSkgOiBcIlwiO1xyXG59O1xyXG4vKipcclxuICogQ2xlYW4gdGhlIGFyZ3VtZW50cyBmcm9tIGFuIG9iamVjdCBnaXZlbiBhbiBhcnJheSBvZiBhcmd1bWVudHMgYW5kIHRoZWlyIHR5cGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcmdEZWNsYXJhdGlvbnNcclxuICogQHBhcmFtIHtTdGRPYmplY3Q8YW55Pn0gYXJnc1xyXG4gKiBAcmV0dXJucyB7U3RkT2JqZWN0PGFueT59XHJcbiAqL1xyXG5leHBvcnRzLmNsZWFuQXJncyA9IGZ1bmN0aW9uIChhcmdEZWNsYXJhdGlvbnMsIGFyZ3MpIHtcclxuICAgIHZhciBhID0ge307XHJcbiAgICB2YXIgaSA9IGFyZ0RlY2xhcmF0aW9ucy5sZW5ndGg7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgdmFyIGsyID0gYXJnRGVjbGFyYXRpb25zW2ldLnNwbGl0KFwiOlwiKTtcclxuICAgICAgICBpZiAoazIubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBhW2syWzBdXSA9IGV4cG9ydHMuY2FzdChrMlsxXSwgYXJnc1trMlswXV0gfHwgdW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFbazJbMF1dID0gYXJnc1trMlswXV0gfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBhO1xyXG59O1xyXG4vKipcclxuICogRGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgYSBqYXZhc2NyaXB0IG9iamVjdCBvciBub3QuIEV4bHVkZXMgQXJyYXlzLCBGdW5jdGlvbnMsIE51bGwsIFVuZGVmaW5lZCwgZXRjLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHZhbFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbmV4cG9ydHMuaXNPYmplY3QgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XHJcbn07XHJcbi8qKlxyXG4gKiBDYXN0IGEgamF2YXNjcmlwdCB2YXJpYWJsZSB0byBhIGdpdmVuIHR5cGUuIFN1cHBvcnRzIHR5cGVzY3JpcHQgcHJpbWl0aXZlcyBhbmQgbW9yZSBzcGVjaWZpYyB0eXBlcy5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcclxuICogQHBhcmFtIHsqfSBbdmFsXVxyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbmV4cG9ydHMuY2FzdCA9IGZ1bmN0aW9uICh0eXBlLCB2YWwpIHtcclxuICAgIGlmICh0eXBlID09PSBcImFueVwiIHx8IHR5cGUgPT09IFwiYmxvYlwiKVxyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWw7XHJcbiAgICBpZiAodCA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWwgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gICAgdmFyIGVudGl0eU1hcCA9IHtcclxuICAgICAgICBcIiZcIjogXCImYW1wO1wiLFxyXG4gICAgICAgIFwiPFwiOiBcIiZsdDtcIixcclxuICAgICAgICBcIj5cIjogXCImZ3Q7XCIsXHJcbiAgICAgICAgXCJcXFwiXCI6IFwiJnF1b3Q7XCIsXHJcbiAgICAgICAgXCInXCI6IFwiJiMzOTtcIixcclxuICAgICAgICBcIi9cIjogXCImI3gyRjtcIixcclxuICAgICAgICBcImBcIjogXCImI3g2MDtcIixcclxuICAgICAgICBcIj1cIjogXCImI3gzRDtcIlxyXG4gICAgfTtcclxuICAgIHZhciB0eXBlcyA9IGZ1bmN0aW9uICh0eXBlLCB2YWwpIHtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInNhZmVzdHJcIjogcmV0dXJuIHR5cGVzKFwic3RyaW5nXCIsIHZhbCkucmVwbGFjZSgvWyY8PlwiJ2A9XFwvXS9nbWksIGZ1bmN0aW9uIChzKSB7IHJldHVybiBlbnRpdHlNYXBbc107IH0pO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW50XCI6IHJldHVybiAodCAhPT0gXCJudW1iZXJcIiB8fCB2YWwgJSAxICE9PSAwKSA/IHBhcnNlSW50KHZhbCB8fCAwKSA6IHZhbDtcclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiZmxvYXRcIjogcmV0dXJuIHQgIT09IFwibnVtYmVyXCIgPyBwYXJzZUZsb2F0KHZhbCB8fCAwKSA6IHZhbDtcclxuICAgICAgICAgICAgY2FzZSBcImFueVtdXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJhcnJheVwiOiByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gdmFsIDogW107XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1dWlkXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0aW1lSWRcIjpcclxuICAgICAgICAgICAgY2FzZSBcInRpbWVJZG1zXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIHQgIT09IFwic3RyaW5nXCIgPyBTdHJpbmcodmFsKSA6IHZhbDtcclxuICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwib2JqXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJtYXBcIjogcmV0dXJuIGV4cG9ydHMuaXNPYmplY3QodmFsKSA/IHZhbCA6IHt9O1xyXG4gICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOiByZXR1cm4gdmFsID09PSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfTtcclxuICAgIHZhciBuZXdWYWwgPSB0eXBlcyhTdHJpbmcodHlwZSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpLCB2YWwpO1xyXG4gICAgaWYgKHR5cGUuaW5kZXhPZihcIltdXCIpICE9PSAtMSkge1xyXG4gICAgICAgIHZhciBhcnJheU9mXzEgPSB0eXBlLnNsaWNlKDAsIHR5cGUubGFzdEluZGV4T2YoXCJbXVwiKSk7XHJcbiAgICAgICAgcmV0dXJuICh2YWwgfHwgW10pLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5jYXN0KGFycmF5T2ZfMSwgdik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChuZXdWYWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChbXCJpbnRcIiwgXCJmbG9hdFwiLCBcIm51bWJlclwiXS5pbmRleE9mKHR5cGUpID4gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKG5ld1ZhbCkgPyAwIDogbmV3VmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59O1xyXG4vKipcclxuICogSW5zZXJ0IGEgdmFsdWUgaW50byBhIHNvcnRlZCBhcnJheSwgZWZmaWNpZW50bHkgZ2F1cmFudGVlcyByZWNvcmRzIGFyZSBzb3J0ZWQgb24gaW5zZXJ0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJcclxuICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0VmFsXVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZFZhbF1cclxuICogQHJldHVybnMge2FueVtdfVxyXG4gKi9cclxuZXhwb3J0cy5zb3J0ZWRJbnNlcnQgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZSwgc3RhcnRWYWwsIGVuZFZhbCkge1xyXG4gICAgaWYgKGFyci5sZW5ndGgpIHtcclxuICAgICAgICBhcnIuc3BsaWNlKGV4cG9ydHMuYmluYXJ5U2VhcmNoKGFyciwgdmFsdWUpLCAwLCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFyci5wdXNoKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogR2l2ZW4gYSBzb3J0ZWQgYXJyYXkgYW5kIGEgdmFsdWUsIGZpbmQgd2hlcmUgdGhhdCB2YWx1ZSBmaXRzIGludG8gdGhlIGFycmF5LlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJcclxuICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0VmFsXVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZFZhbF1cclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbmV4cG9ydHMuYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gKGFyciwgdmFsdWUsIHN0YXJ0VmFsLCBlbmRWYWwpIHtcclxuICAgIHZhciBsZW5ndGggPSBhcnIubGVuZ3RoO1xyXG4gICAgdmFyIHN0YXJ0ID0gc3RhcnRWYWwgfHwgMDtcclxuICAgIHZhciBlbmQgPSBlbmRWYWwgIT09IHVuZGVmaW5lZCA/IGVuZFZhbCA6IGxlbmd0aCAtIDE7XHJcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPiBhcnJbZW5kXSkge1xyXG4gICAgICAgIHJldHVybiBlbmQgKyAxO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlIDwgYXJyW3N0YXJ0XSkge1xyXG4gICAgICAgIHJldHVybiBzdGFydDtcclxuICAgIH1cclxuICAgIGlmIChzdGFydCA+PSBlbmQpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIHZhciBtID0gc3RhcnQgKyBNYXRoLmZsb29yKChlbmQgLSBzdGFydCkgLyAyKTtcclxuICAgIGlmICh2YWx1ZSA8IGFyclttXSkge1xyXG4gICAgICAgIHJldHVybiBleHBvcnRzLmJpbmFyeVNlYXJjaChhcnIsIHZhbHVlLCBzdGFydCwgbSAtIDEpO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlID4gYXJyW21dKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuYmluYXJ5U2VhcmNoKGFyciwgdmFsdWUsIG0gKyAxLCBlbmQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbn07XHJcbi8qKlxyXG4gKiBRdWlja2x5IHJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGEgc29ydGVkIGFycmF5LlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJcclxuICogQHJldHVybnMge2FueVtdfVxyXG4gKi9cclxuZXhwb3J0cy5yZW1vdmVEdXBsaWNhdGVzID0gZnVuY3Rpb24gKGFycikge1xyXG4gICAgaWYgKCFhcnIubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIHZhciBuZXdhcnIgPSBbYXJyWzBdXTtcclxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFycltpXSAhPT0gYXJyW2kgLSAxXSlcclxuICAgICAgICAgICAgbmV3YXJyLnB1c2goYXJyW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdhcnI7XHJcbn07XHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBmcmVlemUgYSBqYXZhc2NyaXB0IG9iamVjdCB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgbW9kaWZpZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gb2JqXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnRzLmRlZXBGcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmogfHwge30pLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgcHJvcCA9IG9ialtuYW1lXTtcclxuICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09IFwib2JqZWN0XCIgJiYgcHJvcCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBvYmpbbmFtZV0gPSBleHBvcnRzLmRlZXBGcmVlemUocHJvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBGcmVlemUgc2VsZiAobm8tb3AgaWYgYWxyZWFkeSBmcm96ZW4pXHJcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmopO1xyXG59O1xyXG52YXIgb2JqZWN0UGF0aENhY2hlID0ge307XHJcbi8qKlxyXG4gKiBUYWtlIGFuIG9iamVjdCBhbmQgYSBzdHJpbmcgZGVzY3JpYmluZyBhIHBhdGggbGlrZSBcInZhbHVlLmxlbmd0aFwiIG9yIFwidmFsW2xlbmd0aF1cIiBhbmQgc2FmZWx5IGdldCB0aGF0IHZhbHVlIGluIHRoZSBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoUXVlcnlcclxuICogQHBhcmFtIHsqfSBvYmplY3RcclxuICogQHBhcmFtIHtib29sZWFufSBbaWdub3JlRmlyc3RQYXRoXVxyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbmV4cG9ydHMub2JqUXVlcnkgPSBmdW5jdGlvbiAocGF0aFF1ZXJ5LCBvYmplY3QsIGlnbm9yZUZpcnN0UGF0aCkge1xyXG4gICAgdmFyIHZhbDtcclxuICAgIHZhciBzYWZlR2V0ID0gZnVuY3Rpb24gKGdldFBhdGgsIHBhdGhJZHgsIG9iamVjdCkge1xyXG4gICAgICAgIGlmICghZ2V0UGF0aFtwYXRoSWR4XSB8fCAhb2JqZWN0KVxyXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgICAgIHJldHVybiBzYWZlR2V0KGdldFBhdGgsIHBhdGhJZHggKyAxLCBvYmplY3RbZ2V0UGF0aFtwYXRoSWR4XV0pO1xyXG4gICAgfTtcclxuICAgIHZhciBjYWNoZUtleSA9IHBhdGhRdWVyeSArIChpZ25vcmVGaXJzdFBhdGggPyBcIjFcIiA6IFwiMFwiKTtcclxuICAgIC8vIGNhY2hlZCBwYXRoIGFycmF5cywgc2tpcHMgc3Vic2VxdWVudCBpZGVudGljYWwgcGF0aCByZXF1ZXN0cy5cclxuICAgIGlmIChvYmplY3RQYXRoQ2FjaGVbY2FjaGVLZXldKSB7XHJcbiAgICAgICAgcmV0dXJuIHNhZmVHZXQob2JqZWN0UGF0aENhY2hlW2NhY2hlS2V5XSwgMCwgb2JqZWN0KTtcclxuICAgIH1cclxuICAgIHZhciBwYXRoID0gW107XHJcbiAgICAvLyBuZWVkIHRvIHR1cm4gcGF0aCBpbnRvIGFycmF5IG9mIHN0cmluZ3MsIGllIHZhbHVlW2hleV1bdGhlcmVdLmxlbmd0aCA9PiBbdmFsdWUsIGhleSwgdGhlcmUsIGxlbmd0aF07XHJcbiAgICBwYXRoID0gcGF0aFF1ZXJ5LmluZGV4T2YoXCJbXCIpID4gLTEgP1xyXG4gICAgICAgIC8vIGhhbmRsZSBjb21wbGV4IG1peCBvZiBkb3RzIGFuZCBicmFja2V0cyBsaWtlIFwidXNlcnMudmFsdWVbbWV0YV1bdmFsdWVdLmxlbmd0aFwiXHJcbiAgICAgICAgW10uY29uY2F0LmFwcGx5KFtdLCBwYXRoUXVlcnkuc3BsaXQoXCIuXCIpLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdi5tYXRjaCgvKFteXFxbXSspfFxcWyhbXlxcXV0rKVxcXVxcWy9nbWkpIHx8IHY7IH0pKS5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYucmVwbGFjZSgvXFxbfFxcXS9nbWksIFwiXCIpOyB9KSA6XHJcbiAgICAgICAgLy8gaGFuZGxlIHNpbXBsZSBkb3QgcGF0aHMgbGlrZSBcInVzZXJzLm1ldGEudmFsdWUubGVuZ3RoXCJcclxuICAgICAgICBwYXRoUXVlcnkuc3BsaXQoXCIuXCIpO1xyXG4gICAgLy8gaGFuZGxlIGpvaW5zIHdoZXJlIGVhY2ggcm93IGlzIGRlZmluZWQgYXMgdGFibGUuY29sdW1uXHJcbiAgICBpZiAoaWdub3JlRmlyc3RQYXRoKSB7XHJcbiAgICAgICAgdmFyIGZpcnN0UGF0aCA9IHBhdGguc2hpZnQoKSArIFwiLlwiICsgcGF0aC5zaGlmdCgpO1xyXG4gICAgICAgIHBhdGgudW5zaGlmdChmaXJzdFBhdGgpO1xyXG4gICAgfVxyXG4gICAgb2JqZWN0UGF0aENhY2hlW2NhY2hlS2V5XSA9IHBhdGg7XHJcbiAgICByZXR1cm4gc2FmZUdldChvYmplY3RQYXRoQ2FjaGVbY2FjaGVLZXldLCAwLCBvYmplY3QpO1xyXG59O1xyXG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjUnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gc3RvbGVuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL09jdGFuZS9zZXRJbW1lZGlhdGVcclxuLy8gY29udmVydGQgdG8gTm9kZUpTIGZyaWVuZGx5IHN5bnRheFxyXG52YXIgdWlkID0gMDtcclxudmFyIHN0b3JhZ2UgPSB7fTtcclxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG52YXIgbWVzc2FnZSA9ICdzZXRNc2cnO1xyXG4vLyBkZWNsYXJlIGNvbnN0IFByb21pc2U6IGFueTtcclxudmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1tcInNldEltbWVkaWF0ZVwiXSA/IHdpbmRvd1tcInNldEltbWVkaWF0ZVwiXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsW1wic2V0SW1tZWRpYXRlXCJdID8gZ2xvYmFsW1wic2V0SW1tZWRpYXRlXCJdIDogZmFsc2U7XHJcbnZhciBjYW5Qb3N0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyO1xyXG52YXIgY2FuUHJvbWlzZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1tcIlByb21pc2VcIl0gPyB3aW5kb3dbXCJQcm9taXNlXCJdIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWxbXCJQcm9taXNlXCJdID8gZ2xvYmFsW1wiUHJvbWlzZVwiXSA6IGZhbHNlO1xyXG52YXIgZmFzdEFwcGx5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgIHJldHVybiBhcmdzWzBdLmFwcGx5KG51bGwsIHNsaWNlLmNhbGwoYXJncywgMSkpO1xyXG59O1xyXG52YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIHZhciBrZXkgPSBldmVudC5kYXRhO1xyXG4gICAgdmFyIGRhdGE7XHJcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiBrZXkuaW5kZXhPZihtZXNzYWdlKSA9PT0gMCkge1xyXG4gICAgICAgIGRhdGEgPSBzdG9yYWdlW2tleV07XHJcbiAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHN0b3JhZ2Vba2V5XTtcclxuICAgICAgICAgICAgZmFzdEFwcGx5KGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuaWYgKGNhblBvc3QpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgY2FsbGJhY2spO1xyXG59XHJcbnZhciBzZXRJbW1lZGlhdGVQb2x5ZmlsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBpZCA9IHVpZCsrO1xyXG4gICAgdmFyIGtleSA9IG1lc3NhZ2UgKyBpZDtcclxuICAgIHN0b3JhZ2Vba2V5XSA9IGFyZ3M7XHJcbiAgICB3aW5kb3cucG9zdE1lc3NhZ2Uoa2V5LCAnKicpO1xyXG4gICAgcmV0dXJuIGlkO1xyXG59O1xyXG5leHBvcnRzLnNldEZhc3QgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGNhblNldEltbWVkaWF0ZSA/IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FuU2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZmFzdEFwcGx5KGFyZ3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSA6IGNhblByb21pc2UgPyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhblByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmYXN0QXBwbHkoYXJncyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IDogY2FuUG9zdCA/IHNldEltbWVkaWF0ZVBvbHlmaWxsIDogLy8gYnVpbHQgaW4gd2luZG93IG1lc3NhZ2luZyAocHJldHR5IGZhc3QsIG5vdCBiYWQpXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZmFzdEFwcGx5KGFyZ3MpO1xyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9O1xyXG59KSgpO1xyXG52YXIgX0lOVEVSTkFMID0gZnVuY3Rpb24gKCkgeyB9O1xyXG52YXIgX1JFSkVDVEVEID0gWydSJ107XHJcbnZhciBfRlVMRklMTEVEID0gWydGJ107XHJcbnZhciBfUEVORElORyA9IFsnUCddO1xyXG52YXIgUHJvbWlzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IF9QRU5ESU5HO1xyXG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5fb3V0Y29tZSA9IHZvaWQgMDtcclxuICAgICAgICBpZiAocmVzb2x2ZXIgIT09IF9JTlRFUk5BTCkge1xyXG4gICAgICAgICAgICBfc2FmZWx5UmVzb2x2ZVRoZW5hYmxlKHRoaXMsIHJlc29sdmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBQcm9taXNlLmRvUG9seUZpbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgaWYgKCFnbG9iYWxbXCJQcm9taXNlXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWxbXCJQcm9taXNlXCJdID0gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBpZiAoIXdpbmRvd1tcIlByb21pc2VcIl0pIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvd1tcIlByb21pc2VcIl0gPSB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFByb21pc2UucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uICgpIHsgfSwgb25SZWplY3RlZCk7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb25GdWxmaWxsZWQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5fc3RhdGUgPT09IF9GVUxGSUxMRUQgfHxcclxuICAgICAgICAgICAgdHlwZW9mIG9uUmVqZWN0ZWQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5fc3RhdGUgPT09IF9SRUpFQ1RFRCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShfSU5URVJOQUwpO1xyXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gX1BFTkRJTkcpIHtcclxuICAgICAgICAgICAgdmFyIHJlc29sdmVyID0gdGhpcy5fc3RhdGUgPT09IF9GVUxGSUxMRUQgPyBvbkZ1bGZpbGxlZCA6IG9uUmVqZWN0ZWQ7XHJcbiAgICAgICAgICAgIF91bndyYXAocHJvbWlzZSwgcmVzb2x2ZXIsIHRoaXMuX291dGNvbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcXVldWUucHVzaChuZXcgX1F1ZXVlSXRlbShwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gdmFsdWVcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIFByb21pc2VcclxuICAgICAqL1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgdGhpcylcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBfaGFuZGxlcnMuX3Jlc29sdmUobmV3IFByb21pc2UoX0lOVEVSTkFMKSwgdmFsdWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEBwYXJhbSB7YW55fSByZWFzb25cclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIFByb21pc2VcclxuICAgICAqL1xyXG4gICAgUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgcmV0dXJuIF9oYW5kbGVycy5fcmVqZWN0KG5ldyBQcm9taXNlKF9JTlRFUk5BTCksIHJlYXNvbik7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiAoaXRlcmFibGUpIHtcclxuICAgICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgICAgaWYgKCFpdGVyYWJsZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBtYXliZVJldHVybiA9IGZ1bmN0aW9uIChpbmRleCwgc3VjY2VzcywgZmFpbHVyZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZhaWx1cmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChmYWlsdXJlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChzdWNjZXNzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PSBpdGVyYWJsZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVyYWJsZVtpXS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1heWJlUmV0dXJuKGksIHJlcywgdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVSZXR1cm4oaSwgdW5kZWZpbmVkLCBlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZXJhYmxlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZS5yYWNlID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBsZW4gPSBpdGVyYWJsZS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpID0gLTE7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShfSU5URVJOQUwpO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZXJhYmxlKSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVyKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHNlbGYucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBfaGFuZGxlcnMuX3Jlc29sdmUocHJvbWlzZSwgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBfaGFuZGxlcnMuX3JlamVjdChwcm9taXNlLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWxlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbikge1xyXG4gICAgICAgICAgICByZXNvbHZlcihpdGVyYWJsZVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcm9taXNlO1xyXG59KCkpO1xyXG5leHBvcnRzLlByb21pc2UgPSBQcm9taXNlO1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIF9RdWV1ZUl0ZW1cclxuICovXHJcbnZhciBfUXVldWVJdGVtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX1F1ZXVlSXRlbShwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xyXG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb25GdWxmaWxsZWQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5fb25GdWxmaWxsZWQgPSBvbkZ1bGZpbGxlZDtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbEZ1bGZpbGxlZCA9IHRoaXMuX290aGVyQ2FsbEZ1bGZpbGxlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvblJlamVjdGVkID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uUmVqZWN0ZWQgPSBvblJlamVjdGVkO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsUmVqZWN0ZWQgPSB0aGlzLl9vdGhlckNhbGxSZWplY3RlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfUXVldWVJdGVtLnByb3RvdHlwZS5fY2FsbEZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIF9oYW5kbGVycy5fcmVzb2x2ZSh0aGlzLl9wcm9taXNlLCB2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgX1F1ZXVlSXRlbS5wcm90b3R5cGUuX290aGVyQ2FsbEZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIF91bndyYXAodGhpcy5fcHJvbWlzZSwgdGhpcy5fb25GdWxmaWxsZWQsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICBfUXVldWVJdGVtLnByb3RvdHlwZS5fY2FsbFJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgX2hhbmRsZXJzLl9yZWplY3QodGhpcy5fcHJvbWlzZSwgdmFsdWUpO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIF9RdWV1ZUl0ZW0ucHJvdG90eXBlLl9vdGhlckNhbGxSZWplY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIF91bndyYXAodGhpcy5fcHJvbWlzZSwgdGhpcy5fb25SZWplY3RlZCwgdmFsdWUpO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIHJldHVybiBfUXVldWVJdGVtO1xyXG59KCkpO1xyXG5leHBvcnRzLl9RdWV1ZUl0ZW0gPSBfUXVldWVJdGVtO1xyXG4vKipcclxuICpcclxuICogQGludGVybmFsXHJcbiAqIEBwYXJhbSB7YW55fSBwcm9taXNlXHJcbiAqIEBwYXJhbSB7YW55fSBmdW5jXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxyXG4gKi9cclxuZnVuY3Rpb24gX3Vud3JhcChwcm9taXNlLCBmdW5jLCB2YWx1ZSkge1xyXG4gICAgZXhwb3J0cy5zZXRGYXN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBmdW5jLmFwcGx5KG51bGwsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9oYW5kbGVycy5fcmVqZWN0KHByb21pc2UsIGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV0dXJuVmFsdWUgPT09IHByb21pc2UpIHtcclxuICAgICAgICAgICAgX2hhbmRsZXJzLl9yZWplY3QocHJvbWlzZSwgbmV3IFR5cGVFcnJvcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9oYW5kbGVycy5fcmVzb2x2ZShwcm9taXNlLCByZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKiBAY2xhc3MgX2hhbmRsZXJzXHJcbiAqL1xyXG52YXIgX2hhbmRsZXJzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX2hhbmRsZXJzKCkge1xyXG4gICAgfVxyXG4gICAgX2hhbmRsZXJzLl9yZXNvbHZlID0gZnVuY3Rpb24gKHNlbGYsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IF90cnlDYXRjaChfZ2V0VGhlbiwgdmFsdWUpO1xyXG4gICAgICAgIHZhciB0aGVuYWJsZSA9IHJlc3VsdC5fdmFsdWU7XHJcbiAgICAgICAgdmFyIGkgPSAtMTtcclxuICAgICAgICB2YXIgbGVuID0gc2VsZi5fcXVldWUubGVuZ3RoO1xyXG4gICAgICAgIGlmIChyZXN1bHQuX3N0YXR1cyA9PT0gJ2Vycm9yJykge1xyXG4gICAgICAgICAgICByZXR1cm4gX2hhbmRsZXJzLl9yZWplY3Qoc2VsZiwgcmVzdWx0Ll92YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGVuYWJsZSkge1xyXG4gICAgICAgICAgICBfc2FmZWx5UmVzb2x2ZVRoZW5hYmxlKHNlbGYsIHRoZW5hYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuX3N0YXRlID0gX0ZVTEZJTExFRDtcclxuICAgICAgICAgICAgc2VsZi5fb3V0Y29tZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLl9xdWV1ZVtpXS5fY2FsbEZ1bGZpbGxlZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgX2hhbmRsZXJzLl9yZWplY3QgPSBmdW5jdGlvbiAoc2VsZiwgZXJyb3IpIHtcclxuICAgICAgICBzZWxmLl9zdGF0ZSA9IF9SRUpFQ1RFRDtcclxuICAgICAgICBzZWxmLl9vdXRjb21lID0gZXJyb3I7XHJcbiAgICAgICAgdmFyIGkgPSAtMTtcclxuICAgICAgICB2YXIgbGVuID0gc2VsZi5fcXVldWUubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcclxuICAgICAgICAgICAgc2VsZi5fcXVldWVbaV0uX2NhbGxSZWplY3RlZChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIHJldHVybiBfaGFuZGxlcnM7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIHthbnl9IG9ialxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gX2dldFRoZW4ob2JqKSB7XHJcbiAgICAvLyBNYWtlIHN1cmUgd2Ugb25seSBhY2Nlc3MgdGhlIGFjY2Vzc29yIG9uY2UgYXMgcmVxdWlyZWQgYnkgdGhlIHNwZWNcclxuICAgIHZhciB0aGVuID0gb2JqICYmIG9iai50aGVuO1xyXG4gICAgaWYgKG9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYXBweVRoZW4oKSB7XHJcbiAgICAgICAgICAgIHRoZW4uYXBwbHkob2JqLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICpcclxuICogQGludGVybmFsXHJcbiAqIEBwYXJhbSB7UHJvbWlzZTxhbnk+fSBzZWxmXHJcbiAqIEBwYXJhbSB7KG9uU3VjY2VzczooLi4uVCkgPT4gdm9pZCwgb25GYWlsOiguLi5UKSA9PiB2b2lkKSA9PiB2b2lkfSB0aGVuYWJsZVxyXG4gKi9cclxuZnVuY3Rpb24gX3NhZmVseVJlc29sdmVUaGVuYWJsZShzZWxmLCB0aGVuYWJsZSkge1xyXG4gICAgLy8gRWl0aGVyIGZ1bGZpbGwsIHJlamVjdCBvciByZWplY3Qgd2l0aCBlcnJvclxyXG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xyXG4gICAgZnVuY3Rpb24gb25FcnJvcigpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YWx1ZVtfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FsbGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICBfaGFuZGxlcnMuX3JlamVjdChzZWxmLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBvblN1Y2Nlc3MoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFsdWVbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhbGxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgX2hhbmRsZXJzLl9yZXNvbHZlKHNlbGYsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHRyeVRvVW53cmFwKCkge1xyXG4gICAgICAgIHRoZW5hYmxlKG9uU3VjY2Vzcywgb25FcnJvcik7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVzdWx0ID0gX3RyeUNhdGNoKHRyeVRvVW53cmFwKTtcclxuICAgIGlmIChyZXN1bHQuX3N0YXR1cyA9PT0gJ2Vycm9yJykge1xyXG4gICAgICAgIG9uRXJyb3IocmVzdWx0Ll92YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKiBAcGFyYW0ge2FueX0gZnVuY1xyXG4gKiBAcGFyYW0geyp9IFt2YWx1ZXNdXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBfdHJ5Q2F0Y2goZnVuYywgdmFsdWVzKSB7XHJcbiAgICB2YXIgb3V0ID0geyBfc3RhdHVzOiBudWxsLCBfdmFsdWU6IG51bGwgfTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgb3V0Ll92YWx1ZSA9IGZ1bmModmFsdWVzKTtcclxuICAgICAgICBvdXQuX3N0YXR1cyA9ICdzdWNjZXNzJztcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgb3V0Ll9zdGF0dXMgPSAnZXJyb3InO1xyXG4gICAgICAgIG91dC5fdmFsdWUgPSBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufVxyXG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBsaWVfdHNfMSA9IHJlcXVpcmUoXCJsaWUtdHNcIik7XHJcbnZhciBzdGRfcXVlcnlfMSA9IHJlcXVpcmUoXCIuL3F1ZXJ5L3N0ZC1xdWVyeVwiKTtcclxudmFyIHRyYW5zYWN0aW9uXzEgPSByZXF1aXJlKFwiLi9xdWVyeS90cmFuc2FjdGlvblwiKTtcclxudmFyIHJlYWxseV9zbWFsbF9ldmVudHNfMSA9IHJlcXVpcmUoXCJyZWFsbHktc21hbGwtZXZlbnRzXCIpO1xyXG52YXIgdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi91dGlsaXRpZXNcIik7XHJcbnZhciBpbmRleF8xID0gcmVxdWlyZShcIi4vZGF0YWJhc2UvaW5kZXhcIik7XHJcbnZhciBoaXN0b3J5X3BsdWdpbl8xID0gcmVxdWlyZShcIi4vaGlzdG9yeS1wbHVnaW5cIik7XHJcbnZhciBWRVJTSU9OID0gMS40MTtcclxuLy8gdWdsaWZ5SlMgZml4XHJcbnZhciBzdHIgPSBbXCJfdXRpbFwiXTtcclxuLyoqXHJcbiAqIFRoZSBwcmltYXJ5IGFic3RyYWN0aW9uIGNsYXNzLCB0aGVyZSBpcyBubyBkYXRhYmFzZSBpbXBsaW1pbnRhdGlvbiBjb2RlIGhlcmUuXHJcbiAqIEp1c3QgZXZlbnRzLCBxdXJpZXMgYW5kIGZpbHRlcnMuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIE5hbm9TUUxJbnN0YW5jZVxyXG4gKi9cclxudmFyIE5hbm9TUUxJbnN0YW5jZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5hbm9TUUxJbnN0YW5jZSgpIHtcclxuICAgICAgICB0aGlzLnZlcnNpb24gPSBWRVJTSU9OO1xyXG4gICAgICAgIHRoaXMuX29uQ29ubmVjdGVkQ2FsbEJhY2tzID0gW107XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIHQuX2FjdGlvbnMgPSB7fTtcclxuICAgICAgICB0Ll92aWV3cyA9IHt9O1xyXG4gICAgICAgIHQuZGF0YU1vZGVscyA9IHt9O1xyXG4gICAgICAgIHQuX2V2ZW50cyA9IFtcIipcIiwgXCJjaGFuZ2VcIiwgXCJkZWxldGVcIiwgXCJ1cHNlcnRcIiwgXCJkcm9wXCIsIFwic2VsZWN0XCIsIFwiZXJyb3JcIl07XHJcbiAgICAgICAgdC5faGFzRXZlbnRzID0ge307XHJcbiAgICAgICAgdC50YWJsZU5hbWVzID0gW107XHJcbiAgICAgICAgdC5wbHVnaW5zID0gW107XHJcbiAgICAgICAgdC5oYXNQSyA9IHt9O1xyXG4gICAgICAgIHQuc2tpcFB1cmdlID0ge307XHJcbiAgICAgICAgdC50b1Jvd0ZucyA9IHt9O1xyXG4gICAgICAgIHQudGFibGVQS3MgPSB7fTtcclxuICAgICAgICB0LnRvQ29sRm5zID0ge307XHJcbiAgICAgICAgdC50b0NvbFJ1bGVzID0ge307XHJcbiAgICAgICAgdC5fcmFuZG9tcyA9IFtdO1xyXG4gICAgICAgIC8vIHQuX3F1ZXJ5UG9vbCA9IFtdO1xyXG4gICAgICAgIC8vIHQuX3F1ZXJ5UHRyID0gMDtcclxuICAgICAgICB0Ll9yYW5kb21QdHIgPSAwO1xyXG4gICAgICAgIHQuaGFzQW55RXZlbnRzID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyMDA7IGkrKykge1xyXG4gICAgICAgICAgICB0Ll9yYW5kb21zLnB1c2godXRpbGl0aWVzXzEucmFuZG9tMTZCaXRzKCkudG9TdHJpbmcoMTYpKTtcclxuICAgICAgICAgICAgLy8gdC5fcXVlcnlQb29sLnB1c2gobmV3IF9OYW5vU1FMUXVlcnkodCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0Ll9jYWxsYmFja3MgPSB7fTtcclxuICAgICAgICB0Ll9jYWxsYmFja3NbXCIqXCJdID0gbmV3IHJlYWxseV9zbWFsbF9ldmVudHNfMS5SZWFsbHlTbWFsbEV2ZW50cygpO1xyXG4gICAgICAgIHQuaUIgPSBuZXcgaW5kZXhfMS5OYW5vU1FMRGVmYXVsdEJhY2tlbmQoKTtcclxuICAgICAgICB2YXIgaW5zdGFuY2VDb25uZWN0QXJncyA9IHtcclxuICAgICAgICAgICAgbW9kZWxzOiB7fSxcclxuICAgICAgICAgICAgYWN0aW9uczoge30sXHJcbiAgICAgICAgICAgIHZpZXdzOiB7fSxcclxuICAgICAgICAgICAgY29uZmlnOiB7fSxcclxuICAgICAgICAgICAgcGFyZW50OiB0aGlzXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodC5pQi53aWxsQ29ubmVjdCkge1xyXG4gICAgICAgICAgICB0LmlCLndpbGxDb25uZWN0KGluc3RhbmNlQ29ubmVjdEFyZ3MsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LmlCLmRpZENvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmlCLmRpZENvbm5lY3QoaW5zdGFuY2VDb25uZWN0QXJncywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLnRvQ29sdW1uID0gZnVuY3Rpb24gKGNvbHVtbkZucykge1xyXG4gICAgICAgIGlmICghdGhpcy50b0NvbEZuc1t0aGlzLnNUYWJsZV0pIHtcclxuICAgICAgICAgICAgdGhpcy50b0NvbEZuc1t0aGlzLnNUYWJsZV0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50b0NvbEZuc1t0aGlzLnNUYWJsZV0gPSBjb2x1bW5GbnM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS50b1JvdyA9IGZ1bmN0aW9uIChjb2x1bW5GbnMpIHtcclxuICAgICAgICBpZiAoIXRoaXMudG9Sb3dGbnNbdGhpcy5zVGFibGVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9Sb3dGbnNbdGhpcy5zVGFibGVdID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudG9Sb3dGbnNbdGhpcy5zVGFibGVdID0gY29sdW1uRm5zO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbmFub1NRTCBnZW5lcmF0ZXMgNTAgcmFuZG9tIDE2IGJpdCBzdHJpbmdzIG9uIGV2ZXJ5IGxhdW5jaC5cclxuICAgICAqIElmIHlvdSBkb24ndCBuZWVkIHRydWUgcmFuZG9tbmVzcyB5b3UgY2FuIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGdldCBhIHBzdWRvcmFuZG9tIDE2IGJpdCBzdHJpbmcuXHJcbiAgICAgKiBQZXJmb3JtYW5jZSBpcyBvcmRlcnMgb2YgYSBtYWduaXR1ZGUgZmFzdGVyIHNpbmNlIG5vIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGlzIG5lZWRlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICogQG1lbWJlcm9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmZhc3RSYW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX3JhbmRvbVB0cisrO1xyXG4gICAgICAgIGlmICh0aGlzLl9yYW5kb21QdHIgPj0gdGhpcy5fcmFuZG9tcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmFuZG9tUHRyID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhbmRvbXNbdGhpcy5fcmFuZG9tUHRyXTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgdGhlIHRhYmxlIHBvaW50ZXIgdG8gYSBuZXcgdGFibGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YWJsZV1cclxuICAgICAqIEByZXR1cm5zIHtOYW5vU1FMSW5zdGFuY2V9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLnRhYmxlID0gZnVuY3Rpb24gKHRhYmxlKSB7XHJcbiAgICAgICAgaWYgKHRhYmxlKVxyXG4gICAgICAgICAgICB0aGlzLnNUYWJsZSA9IHRhYmxlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdHMgdGhlIGJhY2tlbmQgZGF0YWJhc2UgZm9yIHVzZS5cclxuICAgICAqXHJcbiAgICAgKiBPcHRpb25hbGx5IGluY2x1ZGUgYSBjdXN0b20gZGF0YWJhc2UgZHJpdmVyLCBvdGhlcndpc2UgdGhlIGJ1aWx0IGluIG1lbW9yeSBkcml2ZXIgd2lsbCBiZSB1c2VkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TmFub1NRTEJhY2tlbmR9IFtiYWNrZW5kXVxyXG4gICAgICogQHJldHVybnMgeyhQcm9taXNlPE9iamVjdCB8IHN0cmluZz4pfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgdmFyIGNvbm5lY3RBcmdzID0ge1xyXG4gICAgICAgICAgICAgICAgbW9kZWxzOiB0LmRhdGFNb2RlbHMsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiB0Ll9hY3Rpb25zLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHQuX3ZpZXdzLFxyXG4gICAgICAgICAgICAgICAgY29uZmlnOiB0Ll9jb25maWcsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IF90aGlzLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25uZWN0QXJncy5tb2RlbHNbc3RyWzBdXSA9IFtcclxuICAgICAgICAgICAgICAgIHsga2V5OiBcImtleVwiLCB0eXBlOiBcInN0cmluZ1wiLCBwcm9wczogW1wicGsoKVwiLCBcImFpKClcIl0gfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiBcInZhbHVlXCIsIHR5cGU6IFwiYW55XCIgfVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAvLyBpZiBoaXN0b3J5IGlzIGVuYWJsZWQsIHR1cm4gb24gdGhlIGJ1aWx0IGluIGhpc3RvcnkgcGx1Z2luXHJcbiAgICAgICAgICAgIGlmICh0Ll9jb25maWcgJiYgdC5fY29uZmlnLmhpc3RvcnkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnVzZShuZXcgaGlzdG9yeV9wbHVnaW5fMS5fTmFub1NRTEhpc3RvcnlQbHVnaW4odC5fY29uZmlnLmhpc3RvcnlNb2RlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSWYgdGhlIGRiIG1vZGUgaXMgbm90IHNldCB0byBkaXNhYmxlLCBhZGQgZGVmYXVsdCBzdG9yZSB0byB0aGUgZW5kIG9mIHRoZSBwbHVnaW4gY2hhaW5cclxuICAgICAgICAgICAgaWYgKCF0Ll9jb25maWcgfHwgdC5fY29uZmlnLm1vZGUgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy51c2UobmV3IGluZGV4XzEuTmFub1NRTERlZmF1bHRCYWNrZW5kKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RDSEFJTihfdGhpcy5wbHVnaW5zLCBmdW5jdGlvbiAocCwgaSwgbmV4dFApIHtcclxuICAgICAgICAgICAgICAgIGlmIChwLndpbGxDb25uZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcC53aWxsQ29ubmVjdChjb25uZWN0QXJncywgZnVuY3Rpb24gKG5ld0FyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdEFyZ3MgPSBuZXdBcmdzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0UCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kYXRhTW9kZWxzID0gY29ubmVjdEFyZ3MubW9kZWxzO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2FjdGlvbnMgPSBjb25uZWN0QXJncy5hY3Rpb25zO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3ZpZXdzID0gY29ubmVjdEFyZ3Mudmlld3M7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fY29uZmlnID0gY29ubmVjdEFyZ3MuY29uZmlnO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoX3RoaXMuZGF0YU1vZGVscykuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzV2lsZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRhdGFNb2RlbHNbdGFibGVdID0gX3RoaXMuZGF0YU1vZGVsc1t0YWJsZV0uZmlsdGVyKGZ1bmN0aW9uIChtb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwua2V5ID09PSBcIipcIiAmJiBtb2RlbC50eXBlID09PSBcIipcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2lsZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2tpcFB1cmdlW3RhYmxlXSA9IGhhc1dpbGQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5kaWRFeGVjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBsdWdpbkhhc0RpZEV4ZWMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC50YWJsZU5hbWVzID0gT2JqZWN0LmtleXMoX3RoaXMuZGF0YU1vZGVscyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcGxldGVDb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoX3RoaXMucGx1Z2lucywgZnVuY3Rpb24gKHAsIGksIG5leHRQKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLmRpZENvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuZGlkQ29ubmVjdChjb25uZWN0QXJncywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX29uQ29ubmVjdGVkQ2FsbEJhY2tzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQ29ubmVjdGVkQ2FsbEJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYigpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXModC50YWJsZU5hbWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlVmVyc2lvbiA9IGZ1bmN0aW9uIChyZWJ1aWxkSURYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucXVlcnkoXCJ1cHNlcnRcIiwgeyBrZXk6IFwidmVyc2lvblwiLCB2YWx1ZTogX3RoaXMudmVyc2lvbiB9KS5tYW51YWxFeGVjKHsgdGFibGU6IFwiX3V0aWxcIiB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlYnVpbGRJRFgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmV4dGVuZChcInJlYnVpbGRfaWR4XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlQ29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUNvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnF1ZXJ5KFwic2VsZWN0XCIpLndoZXJlKFtcImtleVwiLCBcIj1cIiwgXCJ2ZXJzaW9uXCJdKS5tYW51YWxFeGVjKHsgdGFibGU6IFwiX3V0aWxcIiB9KS50aGVuKGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXcgZGF0YWJhc2Ugb3IgYW4gb2xkIG9uZSB0aGF0IG5lZWRzIGluZGV4ZXMgcmVidWlsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVWZXJzaW9uKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd3NbMF0udmFsdWUgPD0gMS4yMSkgeyAvLyBzZWNvbmRhcnkgaW5kZXhlcyBuZWVkIHRvIGJlIHJlYnVpbHQgYWZ0ZXIgMS4yMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmVyc2lvbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyb3dzWzBdLnZhbHVlIDwgVkVSU0lPTikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmVyc2lvbihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUNvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgYWN0aW9ucyBmb3IgYSBnaXZlbiB0YWJsZVxyXG4gICAgICogPVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICogQG1lbWJlcm9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmdldEFjdGlvbnMgPSBmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uc1t0YWJsZV0ubWFwKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBhLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBhcmdzOiBhLmFyZ3NcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgdmlld3MgZm9yIGEgZ2l2ZW4gdGFibGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgTmFub1NRTEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIE5hbm9TUUxJbnN0YW5jZS5wcm90b3R5cGUuZ2V0Vmlld3MgPSBmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmlld3NbdGFibGVdLm1hcChmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogYS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgYXJnczogYS5hcmdzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHcmFiIGEgY29weSBvZiB0aGUgZGF0YWJhc2UgY29uZmlnIG9iamVjdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICogQG1lbWJlcm9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmdldENvbmZpZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBhY3Rpb24vdmlldyBmaWx0ZXIgZnVuY3Rpb24uICBDYWxsZWQgKmJlZm9yZSogdGhlIGFjdGlvbi92aWV3IGlzIHNlbnQgdG8gdGhlIGRhdGFzdG9yZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SUFjdGlvblZpZXdNb2R9IGZpbHRlckZ1bmNcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmF2RmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlckZ1bmMpIHtcclxuICAgICAgICB0aGlzLl9BVk1vZCA9IGZpbHRlckZ1bmM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucy5wdXNoKHBsdWdpbiksIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBzZWxlY3RlZCBkYXRhYmFzZSB0YWJsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyhcImNoYW5nZVwifFwiZGVsZXRlXCJ8XCJ1cHNlcnRcInxcImRyb3BcInxcInNlbGVjdFwifFwiZXJyb3JcIil9IGFjdGlvbnNcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxCYWNrXHJcbiAgICAgKiBAcmV0dXJucyB7TmFub1NRTEluc3RhbmNlfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChhY3Rpb25zLCBjYWxsQmFjaykge1xyXG4gICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICB2YXIgbCA9IHQuc1RhYmxlO1xyXG4gICAgICAgIHZhciBpID0gdC5fZXZlbnRzLmxlbmd0aDtcclxuICAgICAgICB2YXIgYSA9IGFjdGlvbnMuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGwpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICBpZiAoIXQuX2NhbGxiYWNrc1tsXSkgeyAvLyBIYW5kbGUgdGhlIGV2ZW50IGhhbmRsZXIgYmVpbmcgY2FsbGVkIGJlZm9yZSB0aGUgZGF0YWJhc2UgaGFzIGNvbm5lY3RlZFxyXG4gICAgICAgICAgICB0Ll9jYWxsYmFja3NbbF0gPSBuZXcgcmVhbGx5X3NtYWxsX2V2ZW50c18xLlJlYWxseVNtYWxsRXZlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGkgPSBhLmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIGlmICh0Ll9ldmVudHMuaW5kZXhPZihhW2ldKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHQuX2NhbGxiYWNrc1tsXS5vbihhW2ldLCBjYWxsQmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQuX3JlZnJlc2hFdmVudENoZWNrZXIoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIHNwZWNpZmljIGV2ZW50IGhhbmRsZXIgZnJvbSBiZWluZyB0cmlnZ2VyZWQgYW55bW9yZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsQmFja1xyXG4gICAgICogQHJldHVybnMge05hbm9TUUxJbnN0YW5jZX1cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgTmFub1NRTEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIE5hbm9TUUxJbnN0YW5jZS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGFjdGlvbnMsIGNhbGxCYWNrKSB7XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIHZhciBhID0gYWN0aW9ucy5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgdmFyIGkgPSBhLmxlbmd0aDtcclxuICAgICAgICB2YXIgbCA9IHQuc1RhYmxlO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGwpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIGlmICh0Ll9ldmVudHMuaW5kZXhPZihhW2ldKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHQuX2NhbGxiYWNrc1tsXS5vZmYoYVtpXSwgY2FsbEJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0Ll9yZWZyZXNoRXZlbnRDaGVja2VyKCk7XHJcbiAgICB9O1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5fcmVmcmVzaEV2ZW50Q2hlY2tlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2hhc0V2ZW50cyA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2NhbGxiYWNrcykuY29uY2F0KFtcIipcIl0pLmZvckVhY2goZnVuY3Rpb24gKHRhYmxlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9oYXNFdmVudHNbdGFibGVdID0gX3RoaXMuX2V2ZW50cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXYgKyAoX3RoaXMuX2NhbGxiYWNrc1t0YWJsZV0gJiYgX3RoaXMuX2NhbGxiYWNrc1t0YWJsZV0uZXZlbnRMaXN0ZW5lcnNbY3VyXSA/IF90aGlzLl9jYWxsYmFja3NbdGFibGVdLmV2ZW50TGlzdGVuZXJzW2N1cl0ubGVuZ3RoIDogMCk7XHJcbiAgICAgICAgICAgIH0sIDApID4gMDtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmhhc0FueUV2ZW50cyA9IGZhbHNlO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2hhc0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmhhc0FueUV2ZW50cyA9IF90aGlzLmhhc0FueUV2ZW50cyB8fCBfdGhpcy5faGFzRXZlbnRzW2tleV07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNsYXJlIHRoZSBkYXRhIG1vZGVsIGZvciB0aGUgY3VycmVudCBzZWxlY3RlZCB0YWJsZS5cclxuICAgICAqXHJcbiAgICAgKiBQbGVhc2UgcmVmZXJlbmNlIHRoZSBEYXRhTW9kZWwgaW50ZXJmYWNlIGZvciBob3cgdG8gaW1wbGltZW50IHRoaXMsIGEgcXVpY2sgZXhhbXBsZTpcclxuICAgICAqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogLm1vZGVsKFtcclxuICAgICAqICB7a2V5OlwiaWRcIix0eXBlOlwiaW50XCIscHJvcHM6W1wiYWlcIixcInBrXCJdfSAvL2F1dG8gaW5jcmltZW50IGFuZCBwcmltYXJ5IGtleVxyXG4gICAgICogIHtrZXk6XCJuYW1lXCIsdHlwZTpcInN0cmluZ1wifVxyXG4gICAgICogXSlcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QXJyYXk8RGF0YU1vZGVsPn0gZGF0YU1vZGVsXHJcbiAgICAgKiBAcmV0dXJucyB7TmFub1NRTEluc3RhbmNlfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5tb2RlbCA9IGZ1bmN0aW9uIChkYXRhTW9kZWwsIHByb3BzLCBpZ25vcmVTYW5pdHlDaGVjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIHZhciBsID0gdC5zVGFibGU7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobCkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGlmICghdC5fY2FsbGJhY2tzW2xdKSB7XHJcbiAgICAgICAgICAgIHQuX2NhbGxiYWNrc1tsXSA9IG5ldyByZWFsbHlfc21hbGxfZXZlbnRzXzEuUmVhbGx5U21hbGxFdmVudHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGhhc1BLID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKCFpZ25vcmVTYW5pdHlDaGVjaykge1xyXG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSB0YWJsZSBuYW1lIGFuZCBkYXRhIG1vZGVsXHJcbiAgICAgICAgICAgIHZhciB0eXBlcyA9IFtcInN0cmluZ1wiLCBcInNhZmVzdHJcIiwgXCJ0aW1lSWRcIiwgXCJ0aW1lSWRtc1wiLCBcInV1aWRcIiwgXCJpbnRcIiwgXCJmbG9hdFwiLCBcIm51bWJlclwiLCBcImFycmF5XCIsIFwibWFwXCIsIFwiYm9vbFwiLCBcImJsb2JcIiwgXCJhbnlcIl07XHJcbiAgICAgICAgICAgIGlmICh0eXBlcy5pbmRleE9mKGwucmVwbGFjZSgvXFxXL2dtaSwgXCJcIikpICE9PSAtMSB8fCBsLmluZGV4T2YoXCJfXCIpID09PSAwIHx8IGwubWF0Y2goL1tcXChcXClcXF1cXFtcXC5dL2cpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgVGFibGUgTmFtZSEgaHR0cHM6Ly9kb2NzLm5hbm9zcWwuaW8vc2V0dXAvZGF0YS1tb2RlbHNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKGRhdGFNb2RlbCB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5rZXkubWF0Y2goL1tcXChcXClcXF1cXFtcXC5dL2cpICE9PSBudWxsIHx8IG1vZGVsLmtleS5pbmRleE9mKFwiX1wiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBEYXRhIE1vZGVsISBodHRwczovL2RvY3MubmFub3NxbC5pby9zZXR1cC9kYXRhLW1vZGVsc1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHQudG9Db2xSdWxlc1tsXSA9IHt9O1xyXG4gICAgICAgIChkYXRhTW9kZWwgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbC5wcm9wcykge1xyXG4gICAgICAgICAgICAgICAgbW9kZWwucHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9sZCBmb3JtYXQ6IGZyb209PmZuKGFyZzEsIGFyZzIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wLmluZGV4T2YoXCJmcm9tPT5cIikgIT09IC0xICYmIHByb3AuaW5kZXhPZihcIihcIikgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbk5hbWUgPSBwcm9wLnJlcGxhY2UoXCJmcm9tPT5cIiwgXCJcIikuc3BsaXQoXCIoXCIpLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbkFyZ3MgPSBwcm9wLnJlcGxhY2UoXCJmcm9tPT5cIiwgXCJcIikuc3BsaXQoXCIoXCIpLnBvcCgpLnJlcGxhY2UoXCIpXCIsIFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudHJpbSgpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC50b0NvbFJ1bGVzW2xdW21vZGVsLmtleV0gPSBbZm5OYW1lXS5jb25jYXQoZm5BcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3IGZvcm1hdDogdG9Db2x1bW4uZm4oYXJnMSwgYXJnMik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AuaW5kZXhPZihcInRvQ29sdW1uLlwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm5OYW1lID0gcHJvcC5yZXBsYWNlKC90b0NvbHVtblxcLiguKilcXCguKlxcKS9nbWksIFwiJDFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbkFyZ3MgPSBwcm9wLnJlcGxhY2UoL3RvQ29sdW1uXFwuLipcXCgoLiopXFwpL2dtaSwgXCIkMVwiKS5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRyaW0oKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQudG9Db2xSdWxlc1tsXVttb2RlbC5rZXldID0gW2ZuTmFtZV0uY29uY2F0KGZuQXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1vZGVsLnByb3BzICYmIHV0aWxpdGllc18xLmludGVyc2VjdChbXCJwa1wiLCBcInBrKClcIl0sIG1vZGVsLnByb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMudGFibGVQS3NbbF0gPSBtb2RlbC5rZXk7XHJcbiAgICAgICAgICAgICAgICBoYXNQSyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmhhc1BLW2xdID0gaGFzUEs7XHJcbiAgICAgICAgaWYgKCFoYXNQSykge1xyXG4gICAgICAgICAgICB0aGlzLnRhYmxlUEtzW2xdID0gXCJfaWRfXCI7XHJcbiAgICAgICAgICAgIGRhdGFNb2RlbC51bnNoaWZ0KHsga2V5OiBcIl9pZF9cIiwgdHlwZTogXCJ1dWlkXCIsIHByb3BzOiBbXCJwaygpXCJdIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0LmRhdGFNb2RlbHNbbF0gPSBkYXRhTW9kZWw7XHJcbiAgICAgICAgdC5fdmlld3NbbF0gPSBbXTtcclxuICAgICAgICB0Ll9hY3Rpb25zW2xdID0gW107XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNsYXJlIHRoZSB2aWV3cyBmb3IgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgdGFibGUuICBNdXN0IGJlIGNhbGxlZCBiZWZvcmUgY29ubmVjdCgpXHJcbiAgICAgKlxyXG4gICAgICogVmlld3MgYXJlIGNyZWF0ZWQgbGlrZSB0aGlzOlxyXG4gICAgICpcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAudmlld3MoW1xyXG4gICAgICogIHtcclxuICAgICAqICAgICAgbmFtZTpcInZpZXctbmFtZVwiLFxyXG4gICAgICogICAgICBhcmdzOiBbXCJhcnJheVwiLFwib2ZcIixcImFyZ3VtZW50c1wiXSxcclxuICAgICAqICAgICAgY2FsbDogZnVuY3Rpb24oYXJncykge1xyXG4gICAgICogICAgICAgICAgLy8gQmVjYXVzZSBvZiBvdXIgXCJhcmdzXCIgYXJyYXkgdGhlIGFyZ3MgaW5wdXQgb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGxvb2sgbGlrZSB0aGlzOlxyXG4gICAgICogICAgICAgICAgLy8gTmFub1NRTCB3aWxsIG5vdCBsZXQgYW55IG90aGVyIGFyZ3VtZW50cyBpbnRvIHRoaXMgZnVuY3Rpb24uXHJcbiAgICAgKiAgICAgICAgICBhcmdzOntcclxuICAgICAqICAgICAgICAgICAgICBhcnJheTonJyxcclxuICAgICAqICAgICAgICAgICAgICBvZjonJyxcclxuICAgICAqICAgICAgICAgICAgICBhcmd1bWVudHM6JydcclxuICAgICAqICAgICAgICAgIH1cclxuICAgICAqICAgICAgICAgIC8vV2UgY2FuIHVzZSB0aGVtIGluIG91ciBxdWVyeVxyXG4gICAgICogICAgICAgICAgcmV0dXJuIHRoaXMucXVlcnkoJ3NlbGVjdCcpLndoZXJlKFsnbmFtZScsJ0lOJyxhcmdzLmFycmF5XSkuZXhlYygpO1xyXG4gICAgICogICAgICB9XHJcbiAgICAgKiAgfVxyXG4gICAgICogXSlcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIFRoZW4gbGF0ZXIgaW4geW91ciBhcHAuLlxyXG4gICAgICpcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiBOYW5vU1FMKFwidXNlcnNcIikuZ2V0VmlldyhcInZpZXctbmFtZVwiLHthcnJheTonJyxvZjpcIlwiLGFyZ3VtZW50czpcIlwifSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAqICBjb25zb2xlLmxvZyhyZXN1bHQpIDw9PT0gcmVzdWx0IG9mIHlvdXIgdmlldyB3aWxsIGJlIHRoZXJlLlxyXG4gICAgICogfSlcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIE9wdGlvbmFsbHkgeW91IGNhbiB0eXBlIGNhc3QgdGhlIGFyZ3VtZW50cyBhdCBydW4gdGltZSB0eXBlc2NyaXB0IHN0eWxlLCBqdXN0IGFkZCB0aGUgdHlwZXMgYWZ0ZXIgdGhlIGFyZ3VtZW50cyBpbiB0aGUgYXJyYXkuICBMaWtlIHRoaXM6XHJcbiAgICAgKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIC52aWV3c1t7XHJcbiAgICAgKiAgICAgIG5hbWU6Li4uXHJcbiAgICAgKiAgICAgIGFyZ3M6W1wibmFtZTpzdHJpbmdcIixcImJhbGFuY2U6ZmxvYXRcIixcImFjdGl2ZTpib29sXCJdXHJcbiAgICAgKiAgICAgIGNhbGw6Li4uXHJcbiAgICAgKiB9XVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogTmFub1NRTCB3aWxsIGZvcmNlIHRoZSBhcmd1bWVudHMgcGFzc2VkIGludG8gdGhlIGZ1bmN0aW9uIHRvIHRob3NlIHR5cGVzLlxyXG4gICAgICpcclxuICAgICAqIFBvc3NpYmxlIHR5cGVzIGFyZSBzdHJpbmcsIGJvb2wsIGZsb2F0LCBpbnQsIG1hcCwgYXJyYXkgYW5kIGJvb2wuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBcnJheTxBY3Rpb25PclZpZXc+fSB2aWV3QXJyYXlcclxuICAgICAqIEByZXR1cm5zIHtOYW5vU1FMSW5zdGFuY2V9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLnZpZXdzID0gZnVuY3Rpb24gKHZpZXdBcnJheSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc1RhYmxlKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdzW3RoaXMuc1RhYmxlXSA9IHZpZXdBcnJheSwgdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGUgYSBzcGVjaWZpYyB2aWV3LiAgUmVmZXJuZWNlIHRoZSBcInZpZXdzXCIgZnVuY3Rpb24gZm9yIG1vcmUgZGVzY3JpcHRpb24uXHJcbiAgICAgKlxyXG4gICAgICogRXhhbXBsZTpcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiBOYW5vU1FMKFwidXNlcnNcIikuZ2V0Vmlldygndmlldy1uYW1lJyx7Zm9vOlwiYmFyXCJ9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICogIGNvbnNvbGUubG9nKHJlc3VsdCkgPD09IHZpZXcgcmVzdWx0LlxyXG4gICAgICogfSlcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2aWV3TmFtZVxyXG4gICAgICogQHBhcmFtIHthbnl9IHZpZXdBcmdzXHJcbiAgICAgKiBAcmV0dXJucyB7KFByb21pc2U8QXJyYXk8T2JqZWN0Pj4pfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5nZXRWaWV3ID0gZnVuY3Rpb24gKHZpZXdOYW1lLCB2aWV3QXJncykge1xyXG4gICAgICAgIGlmICh2aWV3QXJncyA9PT0gdm9pZCAwKSB7IHZpZXdBcmdzID0ge307IH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnNUYWJsZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHsgcmV0dXJuIHJlaigpOyB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZG9BVihcIlZpZXdcIiwgdGhpcy5fdmlld3NbdGhpcy5zVGFibGVdLCB2aWV3TmFtZSwgdmlld0FyZ3MpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRGVjbGFyZSB0aGUgYWN0aW9ucyBmb3IgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgdGFibGUuICBNdXN0IGJlIGNhbGxlZCBiZWZvcmUgY29ubmVjdCgpXHJcbiAgICAgKlxyXG4gICAgICogQWN0aW9ucyBhcmUgY3JlYXRlZCBsaWtlIHRoaXM6XHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogLmFjdGlvbnMoW1xyXG4gICAgICogIHtcclxuICAgICAqICAgICAgbmFtZTpcImFjdGlvbi1uYW1lXCIsXHJcbiAgICAgKiAgICAgIGFyZ3M6IFtcImFycmF5XCIsXCJvZlwiLFwiYXJndW1lbnRzXCJdLFxyXG4gICAgICogICAgICBjYWxsOiBmdW5jdGlvbihhcmdzKSB7XHJcbiAgICAgKiAgICAgICAgICAvLyBCZWNhdXNlIG9mIG91ciBcImFyZ3NcIiBhcnJheSB0aGUgYXJncyBpbnB1dCBvZiB0aGlzIGZ1bmN0aW9uIHdpbGwgbG9vayBsaWtlIHRoaXM6XHJcbiAgICAgKiAgICAgICAgICAvLyBOYW5vU1FMIHdpbGwgbm90IGxldCBhbnkgb3RoZXIgYXJndW1lbnRzIGludG8gdGhpcyBmdW5jdGlvbi5cclxuICAgICAqICAgICAgICAgIGFyZ3M6e1xyXG4gICAgICogICAgICAgICAgICAgIGFycmF5OicnLFxyXG4gICAgICogICAgICAgICAgICAgIG9mOicnLFxyXG4gICAgICogICAgICAgICAgICAgIGFyZ3VtZW50czonJ1xyXG4gICAgICogICAgICAgICAgfVxyXG4gICAgICogICAgICAgICAgLy9XZSBjYW4gdXNlIHRoZW0gaW4gb3VyIHF1ZXJ5XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gdGhpcy5xdWVyeShcInVwc2VydFwiLHtiYWxhbmNlOjB9KS53aGVyZShbJ25hbWUnLCdJTicsYXJncy5hcnJheV0pLmV4ZWMoKTtcclxuICAgICAqICAgICAgfVxyXG4gICAgICogIH1cclxuICAgICAqIF0pXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBUaGVuIGxhdGVyIGluIHlvdXIgYXBwLi5cclxuICAgICAqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogTmFub1NRTChcInVzZXJzXCIpLmRvQWN0aW9uKFwiYWN0aW9uLW5hbWVcIix7YXJyYXk6Jycsb2Y6XCJcIixhcmd1bWVudHM6XCJcIn0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgKiAgY29uc29sZS5sb2cocmVzdWx0KSA8PT09IHJlc3VsdCBvZiB5b3VyIHZpZXcgd2lsbCBiZSB0aGVyZS5cclxuICAgICAqIH0pXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBPcHRpb25hbGx5IHlvdSBjYW4gdHlwZSBjYXN0IHRoZSBhcmd1bWVudHMgYXQgcnVuIHRpbWUgdHlwZXNjcmlwdCBzdHlsZSwganVzdCBhZGQgdGhlIHR5cGVzIGFmdGVyIHRoZSBhcmd1bWVudHMgaW4gdGhlIGFycmF5LiAgTGlrZSB0aGlzOlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIC5hY3Rpb25zW3tcclxuICAgICAqICAgICAgbmFtZTouLi5cclxuICAgICAqICAgICAgYXJnczpbXCJuYW1lOnN0cmluZ1wiLFwiYmFsYW5jZTpmbG9hdFwiLFwiYWN0aXZlOmJvb2xcIl1cclxuICAgICAqICAgICAgY2FsbDouLi5cclxuICAgICAqIH1dXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBOYW5vU1FMIHdpbGwgZm9yY2UgdGhlIGFyZ3VtZW50cyBwYXNzZWQgaW50byB0aGUgZnVuY3Rpb24gdG8gdGhvc2UgdHlwZXMuXHJcbiAgICAgKlxyXG4gICAgICogUG9zc2libGUgdHlwZXMgYXJlIHN0cmluZywgYm9vbCwgZmxvYXQsIGludCwgbWFwLCBhcnJheSBhbmQgYm9vbC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFjdGlvbk9yVmlldz59IGFjdGlvbkFycmF5XHJcbiAgICAgKiBAcmV0dXJucyB7TmFub1NRTEluc3RhbmNlfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5hY3Rpb25zID0gZnVuY3Rpb24gKGFjdGlvbkFycmF5KSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5zVGFibGUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uc1t0aGlzLnNUYWJsZV0gPSBhY3Rpb25BcnJheSwgdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluaXQgYW4gYWN0aW9uIGZvciB0aGUgY3VycmVudCBzZWxlY3RlZCB0YWJsZS4gUmVmZXJlbmNlIHRoZSBcImFjdGlvbnNcIiBtZXRob2QgZm9yIG1vcmUgaW5mby5cclxuICAgICAqXHJcbiAgICAgKiBFeGFtcGxlOlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIE5hbm9TUUwoXCJ1c2Vyc1wiKS5kb0FjdGlvbignYWN0aW9uLW5hbWUnLHtmb286XCJiYXJcIn0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgKiAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCkgPD09IHJlc3VsdCBvZiB5b3VyIGFjdGlvblxyXG4gICAgICogfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uTmFtZVxyXG4gICAgICogQHBhcmFtIHthbnl9IGFjdGlvbkFyZ3NcclxuICAgICAqIEByZXR1cm5zIHsoUHJvbWlzZTxBcnJheTxPYmplY3Q+Pil9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmRvQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbk5hbWUsIGFjdGlvbkFyZ3MpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnNUYWJsZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHsgcmV0dXJuIHJlaigpOyB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZG9BVihcIkFjdGlvblwiLCB0aGlzLl9hY3Rpb25zW3RoaXMuc1RhYmxlXSwgYWN0aW9uTmFtZSwgYWN0aW9uQXJncyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgcXVlcnkgZmlsdGVyIHRvIGV2ZXJ5IHJlcXVlc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoYXJnczogREJFeGVjLCBjb21wbGV0ZTooYXJnczogREJFeGVjKSA9PiB2b2lkKSA9PiB2b2lkfSBjYWxsQmFja1xyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5xdWVyeUZpbHRlciA9IGZ1bmN0aW9uIChjYWxsQmFjaykge1xyXG4gICAgICAgIHRoaXMucXVlcnlNb2QgPSBjYWxsQmFjaztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGZpcmUgYWN0aW9uL3ZpZXdzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0geyhcIkFjdGlvblwifFwiVmlld1wiKX0gQVZUeXBlXHJcbiAgICAgKiBAcGFyYW0ge0FjdGlvbk9yVmlld1tdfSBBVkxpc3RcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBBVk5hbWVcclxuICAgICAqIEBwYXJhbSB7Kn0gQVZhcmdzXHJcbiAgICAgKiBAcmV0dXJucyB7KFByb21pc2U8QXJyYXk8REJSb3c+fE5hbm9TUUxJbnN0YW5jZT4pfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5fZG9BViA9IGZ1bmN0aW9uIChBVlR5cGUsIEFWTGlzdCwgQVZOYW1lLCBBVmFyZ3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICB2YXIgc2VsQVYgPSBBVkxpc3QucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcclxuICAgICAgICAgICAgaWYgKGN1ci5uYW1lID09PSBBVk5hbWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICB9LCBudWxsKTtcclxuICAgICAgICBpZiAoIXNlbEFWKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHsgcmV0dXJuIHJlaihcIkFjdGlvbi9WaWV3IE5vdCBGb3VuZCFcIik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0Ll9hY3RpdmVBViA9IEFWTmFtZTtcclxuICAgICAgICBpZiAodC5fQVZNb2QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyB1dGlsaXRpZXNfMS5Qcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xyXG4gICAgICAgICAgICAgICAgdC5fQVZNb2QoX3RoaXMuc1RhYmxlLCBBVlR5cGUsIHQuX2FjdGl2ZUFWIHx8IFwiXCIsIEFWYXJncywgZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxBVi5jYWxsKHNlbEFWLmFyZ3MgPyB1dGlsaXRpZXNfMS5jbGVhbkFyZ3Moc2VsQVYuYXJncywgYXJncykgOiB7fSwgdCkudGhlbihyZXMpLmNhdGNoKHJlaik7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqKGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsQVYuY2FsbChzZWxBVi5hcmdzID8gdXRpbGl0aWVzXzEuY2xlYW5BcmdzKHNlbEFWLmFyZ3MsIEFWYXJncykgOiB7fSwgdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RhcnQgYSBxdWVyeSBpbnRvIHRoZSBjdXJyZW50IHNlbGVjdGVkIHRhYmxlLlxyXG4gICAgICogUG9zc2libCBxdWVyeXMgYXJlIFwic2VsZWN0XCIsIFwidXBzZXJ0XCIsIFwiZGVsZXRlXCIsIGFuZCBcImRyb3BcIjtcclxuICAgICAqXHJcbiAgICAgKiAjIyMgU2VsZWN0XHJcbiAgICAgKlxyXG4gICAgICogU2VsZWN0IGlzIHVzZWQgdG8gcHVsbCBhIHNldCBvZiByb3dzIG9yIG90aGVyIGRhdGEgZnJvbSB0aGUgdGFibGUuXHJcbiAgICAgKiBXaGVuIHlvdSB1c2Ugc2VsZWN0IHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgb2YgdGhlIHF1ZXJ5IGlzIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCBhbGxvdyB5b3UgdG8gc2hvdyBvbmx5IHNwZWNpZmljIGNvbHVtbnMuXHJcbiAgICAgKlxyXG4gICAgICogRXhhbXBsZXM6XHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogLnF1ZXJ5KFwic2VsZWN0XCIpIC8vIE5vIGFyZ3VtZW50cywgc2VsZWN0IGFsbCBjb2x1bW5zXHJcbiAgICAgKiAucXVlcnkoXCJzZWxlY3RcIixbJ3VzZXJuYW1lJ10pIC8vIG9ubHkgZ2V0IHRoZSB1c2VybmFtZSBjb2x1bW5cclxuICAgICAqIC5xdWVyeShcInNlbGVjdFwiLFtcInVzZXJuYW1lXCIsXCJiYWxhbmNlXCJdKSAvL0dldCB0d28gY29sdW1ucywgdXNlcm5hbWUgYW5kIGJhbGFuY2UuXHJcbiAgICAgKiAucXVlcnkoXCJzZWxlY3RcIixbXCJjb3VudCgqKVwiXSkgLy9HZXQgdGhlIGxlbmd0aCBvZiByZWNvcmRzIGluIHRoZSBkYXRhYmFzZVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogIyMjIFVwc2VydFxyXG4gICAgICpcclxuICAgICAqIFVwc2VydCBpcyB1c2VkIHRvIGFkZCBvciBtb2RpZnkgZGF0YSBpbiB0aGUgZGF0YWJhc2UuXHJcbiAgICAgKiBJZiB0aGUgcHJpbWFyeSBrZXkgcm93cyBhcmUgbnVsbCBvciB1bmRlZmluZWQsIHRoZSBkYXRhIHdpbGwgYWx3YXlzIGJlIGFkZGVkIGluIGEgbmV3IHJvdy4gT3RoZXJ3aXNlLCB5b3UgbWlnaHQgYmUgdXBkYXRpbmcgZXhpc3Rpbmcgcm93cy5cclxuICAgICAqIFRoZSBzZWNvbmQgYXJndW1lbnQgb2YgdGhlIHF1ZXJ5IHdpdGggdXBzZXJ0cyBpcyBhbHdheXMgYW4gT2JqZWN0IG9mIHRoZSBkYXRhIHRvIHVwc2VydC5cclxuICAgICAqXHJcbiAgICAgKiBFeGFtcGxlczpcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAucXVlcnkoXCJ1cHNlcnRcIix7aWQ6MSwgdXNlcm5hbWU6XCJTY290dFwifSkgLy9JZiByb3cgSUQgMSBleGlzdHMsIHNldCB0aGUgdXNlcm5hbWUgdG8gc2NvdHQsIG90aGVyd2lzZSBjcmVhdGUgYSBuZXcgcm93IHdpdGggdGhpcyBkYXRhLlxyXG4gICAgICogLnF1ZXJ5KFwidXBzZXJ0XCIse3VzZXJuYW1lOlwiU2NvdHRcIn0pIC8vQWRkIGEgbmV3IHJvdyB0byB0aGUgZGIgd2l0aCB0aGlzIHVzZXJuYW1lIGluIHRoZSByb3cuXHJcbiAgICAgKiAucXVlcnkoXCJ1cHNlcnRcIix7YmFsYW5jZTotMzV9KS53aGVyZShbXCJiYWxhbmNlXCIsXCI8XCIsMF0pIC8vIElmIHlvdSB1c2UgYSBXSEVSRSBzdGF0ZW1lbnQgdGhpcyBkYXRhIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcm93cyBmb3VuZCB3aXRoIHRoZSB3aGVyZSBzdGF0ZW1lbnQuXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiAjIyMgRGVsZXRlXHJcbiAgICAgKlxyXG4gICAgICogRGVsZXRlIGlzIHVzZWQgdG8gcmVtb3ZlIGRhdGEgZnJvbSB0aGUgZGF0YWJhc2UuXHJcbiAgICAgKiBJdCB3b3JrcyBleGFjdGx5IGxpa2Ugc2VsZWN0LCBleGNlcHQgaXQgcmVtb3ZlcyBkYXRhIGluc3RlYWQgb2Ygc2VsZWN0aW5nIGl0LiAgVGhlIHNlY29uZCBhcmd1bWVudCBpcyBhbiBhcnJheSBvZiBjb2x1bW5zIHRvIGNsZWFyLiAgSWYgbm8gc2Vjb25kIGFyZ3VtZW50IGlzIHBhc3NlZCwgdGhlIGVudGlyZSByb3cgaXMgZGVsZXRlZC5cclxuICAgICAqIElmIG5vIHdoZXJlIGFyZ3VtZW50IGlzIHBhc3NlZCwgdGhlIGVudGlyZSB0YWJsZSBpcyBkcm9wcGVkXHJcbiAgICAgKlxyXG4gICAgICogRXhhbXBsZXM6XHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogLnF1ZXJ5KFwiZGVsZXRlXCIsWydiYWxhbmNlJ10pIC8vQ2xlYXIgdGhlIGNvbnRlbnRzIG9mIHRoZSBiYWxhbmNlIGNvbHVtbiBvbiBBTEwgcm93cy5cclxuICAgICAqIC5xdWVyeShcImRlbGV0ZVwiLFsnY29tbWVudHMnXSkud2hlcmUoW1wiYWNjb3VudFR5cGVcIixcIj1cIixcInNwYW1tZXJcIl0pIC8vIElmIGEgd2hlcmUgc3RhdG1lbnQgaXMgcGFzc2VkIHlvdSdsbCBvbmx5IGNsZWFyIHRoZSBjb2x1bW5zIG9mIHRoZSByb3dzIHNlbGVjdGVkIGJ5IHRoZSB3aGVyZSBzdGF0ZW1lbnQuXHJcbiAgICAgKiAucXVlcnkoXCJkZWxldGVcIikud2hlcmUoW1wiYmFsYW5jZVwiLFwiPFwiLDBdKSAvLyByZW1vdmUgYWxsIHJvd3Mgd2l0aCBhIGJhbGFuY2UgbGVzcyB0aGFuIHplcm9cclxuICAgICAqIC5xdWVyeShcImRlbGV0ZVwiKSAvLyBTYW1lIGFzIGRyb3Agc3RhdGVtZW50XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiAjIyMgRHJvcFxyXG4gICAgICpcclxuICAgICAqIERyb3AgaXMgdXNlZCB0byBjb21wbGV0ZWx5IGNsZWFyIHRoZSBjb250ZW50cyBvZiBhIGRhdGFiYXNlLiAgVGhlcmUgYXJlIG5vIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBEcm9wIEV4YW1wbGVzOlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIC5xdWVyeShcImRyb3BcIilcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7KFwic2VsZWN0XCJ8XCJ1cHNlcnRcInxcImRlbGV0ZVwifFwiZHJvcFwiKX0gYWN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gW2FyZ3NdXHJcbiAgICAgKiBAcmV0dXJucyB7TmFub1NRTEluc3RhbmNlfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChhY3Rpb24sIGFyZ3MpIHtcclxuICAgICAgICAvKmxldCB0ID0gdGhpcztcclxuICAgICAgICB0Ll9xdWVyeVB0cisrO1xyXG4gICAgICAgIGlmICh0Ll9xdWVyeVB0ciA+IHQuX3F1ZXJ5UG9vbC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIHQuX3F1ZXJ5UHRyID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXYgPSB0Ll9hY3RpdmVBVjtcclxuICAgICAgICB0Ll9hY3RpdmVBViA9IHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gdC5fcXVlcnlQb29sW3QuX3F1ZXJ5UHRyXS5zZXQodC5zVGFibGUsIGFjdGlvbi50b0xvd2VyQ2FzZSgpLCBhcmdzLCBhdik7Ki9cclxuICAgICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGF2ID0gdC5fYWN0aXZlQVY7XHJcbiAgICAgICAgdC5fYWN0aXZlQVYgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBzdGRfcXVlcnlfMS5fTmFub1NRTFF1ZXJ5KHRoaXMsIHRoaXMuc1RhYmxlLCBhY3Rpb24sIGFyZ3MsIGF2KTtcclxuICAgIH07XHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLm9uQ29ubmVjdGVkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ29ubmVjdGVkQ2FsbEJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXIgYSBkYXRhYmFzZSBldmVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RGF0YWJhc2VFdmVudH0gZXZlbnREYXRhXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLnRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uIChldmVudERhdGEpIHtcclxuICAgICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHQuX2hhc0V2ZW50c1tcIipcIl0gfHwgdC5faGFzRXZlbnRzW2V2ZW50RGF0YS50YWJsZV0pIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50RGF0YS50YWJsZSA9PT0gXCIqXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgbGllX3RzXzEuc2V0RmFzdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYztcclxuICAgICAgICAgICAgICAgIGV2ZW50RGF0YS50eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciB3aWxkY2FyZFxyXG4gICAgICAgICAgICAgICAgICAgIHQuX2NhbGxiYWNrc1tcIipcIl0udHJpZ2dlcih0eXBlLCBldmVudERhdGEsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuX2NhbGxiYWNrc1tcIipcIl0udHJpZ2dlcihcIipcIiwgZXZlbnREYXRhLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHNwZWNpZmljIHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50RGF0YS50YWJsZSAmJiB0Ll9jYWxsYmFja3NbZXZlbnREYXRhLnRhYmxlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Ll9jYWxsYmFja3NbZXZlbnREYXRhLnRhYmxlXS50cmlnZ2VyKHR5cGUsIGV2ZW50RGF0YSwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBkZWZhdWx0IG9iamVjdCBmb3IgdGhlIGN1cnJlbnQgdGFibGUncyBkYXRhIG1vZGVsLCB1c2VmdWwgZm9yIGZvcm1zLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBvcHRpb25hbCBhcmd1bWVudCBsZXRzIHlvdSBwYXNzIGluIGFuIG9iamVjdCB0byBvdmVyIHdyaXRlIHRoZSBkYXRhIG1vZGVsJ3MgZGVmYXVsdHMgYXMgZGVzaXJlZC5cclxuICAgICAqXHJcbiAgICAgKiBFeGFtcGxlczpcclxuICAgICAqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogY29uc29sZS5sb2coTmFub1NRTChcInVzZXJzXCIpLmRlZmF1bHQoKSkgPD0ge3VzZXJuYW1lOlwibm9uZVwiLCBpZDp1bmRlZmluZWQsIGFnZTogMH1cclxuICAgICAqIGNvbnNvbGUubG9nKE5hbm9TUUwoXCJ1c2Vyc1wiKS5kZWZhdWx0KHt1c2VybmFtZTpcImRlZmFsdFwifSkpIDw9IHt1c2VybmFtZTpcImRlZmF1bHRcIiwgaWQ6dW5kZWZpbmVkLCBhZ2U6IDB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBETyBOT1QgdXNlIHRoaXMgaW5zaWRlIHVwc2VydCBjb21tYW5kcyBsaWtlIGAucXVlcnkoXCJ1cHNlcnRcIixOYW5vU1FMKFwidXNlcnNcIikuZGVmYWx0KHt1c2VyT2JqfSkpLi5gLlxyXG4gICAgICogVGhlIGRhdGFiYXNlIGRlZmF1bHRzIGFyZSBhbHJlYWR5IGFwcGxpZWQgdGhyb3VnaCB0aGUgdXBzZXJ0IHBhdGgsIHlvdSdsbCBiZSBkb2luZyBkb3VibGUgd29yay5cclxuICAgICAqXHJcbiAgICAgKiBPbmx5IHVzZSB0aGlzIHRvIHB1bGwgZGVmYXVsdCB2YWx1ZXMgaW50byBhIGZvcm0gaW4geW91ciBVSSBvciBzaW1pbGFyIHNpdHVhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IFtyZXBsYWNlT2JqXVxyXG4gICAgICogQHJldHVybnMge3tba2V5OiBzdHJpbmddOiBhbnl9fVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5kZWZhdWx0ID0gZnVuY3Rpb24gKHJlcGxhY2VPYmopIHtcclxuICAgICAgICB2YXIgbmV3T2JqID0ge307XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHQuc1RhYmxlKSlcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgIHQuZGF0YU1vZGVsc1t0LnNUYWJsZV0uZm9yRWFjaChmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICAvLyBzZXQga2V5IHRvIG9iamVjdCBhcmd1bWVudCBvciB0aGUgZGVmYXVsdCB2YWx1ZSBpbiB0aGUgZGF0YSBtb2RlbFxyXG4gICAgICAgICAgICBuZXdPYmpbbS5rZXldID0gKHJlcGxhY2VPYmogJiYgcmVwbGFjZU9ialttLmtleV0pID8gcmVwbGFjZU9ialttLmtleV0gOiBtLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGRlZmF1bHQgdmFsdWUgZnJvbSB0eXBlLCBlZyBpbnQgPSAwLCBzdHJpbmcgPSBcIlwiXHJcbiAgICAgICAgICAgIGlmIChuZXdPYmpbbS5rZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG5ld09ialttLmtleV0gPSB1dGlsaXRpZXNfMS5jYXN0KG0udHlwZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3T2JqO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSByYXcgY29udGVudHMgb2YgdGhlIGRhdGFiYXNlLCBwcm92aWRlcyBhbGwgdGFibGVzLlxyXG4gICAgICpcclxuICAgICAqIE9wdGlvbmFsbHkgcGFzcyBpbiB0aGUgdGFibGVzIHRvIGV4cG9ydC4gIElmIG5vIHRhYmxlcyBhcmUgcHJvdmlkZWQgdGhlbiBhbGwgdGFibGVzIHdpbGwgYmUgZHVtcGVkLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgTmFub1NRTEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIE5hbm9TUUxJbnN0YW5jZS5wcm90b3R5cGUucmF3RHVtcCA9IGZ1bmN0aW9uICh0YWJsZXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4oX3RoaXMucGx1Z2lucywgZnVuY3Rpb24gKHBsdWdpbiwgaSwgbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5kdW1wVGFibGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmR1bXBUYWJsZXModGFibGVzKS50aGVuKGZ1bmN0aW9uICh0YWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX19hc3NpZ24oe30sIHJlc3VsdCwgdGFibGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlcyhyZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEltcG9ydCB0YWJsZSBkYXRhIGRpcmVjdGx5IGludG8gdGhlIGRhdGF0YWJhc2UuXHJcbiAgICAgKiBTaWduaWZpbmNhdGx5IGZhc3RlciB0aGFuIC5sb2FkSlMgYnV0IGRvZXNuJ3QgZG8gdHlwZSBjaGVja2luZywgaW5kZXhpbmcgb3IgYW55dGhpbmcgZWxzZSBmYW5jeS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3tbdGFibGU6IHN0cmluZ106IERCUm93W119fSB0YWJsZXNcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgTmFub1NRTEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIE5hbm9TUUxJbnN0YW5jZS5wcm90b3R5cGUucmF3SW1wb3J0ID0gZnVuY3Rpb24gKHRhYmxlcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB1dGlsaXRpZXNfMS5Qcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xyXG4gICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4oX3RoaXMucGx1Z2lucywgZnVuY3Rpb24gKHBsdWdpbiwgaSwgbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5pbXBvcnRUYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBwbHVnaW4uaW1wb3J0VGFibGVzKHRhYmxlcykudGhlbihuZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1ZXN0IGRpc2Nvbm5lY3QgZnJvbSBhbGwgZGF0YWJhc2VzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgTmFub1NRTEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIE5hbm9TUUxJbnN0YW5jZS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdXRpbGl0aWVzXzEuZmFzdENIQUlOKHRoaXMucGx1Z2lucywgZnVuY3Rpb24gKHBsdWdpbiwgaSwgbmV4dCkge1xyXG4gICAgICAgICAgICBpZiAocGx1Z2luLndpbGxEaXNjb25uZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW4ud2lsbERpc2Nvbm5lY3QobmV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGVzIGEgdHJhbnNhY3Rpb24gYWdhaW5zdCB0aGUgZGF0YWJhc2UsIGJhdGNoaW5nIGFsbCB0aGUgcXVlcmllcyB0b2dldGhlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geygoXHJcbiAgICAgKiAgICAgICAgIGRiOiAodGFibGU/OiBzdHJpbmcpID0+IHtcclxuICAgICAqICAgICAgICAgICAgIHF1ZXJ5OiAoYWN0aW9uOiBcInNlbGVjdFwifFwidXBzZXJ0XCJ8XCJkZWxldGVcInxcImRyb3BcInxcInNob3cgdGFibGVzXCJ8XCJkZXNjcmliZVwiLCBhcmdzPzogYW55KSA9PiBfTmFub1NRTFRyYW5zYWN0aW9uUXVlcnk7XHJcbiAgICAgKiAgICAgICAgICAgICB1cGRhdGVPUk06IChhY3Rpb246IFwiYWRkXCJ8XCJkZWxldGVcInxcImRyb3BcInxcInNldFwiLCBjb2x1bW4/OiBzdHJpbmcsIHJlbGF0aW9uSURzPzogYW55W10pID0+IF9OYW5vU1FMVHJhbnNhY3Rpb25PUk1RdWVyeXx1bmRlZmluZWQ7XHJcbiAgICAgKiAgICAgICAgIH0sIGNvbXBsZXRlOiAoKSA9PiB2b2lkKSA9PiB2b2lkKX0gaW5pdFRyYW5zYWN0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgTmFub1NRTEluc3RhbmNlLnByb3RvdHlwZS5kb1RyYW5zYWN0aW9uID0gZnVuY3Rpb24gKGluaXRUcmFuc2FjdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIHZhciBxdWVyaWVzID0gW107XHJcbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uSUQgPSB1dGlsaXRpZXNfMS5yYW5kb20xNkJpdHMoKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB1dGlsaXRpZXNfMS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaWYgKCF0LnBsdWdpbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJOb3RoaW5nIHRvIGRvLCBubyBwbHVnaW5zIVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4odC5wbHVnaW5zLCBmdW5jdGlvbiAocCwgaSwgbmV4dFApIHtcclxuICAgICAgICAgICAgICAgIGlmIChwLnRyYW5zYWN0aW9uQmVnaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBwLnRyYW5zYWN0aW9uQmVnaW4odHJhbnNhY3Rpb25JRCwgbmV4dFApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0LnNUYWJsZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaW5pdFRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YSA9IHRhYmxlIHx8IHQuc1RhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBmdW5jdGlvbiAoYWN0aW9uLCBhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRyYW5zYWN0aW9uXzEuX05hbm9TUUxUcmFuc2FjdGlvblF1ZXJ5KGFjdGlvbiwgYXJncywgdGEsIHF1ZXJpZXMsIHRyYW5zYWN0aW9uSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbGl0aWVzXzEuZmFzdENIQUlOKHF1ZXJpZXMsIGZ1bmN0aW9uIChxdWVyLCBpLCBuZXh0UXVlcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVzLnB1c2gocXVlci50YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucXVlcnkocXVlci5hY3Rpb24sIHF1ZXIuYWN0aW9uQXJncykubWFudWFsRXhlYyhfX2Fzc2lnbih7fSwgcXVlciwgeyB0YWJsZTogcXVlci50YWJsZSwgdHJhbnNhY3Rpb246IHRydWUsIHF1ZXJ5SUQ6IHRyYW5zYWN0aW9uSUQgfSkpLnRoZW4obmV4dFF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RDSEFJTihfdGhpcy5wbHVnaW5zLCBmdW5jdGlvbiAocCwgaSwgbmV4dFApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLnRyYW5zYWN0aW9uRW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC50cmFuc2FjdGlvbkVuZCh0cmFuc2FjdGlvbklELCBuZXh0UCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlcy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaWR4LCBzZWxmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWwpID09PSBpZHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZS5pbmRleE9mKFwiX1wiKSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnRyaWdnZXJFdmVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcmllc1swXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZXN1bHRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZXM6IFtcInRyYW5zYWN0aW9uXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uT3JWaWV3OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90ZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JRDogdHJhbnNhY3Rpb25JRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkUm93UEtTOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkUm93czogW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZ3VyZSB0aGUgZGF0YWJhc2UgZHJpdmVyLCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgdGhlIGNvbm5lY3QoKSBtZXRob2QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHthbnl9IGFyZ3NcclxuICAgICAqIEByZXR1cm5zIHtOYW5vU1FMSW5zdGFuY2V9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmNvbmZpZyA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fY29uZmlnID0gYXJncztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gYSBjdXN0b20gYWN0aW9uIHN1cHBvcnRlZCBieSB0aGUgZGF0YWJhc2UgZHJpdmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXk8YW55Pn0gYXJnc1xyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgaWYgKHQucGx1Z2lucy5sZW5ndGgpIHsgLy8gUXVlcnkgTW9kZVxyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0FyZ3NfMSA9IGFyZ3M7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzEgPSBbXTtcclxuICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RDSEFJTih0LnBsdWdpbnMsIGZ1bmN0aW9uIChwLCBpLCBuZXh0UCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwLmV4dGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwLmV4dGVuZChmdW5jdGlvbiAobkFyZ3MsIG5ld1Jlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QXJnc18xID0gbkFyZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRfMSA9IG5ld1Jlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG5ld0FyZ3NfMSwgcmVzdWx0XzEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMocmVzdWx0XzEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZWooXCJObyBwbHVnaW5zIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTG9hZCBKU09OIGRpcmVjdGx5IGludG8gdGhlIERCLlxyXG4gICAgICogSlNPTiBtdXN0IGJlIGFuIGFycmF5IG9mIG1hcHMsIGxpa2UgdGhpczpcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiBbXHJcbiAgICAgKiAge1wibmFtZVwiOlwiYmlsbHlcIixcImFnZVwiOjIwfSxcclxuICAgICAqICB7XCJuYW1lXCI6XCJqb2hubnlcIjpcImFnZVwiOjMwfVxyXG4gICAgICogXVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogUm93cyBtdXN0IGFsaWduIHdpdGggdGhlIGRhdGEgbW9kZWwuICBSb3cgZGF0YSB0aGF0IGlzbid0IGluIHRoZSBkYXRhIG1vZGVsIHdpbGwgYmUgaWdub3JlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gcm93c1xyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk8T2JqZWN0Pj59XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmxvYWRKUyA9IGZ1bmN0aW9uICh0YWJsZSwgcm93cywgdXNlVHJhbnNhY3Rpb24sIG9uUHJvZ3Jlc3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICBpZiAodXNlVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuZG9UcmFuc2FjdGlvbihmdW5jdGlvbiAoZGIsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICByb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRiKHRhYmxlKS5xdWVyeShcInVwc2VydFwiLCByb3cpLmV4ZWMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHV0aWxpdGllc18xLlByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4ocm93cywgZnVuY3Rpb24gKHJvdywgaSwgbmV4dFJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvblByb2dyZXNzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblByb2dyZXNzKE1hdGgucm91bmQoKChpICsgMSkgLyByb3dzLmxlbmd0aCkgKiAxMDAwMCkgLyAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnF1ZXJ5KFwidXBzZXJ0XCIsIHJvdykubWFudWFsRXhlYyh7IHRhYmxlOiB0YWJsZSB9KS50aGVuKG5leHRSb3cpO1xyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyhyb3dzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gci5zaGlmdCgpOyB9KSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTG9hZCBhIENTViBmaWxlIGludG8gdGhlIERCLiAgSGVhZGVycyBtdXN0IGV4aXN0IGFuZCB3aWxsIGJlIHVzZWQgdG8gaWRlbnRpZnkgd2hhdCBjb2x1bW5zIHRvIGF0dGFjaCB0aGUgZGF0YSB0by5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHBlcmZvcm1zIGEgYnVuY2ggb2YgdXBzZXJ0cywgc28gZXhwZWN0IGFwcHJvcHJpYXRlIGJlaGF2aW9yIGJhc2VkIG9uIHRoZSBwcmltYXJ5IGtleS5cclxuICAgICAqXHJcbiAgICAgKiBSb3dzIG11c3QgYWxpZ24gd2l0aCB0aGUgZGF0YSBtb2RlbC4gIFJvdyBkYXRhIHRoYXQgaXNuJ3QgaW4gdGhlIGRhdGEgbW9kZWwgd2lsbCBiZSBpZ25vcmVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjc3ZcclxuICAgICAqIEByZXR1cm5zIHsoUHJvbWlzZTxBcnJheTxPYmplY3Q+Pil9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBOYW5vU1FMSW5zdGFuY2UucHJvdG90eXBlLmxvYWRDU1YgPSBmdW5jdGlvbiAodGFibGUsIGNzdiwgdXNlVHJhbnNhY3Rpb24sIHJvd0ZpbHRlciwgb25Qcm9ncmVzcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmaWVsZHMgPSBbXTtcclxuICAgICAgICB2YXIgcm93RGF0YSA9IGNzdi5zcGxpdChcIlxcblwiKS5tYXAoZnVuY3Rpb24gKHYsIGspIHtcclxuICAgICAgICAgICAgaWYgKGsgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkcyA9IHYuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgICAgIHZhciByb3dfMSA9IHYubWF0Y2goLygsKXwoW1wifFxcW3xcXHtdLio/W1wifFxcXXxcXH1dfFteXCIsXFxzXSspKD89XFxzKix8XFxzKiQpL2cpIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpdHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3dfMVswXSA9PT0gXCIsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByb3dfMS51bnNoaWZ0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvQnJlYWsgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByb3dfMS5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvQnJlYWspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IFwiLFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJvd18xW2kgKyAxXSA9PT0gXCJ1bmRlZmluZWRcIiB8fCByb3dfMVtpICsgMV0gPT09IFwiLFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9CcmVhayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93XzEuc3BsaWNlKGkgKyAxLCAwLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9CcmVhaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHdoaWxlICghZml0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZV8xID09PSBcImJyZWFrXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcm93XzEgPSByb3dfMS5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGkgJSAyID09PSAwOyB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gZmllbGRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm93XzFbaV0uaW5kZXhPZihcIntcIikgPT09IDEgfHwgcm93XzFbaV0uaW5kZXhPZihcIltcIikgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd18xW2ldID0gSlNPTi5wYXJzZShyb3dfMVtpXS5zbGljZSgxLCByb3dfMVtpXS5sZW5ndGggLSAxKS5yZXBsYWNlKC8nL2dtLCAnXFxcIicpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJvd18xW2ldLmluZGV4T2YoJ1wiJykgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93XzFbaV0gPSByb3dfMVtpXS5zbGljZSgxLCByb3dfMVtpXS5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkW2ZpZWxkc1tpXV0gPSByb3dfMVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyb3dGaWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93RmlsdGVyKHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByOyB9KTtcclxuICAgICAgICBpZiAodXNlVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuZG9UcmFuc2FjdGlvbihmdW5jdGlvbiAoZGIsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICByb3dEYXRhLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRiKHRhYmxlKS5xdWVyeShcInVwc2VydFwiLCByb3cpLmV4ZWMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHV0aWxpdGllc18xLlByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4ocm93RGF0YSwgZnVuY3Rpb24gKHJvdywgaSwgbmV4dFJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvblByb2dyZXNzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblByb2dyZXNzKE1hdGgucm91bmQoKChpICsgMSkgLyByb3dEYXRhLmxlbmd0aCkgKiAxMDAwMCkgLyAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnF1ZXJ5KFwidXBzZXJ0XCIsIHJvdykubWFudWFsRXhlYyh7IHRhYmxlOiB0YWJsZSB9KS50aGVuKG5leHRSb3cpO1xyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyhyb3dzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gci5zaGlmdCgpOyB9KSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBOYW5vU1FMSW5zdGFuY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTmFub1NRTEluc3RhbmNlID0gTmFub1NRTEluc3RhbmNlO1xyXG5OYW5vU1FMSW5zdGFuY2UuZnVuY3Rpb25zID0ge1xyXG4gICAgQ09VTlQ6IHtcclxuICAgICAgICB0eXBlOiBcIkFcIixcclxuICAgICAgICBjYWxsOiBmdW5jdGlvbiAocm93cywgY29tcGxldGUsIGNvbHVtbikge1xyXG4gICAgICAgICAgICBpZiAoY29sdW1uICYmIGNvbHVtbiAhPT0gXCIqXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHJvd3MuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiB1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpOyB9KS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUocm93cy5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIE1BWDoge1xyXG4gICAgICAgIHR5cGU6IFwiQVwiLFxyXG4gICAgICAgIGNhbGw6IGZ1bmN0aW9uIChyb3dzLCBjb21wbGV0ZSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgIGlmIChyb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1heF8xID0gdXRpbGl0aWVzXzEub2JqUXVlcnkoY29sdW1uLCByb3dzWzBdKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSB1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpID4gbWF4XzEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4XzEgPSB1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUobWF4XzEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgTUlOOiB7XHJcbiAgICAgICAgdHlwZTogXCJBXCIsXHJcbiAgICAgICAgY2FsbDogZnVuY3Rpb24gKHJvd3MsIGNvbXBsZXRlLCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgaWYgKHJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWluXzEgPSB1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHJvd3NbMF0pIHx8IDA7XHJcbiAgICAgICAgICAgICAgICByb3dzLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IHV0aWxpdGllc18xLm9ialF1ZXJ5KGNvbHVtbiwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYgPCBtaW5fMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5fMSA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShtaW5fMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBBVkc6IHtcclxuICAgICAgICB0eXBlOiBcIkFcIixcclxuICAgICAgICBjYWxsOiBmdW5jdGlvbiAocm93cywgY29tcGxldGUsIGNvbHVtbikge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShyb3dzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7IHJldHVybiBwcmV2ICsgKHV0aWxpdGllc18xLm9ialF1ZXJ5KGNvbHVtbiwgY3VyKSB8fCAwKTsgfSwgMCkgLyByb3dzLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFNVTToge1xyXG4gICAgICAgIHR5cGU6IFwiQVwiLFxyXG4gICAgICAgIGNhbGw6IGZ1bmN0aW9uIChyb3dzLCBjb21wbGV0ZSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKHJvd3MucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHsgcmV0dXJuIHByZXYgKyAodXRpbGl0aWVzXzEub2JqUXVlcnkoY29sdW1uLCBjdXIpIHx8IDApOyB9LCAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIExPV0VSOiB7XHJcbiAgICAgICAgdHlwZTogXCJTXCIsXHJcbiAgICAgICAgY2FsbDogZnVuY3Rpb24gKHJvd3MsIGNvbXBsZXRlLCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgY29tcGxldGUocm93cy5tYXAoZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodXRpbGl0aWVzXzEub2JqUXVlcnkoY29sdW1uLCByKSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBVUFBFUjoge1xyXG4gICAgICAgIHR5cGU6IFwiU1wiLFxyXG4gICAgICAgIGNhbGw6IGZ1bmN0aW9uIChyb3dzLCBjb21wbGV0ZSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKHJvd3MubWFwKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHV0aWxpdGllc18xLm9ialF1ZXJ5KGNvbHVtbiwgcikpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgQ0FTVDoge1xyXG4gICAgICAgIHR5cGU6IFwiU1wiLFxyXG4gICAgICAgIGNhbGw6IGZ1bmN0aW9uIChyb3dzLCBjb21wbGV0ZSwgY29sdW1uLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKHJvd3MubWFwKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXRpbGl0aWVzXzEuY2FzdCh0eXBlLCB1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBBQlM6IHtcclxuICAgICAgICB0eXBlOiBcIlNcIixcclxuICAgICAgICBjYWxsOiBmdW5jdGlvbiAocm93cywgY29tcGxldGUsIGNvbHVtbikge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShyb3dzLm1hcChmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHV0aWxpdGllc18xLm9ialF1ZXJ5KGNvbHVtbiwgcikpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIENFSUw6IHtcclxuICAgICAgICB0eXBlOiBcIlNcIixcclxuICAgICAgICBjYWxsOiBmdW5jdGlvbiAocm93cywgY29tcGxldGUsIGNvbHVtbikge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShyb3dzLm1hcChmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBQT1c6IHtcclxuICAgICAgICB0eXBlOiBcIlNcIixcclxuICAgICAgICBjYWxsOiBmdW5jdGlvbiAocm93cywgY29tcGxldGUsIGNvbHVtbiwgcG93ZXIpIHtcclxuICAgICAgICAgICAgY29tcGxldGUocm93cy5tYXAoZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdyh1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpLCBwYXJzZUludChwb3dlcikpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFJPVU5EOiB7XHJcbiAgICAgICAgdHlwZTogXCJTXCIsXHJcbiAgICAgICAgY2FsbDogZnVuY3Rpb24gKHJvd3MsIGNvbXBsZXRlLCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgY29tcGxldGUocm93cy5tYXAoZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHV0aWxpdGllc18xLm9ialF1ZXJ5KGNvbHVtbiwgcikpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFNRUlQ6IHtcclxuICAgICAgICB0eXBlOiBcIlNcIixcclxuICAgICAgICBjYWxsOiBmdW5jdGlvbiAocm93cywgY29tcGxldGUsIGNvbHVtbikge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShyb3dzLm1hcChmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh1dGlsaXRpZXNfMS5vYmpRdWVyeShjb2x1bW4sIHIpKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxudmFyIF9OYW5vU1FMU3RhdGljID0gbmV3IE5hbm9TUUxJbnN0YW5jZSgpO1xyXG5leHBvcnRzLm5TUUwgPSBmdW5jdGlvbiAoc2V0VGFibGVQb2ludGVyKSB7XHJcbiAgICByZXR1cm4gX05hbm9TUUxTdGF0aWMudGFibGUoc2V0VGFibGVQb2ludGVyKTtcclxufTtcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIHdpbmRvd1tcIm5hbm8tc3FsXCJdID0ge1xyXG4gICAgICAgIG5TUUw6IGV4cG9ydHMublNRTCxcclxuICAgICAgICBOYW5vU1FMSW5zdGFuY2U6IE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgfTtcclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuLi91dGlsaXRpZXNcIik7XHJcbi8qKlxyXG4gKiBPcHRpbWl6ZWQgaW4gbWVtb3J5IGluZGV4IHVzZWQgZm9yIGVhY2ggdGFibGUuXHJcbiAqIEV2ZW4gaWYgeW91J3JlIG5vdCB1c2luZyBhdXRvIGluY3JpbWVudCwgdGhlIGluZGV4IHdpbGwgZ2F1cmFudGVlIHRvIG1haW50YWluIGEgc29ydGVkIG9yZGVyIG9mIGtleXMuXHJcbiAqIEV4Y2hhbmdlcyBhIHJlZHVjZWQgd3JpdGUgcGVyZm9ybWFuY2UgZm9yIGluY3JlYXNlZCByZWFkIHBlcmZvcm1hbmNlLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBEYXRhYmFzZUluZGV4XHJcbiAqL1xyXG52YXIgRGF0YWJhc2VJbmRleCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERhdGFiYXNlSW5kZXgoKSB7XHJcbiAgICAgICAgdGhpcy5fc29ydGVkID0gW107XHJcbiAgICAgICAgdGhpcy5faW5kZXhPZiA9IHt9O1xyXG4gICAgICAgIHRoaXMuYWkgPSAxO1xyXG4gICAgICAgIHRoaXMuZG9BSSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgRGF0YWJhc2VJbmRleC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9zb3J0ZWQgPSBpbmRleCB8fCBbXTtcclxuICAgICAgICB0aGlzLl9pbmRleE9mID0ge307XHJcbiAgICAgICAgdGhpcy5fc29ydGVkLmZvckVhY2goZnVuY3Rpb24gKHMsIGkpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2luZGV4T2ZbU3RyaW5nKHMpXSA9IGk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9BSSAmJiB0aGlzLl9zb3J0ZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBsID0gdGhpcy5fc29ydGVkLmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5haSA9IHRoaXMuX3NvcnRlZFtsIC0gMV0gKyAxO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEYXRhYmFzZUluZGV4LnByb3RvdHlwZS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgaWR4ID0gdGhpcy5pbmRleE9mKGtleSk7XHJcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkeDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHV0aWxpdGllc18xLmJpbmFyeVNlYXJjaCh0aGlzLl9zb3J0ZWQsIGtleSk7XHJcbiAgICB9O1xyXG4gICAgRGF0YWJhc2VJbmRleC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmICghdGhpcy5kb0FJKSB7XHJcbiAgICAgICAgICAgIHZhciBpZHggPSB1dGlsaXRpZXNfMS5iaW5hcnlTZWFyY2godGhpcy5fc29ydGVkLCBrZXkpO1xyXG4gICAgICAgICAgICB0aGlzLl9zb3J0ZWQuc3BsaWNlKGlkeCwgMCwga2V5KTtcclxuICAgICAgICAgICAgdGhpcy5faW5kZXhPZltTdHJpbmcoa2V5KV0gPSBpZHg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBpZHggKyAxOyBpIDwgdGhpcy5fc29ydGVkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleE9mW1N0cmluZyh0aGlzLl9zb3J0ZWRbaV0pXSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocGFyc2VJbnQoa2V5KSA+PSB0aGlzLmFpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFpKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5faW5kZXhPZltTdHJpbmcoa2V5KV0gPSB0aGlzLl9zb3J0ZWQubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl9zb3J0ZWQucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEYXRhYmFzZUluZGV4LnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zb3J0ZWQ7XHJcbiAgICB9O1xyXG4gICAgRGF0YWJhc2VJbmRleC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXhPZltTdHJpbmcoa2V5KV0gIT09IHVuZGVmaW5lZCA/IHRoaXMuX2luZGV4T2ZbU3RyaW5nKGtleSldIDogLTE7XHJcbiAgICB9O1xyXG4gICAgRGF0YWJhc2VJbmRleC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLl9pbmRleE9mW1N0cmluZyhrZXkpXTtcclxuICAgICAgICBpZiAoaWR4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2luZGV4T2ZbU3RyaW5nKGtleSldO1xyXG4gICAgICAgICAgICB0aGlzLl9zb3J0ZWQuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBpZHg7IGkgPCB0aGlzLl9zb3J0ZWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4T2ZbU3RyaW5nKHRoaXMuX3NvcnRlZFtpXSldLS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERhdGFiYXNlSW5kZXg7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRGF0YWJhc2VJbmRleCA9IERhdGFiYXNlSW5kZXg7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKHR5cGVTcGVjcy5oYXNPd25Qcm9wZXJ0eSh0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAgIGludmFyaWFudCh0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAndGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCVzYC4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSk7XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIHdhcm5pbmcoIWVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3IsICclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvcik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgICAgdmFyIHN0YWNrID0gZ2V0U3RhY2sgPyBnZXRTdGFjaygpIDogJyc7XG5cbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgc3RhY2sgIT0gbnVsbCA/IHN0YWNrIDogJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2tQcm9wVHlwZXM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiaW1wb3J0IHtuU1FMfSBmcm9tICduYW5vLXNxbC9saWIvaW5kZXgnXG5cbmNvbnN0IGJhbGFuY2VUYWJsZSA9IG5TUUwoJ2JhbGFuY2UnKS5tb2RlbChbXG4gIHtrZXk6ICdpZCcsIHR5cGU6ICdpbnQnLCBwcm9wczogWydwaycsICdhaSddfSxcbiAge2tleTogJ3VzZXJJZCcsIHR5cGU6ICdzdHJpbmcnfSxcbiAge2tleTogJ2JhbGFuY2UnLCB0eXBlOiAnaW50J31cbl0pLmNvbmZpZyh7bW9kZTogREJfTU9ERSA/IERCX01PREUgOiAnUEVSTSd9KSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbmJhbGFuY2VUYWJsZS5jb25uZWN0KClcblxuZXhwb3J0IGRlZmF1bHQgYmFsYW5jZVRhYmxlXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpIHtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiaW1wb3J0IFJlYWN0LCB7UHVyZUNvbXBvbmVudH0gZnJvbSAncmVhY3QnXG5cbi8vIGltcG9ydCB7blNRTH0gZnJvbSAnbmFuby1zcWwnXG5cbmNsYXNzIEFjY291bnRTdGF0dXMgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHRhYmxlcyAoKSB7XG4gICAgcmV0dXJuIFsnYmFsYW5jZSddIC8vIGxpc3RlbiBmb3IgY2hhbmdlcyBvbiB0aGlzIHRhYmxlXG4gIH1cblxuICBzdGF0aWMgb25DaGFuZ2UgKGV2ZW50LCBjb21wbGV0ZSkge1xuICAgIGNvbnNvbGUubG9nKCdhY2NvdW50IHN0YXR1cyBjaGFuZ2VkIGV2ZW50JywgZXZlbnQpXG5cbiAgICAvLyBpZiAoZXZlbnQuYWZmZWN0ZWRSb3dzICYmIGV2ZW50LmFmZmVjdGVkUm93cy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKCFldmVudC5ub3Rlcy5pbmNsdWRlcygnbW91bnQnKSkge1xuICAgICAgY29tcGxldGUoZXZlbnQuYWZmZWN0ZWRSb3dzWzBdLmJhbGFuY2UpXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIEFjY291bnQgYmFsYW5jZSB7dGhpcy5wcm9wcy5uU1FMZGF0YX1cbiAgICA8L2Rpdj5cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBY2NvdW50U3RhdHVzXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFJlYWN0ID0gcmVxdWlyZShcIlJlYWN0XCIpO1xyXG52YXIgbmFub19zcWxfMSA9IHJlcXVpcmUoXCJuYW5vLXNxbFwiKTtcclxuZnVuY3Rpb24gYmluZE5TUUwoQ29tcCwgcHJvcHMpIHtcclxuICAgIHJldHVybiAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhjbGFzc18xLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEocCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHsgZGF0YTogdW5kZWZpbmVkLCBpc0xvYWRpbmc6IHRydWUgfTtcclxuICAgICAgICAgICAgX3RoaXMudXBkYXRlU3RhdGUgPSBfdGhpcy51cGRhdGVTdGF0ZS5iaW5kKF90aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy50YWJsZXMgJiYgcHJvcHMudGFibGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZXMgPSBwcm9wcy50YWJsZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoQ29tcC50YWJsZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGVzID0gQ29tcC50YWJsZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTmVlZCB0YWJsZXMgZm9yIG5hbm9TUUwgSE9DIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvcHMgJiYgcHJvcHMub25DaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChDb21wLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlID0gQ29tcC5vbkNoYW5nZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTmVlZCB0YWJsZXMgZm9yIG5hbm9TUUwgSE9DIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvcHMgJiYgcHJvcHMuc3RvcmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBwcm9wcy5zdG9yZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBuYW5vX3NxbF8xLm5TUUwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcHJldlRhYmxlID0gdGhpcy5zdG9yZS5zVGFibGU7XHJcbiAgICAgICAgICAgIHZhciBrID0gdGhpcy50YWJsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoay0tKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLnRhYmxlKHRoaXMudGFibGVzW2tdKS5vbihcImNoYW5nZVwiLCB0aGlzLnVwZGF0ZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlc1trXSxcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZXNba10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uQXJnczogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IFwiY29tcGxldGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGVzOiBbXCJtb3VudFwiXSxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVzOiBbXCJjaGFuZ2VcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uT3JWaWV3OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkUm93czogW11cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmUudGFibGUocHJldlRhYmxlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcHJldlRhYmxlID0gdGhpcy5zdG9yZS5zVGFibGU7XHJcbiAgICAgICAgICAgIHZhciBrID0gdGhpcy50YWJsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoay0tKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLnRhYmxlKHRoaXMudGFibGVzW2tdKS5vZmYoXCJjaGFuZ2VcIiwgdGhpcy51cGRhdGVTdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zdG9yZS50YWJsZShwcmV2VGFibGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUudXBkYXRlU3RhdGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nOiB0cnVlIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uQ2hhbmdlKGUsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc0xvYWRpbmc6IGZhbHNlLCBkYXRhOiBkYXRhIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wLCBfX2Fzc2lnbih7IG5TUUxsb2FkaW5nOiB0aGlzLnN0YXRlLmlzTG9hZGluZywgblNRTGRhdGE6IHRoaXMuc3RhdGUuZGF0YSB9LCB0aGlzLnByb3BzKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2xhc3NfMTtcclxuICAgIH0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbn1cclxuZXhwb3J0cy5iaW5kTlNRTCA9IGJpbmROU1FMO1xyXG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuL3V0aWxpdGllc1wiKTtcclxuLy8gdWdsaWZ5SlMgd29ya2Fyb3VuZFxyXG52YXIgc3RycyA9IFtcIl9oaXN0XCIsIFwiX2hpc3RfcHRyXCIsIFwiX2lkXCJdO1xyXG4vKipcclxuICogTmV3IEhpc3RvcnkgUGx1Z2luXHJcbiAqIFByb3ZpZGVzIG11bHRpcGxlIGhpc3RvcnkgbW9kZXMsIGluY2x1ZGluZyBhIHBlciByb3cgbW9kZSAoZm9yIHJvdyByZXZpc2lvbnMpLCBhIGRhdGFiYXNlIHdpZGUgbW9kZSBhbmQgYSB0YWJsZSB3aWRlIG1vZGUuXHJcbiAqIFlvdSBjYW4gZWl0aGVyIHNldCBhIHNpbmdsZSBhcmd1bWVudCB0byB0ZWxsIHRoZSBzeXN0ZW0gdG8gdXNlIHJvdywgdGFibGUsIG9yIGRhdGFiYXNlIG1vZGUgT1IgeW91IGNhbiBwYXNzIGluIGFuIG9iamVjdC5cclxuICogVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBhIGtleSB3aXRoIGFsbCB0YWJsZXMgd2l0aCBoaXN0b3J5LCBlYWNoIHZhbHVlIHNob3VsZCBiZSBcInJvd1wiIG9yIFwidGFibGVcIiwgZGljdGF0aW5nIHRoZSB0eXBlIG9mIGhpc3RvcnlcclxuICogZm9yIHRoYXQgdGFibGUuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIF9OYW5vU1FMSGlzdG9yeVBsdWdpblxyXG4gKiBAaW1wbGVtZW50cyB7TmFub1NRTFBsdWdpbn1cclxuICovXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG52YXIgX05hbm9TUUxIaXN0b3J5UGx1Z2luID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX05hbm9TUUxIaXN0b3J5UGx1Z2luKGhpc3RvcnlNb2RlQXJncykge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeU1vZGVBcmdzID0gaGlzdG9yeU1vZGVBcmdzO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlUGtLZXlzID0ge307XHJcbiAgICAgICAgdGhpcy5fdGFibGVQa1R5cGVzID0ge307XHJcbiAgICAgICAgdGhpcy5fdGFibGVLZXlzID0ge307XHJcbiAgICB9XHJcbiAgICBfTmFub1NRTEhpc3RvcnlQbHVnaW4ucHJvdG90eXBlLndpbGxDb25uZWN0ID0gZnVuY3Rpb24gKGNvbm5lY3RBcmdzLCBuZXh0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnBhcmVudCA9IGNvbm5lY3RBcmdzLnBhcmVudDtcclxuICAgICAgICB2YXIgaGlzdG9yeVRhYmxlcyA9IHt9O1xyXG4gICAgICAgIC8vIGhhbmRsZSB0YWJsZXMgdG8gc3RvcmUgcm93IGRhdGEgaGlzdG9yeVxyXG4gICAgICAgIE9iamVjdC5rZXlzKGNvbm5lY3RBcmdzLm1vZGVscykuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICAgICAgLy8gb25seSBhZGQgaGlzdG9yeSBmb3IgcHVibGljIHRhYmxlc1xyXG4gICAgICAgICAgICBpZiAodGFibGUuaW5kZXhPZihcIl9cIikgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBoaXN0TW9kZWwgPSB1dGlsaXRpZXNfMS5fYXNzaWduKGNvbm5lY3RBcmdzLm1vZGVsc1t0YWJsZV0pLm1hcChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwucHJvcHMgJiYgdXRpbGl0aWVzXzEuaW50ZXJzZWN0KFtcInBrXCIsIFwicGsoKVwiXSwgbW9kZWwucHJvcHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90YWJsZVBrS2V5c1t0YWJsZV0gPSBtb2RlbC5rZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90YWJsZVBrVHlwZXNbdGFibGVdID0gbW9kZWwudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RhYmxlS2V5c1t0YWJsZV0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1vZGVsLnByb3BzOyAvLyByZW1vdmUgc2Vjb25kYXJ5IGluZGV4ZXMgYW5kIGV2ZXJ5dGhpbmcgZWxzZSBmYW5jeVxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtb2RlbC5kZWZhdWx0OyAvLyByZW1vdmUgZGVmYXVsdCBjb2x1bW4gdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIGFkZCBuZXcgcHJpbWFyeSBrZXkgdXNlZCBieSB0aGUgaGlzdG9yeSBzeXN0ZW1cclxuICAgICAgICAgICAgICAgIGhpc3RNb2RlbC51bnNoaWZ0KHsga2V5OiBcIl9pZFwiLCB0eXBlOiBcInRpbWVJZG1zXCIsIHByb3BzOiBbXCJwaygpXCJdIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gSG9sZHMgb2xkIG9yIG5ldyByb3cgZGF0YVxyXG4gICAgICAgICAgICAgICAgaGlzdG9yeVRhYmxlc1tcIl9cIiArIHRhYmxlICsgXCJfX2hpc3Rfcm93c1wiXSA9IGhpc3RNb2RlbDtcclxuICAgICAgICAgICAgICAgIC8vIGhvbGRzIHdoZXJlIGluIHRoZSByb3cgaGlzdG9yeSB3ZSBhcmVcclxuICAgICAgICAgICAgICAgIGhpc3RvcnlUYWJsZXNbXCJfXCIgKyB0YWJsZSArIFwiX19oaXN0X2lkeFwiXSA9IFtcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogXCJpZFwiLCB0eXBlOiBfdGhpcy5fdGFibGVQa1R5cGVzW3RhYmxlXSwgcHJvcHM6IFtcInBrKClcIl0gfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogXCJoaXN0Um93c1wiLCB0eXBlOiBcInRpbWVJZG1zW11cIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiBcImhpc3RQdHJcIiwgdHlwZTogXCJudW1iZXJcIiB9IC8vIHdoZXJlIGluIHRoZSBhYm92ZSBhcnJheSB3ZSBhcmUuXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGlzTm90U3RyaW5nID0gdHlwZW9mIHRoaXMuaGlzdG9yeU1vZGVBcmdzICE9PSBcInN0cmluZ1wiO1xyXG4gICAgICAgIHZhciBoaXN0b3J5VGFibGUgPSBbXHJcbiAgICAgICAgICAgIHsga2V5OiBcImlkXCIsIHR5cGU6IFwidGltZUlkbXNcIiwgcHJvcHM6IFtcInBrKClcIl0gfSxcclxuICAgICAgICAgICAgeyBrZXk6IFwidGFibGVcIiwgdHlwZTogXCJzdHJpbmdcIiB9LFxyXG4gICAgICAgICAgICB7IGtleTogXCJrZXlzXCIsIHR5cGU6IFwiYW55W11cIiB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICB2YXIgaGlzdG9yeVRhYmxlUG9pbnRlciA9IFtcclxuICAgICAgICAgICAgeyBrZXk6IFwiaWRcIiwgdHlwZTogXCJ0aW1lSWRtc1wiLCBwcm9wczogW1wicGsoKVwiXSB9LFxyXG4gICAgICAgICAgICB7IGtleTogXCJwdHJcIiwgdHlwZTogXCJpbnRcIiB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICAvLyBkYXRhYmFzZS9saW5lYXIgbW9kZS4gYWxsIHVuZG8vcmVkbyBpcyB0cmFja2VkIGFjcm9zcyB0aGUgZW50aXJlIGRhdGFiYXNlLiAgRGVmYXVsdCBiZWhhdmlvclxyXG4gICAgICAgIGlmICh0aGlzLmhpc3RvcnlNb2RlQXJncyA9PT0gXCJkYXRhYmFzZVwiIHx8ICF0aGlzLmhpc3RvcnlNb2RlQXJncykge1xyXG4gICAgICAgICAgICBoaXN0b3J5VGFibGVzW3N0cnNbMF1dID0gaGlzdG9yeVRhYmxlO1xyXG4gICAgICAgICAgICBoaXN0b3J5VGFibGVzW3N0cnNbMV1dID0gaGlzdG9yeVRhYmxlUG9pbnRlcjtcclxuICAgICAgICAgICAgLy8gdGFibGUvcm93IG1vZGUsIHVuZG8vcmVkbyBpcyB0cmFja2VkIGVpdGhlciBwZXIgcm93IE9SIHBlciB0YWJsZVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmhpc3RvcnlNb2RlQXJncyAhPT0gXCJkYXRhYmFzZVwiIHx8IGlzTm90U3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeU1vZGVzID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNOb3RTdHJpbmcpIHsgLy8gYXBwbHkgdGhlIGdsb2JhbCBhcmcgKFwicm93XCIgb3IgXCJ0YWJsZVwiKSB0byBldmVyeSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fdGFibGVQa0tleXMpLmZvckVhY2goZnVuY3Rpb24gKHRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGlzdG9yeU1vZGVzW3RhYmxlXSA9IF90aGlzLmhpc3RvcnlNb2RlQXJncztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBvYmplY3Qgb2YgdGFibGVzIHdhcyBwYXNzZWQgaW4sIHRoZSB1c2VyIHNwZWNpZmllZCBhIGJlaGF2aW9yIGZvciBlYWNoIHRhYmxlLiAgSnVzdCBjb3B5IHRoZWlyIGNvbmZpZyBvYmplY3QuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnlNb2RlcyA9IHV0aWxpdGllc18xLl9hc3NpZ24odGhpcy5oaXN0b3J5TW9kZUFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0cmFja2luZyByb3dzIG5lZWRlZCBmb3IgdGFibGUgd2lkZSBoaXN0b3J5XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuaGlzdG9yeU1vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmhpc3RvcnlNb2Rlc1t0YWJsZV0gPT09IFwidGFibGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnlUYWJsZXNbXCJfXCIgKyB0YWJsZSArIFwiX19oaXN0XCJdID0gaGlzdG9yeVRhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnlUYWJsZXNbXCJfXCIgKyB0YWJsZSArIFwiX19oaXN0X3B0clwiXSA9IGhpc3RvcnlUYWJsZVBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25uZWN0QXJncy5tb2RlbHMgPSBfX2Fzc2lnbih7fSwgY29ubmVjdEFyZ3MubW9kZWxzLCBoaXN0b3J5VGFibGVzKTtcclxuICAgICAgICBuZXh0KGNvbm5lY3RBcmdzKTtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTEhpc3RvcnlQbHVnaW4ucHJvdG90eXBlLl9oaXN0VGFibGUgPSBmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICBpZiAoIXRhYmxlKVxyXG4gICAgICAgICAgICByZXR1cm4gXCJfX251bGxcIjtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaXN0b3J5TW9kZXMgPyB0aGlzLmhpc3RvcnlNb2Rlc1t0YWJsZV0gPT09IFwidGFibGVcIiA/IFwiX1wiICsgdGFibGUgKyBcIl9faGlzdFwiIDogbnVsbCA6IFwiX2hpc3RcIjtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTEhpc3RvcnlQbHVnaW4ucHJvdG90eXBlLl9nZW5lcmF0ZUhpc3RvcnlQb2ludGVycyA9IGZ1bmN0aW9uICh0YWJsZSwgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBoaXN0VGFibGUgPSB0aGlzLl9oaXN0VGFibGUodGFibGUpO1xyXG4gICAgICAgIGlmICghaGlzdFRhYmxlKSB7IC8vIHJvdyBtb2RlXHJcbiAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5xdWVyeShcInNlbGVjdFwiKS5tYW51YWxFeGVjKHtcclxuICAgICAgICAgICAgICAgIHRhYmxlOiBoaXN0VGFibGUgKyBcIl9wdHJcIlxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocm93cy5sZW5ndGgpIHsgLy8gYWxyZWFkeSBoYXMgYSBwb2ludGVyXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBuZWVkcyBvbmVcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnQucXVlcnkoXCJ1cHNlcnRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdXRpbGl0aWVzXzEudGltZWlkKHRydWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogdGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogMCAvLyBlbXB0eSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLm1hbnVhbEV4ZWMoeyB0YWJsZTogaGlzdFRhYmxlICsgXCJfcHRyXCIgfSkudGhlbihjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfTmFub1NRTEhpc3RvcnlQbHVnaW4ucHJvdG90eXBlLmRpZENvbm5lY3QgPSBmdW5jdGlvbiAoY29ubmVjdEFyZ3MsIG5leHQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmaW5pc2hTZXR1cCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBrbm93IHdoYXQgZXhpc3RpbmcgcHJpbWFyeSBrZXlzIGFyZSBpbiBlYWNoIHRhYmxlIGFuZCBtYWtlIHN1cmUgcG9pbnRlcnMgYXJlIHNldHVwIHdoZXJlIG5lZWRlZC5cclxuICAgICAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTChPYmplY3Qua2V5cyhfdGhpcy5fdGFibGVLZXlzKSwgZnVuY3Rpb24gKHRhYmxlLCBrLCB0YWJsZURvbmUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudC5leHRlbmQoXCJpZHhcIiwgXCJfXCIgKyB0YWJsZSArIFwiX19oaXN0X2lkeFwiKS50aGVuKGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RhYmxlS2V5c1t0YWJsZV1baXRlbV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5oaXN0b3J5TW9kZXMpIHsgLy8gdGFibGUgLyByb3cgbW9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZ2VuZXJhdGVIaXN0b3J5UG9pbnRlcnModGFibGUsIHRhYmxlRG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBnbG9iYWwgbW9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkudGhlbihuZXh0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghdGhpcy5oaXN0b3J5TW9kZXMpIHsgLy8gZ2xvYmFsIG1vZGVcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQucXVlcnkoXCJzZWxlY3RcIikubWFudWFsRXhlYyh7XHJcbiAgICAgICAgICAgICAgICB0YWJsZTogXCJfaGlzdF9wdHJcIlxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hTZXR1cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucGFyZW50LnF1ZXJ5KFwidXBzZXJ0XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHV0aWxpdGllc18xLnRpbWVpZCh0cnVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLm1hbnVhbEV4ZWMoeyB0YWJsZTogXCJfaGlzdF9wdHJcIiB9KS50aGVuKGZpbmlzaFNldHVwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmaW5pc2hTZXR1cCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIElmIGFueSBvZiB0aGUgZ2l2ZW4gcm93IHBvaW50ZXJzIGFyZSBhYm92ZSB6ZXJvLCByZW1vdmUgdGhlIHJvd3MgaW4gXCJmb3J3YXJkXCIgaGlzdG9yeS5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSByb3dQS3NcclxuICAgICAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gY29tcGxldGVcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTEhpc3RvcnlQbHVnaW5cclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxIaXN0b3J5UGx1Z2luLnByb3RvdHlwZS5fcHVyZ2VSb3dIaXN0b3J5ID0gZnVuY3Rpb24gKHRhYmxlLCByb3dQS3MsIGNvbXBsZXRlLCBjbGVhckFsbCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJvd0hpc3RUYWJsZSA9IFwiX1wiICsgdGFibGUgKyBcIl9faGlzdF9yb3dzXCI7XHJcbiAgICAgICAgdmFyIHJvd0lEWFRhYmxlID0gXCJfXCIgKyB0YWJsZSArIFwiX19oaXN0X2lkeFwiO1xyXG4gICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwocm93UEtzLCBmdW5jdGlvbiAocGssIGwsIHJvd0RvbmUpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50LnF1ZXJ5KFwic2VsZWN0XCIpLndoZXJlKFtcImlkXCIsIFwiPVwiLCBwa10pLm1hbnVhbEV4ZWMoeyB0YWJsZTogcm93SURYVGFibGUgfSkudGhlbihmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd0RvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgaGlzdFJvd0lEWCA9IE9iamVjdC5pc0Zyb3plbihyb3dzWzBdKSA/IHV0aWxpdGllc18xLl9hc3NpZ24ocm93c1swXSkgOiByb3dzWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbElEcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFyQWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsSURzID0gZGVsSURzLmNvbmNhdChoaXN0Um93SURYLmhpc3RSb3dzLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gciAhPT0gLTE7IH0pKTtcclxuICAgICAgICAgICAgICAgICAgICBoaXN0Um93SURYLmhpc3RQdHIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGhpc3RSb3dJRFguaGlzdFJvd3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChoaXN0Um93SURYLmhpc3RQdHItLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxJRHMucHVzaChoaXN0Um93SURYLmhpc3RSb3dzLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBoaXN0Um93SURYLmhpc3RQdHIgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFkZWxJRHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93RG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudC5xdWVyeShcInVwc2VydFwiLCBoaXN0Um93SURYKS5jb21tZW50KFwiSGlzdG9yeSBQdXJnZVwiKS53aGVyZShbXCJpZFwiLCBcIj1cIiwgcGtdKS5tYW51YWxFeGVjKHsgdGFibGU6IHJvd0lEWFRhYmxlIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudC5xdWVyeShcImRlbGV0ZVwiKS5jb21tZW50KFwiSGlzdG9yeSBQdXJnZVwiKS53aGVyZShbXCJfaWRcIiwgXCJJTlwiLCBkZWxJRHNdKS5tYW51YWxFeGVjKHsgdGFibGU6IHJvd0hpc3RUYWJsZSB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFyQWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnQucXVlcnkoXCJzZWxlY3RcIikud2hlcmUoW190aGlzLl90YWJsZVBrS2V5c1t0YWJsZV0sIFwiPVwiLCBwa10pLm1hbnVhbEV4ZWMoeyB0YWJsZTogdGFibGUgfSkudGhlbihmdW5jdGlvbiAoZXhpc3RpbmdSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdW5zaGlmdFNpbmdsZVJvdyh0YWJsZSwgW1wiY2hhbmdlXCJdLCBwaywgZXhpc3RpbmdSb3dbMF0sIGZhbHNlLCByb3dEb25lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93RG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkudGhlbihjb21wbGV0ZSk7XHJcbiAgICB9O1xyXG4gICAgX05hbm9TUUxIaXN0b3J5UGx1Z2luLnByb3RvdHlwZS5fcHVyZ2VUYWJsZUhpc3RvcnkgPSBmdW5jdGlvbiAodGFibGUsIGNvbXBsZXRlLCBjbGVhckFsbCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQucXVlcnkoXCJzZWxlY3RcIikubWFudWFsRXhlYyh7IHRhYmxlOiB0YWJsZSArIFwiX3B0clwiIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgdmFyIHJvdyA9IE9iamVjdC5pc0Zyb3plbihyb3dzWzBdKSA/IHV0aWxpdGllc18xLl9hc3NpZ24ocm93c1swXSkgOiByb3dzWzBdO1xyXG4gICAgICAgICAgICBpZiAoY2xlYXJBbGwgfHwgcm93LnB0ciA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBoaXN0USA9IF90aGlzLnBhcmVudC5xdWVyeShcInNlbGVjdFwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghY2xlYXJBbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBoaXN0US5yYW5nZShyb3cucHRyICogLTEsIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaGlzdFEubWFudWFsRXhlYyh7IHRhYmxlOiB0YWJsZSB9KS50aGVuKGZ1bmN0aW9uIChoaXN0VGFibGVSb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoaXN0VGFibGVSb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwdXJnZVJvd3MgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBoaXN0VGFibGVSb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXB1cmdlUm93c1tyb3cudGFibGVdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVyZ2VSb3dzW3Jvdy50YWJsZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHVyZ2VSb3dzW3Jvdy50YWJsZV0gPSBwdXJnZVJvd3Nbcm93LnRhYmxlXS5jb25jYXQocm93LmtleXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoT2JqZWN0LmtleXMocHVyZ2VSb3dzKSwgZnVuY3Rpb24gKHRhLCBqLCB0YWJsZURvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3B1cmdlUm93SGlzdG9yeSh0YSwgcHVyZ2VSb3dzW3RhXSwgdGFibGVEb25lLCBjbGVhckFsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudC5xdWVyeShcImRlbGV0ZVwiKS5jb21tZW50KFwiSGlzdG9yeSBQdXJnZVwiKS53aGVyZShbXCJpZFwiLCBcIklOXCIsIGhpc3RUYWJsZVJvd3MubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmlkOyB9KV0pLm1hbnVhbEV4ZWMoeyB0YWJsZTogdGFibGUgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cucHRyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudC5xdWVyeShcInVwc2VydFwiLCByb3cpLmNvbW1lbnQoXCJIaXN0b3J5IFB1cmdlXCIpLndoZXJlKFtcImlkXCIsIFwiPVwiLCByb3cuaWRdKS5tYW51YWxFeGVjKHsgdGFibGU6IHRhYmxlICsgXCJfcHRyXCIgfSkudGhlbihjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBhbnkgcm93IHBvaW50ZXJzIGFyZSBhYm92ZSB6ZXJvLCB3ZSBtdXN0IGZpcnN0IHJlbW92ZSB0aGUgcmV2aXNpb25zIGFoZWFkIG9mIHRoZSBleGlzdGluZyBvbmUgYmVmb3JlIGFkZGluZyBhIG5ldyByZXZpc2lvbi5cclxuICAgICAqIFRoaXMgcHJldmVudHMgdGhlIGhpc3RvcnkgZnJvbSBiZWNvbW1pbmcgYnJva2VuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHthbnlbXX0gcm93UEtzXHJcbiAgICAgKiBAcGFyYW0geygpID0+IHZvaWR9IGNvbXBsZXRlXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxIaXN0b3J5UGx1Z2luXHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMSGlzdG9yeVBsdWdpbi5wcm90b3R5cGUuX3B1cmdlUGFyZW50SGlzdG9yeSA9IGZ1bmN0aW9uICh0YWJsZSwgcm93UEtzLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5oaXN0b3J5TW9kZXMpIHsgLy8gZ2xvYmFsIG1vZGVcclxuICAgICAgICAgICAgdGhpcy5fcHVyZ2VUYWJsZUhpc3RvcnkoXCJfaGlzdFwiLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGhpc3RUYWJsZSA9IHRoaXMuX2hpc3RUYWJsZSh0YWJsZSk7XHJcbiAgICAgICAgaWYgKCFoaXN0VGFibGUpIHsgLy8gcm93IG1vZGVcclxuICAgICAgICAgICAgdGhpcy5fcHVyZ2VSb3dIaXN0b3J5KHRhYmxlLCByb3dQS3MsIGNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7IC8vIHRhYmxlIG1vZGVcclxuICAgICAgICAgICAgdGhpcy5fcHVyZ2VUYWJsZUhpc3RvcnkoaGlzdFRhYmxlLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMSGlzdG9yeVBsdWdpbi5wcm90b3R5cGUuX3B1cmdlQWxsSGlzdG9yeSA9IGZ1bmN0aW9uICh0YWJsZSwgcm93UEssIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhpc3RvcnlNb2RlcykgeyAvLyBnbG9iYWwgbW9kZVxyXG4gICAgICAgICAgICB0aGlzLl9wdXJnZVRhYmxlSGlzdG9yeShcIl9oaXN0XCIsIGNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaGlzdFRhYmxlID0gdGhpcy5faGlzdFRhYmxlKHRhYmxlKTtcclxuICAgICAgICBpZiAoIWhpc3RUYWJsZSkgeyAvLyByb3cgbW9kZVxyXG4gICAgICAgICAgICB0aGlzLl9wdXJnZVJvd0hpc3RvcnkodGFibGUsIFtyb3dQS10sIGNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7IC8vIHRhYmxlIG1vZGVcclxuICAgICAgICAgICAgdGhpcy5fcHVyZ2VUYWJsZUhpc3RvcnkoaGlzdFRhYmxlLCBjb21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMSGlzdG9yeVBsdWdpbi5wcm90b3R5cGUuZGlkRXhlYyA9IGZ1bmN0aW9uIChldmVudCwgbmV4dCkge1xyXG4gICAgICAgIC8vIG9ubHkgZG8gaGlzdG9yeSBvbiBwdWJsaWMgdGFibGVzIChvbmVzIHRoYXQgZG9udCBiZWdpbiB3aXRoIF8pXHJcbiAgICAgICAgLy8gYWxzbyBvbmx5IGRvIGhpc3RvcnkgaWYgdGhlcmUgd2FzIGEgY2hhbmdlIGluIHRoZSBkYXRhYmFzZVxyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGV2ZW50LnRhYmxlICYmIGV2ZW50LnRhYmxlLmluZGV4T2YoXCJfXCIpICE9PSAwICYmIGV2ZW50LnR5cGVzLmluZGV4T2YoXCJjaGFuZ2VcIikgPiAtMSAmJiBldmVudC5xdWVyeS5jb21tZW50cy5pbmRleE9mKFwiSGlzdG9yeSBXcml0ZVwiKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5fcHVyZ2VQYXJlbnRIaXN0b3J5KGV2ZW50LnRhYmxlLCBldmVudC5hZmZlY3RlZFJvd1BLUywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTChldmVudC5hZmZlY3RlZFJvd3MsIGZ1bmN0aW9uIChyb3csIGssIHJvd0RvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGsgPSByb3dbX3RoaXMuX3RhYmxlUGtLZXlzW2V2ZW50LnRhYmxlXV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl90YWJsZUtleXNbZXZlbnQudGFibGVdW3BrXSkgeyAvLyBleGlzdGluZyByb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Vuc2hpZnRTaW5nbGVSb3coZXZlbnQudGFibGUsIGV2ZW50LnR5cGVzLCBwaywgcm93LCBmYWxzZSwgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dEb25lKHBrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBuZXcgcm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90YWJsZUtleXNbZXZlbnQudGFibGVdW3BrXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl91bnNoaWZ0U2luZ2xlUm93KGV2ZW50LnRhYmxlLCBldmVudC50eXBlcywgcGssIHJvdywgdHJ1ZSwgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnQucXVlcnkoXCJ1cHNlcnRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0Um93czogW2lkLCAtMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdFB0cjogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkubWFudWFsRXhlYyh7IHRhYmxlOiBcIl9cIiArIGV2ZW50LnRhYmxlICsgXCJfX2hpc3RfaWR4XCIgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93RG9uZShwayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocm93SURzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Vuc2hpZnRQYXJlbnQoZXZlbnQsIHJvd0lEcywgbmV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXh0KGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX05hbm9TUUxIaXN0b3J5UGx1Z2luLnByb3RvdHlwZS5fdW5zaGlmdFBhcmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGlzdFJvd0lEcywgY29tcGxldGUpIHtcclxuICAgICAgICAvLyBudWxsIGlmIGluIHJvdyBtb2RlLCBvdGhlcndpc2UgcHJvdmlkZXMgdGhlIGhpc3RvcnkgdGFibGVcclxuICAgICAgICB2YXIgaGlzdFRhYmxlID0gdGhpcy5faGlzdFRhYmxlKGV2ZW50LnRhYmxlKTtcclxuICAgICAgICBpZiAoIWhpc3RUYWJsZSkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5xdWVyeShcInVwc2VydFwiLCB7XHJcbiAgICAgICAgICAgICAgICBpZDogdXRpbGl0aWVzXzEudGltZWlkKHRydWUpLFxyXG4gICAgICAgICAgICAgICAgdGFibGU6IGV2ZW50LnRhYmxlLFxyXG4gICAgICAgICAgICAgICAga2V5czogaGlzdFJvd0lEc1xyXG4gICAgICAgICAgICB9KS5tYW51YWxFeGVjKHsgdGFibGU6IGhpc3RUYWJsZSB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKGV2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMSGlzdG9yeVBsdWdpbi5wcm90b3R5cGUuX3Vuc2hpZnRTaW5nbGVSb3cgPSBmdW5jdGlvbiAodGFibGUsIGV2ZW50VHlwZXMsIHJvd1BLLCByb3csIHNraXBJRFgsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcm93SGlzdFRhYmxlID0gXCJfXCIgKyB0YWJsZSArIFwiX19oaXN0X2lkeFwiO1xyXG4gICAgICAgIHZhciBpZCA9IHV0aWxpdGllc18xLnRpbWVpZCh0cnVlKTtcclxuICAgICAgICB2YXIgYWRqdXN0SGlzdG9yeUlEWCA9IGZ1bmN0aW9uIChhcHBlbmRJRCkge1xyXG4gICAgICAgICAgICAvLyBhZGp1c3QgdGhlIGhpc3RvcnkgcG9pbnRlciB0YWJsZSB3aXRoIHRoZSBuZXcgcm93IGlkXHJcbiAgICAgICAgICAgIF90aGlzLnBhcmVudC5xdWVyeShcInNlbGVjdFwiKS53aGVyZShbXCJpZFwiLCBcIj1cIiwgcm93UEtdKS5tYW51YWxFeGVjKHsgdGFibGU6IHJvd0hpc3RUYWJsZSB9KS50aGVuKGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGlzdFJvd0lEWCA9IE9iamVjdC5pc0Zyb3plbihyb3dzWzBdKSA/IHV0aWxpdGllc18xLl9hc3NpZ24ocm93c1swXSkgOiByb3dzWzBdO1xyXG4gICAgICAgICAgICAgICAgaGlzdFJvd0lEWC5oaXN0Um93cy51bnNoaWZ0KGFwcGVuZElEKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudC5xdWVyeShcInVwc2VydFwiLCBoaXN0Um93SURYKS53aGVyZShbXCJpZFwiLCBcIj1cIiwgcm93UEtdKS5tYW51YWxFeGVjKHsgdGFibGU6IHJvd0hpc3RUYWJsZSB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShhcHBlbmRJRCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoZXZlbnRUeXBlcy5pbmRleE9mKFwiZGVsZXRlXCIpID4gLTEgfHwgZXZlbnRUeXBlcy5pbmRleE9mKFwiZHJvcFwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCBkZWxldGVkIHJlY29yZCB0byBoaXN0b3J5IHRhYmxlXHJcbiAgICAgICAgICAgIGFkanVzdEhpc3RvcnlJRFgoLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gYWRkIHJvdyB0byBoaXN0b3J5IHRhYmxlXHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnF1ZXJ5KFwidXBzZXJ0XCIsIF9fYXNzaWduKHsgX2lkOiBpZCB9LCByb3cpKS5tYW51YWxFeGVjKHsgdGFibGU6IFwiX1wiICsgdGFibGUgKyBcIl9faGlzdF9yb3dzXCIgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2tpcElEWCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhZGp1c3RIaXN0b3J5SURYKGlkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMSGlzdG9yeVBsdWdpbi5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24gKG5leHQsIGFyZ3MsIHJlc3VsdCkge1xyXG4gICAgICAgIGlmIChhcmdzWzBdID09PSBcImhpc3RcIikge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnkgPSBhcmdzWzFdO1xyXG4gICAgICAgICAgICB2YXIgdGFibGUgPSBhcmdzWzJdO1xyXG4gICAgICAgICAgICB2YXIgcm93UEsgPSBhcmdzWzNdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHF1ZXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIGRhdGFiYXNlL3RhYmxlL3JvdyBmb3J3YXJkIG9yIGJhY2t3YXJkIGluIGhpc3RvcnlcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI8XCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiPlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NoaWZ0SGlzdG9yeShxdWVyeSwgdGFibGUsIHJvd1BLLCBmdW5jdGlvbiAoZGlkQW55dGhpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChhcmdzLCBbZGlkQW55dGhpbmddKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8vIHF1ZXJ5IGhpc3Rvcnkgc3RhdGUgb2YgZGF0YWJhc2UvdGFibGUvcm93XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiP1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXJ5SGlzdG9yeSh0YWJsZSwgcm93UEssIGZ1bmN0aW9uIChxUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoYXJncywgcVJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAvLyBnZXQgYWxsIHJldmlzaW9ucyBvZiBhIGdpdmVuIHJvd1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJldlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldFJldmlzaW9uSGlzdG9yeSh0YWJsZSwgcm93UEssIGZ1bmN0aW9uIChxUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoYXJncywgcVJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAvLyBjbGVhciBoaXN0b3J5IG9mIHRoZSBkYXRhYmFzZS90YWJsZS9yb3dcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjbGVhclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3B1cmdlQWxsSGlzdG9yeSh0YWJsZSwgcm93UEssIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChhcmdzLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXh0KGFyZ3MsIHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIG9ubHkgd29ya3Mgd2hlbiBnaXZlbiBhIHNwZWNpZmljIHJvd1xyXG4gICAgX05hbm9TUUxIaXN0b3J5UGx1Z2luLnByb3RvdHlwZS5fZ2V0UmV2aXNpb25IaXN0b3J5ID0gZnVuY3Rpb24gKHRhYmxlLCByb3dQSywgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByb3dIaXN0VGFibGUgPSBcIl9cIiArIHRhYmxlICsgXCJfX2hpc3RfaWR4XCI7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQucXVlcnkoXCJzZWxlY3RcIikud2hlcmUoW1wiaWRcIiwgXCI9XCIsIHJvd1BLXSkubWFudWFsRXhlYyh7IHRhYmxlOiByb3dIaXN0VGFibGUgfSkudGhlbihmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICB2YXIgZ2V0Um93cyA9IHJvd3NbMF0uaGlzdFJvd3MuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgIT09IC0xOyB9KTtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50LnF1ZXJ5KFwic2VsZWN0XCIpLndoZXJlKFtcIl9pZFwiLCBcIklOXCIsIGdldFJvd3NdKS5tYW51YWxFeGVjKHsgdGFibGU6IFwiX1wiICsgdGFibGUgKyBcIl9faGlzdF9yb3dzXCIgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0Um93cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJPYmogPSB7fTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFJvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgck9ialtyb3dbc3Ryc1syXV1dID0gT2JqZWN0LmlzRnJvemVuKHJvdykgPyB1dGlsaXRpZXNfMS5fYXNzaWduKHJvdykgOiByb3c7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJPYmpbcm93W3N0cnNbMl1dXVtzdHJzWzJdXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcm93c1swXS5oaXN0Um93cy5sZW5ndGggLSByb3dzWzBdLmhpc3RQdHIgLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXZpc2lvbnM6IHJvd3NbMF0uaGlzdFJvd3MucmV2ZXJzZSgpLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gciA9PT0gLTEgPyBudWxsIDogck9ialtyXTsgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMSGlzdG9yeVBsdWdpbi5wcm90b3R5cGUuX2dldFRhYmxlSGlzdG9yeSA9IGZ1bmN0aW9uICh0YWJsZSwgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucGFyZW50LmV4dGVuZChcImlkeC5sZW5ndGhcIiwgdGFibGUpLnRoZW4oZnVuY3Rpb24gKGxlbikge1xyXG4gICAgICAgICAgICBfdGhpcy5wYXJlbnQucXVlcnkoXCJzZWxlY3RcIikubWFudWFsRXhlYyh7IHRhYmxlOiB0YWJsZSArIFwiX3B0clwiIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShbMCwgMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKFtsZW4sIGxlbiAtIHJvd3NbMF0ucHRyXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMSGlzdG9yeVBsdWdpbi5wcm90b3R5cGUuX3F1ZXJ5SGlzdG9yeSA9IGZ1bmN0aW9uICh0YWJsZSwgcm93UEssIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhpc3RvcnlNb2RlcykgeyAvLyBnbG9iYWwgbW9kZVxyXG4gICAgICAgICAgICB0aGlzLl9nZXRUYWJsZUhpc3RvcnkoXCJfaGlzdFwiLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaGlzdFRhYmxlID0gdGhpcy5faGlzdFRhYmxlKHRhYmxlKTtcclxuICAgICAgICBpZiAoIWhpc3RUYWJsZSkgeyAvLyBnZXQgc2luZ2xlIHJvdyBoaXN0b3J5XHJcbiAgICAgICAgICAgIGlmICghcm93UEspIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTmVlZCBhIHJvdyBwcmltYXJ5IGtleSB0byBxdWVyeSB0aGlzIGhpc3RvcnkhXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByb3dIaXN0VGFibGUgPSBcIl9cIiArIHRhYmxlICsgXCJfX2hpc3RfaWR4XCI7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnF1ZXJ5KFwic2VsZWN0XCIpLndoZXJlKFtcImlkXCIsIFwiPVwiLCByb3dQS10pLm1hbnVhbEV4ZWMoeyB0YWJsZTogcm93SGlzdFRhYmxlIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoaXN0Um93SURYID0gcm93c1swXTtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKFtoaXN0Um93SURYLmhpc3RSb3dzLmxlbmd0aCwgaGlzdFJvd0lEWC5oaXN0Um93cy5sZW5ndGggLSBoaXN0Um93SURYLmhpc3RQdHIgLSAxXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHsgLy8gZ2V0IHNpbmdsZSB0YWJsZSBoaXN0b3J5XHJcbiAgICAgICAgICAgIGlmICghdGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTmVlZCBhIHRhYmxlIHRvIHF1ZXJ5IHRoaXMgaGlzdG9yeSFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZ2V0VGFibGVIaXN0b3J5KGhpc3RUYWJsZSwgY29tcGxldGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfTmFub1NRTEhpc3RvcnlQbHVnaW4ucHJvdG90eXBlLl9zaGlmdFRhYmxlSGlzdG9yeSA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIHRhYmxlLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQucXVlcnkoXCJzZWxlY3RcIikubWFudWFsRXhlYyh7IHRhYmxlOiB0YWJsZSArIFwiX3B0clwiIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgdmFyIHJvd1B0ciA9IHV0aWxpdGllc18xLl9hc3NpZ24ocm93c1swXSk7XHJcbiAgICAgICAgICAgIHJvd1B0ci5wdHIgKz0gZGlyZWN0aW9uID09PSBcIjxcIiA/IDEgOiAtMTtcclxuICAgICAgICAgICAgaWYgKHJvd1B0ci5wdHIgPCAwKVxyXG4gICAgICAgICAgICAgICAgcm93UHRyLnB0ciA9IDA7XHJcbiAgICAgICAgICAgIF90aGlzLnBhcmVudC5leHRlbmQoXCJpZHgubGVuZ3RoXCIsIHRhYmxlKS50aGVuKGZ1bmN0aW9uIChsZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChyb3dQdHIucHRyID4gbGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93UHRyLnB0ciA9IGxlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyb3dzWzBdLnB0ciA9PT0gcm93UHRyLnB0cikgeyAvLyBubyBjaGFuZ2UgaW4gaGlzdG9yeSwgbm90aGluZyB0byBkby5cclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMucGFyZW50LnF1ZXJ5KFwic2VsZWN0XCIpLnJhbmdlKC0xLCBkaXJlY3Rpb24gPT09IFwiPFwiID8gcm93c1swXS5wdHIgOiByb3dQdHIucHRyKS5tYW51YWxFeGVjKHsgdGFibGU6IHRhYmxlIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnQucXVlcnkoXCJ1cHNlcnRcIiwgcm93UHRyKS5tYW51YWxFeGVjKHsgdGFibGU6IHRhYmxlICsgXCJfcHRyXCIgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwocm93c1swXS5rZXlzLCBmdW5jdGlvbiAocGssIGksIG5leHRSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zaGlmdFJvd0hpc3RvcnkoZGlyZWN0aW9uLCByb3dzWzBdLnRhYmxlLCBwaywgbmV4dFJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRpZEFueXRoaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShkaWRBbnl0aGluZy5pbmRleE9mKHRydWUpID4gLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTEhpc3RvcnlQbHVnaW4ucHJvdG90eXBlLl9zaGlmdFJvd0hpc3RvcnkgPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCB0YWJsZSwgUEssIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdXBkYXRlSURYID0gZnVuY3Rpb24gKG1ldGEpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50LnF1ZXJ5KFwidXBzZXJ0XCIsIG1ldGEpLndoZXJlKFtfdGhpcy5fdGFibGVQa0tleXNbdGFibGVdLCBcIj1cIiwgUEtdKS5tYW51YWxFeGVjKHsgdGFibGU6IFwiX1wiICsgdGFibGUgKyBcIl9faGlzdF9pZHhcIiB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucGFyZW50LnF1ZXJ5KFwic2VsZWN0XCIpLndoZXJlKFt0aGlzLl90YWJsZVBrS2V5c1t0YWJsZV0sIFwiPVwiLCBQS10pLm1hbnVhbEV4ZWMoeyB0YWJsZTogXCJfXCIgKyB0YWJsZSArIFwiX19oaXN0X2lkeFwiIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgdmFyIHJvd0lEWCA9IHV0aWxpdGllc18xLl9hc3NpZ24ocm93c1swXSk7XHJcbiAgICAgICAgICAgIHJvd0lEWC5oaXN0UHRyICs9IGRpcmVjdGlvbiA9PT0gXCI8XCIgPyAxIDogLTE7XHJcbiAgICAgICAgICAgIGlmIChyb3dJRFguaGlzdFB0ciA8IDApXHJcbiAgICAgICAgICAgICAgICByb3dJRFguaGlzdFB0ciA9IDA7XHJcbiAgICAgICAgICAgIGlmIChyb3dJRFguaGlzdFB0ciA+IHJvd0lEWC5oaXN0Um93cy5sZW5ndGggLSAxKVxyXG4gICAgICAgICAgICAgICAgcm93SURYLmhpc3RQdHIgPSByb3dJRFguaGlzdFJvd3MubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgaWYgKHJvd0lEWC5oaXN0UHRyID09PSByb3dzWzBdLmhpc3RQdHIpIHsgLy8gb3V0c2lkZSBvZiBoaXN0b3J5IHJhbmdlLCBub3RoaW5nIHRvIGRvXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGhpc3RvcnlQSyA9IHJvd0lEWC5oaXN0Um93c1tyb3dJRFguaGlzdFB0cl07XHJcbiAgICAgICAgICAgIGlmIChoaXN0b3J5UEsgPT09IC0xKSB7IC8vIHJvdyBoYXMgYmVlbiBkZWxldGVkXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnQucXVlcnkoXCJkZWxldGVcIikuY29tbWVudChcIkhpc3RvcnkgV3JpdGVcIikud2hlcmUoW190aGlzLl90YWJsZVBrS2V5c1t0YWJsZV0sIFwiPVwiLCBQS10pLm1hbnVhbEV4ZWMoeyB0YWJsZTogdGFibGUgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSURYKHJvd0lEWCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgLy8gcm93IGhhcyBiZWVuIGFkZGVkIG9yIG1vZGlmaWVkXHJcbiAgICAgICAgICAgICAgICAvLyBwdWxsIHRoZSBoaXN0b3J5J3MgY29weSBvZiB0aGUgcm93XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnQucXVlcnkoXCJzZWxlY3RcIikud2hlcmUoW1wiX2lkXCIsIFwiPVwiLCBoaXN0b3J5UEtdKS5tYW51YWxFeGVjKHsgdGFibGU6IFwiX1wiICsgdGFibGUgKyBcIl9faGlzdF9yb3dzXCIgfSkudGhlbihmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgcm93IGluIHRoZSBkYXRhYmFzZVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudC5xdWVyeShcInVwc2VydFwiLCByb3dzWzBdKS5jb21tZW50KFwiSGlzdG9yeSBXcml0ZVwiKS5tYW51YWxFeGVjKHsgdGFibGU6IHRhYmxlIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVJRFgocm93SURYKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgX05hbm9TUUxIaXN0b3J5UGx1Z2luLnByb3RvdHlwZS5fc2hpZnRIaXN0b3J5ID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgdGFibGUsIHJvd1BLLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5oaXN0b3J5TW9kZXMpIHsgLy8gZ2xvYmFsIG1vZGVcclxuICAgICAgICAgICAgdGhpcy5fc2hpZnRUYWJsZUhpc3RvcnkoZGlyZWN0aW9uLCBcIl9oaXN0XCIsIGNvbXBsZXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaGlzdFRhYmxlID0gdGhpcy5faGlzdFRhYmxlKHRhYmxlKTtcclxuICAgICAgICBpZiAoIWhpc3RUYWJsZSkgeyAvLyBhZGp1c3Qgc2luZ2xlIHJvdyBoaXN0b3J5XHJcbiAgICAgICAgICAgIGlmICghcm93UEspIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTmVlZCBhIHJvdyBwcmltYXJ5IGtleSB0byBjaGFuZ2UgdGhpcyBoaXN0b3J5IVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9zaGlmdFJvd0hpc3RvcnkoZGlyZWN0aW9uLCB0YWJsZSwgcm93UEssIGNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7IC8vIGFkanVzdCBzaW5nbGUgdGFibGUgaGlzdG9yeVxyXG4gICAgICAgICAgICBpZiAoIXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5lZWQgYSB0YWJsZSB0byBjaGFuZ2UgdGhpcyBoaXN0b3J5IVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9zaGlmdFRhYmxlSGlzdG9yeShkaXJlY3Rpb24sIGhpc3RUYWJsZSwgY29tcGxldGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gX05hbm9TUUxIaXN0b3J5UGx1Z2luO1xyXG59KCkpO1xyXG5leHBvcnRzLl9OYW5vU1FMSGlzdG9yeVBsdWdpbiA9IF9OYW5vU1FMSGlzdG9yeVBsdWdpbjtcclxuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgbGllX3RzXzEgPSByZXF1aXJlKFwibGllLXRzXCIpO1xyXG52YXIgdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi4vdXRpbGl0aWVzXCIpO1xyXG52YXIgZGJfaWR4XzEgPSByZXF1aXJlKFwiLi9kYi1pZHhcIik7XHJcbnZhciBkZWxldGVGb2xkZXJSZWN1cnNpdmUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgaWYgKGdsb2JhbC5fZnMuZXhpc3RzU3luYyhwYXRoKSkge1xyXG4gICAgICAgIGdsb2JhbC5fZnMucmVhZGRpclN5bmMocGF0aCkuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICAgICAgICB2YXIgY3VyUGF0aCA9IHBhdGggKyBcIi9cIiArIGZpbGU7XHJcbiAgICAgICAgICAgIGlmIChnbG9iYWwuX2ZzLnN0YXRTeW5jKGN1clBhdGgpLmlzRGlyZWN0b3J5KCkpIHsgLy8gcmVjdXJzZVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlRm9sZGVyUmVjdXJzaXZlKGN1clBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBkZWxldGUgZmlsZVxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsLl9mcy51bmxpbmtTeW5jKGN1clBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZ2xvYmFsLl9mcy5ybWRpclN5bmMocGF0aCk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBIYW5kbGVzIExldmVsIERCIHN0b3JhZ2UuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIF9MZXZlbFN0b3JlXHJcbiAqIEBpbXBsZW1lbnRzIHtOYW5vU1FMU3RvcmFnZUFkYXB0ZXJ9XHJcbiAqL1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxudmFyIF9MZXZlbFN0b3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX0xldmVsU3RvcmUocGF0aCwgd3JpdGVDYWNoZSwgcmVhZENhY2hlKSB7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLndyaXRlQ2FjaGUgPSB3cml0ZUNhY2hlO1xyXG4gICAgICAgIHRoaXMucmVhZENhY2hlID0gcmVhZENhY2hlO1xyXG4gICAgICAgIHRoaXMuX3BrS2V5ID0ge307XHJcbiAgICAgICAgdGhpcy5fcGtUeXBlID0ge307XHJcbiAgICAgICAgdGhpcy5fZGJJbmRleCA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2xldmVsREJzID0ge307XHJcbiAgICAgICAgdGhpcy5faXNQS251bSA9IHt9O1xyXG4gICAgfVxyXG4gICAgX0xldmVsU3RvcmUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoT2JqZWN0LmtleXModGhpcy5fZGJJbmRleCksIGZ1bmN0aW9uICh0YWJsZSwgaSwgZG9uZSkge1xyXG4gICAgICAgICAgICB2YXIgcGtzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9sZXZlbERCc1t0YWJsZV0uY3JlYXRlS2V5U3RyZWFtKClcclxuICAgICAgICAgICAgICAgIC5vbihcImRhdGFcIiwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHBrcy5wdXNoKF90aGlzLl9pc1BLbnVtW3RhYmxlXSA/IG5ldyBnbG9iYWwuX0ludDY0QkUoZGF0YSkudG9OdW1iZXIoKSA6IGRhdGEpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm9uKFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwa3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RiSW5kZXhbdGFibGVdLnNldChwa3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KS50aGVuKGNvbXBsZXRlKTtcclxuICAgIH07XHJcbiAgICBfTGV2ZWxTdG9yZS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uIChjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTChPYmplY3Qua2V5cyh0aGlzLl9kYkluZGV4KSwgZnVuY3Rpb24gKHRhYmxlLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9sZXZlbERCc1t0YWJsZV0uY2xvc2UoZG9uZSk7XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgX0xldmVsU3RvcmUucHJvdG90eXBlLnNldElEID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgICAgICB0aGlzLl9wYXRoID0gKHRoaXMucGF0aCB8fCBcIi5cIikgKyBcIi9kYl9cIiArIHRoaXMuX2lkO1xyXG4gICAgICAgIGlmICghZ2xvYmFsLl9mcy5leGlzdHNTeW5jKHRoaXMuX3BhdGgpKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbC5fZnMubWtkaXJTeW5jKHRoaXMuX3BhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfTGV2ZWxTdG9yZS5wcm90b3R5cGUubWFrZVRhYmxlID0gZnVuY3Rpb24gKHRhYmxlTmFtZSwgZGF0YU1vZGVscykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fZGJJbmRleFt0YWJsZU5hbWVdID0gbmV3IGRiX2lkeF8xLkRhdGFiYXNlSW5kZXgoKTtcclxuICAgICAgICB0aGlzLl9sZXZlbERCc1t0YWJsZU5hbWVdID0gZ2xvYmFsLl9sZXZlbHVwKGdsb2JhbC5fbGV2ZWxkb3duKGdsb2JhbC5fcGF0aC5qb2luKHRoaXMuX3BhdGgsIHRhYmxlTmFtZSkpLCB7XHJcbiAgICAgICAgICAgIGNhY2hlU2l6ZTogKHRoaXMucmVhZENhY2hlIHx8IDMyKSAqIDEwMjQgKiAxMDI0LFxyXG4gICAgICAgICAgICB3cml0ZUJ1ZmZlclNpemU6ICh0aGlzLndyaXRlQ2FjaGUgfHwgMzIpICogMTAyNCAqIDEwMjRcclxuICAgICAgICB9KTtcclxuICAgICAgICBkYXRhTW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgaWYgKGQucHJvcHMgJiYgdXRpbGl0aWVzXzEuaW50ZXJzZWN0KFtcInBrXCIsIFwicGsoKVwiXSwgZC5wcm9wcykpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9wa1R5cGVbdGFibGVOYW1lXSA9IGQudHlwZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9wa0tleVt0YWJsZU5hbWVdID0gZC5rZXk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5faXNQS251bVt0YWJsZU5hbWVdID0gW1wiaW50XCIsIFwibnVtYmVyXCIsIFwiZmxvYXRcIl0uaW5kZXhPZihkLnR5cGUpICE9PSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZC5wcm9wcyAmJiB1dGlsaXRpZXNfMS5pbnRlcnNlY3QoW1wiYWlcIiwgXCJhaSgpXCJdLCBkLnByb3BzKSAmJiB1dGlsaXRpZXNfMS5pbnRlcnNlY3QoW1wicGtcIiwgXCJwaygpXCJdLCBkLnByb3BzKSAmJiBkLnR5cGUgPT09IFwiaW50XCIpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9kYkluZGV4W3RhYmxlTmFtZV0uZG9BSSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfTGV2ZWxTdG9yZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBkYXRhLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHBrID0gcGsgfHwgdXRpbGl0aWVzXzEuZ2VuZXJhdGVJRCh0aGlzLl9wa1R5cGVbdGFibGVdLCB0aGlzLl9kYkluZGV4W3RhYmxlXS5haSk7XHJcbiAgICAgICAgaWYgKCFwaykge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNhbid0IGFkZCBhIHJvdyB3aXRob3V0IGEgcHJpbWFyeSBrZXkhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZGJJbmRleFt0YWJsZV0uaW5kZXhPZihwaykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdLmFkZChwayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0gX19hc3NpZ24oe30sIGRhdGEsIChfYSA9IHt9LCBfYVt0aGlzLl9wa0tleVt0YWJsZV1dID0gcGssIF9hKSk7XHJcbiAgICAgICAgdGhpcy5fbGV2ZWxEQnNbdGFibGVdLnB1dCh0aGlzLl9pc1BLbnVtW3RhYmxlXSA/IG5ldyBnbG9iYWwuX0ludDY0QkUocGspLnRvQnVmZmVyKCkgOiBwaywgSlNPTi5zdHJpbmdpZnkociksIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgfTtcclxuICAgIF9MZXZlbFN0b3JlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLl9kYkluZGV4W3RhYmxlXS5pbmRleE9mKHBrKTtcclxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kYkluZGV4W3RhYmxlXS5yZW1vdmUocGspO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sZXZlbERCc1t0YWJsZV0uZGVsKHRoaXMuX2lzUEtudW1bdGFibGVdID8gbmV3IGdsb2JhbC5fSW50NjRCRShwaykudG9CdWZmZXIoKSA6IHBrLCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgX0xldmVsU3RvcmUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLl9kYkluZGV4W3RhYmxlXS5pbmRleE9mKHBrKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbGV2ZWxEQnNbdGFibGVdLmdldCh0aGlzLl9pc1BLbnVtW3RhYmxlXSA/IG5ldyBnbG9iYWwuX0ludDY0QkUocGspLnRvQnVmZmVyKCkgOiBwaywgZnVuY3Rpb24gKGVyciwgcm93KSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhKU09OLnBhcnNlKHJvdykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgX0xldmVsU3RvcmUucHJvdG90eXBlLnJhbmdlUmVhZCA9IGZ1bmN0aW9uICh0YWJsZSwgcm93Q2FsbGJhY2ssIGNvbXBsZXRlLCBmcm9tLCB0bywgdXNlUEspIHtcclxuICAgICAgICB2YXIga2V5cyA9IHRoaXMuX2RiSW5kZXhbdGFibGVdLmtleXMoKTtcclxuICAgICAgICB2YXIgdXNlZnVsVmFsdWVzID0gW3R5cGVvZiBmcm9tLCB0eXBlb2YgdG9dLmluZGV4T2YoXCJ1bmRlZmluZWRcIikgPT09IC0xO1xyXG4gICAgICAgIHZhciByYW5nZXMgPSB1c2VmdWxWYWx1ZXMgPyBbZnJvbSwgdG9dIDogWzAsIGtleXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgdmFyIHJvd3MgPSBbXTtcclxuICAgICAgICB2YXIgbG93ZXIgPSB1c2VQSyAmJiB1c2VmdWxWYWx1ZXMgPyBmcm9tIDoga2V5c1tyYW5nZXNbMF1dO1xyXG4gICAgICAgIHZhciBoaWdoZXIgPSB1c2VQSyAmJiB1c2VmdWxWYWx1ZXMgPyB0byA6IGtleXNbcmFuZ2VzWzFdXTtcclxuICAgICAgICB0aGlzLl9sZXZlbERCc1t0YWJsZV1cclxuICAgICAgICAgICAgLmNyZWF0ZVZhbHVlU3RyZWFtKHtcclxuICAgICAgICAgICAgZ3RlOiB0aGlzLl9pc1BLbnVtW3RhYmxlXSA/IG5ldyBnbG9iYWwuX0ludDY0QkUobG93ZXIpLnRvQnVmZmVyKCkgOiBsb3dlcixcclxuICAgICAgICAgICAgbHRlOiB0aGlzLl9pc1BLbnVtW3RhYmxlXSA/IG5ldyBnbG9iYWwuX0ludDY0QkUoaGlnaGVyKS50b0J1ZmZlcigpIDogaGlnaGVyXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm9uKFwiZGF0YVwiLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICByb3dzLnB1c2goSlNPTi5wYXJzZShkYXRhKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLm9uKFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHJhbmdlc1swXSB8fCAwO1xyXG4gICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgIHZhciBnZXRSb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IHJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93Q2FsbGJhY2socm93c1tpXSwgaWR4LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgJSA1MDAgPT09IDAgPyBsaWVfdHNfMS5zZXRGYXN0KGdldFJvdykgOiBnZXRSb3coKTsgLy8gaGFuZGxlIG1heGltdW0gY2FsbCBzdGFjayBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZ2V0Um93KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgX0xldmVsU3RvcmUucHJvdG90eXBlLmRyb3AgPSBmdW5jdGlvbiAodGFibGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHRoaXMuX2RiSW5kZXhbdGFibGVdLmtleXMoKSwgZnVuY3Rpb24gKHBrLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9sZXZlbERCc1t0YWJsZV0uZGVsKHBrLCBkb25lKTtcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IG5ldyBkYl9pZHhfMS5EYXRhYmFzZUluZGV4KCk7XHJcbiAgICAgICAgICAgIGlkeC5kb0FJID0gX3RoaXMuX2RiSW5kZXhbdGFibGVdLmRvQUk7XHJcbiAgICAgICAgICAgIF90aGlzLl9kYkluZGV4W3RhYmxlXSA9IGlkeDtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfTGV2ZWxTdG9yZS5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAodGFibGUsIGdldExlbmd0aCwgY29tcGxldGUpIHtcclxuICAgICAgICBjb21wbGV0ZShnZXRMZW5ndGggPyB0aGlzLl9kYkluZGV4W3RhYmxlXS5rZXlzKCkubGVuZ3RoIDogdGhpcy5fZGJJbmRleFt0YWJsZV0ua2V5cygpKTtcclxuICAgIH07XHJcbiAgICBfTGV2ZWxTdG9yZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTChPYmplY3Qua2V5cyh0aGlzLl9kYkluZGV4KSwgZnVuY3Rpb24gKHRhYmxlLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmRyb3AodGFibGUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9sZXZlbERCc1t0YWJsZV0uY2xvc2UoZG9uZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBkZWxldGVGb2xkZXJSZWN1cnNpdmUoX3RoaXMuX3BhdGgpO1xyXG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfTGV2ZWxTdG9yZTtcclxufSgpKTtcclxuZXhwb3J0cy5fTGV2ZWxTdG9yZSA9IF9MZXZlbFN0b3JlO1xyXG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBsaWVfdHNfMSA9IHJlcXVpcmUoXCJsaWUtdHNcIik7XHJcbnZhciB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuLi91dGlsaXRpZXNcIik7XHJcbnZhciBkYl9pZHhfMSA9IHJlcXVpcmUoXCIuL2RiLWlkeFwiKTtcclxuLyoqXHJcbiAqIEhhbmRsZXMgV2ViU1FMIHBlcnNpc3RlbnQgc3RvcmFnZVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBfU3luY1N0b3JlXHJcbiAqIEBpbXBsZW1lbnRzIHtOYW5vU1FMU3RvcmFnZUFkYXB0ZXJ9XHJcbiAqL1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxudmFyIF9XZWJTUUxTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIF9XZWJTUUxTdG9yZShzaXplKSB7XHJcbiAgICAgICAgdGhpcy5fcGtLZXkgPSB7fTtcclxuICAgICAgICB0aGlzLl9wa1R5cGUgPSB7fTtcclxuICAgICAgICB0aGlzLl9kYkluZGV4ID0ge307XHJcbiAgICAgICAgdGhpcy5fc2l6ZSA9IChzaXplIHx8IDApICogMTAwMCAqIDEwMDA7XHJcbiAgICB9XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLnNldElEID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2RiID0gd2luZG93Lm9wZW5EYXRhYmFzZSh0aGlzLl9pZCwgXCIxLjBcIiwgdGhpcy5faWQsIHRoaXMuX3NpemUgfHwgdXRpbGl0aWVzXzEuaXNBbmRyb2lkID8gNTAwMDAwMCA6IDEpO1xyXG4gICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoT2JqZWN0LmtleXModGhpcy5fcGtLZXkpLCBmdW5jdGlvbiAodGFibGUsIGksIG5leHRLZXkpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3NxbCh0cnVlLCBcIkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIFwiICsgdGFibGUgKyBcIiAoaWQgQkxPQiBQUklNQVJZIEtFWSBVTklRVUUsIGRhdGEgVEVYVClcIiwgW10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9zcWwoZmFsc2UsIFwiU0VMRUNUIGlkIEZST00gXCIgKyB0YWJsZSwgW10sIGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaV8xID0gMDsgaV8xIDwgcmVzdWx0LnJvd3MubGVuZ3RoOyBpXzErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHgucHVzaChyZXN1bHQucm93cy5pdGVtKGlfMSkuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBTUUxpdGUgZG9lc24ndCBzb3J0IHByaW1hcnkga2V5cywgYnV0IHRoZSBzeXN0ZW0gZGVwZW5kcyBvbiBzb3J0ZWQgcHJpbWFyeSBrZXlzXHJcbiAgICAgICAgICAgICAgICAgICAgaWR4ID0gaWR4LnNvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZGJJbmRleFt0YWJsZV0uc2V0KGlkeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEtleSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4oY29tcGxldGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGFibGUgbmFtZXMgY2FuJ3QgYmUgZXNjYXBlZCBlYXNpbHkgaW4gdGhlIHF1ZXJpZXMuXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGdhdXJhbnRlZXMgYW55IHByb3ZpZGVkIHRhYmxlIGlzIGEgdmFsaWQgdGFibGUgbmFtZSBiZWluZyB1c2VkIGJ5IHRoZSBzeXN0ZW0uXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBfV2ViU1FMU3RvcmVcclxuICAgICAqL1xyXG4gICAgX1dlYlNRTFN0b3JlLnByb3RvdHlwZS5fY2hrVGFibGUgPSBmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fcGtUeXBlKS5pbmRleE9mKHRhYmxlKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJObyB0YWJsZSBcIiArIHRhYmxlICsgXCIgZm91bmQhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhYmxlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLm1ha2VUYWJsZSA9IGZ1bmN0aW9uICh0YWJsZU5hbWUsIGRhdGFNb2RlbHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVOYW1lXSA9IG5ldyBkYl9pZHhfMS5EYXRhYmFzZUluZGV4KCk7XHJcbiAgICAgICAgZGF0YU1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgIGlmIChkLnByb3BzICYmIGQucHJvcHMuaW5kZXhPZihcInBrXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9wa1R5cGVbdGFibGVOYW1lXSA9IGQudHlwZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9wa0tleVt0YWJsZU5hbWVdID0gZC5rZXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGQucHJvcHMgJiYgZC5wcm9wcy5pbmRleE9mKFwiYWlcIikgPiAtMSAmJiBkLnByb3BzLmluZGV4T2YoXCJwa1wiKSA+IC0xICYmIGQudHlwZSA9PT0gXCJpbnRcIikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2RiSW5kZXhbdGFibGVOYW1lXS5kb0FJID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIF9XZWJTUUxTdG9yZS5wcm90b3R5cGUuX3NxbCA9IGZ1bmN0aW9uIChhbGxvd1dyaXRlLCBzcWwsIGFyZ3MsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIGRvVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAodHgpIHtcclxuICAgICAgICAgICAgdHguZXhlY3V0ZVNxbChzcWwsIGFyZ3MsIGZ1bmN0aW9uICh0eDIsIHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUocmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHR4LCBlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioc3FsLCBhcmdzLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChhbGxvd1dyaXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RiLnRyYW5zYWN0aW9uKGRvVHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZGIucmVhZFRyYW5zYWN0aW9uKGRvVHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHRhYmxlLCBwaywgZGF0YSwgY29tcGxldGUpIHtcclxuICAgICAgICBwayA9IHBrIHx8IHV0aWxpdGllc18xLmdlbmVyYXRlSUQodGhpcy5fcGtUeXBlW3RhYmxlXSwgdGhpcy5fZGJJbmRleFt0YWJsZV0uYWkpO1xyXG4gICAgICAgIGlmICghcGspIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgYWRkIGEgcm93IHdpdGhvdXQgYSBwcmltYXJ5IGtleSFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuZXdSb3cgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5fZGJJbmRleFt0YWJsZV0uaW5kZXhPZihwaykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIG5ld1JvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdLmFkZChwayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuZXdSb3cpIHtcclxuICAgICAgICAgICAgdmFyIHJfMSA9IF9fYXNzaWduKHt9LCBkYXRhLCAoX2EgPSB7fSwgX2FbdGhpcy5fcGtLZXlbdGFibGVdXSA9IHBrLCBfYSkpO1xyXG4gICAgICAgICAgICB0aGlzLl9zcWwodHJ1ZSwgXCJJTlNFUlQgaW50byBcIiArIHRoaXMuX2Noa1RhYmxlKHRhYmxlKSArIFwiIChpZCwgZGF0YSkgVkFMVUVTICg/LCA/KVwiLCBbcGssIEpTT04uc3RyaW5naWZ5KHJfMSldLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShyXzEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByXzIgPSBfX2Fzc2lnbih7fSwgZGF0YSwgKF9iID0ge30sIF9iW3RoaXMuX3BrS2V5W3RhYmxlXV0gPSBwaywgX2IpKTtcclxuICAgICAgICAgICAgdGhpcy5fc3FsKHRydWUsIFwiVVBEQVRFIFwiICsgdGhpcy5fY2hrVGFibGUodGFibGUpICsgXCIgU0VUIGRhdGEgPSA/IFdIRVJFIGlkID0gP1wiLCBbSlNPTi5zdHJpbmdpZnkocl8yKSwgcGtdLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShyXzIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgcGssIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIHBvcyA9IHRoaXMuX2RiSW5kZXhbdGFibGVdLmluZGV4T2YocGspO1xyXG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdLnJlbW92ZShwayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3NxbCh0cnVlLCBcIkRFTEVURSBGUk9NIFwiICsgdGhpcy5fY2hrVGFibGUodGFibGUpICsgXCIgV0hFUkUgaWQgPSA/XCIsIFtwa10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX3NxbChmYWxzZSwgXCJTRUxFQ1QgZGF0YSBGUk9NIFwiICsgdGhpcy5fY2hrVGFibGUodGFibGUpICsgXCIgV0hFUkUgaWQgPSA/XCIsIFtwa10sIGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5yb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soSlNPTi5wYXJzZShyZXN1bHQucm93cy5pdGVtKDApLmRhdGEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLmJhdGNoUmVhZCA9IGZ1bmN0aW9uICh0YWJsZSwgcGtzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX3NxbChmYWxzZSwgXCJTRUxFQ1QgZGF0YSBmcm9tIFwiICsgdGhpcy5fY2hrVGFibGUodGFibGUpICsgXCIgV0hFUkUgaWQgSU4gKFwiICsgcGtzLm1hcChmdW5jdGlvbiAocCkgeyByZXR1cm4gXCI/XCI7IH0pLmpvaW4oXCIsIFwiKSArIFwiKSBPUkRFUiBCWSBpZFwiLCBwa3MsIGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSByZXN1bHQucm93cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciByb3dzID0gW107XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIHJvd3MudW5zaGlmdChKU09OLnBhcnNlKHJlc3VsdC5yb3dzLml0ZW0oaSkuZGF0YSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHJvd3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIF9XZWJTUUxTdG9yZS5wcm90b3R5cGUucmFuZ2VSZWFkID0gZnVuY3Rpb24gKHRhYmxlLCByb3dDYWxsYmFjaywgY29tcGxldGUsIGZyb20sIHRvLCB1c2VQSykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGtleXMgPSB0aGlzLl9kYkluZGV4W3RhYmxlXS5rZXlzKCk7XHJcbiAgICAgICAgdmFyIHVzZWZ1bFZhbHVlcyA9IFt0eXBlb2YgZnJvbSwgdHlwZW9mIHRvXS5pbmRleE9mKFwidW5kZWZpbmVkXCIpID09PSAtMTtcclxuICAgICAgICB2YXIgcmFuZ2VzID0gdXNlZnVsVmFsdWVzID8gW2Zyb20sIHRvXSA6IFtdO1xyXG4gICAgICAgIGlmICgha2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXNlUEsgJiYgdXNlZnVsVmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHJhbmdlcyA9IHJhbmdlcy5tYXAoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIF90aGlzLl9kYkluZGV4W3RhYmxlXS5nZXRMb2NhdGlvbihyKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpZHggPSByYW5nZXNbMF0gfHwgMDtcclxuICAgICAgICB2YXIgZ2V0S2V5cyA9IFtdO1xyXG4gICAgICAgIHZhciBzdGFydElEWCA9IHJhbmdlc1swXTtcclxuICAgICAgICB2YXIgc3RtbnQgPSBcIlNFTEVDVCBkYXRhIGZyb20gXCIgKyB0aGlzLl9jaGtUYWJsZSh0YWJsZSk7XHJcbiAgICAgICAgLy8gU1FMaXRlIGRvZXNuJ3QgaGFuZGxlIEJFVFdFRU4gc3RhdGVtZW50cyBncmFjZWZ1bGx5IHdpdGggcHJpbWFyeSBrZXlzLCBhbHdheXMgZG9pbmcgYSBmdWxsIHRhYmxlIHNjYW4uXHJcbiAgICAgICAgLy8gU28gd2UgdGFrZSB0aGUgaW5kZXggb2YgdGhlIHRhYmxlICh3aGljaCBpcyBpbiBqcyBtZW1vcnkpIGFuZCBjb252ZXJ0IGl0IGludG8gYW4gSU4gc3RhdGVtZW50IG1lYW5pbmcgU1FMaXRlXHJcbiAgICAgICAgLy8gY2FuIGdvIGRpcmVjdGx5IHRvIHRoZSByb3dzIHdlIG5lZWQgd2l0aG91dCBhIGZ1bGwgdGFibGUgc2Nhbi5cclxuICAgICAgICBpZiAocmFuZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgdCA9IHR5cGVvZiBrZXlzW3N0YXJ0SURYXSA9PT0gXCJudW1iZXJcIjtcclxuICAgICAgICAgICAgd2hpbGUgKHN0YXJ0SURYIDw9IHJhbmdlc1sxXSkge1xyXG4gICAgICAgICAgICAgICAgZ2V0S2V5cy5wdXNoKGtleXNbc3RhcnRJRFhdKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0SURYKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RtbnQgKz0gXCIgV0hFUkUgaWQgSU4gKFwiICsgZ2V0S2V5cy5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIFwiP1wiOyB9KS5qb2luKFwiLCBcIikgKyBcIilcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RtbnQgKz0gXCIgT1JERVIgQlkgaWRcIjtcclxuICAgICAgICB0aGlzLl9zcWwoZmFsc2UsIHN0bW50LCBnZXRLZXlzLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgdmFyIGdldFJvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucm93cy5sZW5ndGggPiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93Q2FsbGJhY2soSlNPTi5wYXJzZShyZXN1bHQucm93cy5pdGVtKGkpLmRhdGEpLCBpZHgsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWR4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSAlIDUwMCA9PT0gMCA/IGxpZV90c18xLnNldEZhc3QoZ2V0Um93KSA6IGdldFJvdygpOyAvLyBoYW5kbGUgbWF4aW11bSBjYWxsIHN0YWNrIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBnZXRSb3coKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLmRyb3AgPSBmdW5jdGlvbiAodGFibGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IG5ldyBkYl9pZHhfMS5EYXRhYmFzZUluZGV4KCk7XHJcbiAgICAgICAgaWR4LmRvQUkgPSB0aGlzLl9kYkluZGV4W3RhYmxlXS5kb0FJO1xyXG4gICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdID0gaWR4O1xyXG4gICAgICAgIHRoaXMuX3NxbCh0cnVlLCBcIkRFTEVURSBGUk9NIFwiICsgdGhpcy5fY2hrVGFibGUodGFibGUpLCBbXSwgZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfV2ViU1FMU3RvcmUucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24gKHRhYmxlLCBnZXRMZW5ndGgsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgY29tcGxldGUoZ2V0TGVuZ3RoID8gdGhpcy5fZGJJbmRleFt0YWJsZV0ua2V5cygpLmxlbmd0aCA6IHRoaXMuX2RiSW5kZXhbdGFibGVdLmtleXMoKSk7XHJcbiAgICB9O1xyXG4gICAgX1dlYlNRTFN0b3JlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKHRoaXMuX2RiSW5kZXgpLCBmdW5jdGlvbiAodGFibGUsIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgX3RoaXMuZHJvcCh0YWJsZSwgZG9uZSk7XHJcbiAgICAgICAgfSkudGhlbihjb21wbGV0ZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9XZWJTUUxTdG9yZTtcclxufSgpKTtcclxuZXhwb3J0cy5fV2ViU1FMU3RvcmUgPSBfV2ViU1FMU3RvcmU7XHJcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxpZV90c18xID0gcmVxdWlyZShcImxpZS10c1wiKTtcbnZhciB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuLi91dGlsaXRpZXNcIik7XG52YXIgZGJfaWR4XzEgPSByZXF1aXJlKFwiLi9kYi1pZHhcIik7XG52YXIgX2V2YWxDb250ZXh0ID0gZnVuY3Rpb24gKHNvdXJjZSwgY29udGV4dCkge1xuICAgIHZhciBjb21waWxlZCA9IGV2YWwoXCIoZnVuY3Rpb24oXCIgKyBPYmplY3Qua2V5cyhjb250ZXh0KS5qb2luKFwiLCBcIikgKyBcIikge1wiICsgc291cmNlICsgXCJ9KVwiKTtcbiAgICByZXR1cm4gY29tcGlsZWQuYXBwbHkoY29udGV4dCwgT2JqZWN0LmtleXMoY29udGV4dCkubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjb250ZXh0W2NdOyB9KSk7XG59O1xuLyoqXG4gKiBIYW5kbGVzIEluZGV4ZWREQiB3aXRoIGFuZCB3aXRob3V0IHdlYiB3b3JrZXJzLlxuICogVXNlcyBibG9iIHdvcmtlciBPUiBldmFsKClzIHRoZSB3b3JrZXIgYW5kIHVzZXMgaXQgaW5saW5lLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBfSW5kZXhlZERCU3RvcmVcbiAqIEBpbXBsZW1lbnRzIHtOYW5vU1FMU3RvcmFnZUFkYXB0ZXJ9XG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxudmFyIF9JbmRleGVkREJTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfSW5kZXhlZERCU3RvcmUodXNlV29ya2VyKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9ICdmdW5jdGlvbiBvKHIpe3RoaXMuZ289ZnVuY3Rpb24odCl7dmFyIG89MDtyJiZyLmxlbmd0aHx8dChbXSksci5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7ZShmdW5jdGlvbigpeysrbz09PXIubGVuZ3RoJiZ0KFtdKX0pfSl9fXZhciBzPXtkYjpudWxsLHN0b3JlOmZ1bmN0aW9uKGUsbix0KXt2YXIgbz1zLmRiLnRyYW5zYWN0aW9uKGUsbik7dChvLG8ub2JqZWN0U3RvcmUoZSksZnVuY3Rpb24oZSxuKXtyZXR1cm4gZnVuY3Rpb24oKXtwb3N0TWVzc2FnZSh7ZG86ZSxhcmdzOm59KX19KX0saW5pdDpmdW5jdGlvbigpe2FkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oZSl7dmFyIG49ZS5kYXRhO3Nbbi5kb10mJnNbbi5kb10obi5hcmdzKX0sITEpfSxzZXR1cDpmdW5jdGlvbihuKXt2YXIgZT1pbmRleGVkREIub3BlbihuLmlkLDEpLHQ9ITEsYT17fTtlLm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbihlKXt0PSEwLHMuZGI9ZS50YXJnZXQucmVzdWx0LE9iamVjdC5rZXlzKG4ucGtLZXlzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3MuZGIuY3JlYXRlT2JqZWN0U3RvcmUoZSx7a2V5UGF0aDpuLnBrS2V5c1tlXX0pLGFbZV09W119KX0sZS5vbnN1Y2Nlc3M9ZnVuY3Rpb24oZSl7aWYocy5kYj1lLnRhcmdldC5yZXN1bHQsdClwb3N0TWVzc2FnZSh7ZG86XCJyZHlcIixhcmdzOmF9KTtlbHNle25ldyBvKE9iamVjdC5rZXlzKG4ucGtLZXlzKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciBlLG8scjtlPXQsbz1mdW5jdGlvbihlKXthW3RdPWUsbigpfSxyPVtdLHMuc3RvcmUoZSxcInJlYWRvbmx5XCIsZnVuY3Rpb24oZSxuLHQpe24ub3BlbkN1cnNvcigpLm9uc3VjY2Vzcz1mdW5jdGlvbihlKXt2YXIgbj1lLnRhcmdldC5yZXN1bHQ7biYmKHIucHVzaChuLmtleSksbi5jb250aW51ZSgpKX0sZS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7byhyKX19KX19KSkuZ28oZnVuY3Rpb24oKXtwb3N0TWVzc2FnZSh7ZG86XCJyZHlcIixhcmdzOmF9KX0pfX19LHdyaXRlOmZ1bmN0aW9uKG8pe3Muc3RvcmUoby50YWJsZSxcInJlYWR3cml0ZVwiLGZ1bmN0aW9uKGUsbix0KXtuLnB1dChvLnJvdyksZS5vbmNvbXBsZXRlPXQoXCJ3cml0ZV9cIitvLmlkLG51bGwpfSl9LHJlYWQ6ZnVuY3Rpb24ocil7cy5zdG9yZShyLnRhYmxlLFwicmVhZG9ubHlcIixmdW5jdGlvbihlLG4sdCl7dmFyIG89bi5nZXQoci5wayk7by5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtwb3N0TWVzc2FnZSh7ZG86XCJyZWFkX1wiK3IuaWQsYXJnczpvLnJlc3VsdH0pfX0pfSxyZWFkUmFuZ2U6ZnVuY3Rpb24oYSl7cy5zdG9yZShhLnRhYmxlLFwicmVhZG9ubHlcIixmdW5jdGlvbihlLG4sdCl7dmFyIG89W10scj0tMT09PWEucmFuZ2UuaW5kZXhPZih2b2lkIDApP24ub3BlbkN1cnNvcihJREJLZXlSYW5nZS5ib3VuZChhLnJhbmdlWzBdLGEucmFuZ2VbMV0pKTpuLm9wZW5DdXJzb3IoKTtlLm9uY29tcGxldGU9dChcInJlYWRSYW5nZV9cIithLmlkK1wiX2RvbmVcIixvKSxyLm9uc3VjY2Vzcz1mdW5jdGlvbihlKXt2YXIgbj1lLnRhcmdldC5yZXN1bHQ7biYmKG8ucHVzaChuLnZhbHVlKSxuLmNvbnRpbnVlKCkpfX0pfSxkZWxldGU6ZnVuY3Rpb24obyl7cy5zdG9yZShvLnRhYmxlLFwicmVhZHdyaXRlXCIsZnVuY3Rpb24oZSxuLHQpe2Uub25jb21wbGV0ZT10KFwiZGVsZXRlX1wiK28uaWQsITApLGUub25lcnJvcj10KFwiZGVsZXRlX1wiK28uaWQsITEpLFwiX2NsZWFyX1wiPT09by5waz9uLmNsZWFyKCk6bi5kZWxldGUoby5wayl9KX19O3MuaW5pdCgpOyc7XG4gICAgICAgIHRoaXMuX3BrS2V5ID0ge307XG4gICAgICAgIHRoaXMuX3BrVHlwZSA9IHt9O1xuICAgICAgICB0aGlzLl9kYkluZGV4ID0ge307XG4gICAgICAgIHRoaXMuX3dhaXRpbmdDQnMgPSB7fTtcbiAgICAgICAgdGhpcy5fdXNlV29ya2VyID0gdXNlV29ya2VyO1xuICAgIH1cbiAgICBfSW5kZXhlZERCU3RvcmUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3VzZVdvcmtlcikge1xuICAgICAgICAgICAgLy8gYmxvYiB3ZWJ3b3JrZXIsIGRvZXNuJ3QgdXNlIGFuIGV4dGVybmFsIGZpbGUhXG4gICAgICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGJ5IElFIGFuZCBFZGdlIHdpdGggSW5kZXhlZERCLCBsaWtlIGF0IGFsbC5cbiAgICAgICAgICAgIHRoaXMuX3cgPSBuZXcgV29ya2VyKHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFt0aGlzLl93b3JrZXJdKSkpO1xuICAgICAgICAgICAgdGhpcy5fdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVXV01lc3NhZ2UoZS5kYXRhLmRvLCBlLmRhdGEuYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGV2YWwgdGhlIHdvcmtlciwgdGhlIGVuZCByZXN1bHQgYmVpbmcgYSB1aSB0aHJlYWQgaW5kZXhlZCBkYiBpbnN0YW5jZS5cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbW9zdGx5IHRvIGdldCBJbmRleGVkREIgc3VwcG9ydCBpbiBJRSBhbmQgRWRnZSB3aXRob3V0IGR1cGxpY2F0aW5nIHRoZSBpbmRleGVkIGRiIGNvZGVcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnNfMSA9IFtdO1xuICAgICAgICAgICAgLy8gZW11bGF0ZSB3b3JrZXIgYmVoYXZpb3JcbiAgICAgICAgICAgIF9ldmFsQ29udGV4dCh0aGlzLl93b3JrZXIsIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlV1dNZXNzYWdlKG1zZy5kbywgbXNnLmFyZ3MpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc18xLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gZW11bGF0ZSB3b3JrZXIgb2JqZWN0XG4gICAgICAgICAgICB0aGlzLl93ID0ge1xuICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlLCB0cmFuc2Zlcikge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNfMS5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsKHsgZGF0YTogbWVzc2FnZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm5zIGluZGV4ZXMgZm9yIGVhY2ggdGFibGVcbiAgICAgICAgdGhpcy5fd2FpdGluZ0NCc1tcInJkeVwiXSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9kYkluZGV4W3RhYmxlXS5zZXQoYXJnc1t0YWJsZV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl93LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGRvOiBcInNldHVwXCIsIGFyZ3M6IHtcbiAgICAgICAgICAgICAgICBwa0tleXM6IHRoaXMuX3BrS2V5LFxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLl9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIF9JbmRleGVkREJTdG9yZS5wcm90b3R5cGUuc2V0SUQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcbiAgICB9O1xuICAgIF9JbmRleGVkREJTdG9yZS5wcm90b3R5cGUuX2hhbmRsZVdXTWVzc2FnZSA9IGZ1bmN0aW9uIChhY3Rpb24sIGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dhaXRpbmdDQnNbYWN0aW9uXSkge1xuICAgICAgICAgICAgdGhpcy5fd2FpdGluZ0NCc1thY3Rpb25dKGFyZ3MpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3dhaXRpbmdDQnNbYWN0aW9uXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgX0luZGV4ZWREQlN0b3JlLnByb3RvdHlwZS5tYWtlVGFibGUgPSBmdW5jdGlvbiAodGFibGVOYW1lLCBkYXRhTW9kZWxzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVOYW1lXSA9IG5ldyBkYl9pZHhfMS5EYXRhYmFzZUluZGV4KCk7XG4gICAgICAgIGRhdGFNb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgaWYgKGQucHJvcHMgJiYgdXRpbGl0aWVzXzEuaW50ZXJzZWN0KFtcInBrXCIsIFwicGsoKVwiXSwgZC5wcm9wcykpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcGtUeXBlW3RhYmxlTmFtZV0gPSBkLnR5cGU7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3BrS2V5W3RhYmxlTmFtZV0gPSBkLmtleTtcbiAgICAgICAgICAgICAgICBpZiAoZC5wcm9wcyAmJiB1dGlsaXRpZXNfMS5pbnRlcnNlY3QoW1wiYWlcIiwgXCJhaSgpXCJdLCBkLnByb3BzKSAmJiAoZC50eXBlID09PSBcImludFwiIHx8IGQudHlwZSA9PT0gXCJudW1iZXJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RiSW5kZXhbdGFibGVOYW1lXS5kb0FJID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgX0luZGV4ZWREQlN0b3JlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgcGssIGRhdGEsIGNvbXBsZXRlKSB7XG4gICAgICAgIHBrID0gcGsgfHwgdXRpbGl0aWVzXzEuZ2VuZXJhdGVJRCh0aGlzLl9wa1R5cGVbdGFibGVdLCB0aGlzLl9kYkluZGV4W3RhYmxlXS5haSk7XG4gICAgICAgIGlmICghcGspIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGFkZCBhIHJvdyB3aXRob3V0IGEgcHJpbWFyeSBrZXkhXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kYkluZGV4W3RhYmxlXS5pbmRleE9mKHBrKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdLmFkZChwayk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHF1ZXJ5SUQgPSB1dGlsaXRpZXNfMS51dWlkKCk7XG4gICAgICAgIHZhciByID0gX19hc3NpZ24oe30sIGRhdGEsIChfYSA9IHt9LCBfYVt0aGlzLl9wa0tleVt0YWJsZV1dID0gcGssIF9hKSk7XG4gICAgICAgIHRoaXMuX3dhaXRpbmdDQnNbXCJ3cml0ZV9cIiArIHF1ZXJ5SURdID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlKHIpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl93LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGRvOiBcIndyaXRlXCIsXG4gICAgICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICAgICAgdGFibGU6IHRhYmxlLFxuICAgICAgICAgICAgICAgIGlkOiBxdWVyeUlELFxuICAgICAgICAgICAgICAgIHJvdzogclxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9hO1xuICAgIH07XG4gICAgX0luZGV4ZWREQlN0b3JlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgaWR4ID0gdGhpcy5fZGJJbmRleFt0YWJsZV0uaW5kZXhPZihwayk7XG4gICAgICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9kYkluZGV4W3RhYmxlXS5yZW1vdmUocGspO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWVyeUlEID0gdXRpbGl0aWVzXzEudXVpZCgpO1xuICAgICAgICB0aGlzLl93YWl0aW5nQ0JzW1wiZGVsZXRlX1wiICsgcXVlcnlJRF0gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fdy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBkbzogXCJkZWxldGVcIiwgYXJnczoge1xuICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgICAgICAgICBpZDogcXVlcnlJRCxcbiAgICAgICAgICAgICAgICBwazogcGtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBfSW5kZXhlZERCU3RvcmUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcXVlcnlJRCA9IHV0aWxpdGllc18xLnV1aWQoKTtcbiAgICAgICAgaWYgKHRoaXMuX2RiSW5kZXhbdGFibGVdLmluZGV4T2YocGspID09PSAtMSkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd2FpdGluZ0NCc1tcInJlYWRfXCIgKyBxdWVyeUlEXSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fdy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBkbzogXCJyZWFkXCIsIGFyZ3M6IHtcbiAgICAgICAgICAgICAgICB0YWJsZTogdGFibGUsXG4gICAgICAgICAgICAgICAgaWQ6IHF1ZXJ5SUQsXG4gICAgICAgICAgICAgICAgcGs6IHBrXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgX0luZGV4ZWREQlN0b3JlLnByb3RvdHlwZS5yYW5nZVJlYWQgPSBmdW5jdGlvbiAodGFibGUsIHJvd0NhbGxiYWNrLCBjb21wbGV0ZSwgZnJvbSwgdG8sIHVzZVBLKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBrZXlzID0gdGhpcy5fZGJJbmRleFt0YWJsZV0ua2V5cygpO1xuICAgICAgICB2YXIgdXNlZnVsVmFsdWVzID0gW3R5cGVvZiBmcm9tLCB0eXBlb2YgdG9dLmluZGV4T2YoXCJ1bmRlZmluZWRcIikgPT09IC0xO1xuICAgICAgICB2YXIgcmFuZ2VzID0gdXNlZnVsVmFsdWVzID8gW2Zyb20sIHRvXSA6IFswLCBrZXlzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWVyeUlEID0gdXRpbGl0aWVzXzEudXVpZCgpO1xuICAgICAgICB2YXIgcm93cyA9IFtdO1xuICAgICAgICB2YXIgaWR4ID0gcmFuZ2VzWzBdO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHRoaXMuX3dhaXRpbmdDQnNbXCJyZWFkUmFuZ2VfXCIgKyBxdWVyeUlEICsgXCJfZG9uZVwiXSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuX3dhaXRpbmdDQnNbXCJyZWFkUmFuZ2VfXCIgKyBxdWVyeUlEXTtcbiAgICAgICAgICAgIHJvd3MgPSBhcmdzO1xuICAgICAgICAgICAgdmFyIGdldFJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaWR4IDw9IHJhbmdlc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICByb3dDYWxsYmFjayhyb3dzW2ldLCBpZHgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSAlIDUwMCA9PT0gMCA/IGxpZV90c18xLnNldEZhc3QoZ2V0Um93KSA6IGdldFJvdygpOyAvLyBoYW5kbGUgbWF4aW11bSBjYWxsIHN0YWNrIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2V0Um93KCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qY29uc3QgZ2V0TmV4dFJvd3MgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93YWl0aW5nQ0JzW1wicmVhZFJhbmdlX1wiICsgcXVlcnlJRF0gPSAoYXJnczogREJSb3dbXSkgPT4ge1xuICAgICAgICAgICAgICAgIHJvd3MgPSByb3dzLmNvbmNhdChhcmdzKTtcbiAgICAgICAgICAgICAgICBnZXROZXh0Um93cygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgZ2V0TmV4dFJvd3MoKTsqL1xuICAgICAgICB0aGlzLl93LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGRvOiBcInJlYWRSYW5nZVwiLFxuICAgICAgICAgICAgYXJnczoge1xuICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgICAgICAgICBpZDogcXVlcnlJRCxcbiAgICAgICAgICAgICAgICByYW5nZTogdXNlUEsgJiYgdXNlZnVsVmFsdWVzID8gcmFuZ2VzIDogcmFuZ2VzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4ga2V5c1tyXTsgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBfSW5kZXhlZERCU3RvcmUucHJvdG90eXBlLmRyb3AgPSBmdW5jdGlvbiAodGFibGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpZHggPSBuZXcgZGJfaWR4XzEuRGF0YWJhc2VJbmRleCgpO1xuICAgICAgICBpZHguZG9BSSA9IHRoaXMuX2RiSW5kZXhbdGFibGVdLmRvQUk7XG4gICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdID0gaWR4O1xuICAgICAgICB2YXIgcXVlcnlJRCA9IHV0aWxpdGllc18xLnV1aWQoKTtcbiAgICAgICAgdGhpcy5fd2FpdGluZ0NCc1tcImRlbGV0ZV9cIiArIHF1ZXJ5SURdID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3cucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgZG86IFwiZGVsZXRlXCIsIGFyZ3M6IHtcbiAgICAgICAgICAgICAgICB0YWJsZTogdGFibGUsXG4gICAgICAgICAgICAgICAgaWQ6IHF1ZXJ5SUQsXG4gICAgICAgICAgICAgICAgcGs6IFwiX2NsZWFyX1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgX0luZGV4ZWREQlN0b3JlLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uICh0YWJsZSwgZ2V0TGVuZ3RoLCBjb21wbGV0ZSkge1xuICAgICAgICBjb21wbGV0ZShnZXRMZW5ndGggPyB0aGlzLl9kYkluZGV4W3RhYmxlXS5rZXlzKCkubGVuZ3RoIDogdGhpcy5fZGJJbmRleFt0YWJsZV0ua2V5cygpKTtcbiAgICB9O1xuICAgIF9JbmRleGVkREJTdG9yZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKHRoaXMuX2RiSW5kZXgpLCBmdW5jdGlvbiAodGFibGUsIGksIGRvbmUpIHtcbiAgICAgICAgICAgIF90aGlzLmRyb3AodGFibGUsIGRvbmUpO1xuICAgICAgICB9KS50aGVuKGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIHJldHVybiBfSW5kZXhlZERCU3RvcmU7XG59KCkpO1xuZXhwb3J0cy5fSW5kZXhlZERCU3RvcmUgPSBfSW5kZXhlZERCU3RvcmU7XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBsaWVfdHNfMSA9IHJlcXVpcmUoXCJsaWUtdHNcIik7XHJcbnZhciB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuLi91dGlsaXRpZXNcIik7XHJcbnZhciBkYl9pZHhfMSA9IHJlcXVpcmUoXCIuL2RiLWlkeFwiKTtcclxuLyoqXHJcbiAqIEhhbmRsZXMgYWxsIGF2YWlsYWJsZSBzeW5jcm9ub3VzIHZlcnNpb25zIG9mIHN0b3JhZ2UgKG1lbW9yeSBhbmQgbG9jYWxzdG9yYWdlKVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBfU3luY1N0b3JlXHJcbiAqIEBpbXBsZW1lbnRzIHtOYW5vU1FMU3RvcmFnZUFkYXB0ZXJ9XHJcbiAqL1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxudmFyIF9TeW5jU3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfU3luY1N0b3JlKHVzZUxvY2FsU3RvcmFnZSkge1xyXG4gICAgICAgIHRoaXMuX3BrS2V5ID0ge307XHJcbiAgICAgICAgdGhpcy5fcGtUeXBlID0ge307XHJcbiAgICAgICAgdGhpcy5fcm93cyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2RiSW5kZXggPSB7fTtcclxuICAgICAgICB0aGlzLl9scyA9IHVzZUxvY2FsU3RvcmFnZSB8fCBmYWxzZTtcclxuICAgIH1cclxuICAgIF9TeW5jU3RvcmUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoY29tcGxldGUpIHtcclxuICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgfTtcclxuICAgIF9TeW5jU3RvcmUucHJvdG90eXBlLnNldElEID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH07XHJcbiAgICBfU3luY1N0b3JlLnByb3RvdHlwZS5tYWtlVGFibGUgPSBmdW5jdGlvbiAodGFibGVOYW1lLCBkYXRhTW9kZWxzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9yb3dzW3RhYmxlTmFtZV0gPSB7fTtcclxuICAgICAgICB0aGlzLl9kYkluZGV4W3RhYmxlTmFtZV0gPSBuZXcgZGJfaWR4XzEuRGF0YWJhc2VJbmRleCgpO1xyXG4gICAgICAgIGRhdGFNb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICBpZiAoZC5wcm9wcyAmJiB1dGlsaXRpZXNfMS5pbnRlcnNlY3QoW1wicGtcIiwgXCJwaygpXCJdLCBkLnByb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3BrVHlwZVt0YWJsZU5hbWVdID0gZC50eXBlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3BrS2V5W3RhYmxlTmFtZV0gPSBkLmtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZC5wcm9wcyAmJiB1dGlsaXRpZXNfMS5pbnRlcnNlY3QoW1wicGtcIiwgXCJwaygpXCJdLCBkLnByb3BzKSAmJiB1dGlsaXRpZXNfMS5pbnRlcnNlY3QoW1wiYWlcIiwgXCJhaSgpXCJdLCBkLnByb3BzKSAmJiBkLnR5cGUgPT09IFwiaW50XCIpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9kYkluZGV4W3RhYmxlTmFtZV0uZG9BSSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKF90aGlzLl9scykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oX3RoaXMuX2lkICsgXCIqXCIgKyB0YWJsZU5hbWUgKyBcIl9pZHhcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZGJJbmRleFt0YWJsZU5hbWVdLnNldChKU09OLnBhcnNlKGluZGV4KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfU3luY1N0b3JlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgcGssIGRhdGEsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgcGsgPSBwayB8fCB1dGlsaXRpZXNfMS5nZW5lcmF0ZUlEKHRoaXMuX3BrVHlwZVt0YWJsZV0sIHRoaXMuX2RiSW5kZXhbdGFibGVdLmFpKTtcclxuICAgICAgICBpZiAoIXBrKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGFkZCBhIHJvdyB3aXRob3V0IGEgcHJpbWFyeSBrZXkhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZGJJbmRleFt0YWJsZV0uaW5kZXhPZihwaykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdLmFkZChwayk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9scykge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5faWQgKyBcIipcIiArIHRhYmxlICsgXCJfaWR4XCIsIEpTT04uc3RyaW5naWZ5KHRoaXMuX2RiSW5kZXhbdGFibGVdLmtleXMoKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9scykge1xyXG4gICAgICAgICAgICB2YXIgciA9IF9fYXNzaWduKHt9LCBkYXRhLCAoX2EgPSB7fSwgX2FbdGhpcy5fcGtLZXlbdGFibGVdXSA9IHBrLCBfYSkpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLl9pZCArIFwiKlwiICsgdGFibGUgKyBcIl9fXCIgKyBwaywgSlNPTi5zdHJpbmdpZnkocikpO1xyXG4gICAgICAgICAgICBjb21wbGV0ZShyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByID0gX19hc3NpZ24oe30sIGRhdGEsIChfYiA9IHt9LCBfYlt0aGlzLl9wa0tleVt0YWJsZV1dID0gcGssIF9iKSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvd3NbdGFibGVdW3BrXSA9IHV0aWxpdGllc18xLmRlZXBGcmVlemUocik7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgfTtcclxuICAgIF9TeW5jU3RvcmUucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgcGssIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMuX2RiSW5kZXhbdGFibGVdLmluZGV4T2YocGspO1xyXG4gICAgICAgIGlmIChpZHggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdLnJlbW92ZShwayk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9scykge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5faWQgKyBcIipcIiArIHRhYmxlICsgXCJfaWR4XCIsIEpTT04uc3RyaW5naWZ5KHRoaXMuX2RiSW5kZXhbdGFibGVdLmtleXMoKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9scykge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLl9pZCArIFwiKlwiICsgdGFibGUgKyBcIl9fXCIgKyBwayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fcm93c1t0YWJsZV1bcGtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgfTtcclxuICAgIF9TeW5jU3RvcmUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLl9scykge1xyXG4gICAgICAgICAgICB2YXIgciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuX2lkICsgXCIqXCIgKyB0YWJsZSArIFwiX19cIiArIHBrKTtcclxuICAgICAgICAgICAgY2FsbGJhY2sociA/IEpTT04ucGFyc2UocikgOiB1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5fcm93c1t0YWJsZV1bcGtdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX1N5bmNTdG9yZS5wcm90b3R5cGUucmFuZ2VSZWFkID0gZnVuY3Rpb24gKHRhYmxlLCByb3dDYWxsYmFjaywgY29tcGxldGUsIGZyb20sIHRvLCB1c2VQSykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGtleXMgPSB0aGlzLl9kYkluZGV4W3RhYmxlXS5rZXlzKCk7XHJcbiAgICAgICAgdmFyIHVzZWZ1bFZhbHVlcyA9IFt0eXBlb2YgZnJvbSwgdHlwZW9mIHRvXS5pbmRleE9mKFwidW5kZWZpbmVkXCIpID09PSAtMTtcclxuICAgICAgICB2YXIgcmFuZ2VzID0gdXNlZnVsVmFsdWVzID8gW2Zyb20sIHRvXSA6IFswLCBrZXlzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIGlmICgha2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXNlUEsgJiYgdXNlZnVsVmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHJhbmdlcyA9IHJhbmdlcy5tYXAoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIF90aGlzLl9kYkluZGV4W3RhYmxlXS5nZXRMb2NhdGlvbihyKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpZHggPSByYW5nZXNbMF07XHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIHZhciByb3dEb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZHgrKztcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICBpICUgNTAwID09PSAwID8gbGllX3RzXzEuc2V0RmFzdChnZXRSb3cpIDogZ2V0Um93KCk7IC8vIGhhbmRsZSBtYXhpbXVtIGNhbGwgc3RhY2sgZXJyb3JcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBnZXRSb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChpZHggPD0gcmFuZ2VzWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShfdGhpcy5faWQgKyBcIipcIiArIHRhYmxlICsgXCJfX1wiICsga2V5c1tpZHhdKTtcclxuICAgICAgICAgICAgICAgICAgICByb3dDYWxsYmFjayhyID8gSlNPTi5wYXJzZShyKSA6IHVuZGVmaW5lZCwgaWR4LCByb3dEb25lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd0NhbGxiYWNrKF90aGlzLl9yb3dzW3RhYmxlXVtrZXlzW2lkeF1dLCBpZHgsIHJvd0RvbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZ2V0Um93KCk7XHJcbiAgICB9O1xyXG4gICAgX1N5bmNTdG9yZS5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uICh0YWJsZSwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLl9scykge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLl9pZCArIFwiKlwiICsgdGFibGUgKyBcIl9pZHhcIiwgSlNPTi5zdHJpbmdpZnkoW10pKTtcclxuICAgICAgICAgICAgdGhpcy5fZGJJbmRleFt0YWJsZV0ua2V5cygpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oX3RoaXMuX2lkICsgXCIqXCIgKyB0YWJsZSArIFwiX19cIiArIGtleSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcm93c1t0YWJsZV0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGlkeCA9IG5ldyBkYl9pZHhfMS5EYXRhYmFzZUluZGV4KCk7XHJcbiAgICAgICAgaWR4LmRvQUkgPSB0aGlzLl9kYkluZGV4W3RhYmxlXS5kb0FJO1xyXG4gICAgICAgIHRoaXMuX2RiSW5kZXhbdGFibGVdID0gaWR4O1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9O1xyXG4gICAgX1N5bmNTdG9yZS5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAodGFibGUsIGdldExlbmd0aCwgY29tcGxldGUpIHtcclxuICAgICAgICBjb21wbGV0ZShnZXRMZW5ndGggPyB0aGlzLl9kYkluZGV4W3RhYmxlXS5rZXlzKCkubGVuZ3RoIDogdGhpcy5fZGJJbmRleFt0YWJsZV0ua2V5cygpKTtcclxuICAgIH07XHJcbiAgICBfU3luY1N0b3JlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKHRoaXMuX2RiSW5kZXgpLCBmdW5jdGlvbiAodGFibGUsIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgX3RoaXMuZHJvcCh0YWJsZSwgZG9uZSk7XHJcbiAgICAgICAgfSkudGhlbihjb21wbGV0ZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9TeW5jU3RvcmU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuX1N5bmNTdG9yZSA9IF9TeW5jU3RvcmU7XHJcbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNvbmZpZyA9IHtcclxuICAgIEVORF9XT1JEOiBcIiRcIixcclxuICAgIFBFUk1TX01JTl9MRU46IDIsXHJcbn07XHJcbnZhciBUcmllID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRyaWUoaW5wdXQpIHtcclxuICAgICAgICB0aGlzLl90cmllID0gVHJpZS5fY3JlYXRlKGlucHV0KTtcclxuICAgIH1cclxuICAgIFRyaWUucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmllO1xyXG4gICAgfTtcclxuICAgIFRyaWUucHJvdG90eXBlLnNldEluZGV4ID0gZnVuY3Rpb24gKHRyaWUpIHtcclxuICAgICAgICB0aGlzLl90cmllID0gdHJpZTtcclxuICAgIH07XHJcbiAgICBUcmllLnByb3RvdHlwZS5hZGRXb3JkID0gZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUsIGN1cnJlbnRJbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFRyaWUuX2FwcGVuZChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUsIGN1cnJlbnRJbmRleCwgYXJyYXkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGlucHV0ID0gd29yZC50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgIGlucHV0LnJlZHVjZShyZWR1Y2VyLCB0aGlzLl90cmllKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBUcmllLnByb3RvdHlwZS5yZW1vdmVXb3JkID0gZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgICB2YXIgX2EgPSBUcmllLl9jaGVja1ByZWZpeCh0aGlzLl90cmllLCB3b3JkKSwgcHJlZml4Rm91bmQgPSBfYS5wcmVmaXhGb3VuZCwgcHJlZml4Tm9kZSA9IF9hLnByZWZpeE5vZGU7XHJcbiAgICAgICAgaWYgKHByZWZpeEZvdW5kKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBwcmVmaXhOb2RlW2NvbmZpZy5FTkRfV09SRF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIFRyaWUucHJvdG90eXBlLmdldFdvcmRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBUcmllLl9yZWN1cnNlUHJlZml4KHRoaXMuX3RyaWUsICcnKTtcclxuICAgIH07XHJcbiAgICBUcmllLnByb3RvdHlwZS5nZXRQcmVmaXggPSBmdW5jdGlvbiAoc3RyUHJlZml4KSB7XHJcbiAgICAgICAgc3RyUHJlZml4ID0gc3RyUHJlZml4LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1ByZWZpeChzdHJQcmVmaXgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHByZWZpeE5vZGUgPSBUcmllLl9jaGVja1ByZWZpeCh0aGlzLl90cmllLCBzdHJQcmVmaXgpLnByZWZpeE5vZGU7XHJcbiAgICAgICAgcmV0dXJuIFRyaWUuX3JlY3Vyc2VQcmVmaXgocHJlZml4Tm9kZSwgc3RyUHJlZml4KTtcclxuICAgIH07XHJcbiAgICBUcmllLnByb3RvdHlwZS5faXNQcmVmaXggPSBmdW5jdGlvbiAocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIHByZWZpeEZvdW5kID0gVHJpZS5fY2hlY2tQcmVmaXgodGhpcy5fdHJpZSwgcHJlZml4KS5wcmVmaXhGb3VuZDtcclxuICAgICAgICByZXR1cm4gcHJlZml4Rm91bmQ7XHJcbiAgICB9O1xyXG4gICAgVHJpZS5fYXBwZW5kID0gZnVuY3Rpb24gKHRyaWUsIGxldHRlciwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgdHJpZVtsZXR0ZXJdID0gdHJpZVtsZXR0ZXJdIHx8IHt9O1xyXG4gICAgICAgIHRyaWUgPSB0cmllW2xldHRlcl07XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIHRyaWVbY29uZmlnLkVORF9XT1JEXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cmllO1xyXG4gICAgfTtcclxuICAgIFRyaWUuX2NoZWNrUHJlZml4ID0gZnVuY3Rpb24gKHByZWZpeE5vZGUsIHByZWZpeCkge1xyXG4gICAgICAgIHZhciBpbnB1dCA9IHByZWZpeC50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgIHZhciBwcmVmaXhGb3VuZCA9IGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChsZXR0ZXIsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmICghcHJlZml4Tm9kZVtsZXR0ZXJdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeE5vZGUgPSBwcmVmaXhOb2RlW2xldHRlcl07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJlZml4Rm91bmQ6IHByZWZpeEZvdW5kLFxyXG4gICAgICAgICAgICBwcmVmaXhOb2RlOiBwcmVmaXhOb2RlLFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgVHJpZS5fY3JlYXRlID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIHRyaWUgPSAoaW5wdXQgfHwgW10pLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcclxuICAgICAgICAgICAgaXRlbVxyXG4gICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICAgIC5zcGxpdChcIlwiKVxyXG4gICAgICAgICAgICAgICAgLnJlZHVjZShUcmllLl9hcHBlbmQsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgICAgICByZXR1cm4gdHJpZTtcclxuICAgIH07XHJcbiAgICBUcmllLl9yZWN1cnNlUHJlZml4ID0gZnVuY3Rpb24gKG5vZGUsIHByZWZpeCwgcHJlZml4ZXMpIHtcclxuICAgICAgICBpZiAocHJlZml4ZXMgPT09IHZvaWQgMCkgeyBwcmVmaXhlcyA9IFtdOyB9XHJcbiAgICAgICAgdmFyIHdvcmQgPSBwcmVmaXg7XHJcbiAgICAgICAgZm9yICh2YXIgYnJhbmNoIGluIG5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKGJyYW5jaCA9PT0gY29uZmlnLkVORF9XT1JEKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVmaXhlcy5wdXNoKHdvcmQpO1xyXG4gICAgICAgICAgICAgICAgd29yZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgVHJpZS5fcmVjdXJzZVByZWZpeChub2RlW2JyYW5jaF0sIHByZWZpeCArIGJyYW5jaCwgcHJlZml4ZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJlZml4ZXMuc29ydCgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUcmllO1xyXG59KCkpO1xyXG5leHBvcnRzLlRyaWUgPSBUcmllO1xyXG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBwcmVmaXhfdHJpZV90c18xID0gcmVxdWlyZShcInByZWZpeC10cmllLXRzXCIpO1xyXG52YXIgdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi4vdXRpbGl0aWVzXCIpO1xyXG52YXIgYWRhcHRlcl9zeW5jXzEgPSByZXF1aXJlKFwiLi9hZGFwdGVyLXN5bmNcIik7XHJcbnZhciBhZGFwdGVyX2luZGV4ZWREQl8xID0gcmVxdWlyZShcIi4vYWRhcHRlci1pbmRleGVkREJcIik7XHJcbnZhciBhZGFwdGVyX3dlYnNxbF8xID0gcmVxdWlyZShcIi4vYWRhcHRlci13ZWJzcWxcIik7XHJcbi8qIE5PREUtU1RBUlQgKi9cclxudmFyIGFkYXB0ZXJfbGV2ZWxEQl8xID0gcmVxdWlyZShcIi4vYWRhcHRlci1sZXZlbERCXCIpO1xyXG4vKipcclxuICogSG9sZHMgdGhlIGdlbmVyYWwgYWJzdHJhY3Rpb25zIHRvIGNvbm5lY3QgdGhlIHF1ZXJ5IG1vZHVsZSB0byB0aGUgc3RvcmFnZSBhZGFwdGVycy5cclxuICogVGFrZXMgY2FyZSBvZiBpbmRleGluZywgdHJpZXMsIHNlY29uZGFyeSBpbmRleGVzIGFuZCBhZGFwdGVyIG1hbmFnZW1lbnQuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIF9OYW5vU1FMU3RvcmFnZVxyXG4gKi9cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbnZhciBfTmFub1NRTFN0b3JhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfTmFub1NRTFN0b3JhZ2UocGFyZW50LCBhcmdzKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXJyYXkgb2YgdGFibGUgbmFtZXNcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmdbXX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fdGFibGVOYW1lcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX25zcWwgPSBwYXJlbnQ7XHJcbiAgICAgICAgdGhpcy5fbW9kZSA9IGFyZ3MucGVyc2lzdGVudCA/IFwiUEVSTVwiIDogYXJncy5tb2RlIHx8IFwiVEVNUFwiO1xyXG4gICAgICAgIHRoaXMuX2lkID0gYXJncy5pZDtcclxuICAgICAgICB0aGlzLl9zaXplID0gYXJncy5zaXplIHx8IDU7XHJcbiAgICAgICAgdGhpcy5hZGFwdGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMubW9kZWxzID0ge307XHJcbiAgICAgICAgdGhpcy50YWJsZUluZm8gPSB7fTtcclxuICAgICAgICB0aGlzLl90cmllSW5kZXhlcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX3RhYmxlTmFtZXMgPSBbXTtcclxuICAgICAgICB0aGlzLl9kb0NhY2hlID0gYXJncy5jYWNoZSB8fCB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XHJcbiAgICAgICAgdGhpcy5fY2FjaGVLZXlzID0ge307XHJcbiAgICAgICAgdGhpcy5hZGFwdGVyc1swXSA9IHtcclxuICAgICAgICAgICAgYWRhcHRlcjogbnVsbCxcclxuICAgICAgICAgICAgd2FpdEZvcldyaXRlczogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9tb2RlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tb2RlID09PSBcIlBFUk1cIikge1xyXG4gICAgICAgICAgICAgICAgLypjb25zdCBtb2RlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBJREI6IFwiSW5kZXhlZCBEQlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIElEQl9XVzogXCJJbmRleGVkIERCIChXZWIgV29ya2VyKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFdTUUw6IFwiV2ViU1FMXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgTFM6IFwiTG9jYWwgU3RvcmFnZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFRFTVA6IFwibWVtb3J5XCJcclxuICAgICAgICAgICAgICAgIH07Ki9cclxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGUgPSB0aGlzLl9kZXRlY3RTdG9yYWdlTWV0aG9kKCkgfHwgdGhpcy5fbW9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX21vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJJREJcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXJzWzBdLmFkYXB0ZXIgPSBuZXcgYWRhcHRlcl9pbmRleGVkREJfMS5fSW5kZXhlZERCU3RvcmUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIklEQl9XV1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlcnNbMF0uYWRhcHRlciA9IG5ldyBhZGFwdGVyX2luZGV4ZWREQl8xLl9JbmRleGVkREJTdG9yZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXU1FMXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyc1swXS5hZGFwdGVyID0gbmV3IGFkYXB0ZXJfd2Vic3FsXzEuX1dlYlNRTFN0b3JlKHRoaXMuX3NpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxTXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyc1swXS5hZGFwdGVyID0gbmV3IGFkYXB0ZXJfc3luY18xLl9TeW5jU3RvcmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAvKiBOT0RFLVNUQVJUICovXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTFZMXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyc1swXS5hZGFwdGVyID0gbmV3IGFkYXB0ZXJfbGV2ZWxEQl8xLl9MZXZlbFN0b3JlKGFyZ3MuZGJQYXRoLCBhcmdzLndyaXRlQ2FjaGUsIGFyZ3MucmVhZENhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8qIE5PREUtRU5EICovXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVEVNUFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlcnNbMF0uYWRhcHRlciA9IG5ldyBhZGFwdGVyX3N5bmNfMS5fU3luY1N0b3JlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hZGFwdGVyc1swXS5hZGFwdGVyID0gdGhpcy5fbW9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLypcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zhc3RSZWFkQWRhcHRlciA9IHRoaXMuYWRhcHRlcnNbMF0uYWRhcHRlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3dSZWFkQWRhcHRlciA9IHRoaXMuYWRhcHRlcnNbMF0uYWRhcHRlcjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYXJncy5zZWNvbmRhcnlBZGFwdGVycyAmJiBhcmdzLnNlY29uZGFyeUFkYXB0ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlcnMgPSB0aGlzLmFkYXB0ZXJzLmNvbmNhdChhcmdzLnNlY29uZGFyeUFkYXB0ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXJzLmZvckVhY2goKGEsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYS5kb0Zhc3RSZWFkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmFzdFJlYWRBZGFwdGVyID0gYS5hZGFwdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLmRvU2xvd1JlYWRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zbG93UmVhZEFkYXB0ZXIgPSBhLmFkYXB0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSovXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpbGl6ZSB0aGUgc3RvcmFnZSBhZGFwdGVyIGFuZCBnZXQgcmVhZHkgdG8gcnVtYmxlIVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RkT2JqZWN0PERhdGFNb2RlbFtdPn0gZGF0YU1vZGVsc1xyXG4gICAgICogQHBhcmFtIHsobmV3TW9kZWxzOiBTdGRPYmplY3Q8RGF0YU1vZGVsW10+KSA9PiB2b2lkfSBjb21wbGV0ZVxyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMU3RvcmFnZVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZGF0YU1vZGVscywgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghdGhpcy5faWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faWQgPSB1dGlsaXRpZXNfMS5oYXNoKEpTT04uc3RyaW5naWZ5KGRhdGFNb2RlbHMpKS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vZGVscyA9IHRoaXMuX2NyZWF0ZVNlY29uZGFyeUluZGV4VGFibGVzKGRhdGFNb2RlbHMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlTmFtZXMgPSBPYmplY3Qua2V5cyh0aGlzLm1vZGVscyk7XHJcbiAgICAgICAgdGhpcy5hZGFwdGVycy5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgIGEuYWRhcHRlci5zZXRJRChfdGhpcy5faWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICAgICAgX3RoaXMuX25ld1RhYmxlKHRhYmxlLCBkYXRhTW9kZWxzW3RhYmxlXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fcmVsRnJvbVRhYmxlID0ge307XHJcbiAgICAgICAgdGhpcy5fcmVsVG9UYWJsZSA9IHt9O1xyXG4gICAgICAgIHRoaXMuX3JlbGF0aW9uQ29sdW1ucyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2NvbHVtbnNBcmVUYWJsZXMgPSB7fTtcclxuICAgICAgICB0aGlzLl90YWJsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHRhYmxlKSB7XHJcbiAgICAgICAgICAgIC8vIGZpbmlzaCB2aWV3cyBkYXRhXHJcbiAgICAgICAgICAgIC8vIGdldHMgYSBsaXN0IG9mIHRhYmxlcyB0aGF0IG5lZWQgdG8gYmUgY2hlY2tlZCBvbiBlYWNoIHJvdyB1cGRhdGUgb2YgdGhpcyB0YWJsZVxyXG4gICAgICAgICAgICBfdGhpcy50YWJsZUluZm9bdGFibGVdLl92aWV3VGFibGVzID0gT2JqZWN0LmtleXMoX3RoaXMudGFibGVJbmZvKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1ciA9PT0gdGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgICAgICAgICAgICB2YXIgdlRhYmxlcyA9IE9iamVjdC5rZXlzKF90aGlzLnRhYmxlSW5mb1tjdXJdLl92aWV3cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodlRhYmxlcy5pbmRleE9mKHRhYmxlKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2LnB1c2goeyB0YWJsZTogY3VyLCBjb2x1bW46IF90aGlzLnRhYmxlSW5mb1tjdXJdLl92aWV3c1t0YWJsZV0ucGtDb2x1bW4gfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICAgICAgfSwgW10pO1xyXG4gICAgICAgICAgICAvLyBmaW5pc2ggT1JNIGFuZCBvdGhlciBzdHVmZlxyXG4gICAgICAgICAgICB2YXIgaSA9IF90aGlzLm1vZGVsc1t0YWJsZV0ubGVuZ3RoO1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVsRnJvbVRhYmxlW3RhYmxlXSA9IHt9O1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVsYXRpb25Db2x1bW5zW3RhYmxlXSA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVsVG9UYWJsZVt0YWJsZV0gPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2NvbHVtbnNBcmVUYWJsZXNbdGFibGVdID0ge307XHJcbiAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSBfdGhpcy5tb2RlbHNbdGFibGVdW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHJlbGF0aW9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl90YWJsZU5hbWVzLmluZGV4T2YocC50eXBlLnJlcGxhY2UoXCJbXVwiLCBcIlwiKSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcFRvXzEgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9jb2x1bW5zQXJlVGFibGVzW3RhYmxlXVtwLmtleV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b1RhYmxlOiBwLnR5cGUucmVwbGFjZShcIltdXCIsIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpc1R5cGU6IHAudHlwZS5pbmRleE9mKFwiW11cIikgPT09IC0xID8gXCJzaW5nbGVcIiA6IFwiYXJyYXlcIlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAucHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcC5wcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbGQgZm9ybWF0IHJlZj0+Y29sdW1uIG9yIHJlZj0+Y29sdW1uW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLmluZGV4T2YoXCJyZWY9PlwiKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBUb18xID0gcC5yZXBsYWNlKFwicmVmPT5cIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXcgZm9ybWF0IG9ybShjb2x1bW4pIG9yIG9ybShjb2x1bW5bXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLmluZGV4T2YoXCJvcm0oXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwVG9fMSA9IHAucmVwbGFjZSgvb3JtXFwoKC4qKVxcKS9nbWksIFwiJDFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwVG9fMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2hhc09STSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVsYXRpb25Db2x1bW5zW3RhYmxlXS5wdXNoKHAua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZWxGcm9tVGFibGVbdGFibGVdW3Aua2V5XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9UYWJsZTogcC50eXBlLnJlcGxhY2UoXCJbXVwiLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9Db2x1bW46IG1hcFRvXzEucmVwbGFjZShcIltdXCIsIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b1R5cGU6IG1hcFRvXzEuaW5kZXhPZihcIltdXCIpID09PSAtMSA/IFwic2luZ2xlXCIgOiBcImFycmF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXNUeXBlOiBwLnR5cGUuaW5kZXhPZihcIltdXCIpID09PSAtMSA/IFwic2luZ2xlXCIgOiBcImFycmF5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIF9sb29wXzEoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3JlbEZyb21UYWJsZSkuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoX3RoaXMuX3JlbEZyb21UYWJsZVt0YWJsZV0pLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbCA9IF90aGlzLl9yZWxGcm9tVGFibGVbdGFibGVdW2NvbHVtbl07XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVsVG9UYWJsZVtyZWwuX3RvVGFibGVdLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzQ29sdW1uOiByZWwuX3RvQ29sdW1uLFxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzVHlwZTogcmVsLl90b1R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgX2Zyb21UYWJsZTogdGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgX2Zyb21Db2x1bW46IGNvbHVtbixcclxuICAgICAgICAgICAgICAgICAgICBfZnJvbVR5cGU6IHJlbC5fdGhpc1R5cGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHRoaXMuYWRhcHRlcnMsIGZ1bmN0aW9uIChhLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIGEuYWRhcHRlci5jb25uZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhLmFkYXB0ZXIuc2V0TlNRTCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGEuYWRhcHRlci5zZXROU1FMKF90aGlzLl9uc3FsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIHBvcHVsYXRlIHRyaWUgZGF0YVxyXG4gICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKF90aGlzLl90cmllSW5kZXhlcyksIGZ1bmN0aW9uICh0YWJsZSwgaSwgdGFibGVEb25lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHJpZUNvbHVtbnMgPSBfdGhpcy5fdHJpZUluZGV4ZXNbdGFibGVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRyaWVDb2x1bW5zKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKHRyaWVDb2x1bW5zKSwgZnVuY3Rpb24gKGNvbHVtbiwgaWksIG5leHRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeFRhYmxlID0gXCJfXCIgKyB0YWJsZSArIFwiX2lkeF9cIiArIGNvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlcnNbMF0uYWRhcHRlci5nZXRJbmRleChpZHhUYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXguZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJpZUluZGV4ZXNbdGFibGVdW2NvbHVtbl0uYWRkV29yZChTdHJpbmcodmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dENvbHVtbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKHRhYmxlRG9uZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZURvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShfdGhpcy5tb2RlbHMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLl9pbnZhbGlkYXRlQ2FjaGUgPSBmdW5jdGlvbiAodGFibGUsIHBrcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9kb0NhY2hlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fY2FjaGVLZXlzW3RhYmxlXSkuZm9yRWFjaChmdW5jdGlvbiAoaGFzaCkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IHBrcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0gJiYgdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fY2FjaGVLZXlzW3RhYmxlXVtoYXNoXVtwa3NbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9jYWNoZVt0YWJsZV1baGFzaF07XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9jYWNoZUtleXNbdGFibGVdW2hhc2hdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlYnVpbGQgc2Vjb25kYXJ5IGluZGV4ZXMgb2YgYSBnaXZlbiB0YWJsZS5cclxuICAgICAqIFBhc3MgXCJfQUxMX1wiIGFzIHRhYmxlIHRvIHJlYnVpbGQgYWxsIGluZGV4ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsodGltZTogbnVtYmVyKSA9PiB2b2lkfSBjb21wbGV0ZVxyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMU3RvcmFnZVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLnJlYnVpbGRJbmRleGVzID0gZnVuY3Rpb24gKHRhYmxlLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTChPYmplY3Qua2V5cyh0aGlzLnRhYmxlSW5mbyksIGZ1bmN0aW9uICh0YSwgaywgdGFibGVEb25lKSB7XHJcbiAgICAgICAgICAgIGlmICgodGFibGUgIT09IFwiX0FMTF9cIiAmJiB0YWJsZSAhPT0gdGEpIHx8IHRhLmluZGV4T2YoXCJfXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZURvbmUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2Vjb25kSW5kZXhlcyA9IF90aGlzLnRhYmxlSW5mb1t0YV0uX3NlY29uZGFyeUluZGV4ZXM7XHJcbiAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoc2Vjb25kSW5kZXhlcywgZnVuY3Rpb24gKGNvbHVtbiwgaiwgaWR4RG9uZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkeFRhYmxlID0gXCJfXCIgKyB0YSArIFwiX2lkeF9cIiArIGNvbHVtbjtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9kcm9wKGlkeFRhYmxlLCBpZHhEb25lKTtcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGsgPSBfdGhpcy50YWJsZUluZm9bdGFdLl9waztcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleEdyb3VwcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgc2Vjb25kSW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleEdyb3Vwc1tjb2x1bW5dID0ge307XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9yZWFkKHRhLCBmdW5jdGlvbiAocm93LCBpZHgsIGRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJvd1twa10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kSW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyb3dbY29sdW1uXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5kZXhHcm91cHNbY29sdW1uXVtyb3dbY29sdW1uXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4R3JvdXBzW2NvbHVtbl1bcm93W2NvbHVtbl1dID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhHcm91cHNbY29sdW1uXVtyb3dbY29sdW1uXV0ucHVzaChyb3dbcGtdKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBkb25lKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAvKnRoaXMuX3NldFNlY29uZGFyeUluZGV4ZXModGEsIHJvd1twa10sIHJvdywgW10sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHNlY29uZEluZGV4ZXMsIGZ1bmN0aW9uIChpdGVtLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHhUYWJsZSA9IFwiX1wiICsgdGEgKyBcIl9pZHhfXCIgKyBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKGluZGV4R3JvdXBzW2l0ZW1dKSwgZnVuY3Rpb24gKHJvd0tleSwgaSwgbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlcldyaXRlKGlkeFRhYmxlLCByb3dLZXksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcm93S2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3M6IGluZGV4R3JvdXBzW2l0ZW1dW3Jvd0tleV0uc29ydCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBuZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihkb25lKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVEb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHVybiBhbnkganMgdmFyaWFibGUgaW50byBhIDMyIGNoYXJhY3RlciBsb25nIHByaW1hcnkga2V5IGZvciBzZWNvbmRhcnkgaW5kZXggdGFibGVzLlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICAgICogQHJldHVybnMgeyhzdHJpbmd8bnVtYmVyKX1cclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlLnByb3RvdHlwZS5fc2Vjb25kYXJ5SW5kZXhLZXkgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodXRpbGl0aWVzXzEuaXNPYmplY3QodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSkuc3Vic3RyKDAsIDEyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpLnN1YnN0cigwLCAzMik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2UgdmFyaW91c2UgbWV0aG9kcyB0byBkZXRlY3QgdGhlIGJlc3QgcGVyc2lzdGVudCBzdG9yYWdlIG1ldGhvZCBmb3IgdGhlIGVudmlyb25tZW50IE5hbm9TUUwgaXMgaW4uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlLnByb3RvdHlwZS5fZGV0ZWN0U3RvcmFnZU1ldGhvZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBOb2RlSlNcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJMVkxcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQnJvd3NlclxyXG4gICAgICAgIC8vIFNhZmFyaSAvIGlPUyBhbHdheXMgZ2V0cyBXZWJTUUwgKG1vYmlsZSBhbmQgZGVza3RvcClcclxuICAgICAgICBpZiAodXRpbGl0aWVzXzEuaXNTYWZhcmkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiV1NRTFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJRSBhbmQgRWRnZSBkb24ndCBzdXBwb3J0IEluZGV4ZWQgREIgd2ViIHdvcmtlcnMsIGFuZCBtYXkgbm90IHN1cHBvcnQgaW5kZXhlZCBkYiBhdCBhbGwuXHJcbiAgICAgICAgaWYgKHV0aWxpdGllc18xLmlzTVNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgaW5kZXhlZERCICE9PSBcInVuZGVmaW5lZFwiID8gXCJJREJcIiA6IFwiTFNcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXZlcnlvbmUgZWxzZSAoRkYgKyBDaHJvbWUpXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIHN1cHBvcnQgZm9yIGluZGV4ZWQgZGIsIHdlYiB3b3JrZXJzIGFuZCBibG9iXHJcbiAgICAgICAgaWYgKFt0eXBlb2YgV29ya2VyLCB0eXBlb2YgQmxvYiwgdHlwZW9mIGluZGV4ZWREQl0uaW5kZXhPZihcInVuZGVmaW5lZFwiKSA9PT0gLTEgJiYgd2luZG93LlVSTCAmJiB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHcgPSBuZXcgV29ya2VyKHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtcInZhciB0ID0gJ3QnO1wiXSkpKTtcclxuICAgICAgICAgICAgICAgIHcucG9zdE1lc3NhZ2UoXCJcIik7XHJcbiAgICAgICAgICAgICAgICB3LnRlcm1pbmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkYklEID0gXCIxMjM0XCI7XHJcbiAgICAgICAgICAgICAgICBpbmRleGVkREIub3BlbihpZGJJRCwgMSk7XHJcbiAgICAgICAgICAgICAgICBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UoaWRiSUQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSURCX1dXXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgLy8gd29ya2VyLCBibG9iLCBvciBpbmRleGVkIERCIGZhaWxlZFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleGVkREIgIT09IFwidW5kZWZpbmVkXCIpIHsgLy8gZmFsbCBiYWNrIHRvIGluZGV4ZWQgZGIgaWYgd2UgY2FuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSURCXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbm90aGluZyBlbHNlIHdvcmtzLCB3ZSBnb3R0YSBkbyBsb2NhbCBzdG9yYWdlLiA6KFxyXG4gICAgICAgIHJldHVybiBcIkxTXCI7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgcm93cyBmcm9tIGEgdGFibGUgZ2l2ZW4gdGhlIGNvbHVtbiBhbmQgc2Vjb25kYXJ5IGluZGV4IHByaW1hcnkga2V5IHRvIHJlYWQgZnJvbS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2x1bW5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcclxuICAgICAqIEBwYXJhbSB7KHJvd3M6IERCUm93W10pID0+IHZvaWR9IGNhbGxiYWNrXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZS5wcm90b3R5cGUuX3NlY29uZGFyeUluZGV4UmVhZCA9IGZ1bmN0aW9uICh0YWJsZSwgY29sdW1uLCBzZWFyY2gsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmFkYXB0ZXJzWzBdLmFkYXB0ZXIucmVhZChcIl9cIiArIHRhYmxlICsgXCJfaWR4X1wiICsgY29sdW1uLCB0aGlzLl9zZWNvbmRhcnlJbmRleEtleShzZWFyY2gpLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgIGlmIChyb3cgIT09IHVuZGVmaW5lZCAmJiByb3cgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9yZWFkKHRhYmxlLCAocm93W1wicm93c1wiXSB8fCBbXSksIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgcmFuZ2Ugb2Ygcm93cyBmcm9tIGEgZ2l2ZW4gdGFibGUuXHJcbiAgICAgKiBJZiB1c2VQS3MgaXMgZmFsc2UgdGhlIHJhbmdlIGlzIGluIGxpbWl0L29mZnNldCBmb3JtIHdoZXJlIHRoZSBmcm9tIGFuZCB0byB2YWx1ZXMgYXJlIG51bWJlcnMgaW5kaWNhdGluZyBhIHJhbmdlIG9mIHJvd3MgdG8gZ2V0LlxyXG4gICAgICogT3RoZXJ3aXNlIHRoZSBmcm9tIGFuZCB0byB2YWx1ZXMgc2hvdWxkIGJlIHByaW1hcnkga2V5IHZhbHVlcyB0byBnZXQgZXZlcnl0aGluZyBpbiBiZXR3ZWVuLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtEQktleX0gZnJvbVxyXG4gICAgICogQHBhcmFtIHtEQktleX0gdG9cclxuICAgICAqIEBwYXJhbSB7KHJvd3M6IERCUm93W10pID0+IHZvaWR9IGNvbXBsZXRlXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZS5wcm90b3R5cGUuX3JhbmdlUmVhZCA9IGZ1bmN0aW9uICh0YWJsZSwgZnJvbSwgdG8sIHVzZVBLcywgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgcm93cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYWRhcHRlcnNbMF0uYWRhcHRlci5yYW5nZVJlYWQodGFibGUsIGZ1bmN0aW9uIChyb3csIGlkeCwgbmV4dCkge1xyXG4gICAgICAgICAgICByb3dzLnB1c2gocm93KTtcclxuICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29tcGxldGUocm93cyk7XHJcbiAgICAgICAgfSwgZnJvbSwgdG8sIHVzZVBLcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdWxsIHRhYmxlIHNjYW4gaWYgYSBmdW5jdGlvbiBpcyBwYXNzZWQgaW4gT1IgcmVhZCBhbiBhcnJheSBvZiBwcmltYXJ5IGtleXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0geyhyb3c6IERCUm93LCBpZHg6IG51bWJlciwgdG9LZWVwOiAocmVzdWx0OiBib29sZWFuKSA9PiB2b2lkKSA9PiB2b2lkfSBxdWVyeVxyXG4gICAgICogQHBhcmFtIHsocm93czogREJSb3dbXSkgPT4gdm9pZH0gY2FsbGJhY2tcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocXVlcnkpKSB7IC8vIHNlbGVjdCBieSBhcnJheSBvZiBwcmltYXJ5IGtleXNcclxuICAgICAgICAgICAgdmFyIGJhdGNoUmVhZCA9IHRoaXMuYWRhcHRlcnNbMF0uYWRhcHRlci5iYXRjaFJlYWQ7XHJcbiAgICAgICAgICAgIGlmIChiYXRjaFJlYWQpIHtcclxuICAgICAgICAgICAgICAgIGJhdGNoUmVhZC5hcHBseSh0aGlzLmFkYXB0ZXJzWzBdLmFkYXB0ZXIsIFt0YWJsZSwgcXVlcnksIGNhbGxiYWNrXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwb3NzaWJseSAoYnV0IG5vdCBhbHdheXMpIHNsb3dlciBmYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTChxdWVyeSwgZnVuY3Rpb24gKHEsIGksIHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXJzWzBdLmFkYXB0ZXIucmVhZCh0YWJsZSwgcSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyb3dzLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gcjsgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcm93cyA9IFtdO1xyXG4gICAgICAgIC8vIGZ1bGwgdGFibGUgc2NhblxyXG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09IFwiZnVuY3Rpb25cIikgeyAvLyBpdGVyYXRlIHRocm91Z2ggZW50aXJlIGRiLCByZXR1cm5pbmcgcm93cyB0aGF0IHJldHVybiB0cnVlIG9uIHRoZSBmdW5jdGlvblxyXG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJzWzBdLmFkYXB0ZXIucmFuZ2VSZWFkKHRhYmxlLCBmdW5jdGlvbiAocm93LCBpZHgsIG5leHRSb3cpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5KHJvdywgaWR4LCBmdW5jdGlvbiAoa2VlcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZWVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MucHVzaChyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXh0Um93KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2socm93cyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCB2YWx1ZXMgaW4gYSB0YWJsZSB3aGVyZSB0aGUgY29sdW1uIHZhbHVlIG1hdGNoZXMgYWdhaW5zdCB0aGUgZ2l2ZW4gdHJpZSBzZWFyY2ggdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sdW1uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXHJcbiAgICAgKiBAcGFyYW0geyhyb3dzOiBEQlJvd1tdICkgPT4gdm9pZH0gY2FsbGJhY2tcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlLnByb3RvdHlwZS5fdHJpZVJlYWQgPSBmdW5jdGlvbiAodGFibGUsIGNvbHVtbiwgc2VhcmNoLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHdvcmRzID0gdGhpcy5fdHJpZUluZGV4ZXNbdGFibGVdW2NvbHVtbl0uZ2V0UHJlZml4KHNlYXJjaCk7XHJcbiAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTCh3b3JkcywgZnVuY3Rpb24gKHcsIGksIHJlc3VsdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fc2Vjb25kYXJ5SW5kZXhSZWFkKHRhYmxlLCBjb2x1bW4sIHcsIHJlc3VsdCk7XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoYXJyYXlPZlJvd3MpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soW10uY29uY2F0LmFwcGx5KFtdLCBhcnJheU9mUm93cykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIHNlY29uZGFyeSBpbmRleCB2YWx1ZXMgb2YgYSBzcGVjaWZpYyByb3cuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVcclxuICAgICAqIEBwYXJhbSB7REJLZXl9IHBrXHJcbiAgICAgKiBAcGFyYW0ge0RCUm93fSByb3dEYXRhXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBza2lwQ29sdW1uc1xyXG4gICAgICogQHBhcmFtIHsoKSA9PiB2b2lkfSBjb21wbGV0ZVxyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMU3RvcmFnZVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLl9jbGVhclNlY29uZGFyeUluZGV4ZXMgPSBmdW5jdGlvbiAodGFibGUsIHBrLCByb3dEYXRhLCBza2lwQ29sdW1ucywgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwodGhpcy50YWJsZUluZm9bdGFibGVdLl9zZWNvbmRhcnlJbmRleGVzLmZpbHRlcihmdW5jdGlvbiAoaWR4KSB7IHJldHVybiBza2lwQ29sdW1ucy5pbmRleE9mKGlkeCkgPT09IC0xOyB9KSwgZnVuY3Rpb24gKGlkeCwgaywgZG9uZSkge1xyXG4gICAgICAgICAgICB2YXIgY29sdW1uID0gX3RoaXMuX3NlY29uZGFyeUluZGV4S2V5KHJvd0RhdGFbaWR4XSk7XHJcbiAgICAgICAgICAgIHZhciBpZHhUYWJsZSA9IFwiX1wiICsgdGFibGUgKyBcIl9pZHhfXCIgKyBpZHg7XHJcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXJzWzBdLmFkYXB0ZXIucmVhZChpZHhUYWJsZSwgY29sdW1uLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHJvdy5yb3dzLmluZGV4T2YocGspO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBuZXdSb3cgPSByb3cgPyBPYmplY3QuaXNGcm96ZW4ocm93KSA/IHV0aWxpdGllc18xLl9hc3NpZ24ocm93KSA6IHJvdyA6IHsgaWQ6IG51bGwsIHJvd3M6IFtdIH07XHJcbiAgICAgICAgICAgICAgICBuZXdSb3cucm93cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBuZXdSb3cucm93cy5zb3J0KCk7XHJcbiAgICAgICAgICAgICAgICBuZXdSb3cucm93cyA9IHV0aWxpdGllc18xLnJlbW92ZUR1cGxpY2F0ZXMobmV3Um93LnJvd3MpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlcldyaXRlKGlkeFRhYmxlLCBuZXdSb3cuaWQsIG5ld1JvdywgZG9uZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4oY29tcGxldGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIHNlY29uZGFyeSBpbmRleCB2YWx1ZXMgZm9yIGEgc3BlY2lmaWMgcm93LlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0RCS2V5fSBwa1xyXG4gICAgICogQHBhcmFtIHtEQlJvd30gcm93RGF0YVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gc2tpcENvbHVtbnNcclxuICAgICAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gY29tcGxldGVcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlLnByb3RvdHlwZS5fc2V0U2Vjb25kYXJ5SW5kZXhlcyA9IGZ1bmN0aW9uICh0YWJsZSwgcGssIHJvd0RhdGEsIHNraXBDb2x1bW5zLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTCh0aGlzLnRhYmxlSW5mb1t0YWJsZV0uX3NlY29uZGFyeUluZGV4ZXMuZmlsdGVyKGZ1bmN0aW9uIChpZHgpIHsgcmV0dXJuIHNraXBDb2x1bW5zLmluZGV4T2YoaWR4KSA9PT0gLTE7IH0pLCBmdW5jdGlvbiAoaWR4LCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSBfdGhpcy5fc2Vjb25kYXJ5SW5kZXhLZXkocm93RGF0YVtpZHhdKTtcclxuICAgICAgICAgICAgaWYgKCFjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3RoaXMuX3RyaWVJbmRleGVzW3RhYmxlXVtpZHhdKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fdHJpZUluZGV4ZXNbdGFibGVdW2lkeF0uYWRkV29yZChTdHJpbmcocm93RGF0YVtpZHhdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGlkeFRhYmxlID0gXCJfXCIgKyB0YWJsZSArIFwiX2lkeF9cIiArIGlkeDtcclxuICAgICAgICAgICAgX3RoaXMuYWRhcHRlcnNbMF0uYWRhcHRlci5yZWFkKGlkeFRhYmxlLCBjb2x1bW4sIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleFJvdyA9IHJvdyA/IChPYmplY3QuaXNGcm96ZW4ocm93KSA/IHV0aWxpdGllc18xLl9hc3NpZ24ocm93KSA6IHJvdykgOiB7IGlkOiBjb2x1bW4sIHJvd3M6IFtdIH07XHJcbiAgICAgICAgICAgICAgICBpbmRleFJvdy5yb3dzLnB1c2gocGspO1xyXG4gICAgICAgICAgICAgICAgaW5kZXhSb3cucm93cy5zb3J0KCk7XHJcbiAgICAgICAgICAgICAgICBpbmRleFJvdy5yb3dzID0gdXRpbGl0aWVzXzEucmVtb3ZlRHVwbGljYXRlcyhpbmRleFJvdy5yb3dzKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXJXcml0ZShpZHhUYWJsZSwgY29sdW1uLCBpbmRleFJvdywgZG9uZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4oY29tcGxldGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYSByb3cgdG8gdGhlIGRhdGFiYXNlXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0RCS2V5fSBwa1xyXG4gICAgICogQHBhcmFtIHsqfSBvbGRSb3dcclxuICAgICAqIEBwYXJhbSB7REJSb3d9IG5ld1Jvd1xyXG4gICAgICogQHBhcmFtIHsocm93OiBEQlJvdykgPT4gdm9pZH0gY29tcGxldGVcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBvbGRSb3csIG5ld1JvdywgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghb2xkUm93KSB7IC8vIG5ldyByb3dcclxuICAgICAgICAgICAgdGhpcy5hZGFwdGVyV3JpdGUodGFibGUsIHBrLCBuZXdSb3csIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy50YWJsZUluZm9bdGFibGVdLl9zZWNvbmRhcnlJbmRleGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRTZWNvbmRhcnlJbmRleGVzKHRhYmxlLCByb3dbX3RoaXMudGFibGVJbmZvW3RhYmxlXS5fcGtdLCBuZXdSb3csIFtdLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShyb3cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7IC8vIGV4aXN0aW5nIHJvd1xyXG4gICAgICAgICAgICB2YXIgc2V0Um93XzEgPSBfX2Fzc2lnbih7fSwgb2xkUm93LCBuZXdSb3csIChfYSA9IHt9LCBfYVt0aGlzLnRhYmxlSW5mb1t0YWJsZV0uX3BrXSA9IHBrLCBfYSkpO1xyXG4gICAgICAgICAgICB2YXIgc2FtZUtleXNfMSA9IE9iamVjdC5rZXlzKHNldFJvd18xKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFJvd18xW2tleV0gPT09IG9sZFJvd1trZXldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFibGVJbmZvW3RhYmxlXS5fc2Vjb25kYXJ5SW5kZXhlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyU2Vjb25kYXJ5SW5kZXhlcyh0YWJsZSwgcGssIG9sZFJvdywgc2FtZUtleXNfMSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRTZWNvbmRhcnlJbmRleGVzKHRhYmxlLCBwaywgc2V0Um93XzEsIHNhbWVLZXlzXzEsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlcldyaXRlKHRhYmxlLCBwaywgc2V0Um93XzEsIGNvbXBsZXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyV3JpdGUodGFibGUsIHBrLCBzZXRSb3dfMSwgY29tcGxldGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfYTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERlbGV0ZSBhIHNwZWNpZmljIHJvdyBmcm9tIHRoZSBkYXRhYmFzZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVcclxuICAgICAqIEBwYXJhbSB7REJLZXl9IHBrXHJcbiAgICAgKiBAcGFyYW0geyhyb3c6IERCUm93KSA9PiB2b2lkfSBjb21wbGV0ZVxyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMU3RvcmFnZVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLl9kZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCFwaykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBkZWxldGUgd2l0aG91dCBhIHByaW1hcnkga2V5IVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBzZWNvbmRhcnkgaW5kZXhlc1xyXG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJzWzBdLmFkYXB0ZXIucmVhZCh0YWJsZSwgcGssIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9jbGVhclNlY29uZGFyeUluZGV4ZXModGFibGUsIHBrLCByb3csIFtdLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZG8gdGhlIGRlbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXJEZWxldGUodGFibGUsIHBrLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRHJvcCBlbnRpcmUgdGFibGUgZnJvbSB0aGUgZGF0YWJhc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0geygpID0+IHZvaWR9IGNvbXBsZXRlXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZS5wcm90b3R5cGUuX2Ryb3AgPSBmdW5jdGlvbiAodGFibGUsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHRoaXMudGFibGVJbmZvW3RhYmxlXS5fc2Vjb25kYXJ5SW5kZXhlcywgZnVuY3Rpb24gKGlkeCwgaSwgZG9uZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyRHJvcChcIl9cIiArIHRhYmxlICsgXCJfaWR4X1wiICsgaWR4LCBkb25lKTtcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3RyaWVJbmRleGVzW3RhYmxlXSA9IHt9O1xyXG4gICAgICAgICAgICBfdGhpcy50YWJsZUluZm9bdGFibGVdLl90cmllQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjbykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3RyaWVJbmRleGVzW3RhYmxlXVtjb10gPSBuZXcgcHJlZml4X3RyaWVfdHNfMS5UcmllKFtdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXJEcm9wKHRhYmxlLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5kIHNlY29uZGFyeSBpbmRleGVzIGFuZCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGFuIGluZGV4IHRhYmxlIGZvciBlYWNoLlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHtTdGRPYmplY3Q8RGF0YU1vZGVsW10+fSBkYXRhTW9kZWxzXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICogQG1lbWJlcm9mIE5hbm9TUUxTdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZS5wcm90b3R5cGUuX2NyZWF0ZVNlY29uZGFyeUluZGV4VGFibGVzID0gZnVuY3Rpb24gKGRhdGFNb2RlbHMpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhkYXRhTW9kZWxzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xyXG4gICAgICAgICAgICB2YXIgaGFzUEsgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGhhc0lEWCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkYXRhTW9kZWxzW3RhYmxlXS5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLnByb3BzICYmIHV0aWxpdGllc18xLmludGVyc2VjdChbXCJwa1wiLCBcInBrKClcIl0sIG1vZGVsLnByb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1BLID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5wcm9wcyAmJiB1dGlsaXRpZXNfMS5pbnRlcnNlY3QoW1widHJpZVwiLCBcImlkeFwiLCBcImlkeCgpXCIsIFwidHJpZSgpXCJdLCBtb2RlbC5wcm9wcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNJRFggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFNb2RlbHNbXCJfXCIgKyB0YWJsZSArIFwiX2lkeF9cIiArIG1vZGVsLmtleV0gPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsga2V5OiBcImlkXCIsIHR5cGU6IFtcIm51bWJlclwiLCBcImZsb2F0XCIsIFwiaW50XCJdLmluZGV4T2YobW9kZWwudHlwZSkgIT09IC0xID8gbW9kZWwudHlwZSA6IFwic3RyaW5nXCIsIHByb3BzOiBbXCJwa1wiXSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGtleTogXCJyb3dzXCIsIHR5cGU6IFwiYW55W11cIiB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChoYXNJRFggJiYgIWhhc1BLKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYWJsZXMgd2l0aCBzZWNvbmRhcnkgaW5kZXhlcyBtdXN0IGhhdmUgYSBwcmltYXJ5IGtleSFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGF0YU1vZGVscztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIHRoZSBkYXRhIG5lZWRlZCB0byBtYW5hZ2UgZWFjaCB0YWJsZSBpbiB0aGUgZGF0YWJhc2VcclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZU5hbWVcclxuICAgICAqIEBwYXJhbSB7RGF0YU1vZGVsW119IGRhdGFNb2RlbHNcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgTmFub1NRTFN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlLnByb3RvdHlwZS5fbmV3VGFibGUgPSBmdW5jdGlvbiAodGFibGVOYW1lLCBkYXRhTW9kZWxzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnRhYmxlSW5mb1t0YWJsZU5hbWVdID0ge1xyXG4gICAgICAgICAgICBfcGs6IFwiXCIsXHJcbiAgICAgICAgICAgIF9wa1R5cGU6IFwiXCIsXHJcbiAgICAgICAgICAgIF9rZXlzOiBbXSxcclxuICAgICAgICAgICAgX2RlZmF1bHRzOiBbXSxcclxuICAgICAgICAgICAgX3NlY29uZGFyeUluZGV4ZXM6IFtdLFxyXG4gICAgICAgICAgICBfdHJpZUNvbHVtbnM6IFtdLFxyXG4gICAgICAgICAgICBfbmFtZTogdGFibGVOYW1lLFxyXG4gICAgICAgICAgICBfdmlld3M6IHt9LFxyXG4gICAgICAgICAgICBfdmlld1RhYmxlczogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuX2NhY2hlW3RhYmxlTmFtZV0gPSB7fTtcclxuICAgICAgICB0aGlzLl9jYWNoZUtleXNbdGFibGVOYW1lXSA9IHt9O1xyXG4gICAgICAgIHRoaXMuX3RyaWVJbmRleGVzW3RhYmxlTmFtZV0gPSB7fTtcclxuICAgICAgICB0aGlzLmFkYXB0ZXJzLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgYS5hZGFwdGVyLm1ha2VUYWJsZSh0YWJsZU5hbWUsIGRhdGFNb2RlbHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIERpc2NvdmVyIHByaW1hcnkga2V5cyBmb3IgZWFjaCB0YWJsZVxyXG4gICAgICAgIHZhciBpID0gdGhpcy5tb2RlbHNbdGFibGVOYW1lXS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIF9sb29wXzIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwID0gdGhpc18xLm1vZGVsc1t0YWJsZU5hbWVdW2ldO1xyXG4gICAgICAgICAgICB0aGlzXzEudGFibGVJbmZvW3RhYmxlTmFtZV0uX2tleXMudW5zaGlmdChwLmtleSk7XHJcbiAgICAgICAgICAgIHRoaXNfMS50YWJsZUluZm9bdGFibGVOYW1lXS5fZGVmYXVsdHNbaV0gPSBwLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIGlmIChwLnByb3BzICYmIHAucHJvcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXMybmRJbmRleF8xID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBwLnByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcC5pbmRleE9mKFwiZnJvbT0+XCIpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5faGFzVmlld3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBwLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wICE9PSBcImZyb209PkdIT1NUXCIgJiYgcHJvcCAhPT0gXCJmcm9tPT5MSVZFXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3AgaXMgXCJmcm9tPT50YWJsZS5jb2x1bW5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUgPSBwcm9wLnJlcGxhY2UoXCJmcm9tPT5cIiwgXCJcIikuc3BsaXQoXCIuXCIpLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy50YWJsZUluZm9bdGFibGVOYW1lXS5fdmlld3NbdGFibGVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50YWJsZUluZm9bdGFibGVOYW1lXS5fdmlld3NbdGFibGVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBrQ29sdW1uOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uczogW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgPT09IFwiZnJvbT0+R0hPU1RcIiB8fCBwcm9wID09PSBcImZyb209PkxJVkVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMybmRJbmRleF8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRhYmxlSW5mb1t0YWJsZU5hbWVdLl92aWV3c1t0YWJsZV0ucGtDb2x1bW4gPSBwLmtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRhYmxlSW5mb1t0YWJsZU5hbWVdLl92aWV3c1t0YWJsZV0ubW9kZSA9IHByb3AucmVwbGFjZShcImZyb209PlwiLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRhYmxlSW5mb1t0YWJsZU5hbWVdLl92aWV3c1t0YWJsZV0uY29sdW1ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzQ29sdW1uOiBwLmtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckNvbHVtbjogcHJvcC5yZXBsYWNlKFwiZnJvbT0+XCIsIFwiXCIpLnNwbGl0KFwiLlwiKS5wb3AoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBwcmltYXJ5IGtleVxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWxpdGllc18xLmludGVyc2VjdChbXCJwa1wiLCBcInBrKClcIl0sIHAucHJvcHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc18xLnRhYmxlSW5mb1t0YWJsZU5hbWVdLl9wayA9IHAua2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfMS50YWJsZUluZm9bdGFibGVOYW1lXS5fcGtUeXBlID0gcC50eXBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHNlY29uZGFyeSBpbmRleGVzXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbGl0aWVzXzEuaW50ZXJzZWN0KFtcInRyaWVcIiwgXCJpZHhcIiwgXCJpZHgoKVwiLCBcInRyaWUoKVwiXSwgcC5wcm9wcykgfHwgaXMybmRJbmRleF8xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc18xLnRhYmxlSW5mb1t0YWJsZU5hbWVdLl9zZWNvbmRhcnlJbmRleGVzLnB1c2gocC5rZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHRyaWUgaW5kZXhlc1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWxpdGllc18xLmludGVyc2VjdChbXCJ0cmllXCIsIFwidHJpZSgpXCJdLCBwLnByb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfMS50YWJsZUluZm9bdGFibGVOYW1lXS5fdHJpZUNvbHVtbnMucHVzaChwLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc18xLl90cmllSW5kZXhlc1t0YWJsZU5hbWVdW3Aua2V5XSA9IG5ldyBwcmVmaXhfdHJpZV90c18xLlRyaWUoW10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIF9sb29wXzIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhYmxlTmFtZTtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLmFkYXB0ZXJXcml0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgcGssIGRhdGEsIGNvbXBsZXRlLCBlcnJvcikge1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgdXRpbGl0aWVzXzEuZmFzdEFMTCh0aGlzLmFkYXB0ZXJzLCBmdW5jdGlvbiAoYSwgaSwgZG9uZSkge1xyXG4gICAgICAgICAgICBpZiAoYS53YWl0Rm9yV3JpdGVzKSB7XHJcbiAgICAgICAgICAgICAgICBhLmFkYXB0ZXIud3JpdGUodGFibGUsIHBrLCBkYXRhLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcm93O1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgYS5hZGFwdGVyLndyaXRlKHRhYmxlLCBwaywgZGF0YSwgZnVuY3Rpb24gKHJvdykgeyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShyZXN1bHQpO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLmFkYXB0ZXJEZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIHBrLCBjb21wbGV0ZSwgZXJyb3IpIHtcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHRoaXMuYWRhcHRlcnMsIGZ1bmN0aW9uIChhLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIGlmIChhLndhaXRGb3JXcml0ZXMpIHtcclxuICAgICAgICAgICAgICAgIGEuYWRhcHRlci5kZWxldGUodGFibGUsIHBrLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgICAgICBhLmFkYXB0ZXIuZGVsZXRlKHRhYmxlLCBwaywgZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTFN0b3JhZ2UucHJvdG90eXBlLmFkYXB0ZXJEcm9wID0gZnVuY3Rpb24gKHRhYmxlLCBjb21wbGV0ZSwgZXJyb3IpIHtcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHRoaXMuYWRhcHRlcnMsIGZ1bmN0aW9uIChhLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIGlmIChhLndhaXRGb3JXcml0ZXMpIHtcclxuICAgICAgICAgICAgICAgIGEuYWRhcHRlci5kcm9wKHRhYmxlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgICAgICBhLmFkYXB0ZXIuZHJvcCh0YWJsZSwgZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX05hbm9TUUxTdG9yYWdlO1xyXG59KCkpO1xyXG5leHBvcnRzLl9OYW5vU1FMU3RvcmFnZSA9IF9OYW5vU1FMU3RvcmFnZTtcclxuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcclxudmFyIHV0aWxpdGllc18xID0gcmVxdWlyZShcIi4uL3V0aWxpdGllc1wiKTtcclxudmFyIHF1ZXJ5T2JqID0ge1xyXG4gICAgc2VsZWN0OiBmdW5jdGlvbiAoc2VsZiwgbmV4dCkge1xyXG4gICAgICAgIHNlbGYuX3NlbGVjdChuZXh0KTtcclxuICAgIH0sXHJcbiAgICB1cHNlcnQ6IGZ1bmN0aW9uIChzZWxmLCBuZXh0KSB7XHJcbiAgICAgICAgc2VsZi5fdXBzZXJ0KG5leHQpO1xyXG4gICAgfSxcclxuICAgIGRlbGV0ZTogZnVuY3Rpb24gKHNlbGYsIG5leHQpIHtcclxuICAgICAgICBzZWxmLl9kZWxldGUobmV4dCk7XHJcbiAgICB9LFxyXG4gICAgZHJvcDogZnVuY3Rpb24gKHNlbGYsIG5leHQpIHtcclxuICAgICAgICBzZWxmLl9kcm9wKG5leHQpO1xyXG4gICAgfSxcclxuICAgIFwic2hvdyB0YWJsZXNcIjogZnVuY3Rpb24gKHNlbGYsIG5leHQpIHtcclxuICAgICAgICBzZWxmLl9xdWVyeS5yZXN1bHQgPSBPYmplY3Qua2V5cyhzZWxmLl9zdG9yZS50YWJsZUluZm8pO1xyXG4gICAgICAgIG5leHQoc2VsZi5fcXVlcnkpO1xyXG4gICAgfSxcclxuICAgIGRlc2NyaWJlOiBmdW5jdGlvbiAoc2VsZiwgbmV4dCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZi5fcXVlcnkudGFibGUgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbmV4dChzZWxmLl9xdWVyeSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZi5fcXVlcnkucmVzdWx0ID0gdXRpbGl0aWVzXzEuX2Fzc2lnbihzZWxmLl9zdG9yZS5tb2RlbHNbc2VsZi5fcXVlcnkudGFibGVdKTtcclxuICAgICAgICBuZXh0KHNlbGYuX3F1ZXJ5KTtcclxuICAgIH0sXHJcbn07XHJcbi8qKlxyXG4gKiBBIG5ldyBTdG9yYWdlIFF1ZXJ5IGNsYXNzIGlzIGluaWxpdGl6ZWQgZm9yIGV2ZXJ5IHF1ZXJ5LCBwZXJmb3JtaW5nIHRoZSBhY3Rpb25zXHJcbiAqIGFnYWluc3QgdGhlIHN0b3JhZ2UgY2xhc3MgaXRzZWxmIHRvIGdldCB0aGUgZGVzaXJlZCBvdXRjb21lLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBfTmFub1NRTFN0b3JhZ2VRdWVyeVxyXG4gKi9cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbnZhciBfTmFub1NRTFN0b3JhZ2VRdWVyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5KF9zdG9yZSkge1xyXG4gICAgICAgIHRoaXMuX3N0b3JlID0gX3N0b3JlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlIHRoZSBxdWVyeSBhZ2FpbnN0IHRoaXMgY2xhc3MuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJZGJRdWVyeX0gcXVlcnlcclxuICAgICAqIEBwYXJhbSB7KHE6IElkYlF1ZXJ5KSA9PiB2b2lkfSBuZXh0XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5LnByb3RvdHlwZS5kb1F1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5LCBuZXh0KSB7XHJcbiAgICAgICAgdGhpcy5fcXVlcnkgPSBxdWVyeTtcclxuICAgICAgICB0aGlzLl9pc0luc3RhbmNlVGFibGUgPSBBcnJheS5pc0FycmF5KHF1ZXJ5LnRhYmxlKTtcclxuICAgICAgICBxdWVyeU9ialtxdWVyeS5hY3Rpb25dKHRoaXMsIG5leHQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0cmVpdmUgdGhlIHNlbGVjdGVkIHJvd3MgZm9yIHRoaXMgcXVlcnksIHdvcmtzIGZvciBpbnN0YW5jZSB0YWJsZXMgYW5kIHN0YW5kYXJkIG9uZXMuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0geyhyb3dzOiBEQlJvd1tdKSA9PiB2b2lkfSBjb21wbGV0ZVxyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5LnByb3RvdHlwZS5fZ2V0Um93cyA9IGZ1bmN0aW9uIChjb21wbGV0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0luc3RhbmNlVGFibGUpIHtcclxuICAgICAgICAgICAgbmV3IEluc3RhbmNlU2VsZWN0aW9uKHRoaXMuX3F1ZXJ5KS5nZXRSb3dzKGNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ldyBfUm93U2VsZWN0aW9uKHRoaXMuX3F1ZXJ5LCB0aGlzLl9zdG9yZSwgZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHJvd3MuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByOyB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfTmFub1NRTFN0b3JhZ2VRdWVyeS5wcm90b3R5cGUuX3NldENhY2hlID0gZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX3N0b3JlLl9jYWNoZVt0aGlzLl9xdWVyeS50YWJsZV1bdGhpcy5faGFzaF0gPSByb3dzO1xyXG4gICAgICAgIC8vIHN0b3JlIHByaW1hcnkga2V5cyBmb3IgdGhpcyBjYWNoZSwgdXNlZCBmb3IgY2FjaGUgaW52YWxpZGF0aW9uXHJcbiAgICAgICAgdGhpcy5fc3RvcmUuX2NhY2hlS2V5c1t0aGlzLl9xdWVyeS50YWJsZV1bdGhpcy5faGFzaF0gPSB7fTtcclxuICAgICAgICByb3dzLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3N0b3JlLl9jYWNoZUtleXNbX3RoaXMuX3F1ZXJ5LnRhYmxlXVtfdGhpcy5faGFzaF1bcltfdGhpcy5fc3RvcmUudGFibGVJbmZvW190aGlzLl9xdWVyeS50YWJsZV0uX3BrXV0gPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlsemUgYSBTRUxFQ1QgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0geyhxOiBJZGJRdWVyeSkgPT4gdm9pZH0gbmV4dFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFN0b3JhZ2VRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFN0b3JhZ2VRdWVyeS5wcm90b3R5cGUuX3NlbGVjdCA9IGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9oYXNoID0gdXRpbGl0aWVzXzEuaGFzaChKU09OLnN0cmluZ2lmeShfX2Fzc2lnbih7fSwgdGhpcy5fcXVlcnksIHsgcXVlcnlJRDogbnVsbCB9KSkpO1xyXG4gICAgICAgIHZhciBjYW5DYWNoZSA9ICF0aGlzLl9xdWVyeS5qb2luICYmICF0aGlzLl9xdWVyeS5vcm0gJiYgdGhpcy5fc3RvcmUuX2RvQ2FjaGUgJiYgIUFycmF5LmlzQXJyYXkodGhpcy5fcXVlcnkudGFibGUpO1xyXG4gICAgICAgIC8vIFF1ZXJ5IGNhY2hlIGZvciB0aGUgd2luIVxyXG4gICAgICAgIC8qaWYgKGNhbkNhY2hlICYmIHRoaXMuX3N0b3JlLl9jYWNoZVt0aGlzLl9xdWVyeS50YWJsZSBhcyBhbnldW3RoaXMuX2hhc2hdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5LnJlc3VsdCA9IHRoaXMuX3N0b3JlLl9jYWNoZVt0aGlzLl9xdWVyeS50YWJsZSBhcyBhbnldW3RoaXMuX2hhc2hdO1xyXG4gICAgICAgICAgICBuZXh0KHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0qL1xyXG4gICAgICAgIHRoaXMuX2dldFJvd3MoZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgLy8gTm8gcXVlcnkgYXJndW1lbnRzLCB3ZSBjYW4gc2tpcCB0aGUgd2hvbGUgbXV0YXRpb24gc2VsZWN0aW9uIGNsYXNzXHJcbiAgICAgICAgICAgIGlmICghW1wiaGF2aW5nXCIsIFwib3JkZXJCeVwiLCBcIm9mZnNldFwiLCBcImxpbWl0XCIsIFwiYWN0aW9uQXJnc1wiLCBcImdyb3VwQnlcIiwgXCJvcm1cIiwgXCJqb2luXCJdLmZpbHRlcihmdW5jdGlvbiAoaykgeyByZXR1cm4gX3RoaXMuX3F1ZXJ5W2tdOyB9KS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5DYWNoZSlcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0Q2FjaGUocm93cyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fcXVlcnkucmVzdWx0ID0gcm93cztcclxuICAgICAgICAgICAgICAgIG5leHQoX3RoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ldyBfTXV0YXRlU2VsZWN0aW9uKF90aGlzLl9xdWVyeSwgX3RoaXMuX3N0b3JlKS5fZXhlY3V0ZVF1ZXJ5QXJndW1lbnRzKHJvd3MsIGZ1bmN0aW9uIChyZXN1bHRSb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbkNhY2hlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0Q2FjaGUocm93cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3F1ZXJ5LnJlc3VsdCA9IHJlc3VsdFJvd3M7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dChfdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfTmFub1NRTFN0b3JhZ2VRdWVyeS5wcm90b3R5cGUuX3VwZGF0ZU9STVJvd3MgPSBmdW5jdGlvbiAocmVsYXRpb24sIGZyb21QS3MsIGFkZCwgcHJpbWFyeUtleSwgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmcm9tUGsgPSB0aGlzLl9zdG9yZS50YWJsZUluZm9bcmVsYXRpb24uX2Zyb21UYWJsZV0uX3BrO1xyXG4gICAgICAgIHRoaXMuX3N0b3JlLl9yZWFkKHJlbGF0aW9uLl9mcm9tVGFibGUsIGZyb21QS3MsIGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwocm93cywgZnVuY3Rpb24gKHJvdywgaSwgcm93RG9uZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1JvdyA9IE9iamVjdC5pc0Zyb3plbihyb3cpID8gdXRpbGl0aWVzXzEuX2Fzc2lnbihyb3cpIDogcm93O1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aW9uLl9mcm9tVHlwZSA9PT0gXCJhcnJheVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Um93W3JlbGF0aW9uLl9mcm9tQ29sdW1uXSA9IG5ld1Jvd1tyZWxhdGlvbi5fZnJvbUNvbHVtbl0gfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkeE9mID0gbmV3Um93W3JlbGF0aW9uLl9mcm9tQ29sdW1uXS5pbmRleE9mKHByaW1hcnlLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGQpIHsgLy8gYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHhPZiA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Jvd1tyZWxhdGlvbi5fZnJvbUNvbHVtbl0ucHVzaChwcmltYXJ5S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0RvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHsgLy8gcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHhPZiAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Jvd1tyZWxhdGlvbi5fZnJvbUNvbHVtbl0uc3BsaWNlKGlkeE9mLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0RvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXdSb3dbcmVsYXRpb24uX2Zyb21Db2x1bW5dLnNvcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGQpIHsgLy8gYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Jvd1tyZWxhdGlvbi5fZnJvbUNvbHVtbl0gPSBwcmltYXJ5S2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHsgLy8gcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Jvd1tyZWxhdGlvbi5fZnJvbUNvbHVtbl0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLl9zdG9yZS5fbnNxbC5xdWVyeShcInVwc2VydFwiLCBuZXdSb3cpLmNvbW1lbnQoXCJfb3JtX3NraXBcIikubWFudWFsRXhlYyh7IHRhYmxlOiByZWxhdGlvbi5fZnJvbVRhYmxlIH0pLnRoZW4ocm93RG9uZSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oY29tcGxldGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5LnByb3RvdHlwZS5fc3luY09STSA9IGZ1bmN0aW9uICh0eXBlLCBvbGRSb3dzLCBuZXdSb3dzLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zdG9yZS5faGFzT1JNKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHVzZVJlbGF0aW9ucyA9IHRoaXMuX3N0b3JlLl9yZWxUb1RhYmxlW3RoaXMuX3F1ZXJ5LnRhYmxlXTtcclxuICAgICAgICBpZiAodGhpcy5fcXVlcnkuY29tbWVudHMuaW5kZXhPZihcIl9vcm1fc2tpcFwiKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXVzZVJlbGF0aW9ucyB8fCAhdXNlUmVsYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGdvIG92ZXIgZXZlcnkgcmVsYXRpb24gYW5kIGV2ZXJ5IGNoYW5nZWQgcm93IHRvIG1ha2UgdGhlIG5lZWRlZCB1cGRhdGVzLlxyXG4gICAgICAgIHZhciBjbnQgPSBNYXRoLm1heChvbGRSb3dzLmxlbmd0aCwgbmV3Um93cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBhcnJhID0gW107XHJcbiAgICAgICAgd2hpbGUgKGNudC0tKVxyXG4gICAgICAgICAgICBhcnJhLnB1c2goXCIgXCIpO1xyXG4gICAgICAgIHV0aWxpdGllc18xLmZhc3RDSEFJTihhcnJhLCBmdW5jdGlvbiAodiwgaWR4LCByb3dEb25lKSB7XHJcbiAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwodXNlUmVsYXRpb25zLCBmdW5jdGlvbiAocmVsYXRpb24sIGssIHJlbGF0aW9uRG9uZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVxdWFscyA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsMSkgJiYgQXJyYXkuaXNBcnJheSh2YWwyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsMS5sZW5ndGggIT09IHZhbDIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDEuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiB2ICE9PSB2YWwyW2ldOyB9KS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDEgPT09IHZhbDI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbFByaW1hcnlrZXkgPSBvbGRSb3dzW2lkeF1bX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1tfdGhpcy5fcXVlcnkudGFibGVdLl9wa107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVJRHMgPSByZWxhdGlvbi5fdGhpc1R5cGUgPT09IFwiYXJyYXlcIiA/IChvbGRSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dIHx8IFtdKSA6IChbb2xkUm93c1tpZHhdW3JlbGF0aW9uLl90aGlzQ29sdW1uXV0uZmlsdGVyKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2OyB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVPUk1Sb3dzKHJlbGF0aW9uLCB1cGRhdGVJRHMsIGZhbHNlLCBkZWxQcmltYXJ5a2V5LCByZWxhdGlvbkRvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWRkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmltYXJ5S2V5XzEgPSBuZXdSb3dzW2lkeF1bX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1tfdGhpcy5fcXVlcnkudGFibGVdLl9wa107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc3NpYmx5IHVwZGF0ZSBleGlzdGluZyByZWxhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBhZGRpbmcgb2xkUm93c1tpZHhdIGlzIHBvc3NpYmx5IHVuZGVmaW5lZCAoaWYgdGhlcmVzIG5vIHByZXZpb3VzZSByb3cgcmVjb3JkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkUm93c1tpZHhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmV2aW91c2UgcmVjb3JkIGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFscyhvbGRSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dLCBuZXdSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBuZWVkZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGlvbkRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWxhdGlvbi5fdGhpc1R5cGUgPT09IFwiYXJyYXlcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkSWRzID0gKG5ld1Jvd3NbaWR4XVtyZWxhdGlvbi5fdGhpc0NvbHVtbl0gfHwgW10pLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gKG9sZFJvd3NbaWR4XVtyZWxhdGlvbi5fdGhpc0NvbHVtbl0gfHwgW10pLmluZGV4T2YodikgPT09IC0xOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZUlkcyA9IChvbGRSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChuZXdSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dIHx8IFtdKS5pbmRleE9mKHYpID09PSAtMTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoW2FkZElkcywgcmVtb3ZlSWRzXSwgZnVuY3Rpb24gKGxpc3QsIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVPUk1Sb3dzKHJlbGF0aW9uLCBsaXN0LCBpID09PSAwLCBwcmltYXJ5S2V5XzEsIGRvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKHJlbGF0aW9uRG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkUmVsYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgbmV3IHJlbGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Um93c1tpZHhdW3JlbGF0aW9uLl90aGlzQ29sdW1uXSAhPT0gbnVsbCAmJiBuZXdSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlT1JNUm93cyhyZWxhdGlvbiwgW25ld1Jvd3NbaWR4XVtyZWxhdGlvbi5fdGhpc0NvbHVtbl1dLCB0cnVlLCBwcmltYXJ5S2V5XzEsIHJlbGF0aW9uRG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBuZXcgcmVsYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGlvbkRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBjb25uZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dICE9PSBudWxsICYmIG9sZFJvd3NbaWR4XVtyZWxhdGlvbi5fdGhpc0NvbHVtbl0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZU9STVJvd3MocmVsYXRpb24sIFtvbGRSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dXSwgZmFsc2UsIHByaW1hcnlLZXlfMSwgYWRkUmVsYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm8gb2xkIGNvbm5lY3Rpb24sIGp1c3QgYWRkIHRoZSBuZXcgb25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRSZWxhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBuZXcgcmVsYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb0FkZCA9IHJlbGF0aW9uLl90aGlzVHlwZSA9PT0gXCJhcnJheVwiID8gKG5ld1Jvd3NbaWR4XVtyZWxhdGlvbi5fdGhpc0NvbHVtbl0gfHwgW10pIDogKFtuZXdSb3dzW2lkeF1bcmVsYXRpb24uX3RoaXNDb2x1bW5dXS5maWx0ZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHY7IH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNUb0FkZCAmJiB2YWx1ZXNUb0FkZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlT1JNUm93cyhyZWxhdGlvbiwgdmFsdWVzVG9BZGQsIHRydWUsIHByaW1hcnlLZXlfMSwgcmVsYXRpb25Eb25lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uRG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS50aGVuKHJvd0RvbmUpO1xyXG4gICAgICAgIH0pLnRoZW4oY29tcGxldGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRm9yIGVhY2ggdXBkYXRlZCByb3csIHVwZGF0ZSB2aWV3IGNvbHVtbnMgZnJvbSByZW1vdGUgcmVjb3JkcyB0aGF0IGFyZSByZWxhdGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSByb3dzXHJcbiAgICAgKiBAcGFyYW0geygpID0+IHZvaWR9IGNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5LnByb3RvdHlwZS5fdXBkYXRlUm93Vmlld3MgPSBmdW5jdGlvbiAobmV3Um93RGF0YSwgZXhpc3RpbmdSb3csIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMuX3N0b3JlLl9oYXNWaWV3cykge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShuZXdSb3dEYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBub3RoaW5nIHRvIHVwZGF0ZVxyXG4gICAgICAgIGlmIChuZXdSb3dEYXRhID09PSBudWxsIHx8IG5ld1Jvd0RhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZShuZXdSb3dEYXRhIHx8IHt9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKHRoaXMuX3N0b3JlLnRhYmxlSW5mb1t0aGlzLl9xdWVyeS50YWJsZV0uX3ZpZXdzKSwgZnVuY3Rpb24gKHRhYmxlLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIHZhciBwayA9IF90aGlzLl9zdG9yZS50YWJsZUluZm9bX3RoaXMuX3F1ZXJ5LnRhYmxlXS5fdmlld3NbdGFibGVdLnBrQ29sdW1uO1xyXG4gICAgICAgICAgICAvLyByZWZlcmVuY2UvcGsgY29sdW1uIGlzbid0IGJlaW5nIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgIGlmIChuZXdSb3dEYXRhW3BrXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbm8gY2hhbmdlcyBpbiByZWZlcmVuY2UsIHNraXAgcXVlcnkgYW5kIHVwYXRlXHJcbiAgICAgICAgICAgIGlmIChuZXdSb3dEYXRhW3BrXSA9PT0gZXhpc3RpbmdSb3dbcGtdKSB7XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVtb3ZlIHJlZmVyZW5jZVxyXG4gICAgICAgICAgICBpZiAobmV3Um93RGF0YVtwa10gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9zdG9yZS50YWJsZUluZm9bX3RoaXMuX3F1ZXJ5LnRhYmxlXS5fdmlld3NbdGFibGVdLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Um93RGF0YVtjb2wudGhpc0NvbHVtbl0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZ2V0IHJlZmVyZW5jZSByZWNvcmQgYW5kIGNvcHkgZXZlcnl0aGluZyBvdmVyXHJcbiAgICAgICAgICAgIF90aGlzLl9zdG9yZS5fcmVhZCh0YWJsZSwgW25ld1Jvd0RhdGFbcGtdXSwgZnVuY3Rpb24gKHJlZlJvd3MpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlY29yZCBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlZlJvd3MubGVuZ3RoICYmIF90aGlzLl9zdG9yZS50YWJsZUluZm9bX3RoaXMuX3F1ZXJ5LnRhYmxlXS5fdmlld3NbdGFibGVdLm1vZGUgPT09IFwiTElWRVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1tfdGhpcy5fcXVlcnkudGFibGVdLl92aWV3c1t0YWJsZV0uY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Um93RGF0YVtjb2wudGhpc0NvbHVtbl0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyByZWNvcmQgZXhpc3RzLCBjb3B5IG92ZXIgZGF0YVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1tfdGhpcy5fcXVlcnkudGFibGVdLl92aWV3c1t0YWJsZV0uY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdSb3dEYXRhW2NvbC50aGlzQ29sdW1uXSA9IHJlZlJvd3NbMF1bY29sLm90aGVyQ29sdW1uXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29tcGxldGUobmV3Um93RGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHbyB0byB0YWJsZXMgdGhhdCBoYXZlIHZpZXdzIHBvaW50aW5nIHRvIHRoaXMgb25lLCBhbmQgdXBkYXRlIHRoZWlyIHJlY29yZHMuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7YW55W119IHVwZGF0ZWRSb3dzXHJcbiAgICAgKiBAcGFyYW0geygpID0+IHZvaWR9IGNvbXBsZXRlXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlUXVlcnlcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlUXVlcnkucHJvdG90eXBlLl91cGRhdGVSZW1vdGVWaWV3cyA9IGZ1bmN0aW9uICh1cGRhdGVkUm93cywgZG9EZWwsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcGsgPSB0aGlzLl9zdG9yZS50YWJsZUluZm9bdGhpcy5fcXVlcnkudGFibGVdLl9waztcclxuICAgICAgICAvLyBmb3IgZXZlcnkgdXBkYXRlZCByb3dcclxuICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHVwZGF0ZWRSb3dzLCBmdW5jdGlvbiAocm93LCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIC8vIHNjYW4gYWxsIHJlbGF0ZWQgdGFibGVzIGZvciByZWNvcmRzIGF0dGFjaGVkXHJcbiAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1tfdGhpcy5fcXVlcnkudGFibGVdLl92aWV3VGFibGVzLCBmdW5jdGlvbiAodmlldywgaSwgcm93RG9uZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIHdpdGggZWNobyBtb2RlLCBza2lwIHJlbW92aW5nIHJlY29yZHNcclxuICAgICAgICAgICAgICAgIGlmIChkb0RlbCAmJiBfdGhpcy5fc3RvcmUudGFibGVJbmZvW3ZpZXcudGFibGVdLl92aWV3c1tfdGhpcy5fcXVlcnkudGFibGVdLm1vZGUgPT09IFwiR0hPU1RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd0RvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmUuX3NlY29uZGFyeUluZGV4UmVhZCh2aWV3LnRhYmxlLCB2aWV3LmNvbHVtbiwgcm93W3BrXSwgZnVuY3Rpb24gKHJlbGF0ZWRSb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90aGluZyB0byB1cGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlbGF0ZWRSb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dEb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSBfdGhpcy5fc3RvcmUudGFibGVJbmZvW3ZpZXcudGFibGVdLl92aWV3c1tfdGhpcy5fcXVlcnkudGFibGVdLmNvbHVtbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbFBLID0gX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1t2aWV3LnRhYmxlXS5fdmlld3NbX3RoaXMuX3F1ZXJ5LnRhYmxlXS5wa0NvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHJlY29yZHNcclxuICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHJlbGF0ZWRSb3dzLCBmdW5jdGlvbiAoclJvdywgaiwgckRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBjb2x1bW5zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb0RlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9zdG9yZS50YWJsZUluZm9bdmlldy50YWJsZV0uX3ZpZXdzW190aGlzLl9xdWVyeS50YWJsZV0ubW9kZSA9PT0gXCJMSVZFXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgclJvd1tyZWxQS10gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgclJvd1tjb2x1bW5zW2ldLm90aGVyQ29sdW1uXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyUm93W2NvbHVtbnNbaV0ub3RoZXJDb2x1bW5dICE9PSByb3dbY29sdW1uc1tpXS50aGlzQ29sdW1uXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByUm93W2NvbHVtbnNbaV0ub3RoZXJDb2x1bW5dID0gcm93W2NvbHVtbnNbaV0udGhpc0NvbHVtbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkb1VwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgckRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgclBrID0gX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1t2aWV3LnRhYmxlXS5fcGs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdG9yZS5hZGFwdGVyV3JpdGUodmlldy50YWJsZSwgclJvd1tyUGtdLCByUm93LCByRG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihyb3dEb25lKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KS50aGVuKGRvbmUpO1xyXG4gICAgICAgIH0pLnRoZW4oY29tcGxldGUpO1xyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5LnByb3RvdHlwZS5fZG9BZnRlclF1ZXJ5ID0gZnVuY3Rpb24gKG5ld1Jvd3MsIGRvRGVsLCBuZXh0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBubyB2aWV3cyBhdCBhbGwgT1IgdGhpcyB0YWJsZSBkb2Vzbid0IGhhdmUgYW55IHZpZXdzIHBvaW50aW5nIHRvIGl0LlxyXG4gICAgICAgIGlmICghdGhpcy5fc3RvcmUuX2hhc1ZpZXdzIHx8ICF0aGlzLl9zdG9yZS50YWJsZUluZm9bdGhpcy5fcXVlcnkudGFibGVdLl92aWV3VGFibGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBuZXh0KHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91cGRhdGVSZW1vdGVWaWV3cyhuZXdSb3dzLCBkb0RlbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXh0KF90aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWxpemUgYW4gVVBTRVJUIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHsocTogSWRiUXVlcnkpID0+IHZvaWR9IG5leHRcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlUXVlcnlcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlUXVlcnkucHJvdG90eXBlLl91cHNlcnQgPSBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBrID0gdGhpcy5fc3RvcmUudGFibGVJbmZvW3RoaXMuX3F1ZXJ5LnRhYmxlXS5fcGs7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5zdGFuY2VUYWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nZXRSb3dzKGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fcXVlcnkucmVzdWx0ID0gX3RoaXMuX3F1ZXJ5LnRhYmxlLm1hcChmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dzLmluZGV4T2YocikgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIF90aGlzLl9xdWVyeS5hY3Rpb25BcmdzLCByKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbmV4dChfdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fcXVlcnkud2hlcmUpIHsgLy8gaGFzIHdoZXJlIHN0YXRlbWVudCwgc2VsZWN0IHJvd3MgdGhlbiBtb2RpZnkgdGhlbVxyXG4gICAgICAgICAgICB0aGlzLl9nZXRSb3dzKGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4ocm93cywgZnVuY3Rpb24gKHIsIGksIHJvd0RvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZVJvd1ZpZXdzKF90aGlzLl9xdWVyeS5hY3Rpb25BcmdzIHx8IHt9LCByLCBmdW5jdGlvbiAodXBkYXRlZENvbHVtbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdG9yZS5fd3JpdGUoX3RoaXMuX3F1ZXJ5LnRhYmxlLCByW3BrXSwgciwgdXBkYXRlZENvbHVtbnMsIHJvd0RvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChuZXdSb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueSBjaGFuZ2VzIHRvIHRoaXMgdGFibGUgaW52YWxpZGF0ZXMgdGhlIGNhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwa3MgPSBuZXdSb3dzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gcltwa107IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmUuX2ludmFsaWRhdGVDYWNoZShfdGhpcy5fcXVlcnkudGFibGUsIHBrcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9xdWVyeS5yZXN1bHQgPSBbeyBtc2c6IG5ld1Jvd3MubGVuZ3RoICsgXCIgcm93KHMpIG1vZGZpZWQuXCIsIGFmZmVjdGVkUm93UEtTOiBwa3MsIGFmZmVjdGVkUm93czogbmV3Um93cyB9XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N5bmNPUk0oXCJhZGRcIiwgcm93cywgbmV3Um93cywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RvQWZ0ZXJRdWVyeShuZXdSb3dzLCBmYWxzZSwgbmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3F1ZXJ5LnJlc3VsdCA9IFt7IG1zZzogXCIwIHJvdyhzKSBtb2RmaWVkLlwiLCBhZmZlY3RlZFJvd1BLUzogW10sIGFmZmVjdGVkUm93czogW10gfV07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dChfdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7IC8vIG5vIHdoZXJlIHN0YXRlbWVudCwgcGVyZm9ybSBkaXJlY3QgdXBzZXJ0XHJcbiAgICAgICAgICAgIHZhciByb3dfMSA9IHRoaXMuX3F1ZXJ5LmFjdGlvbkFyZ3MgfHwge307XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3JlLl9jYWNoZVt0aGlzLl9xdWVyeS50YWJsZV0gPSB7fTtcclxuICAgICAgICAgICAgdmFyIHdyaXRlXzEgPSBmdW5jdGlvbiAob2xkUm93KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlUm93Vmlld3Mocm93XzEsIG9sZFJvdywgZnVuY3Rpb24gKHVwZGF0ZWRDb2x1bW5zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLl93cml0ZShfdGhpcy5fcXVlcnkudGFibGUsIHJvd18xW3BrXSwgb2xkUm93LCB1cGRhdGVkQ29sdW1ucywgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcXVlcnkucmVzdWx0ID0gW3sgbXNnOiBcIjEgcm93IGluc2VydGVkLlwiLCBhZmZlY3RlZFJvd1BLUzogW3Jlc3VsdFtwa11dLCBhZmZlY3RlZFJvd3M6IFtyZXN1bHRdIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3N0b3JlLl9oYXNPUk0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zeW5jT1JNKFwiYWRkXCIsIFtvbGRSb3ddLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gcjsgfSksIFtyZXN1bHRdLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RvQWZ0ZXJRdWVyeShbcmVzdWx0XSwgZmFsc2UsIG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZG9BZnRlclF1ZXJ5KFtyZXN1bHRdLCBmYWxzZSwgbmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAocm93XzFbcGtdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JlLl9yZWFkKHRoaXMuX3F1ZXJ5LnRhYmxlLCBbcm93XzFbcGtdXSwgZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVfMShyb3dzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlXzEobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZV8xKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlsaXplIGEgREVMRVRFIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHsocTogSWRiUXVlcnkpID0+IHZvaWR9IG5leHRcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxTdG9yYWdlUXVlcnlcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxTdG9yYWdlUXVlcnkucHJvdG90eXBlLl9kZWxldGUgPSBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5zdGFuY2VUYWJsZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcXVlcnkud2hlcmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dldFJvd3MoZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcXVlcnkucmVzdWx0ID0gX3RoaXMuX3F1ZXJ5LnRhYmxlLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3dzLmluZGV4T2Yocm93KSA9PT0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dChfdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9xdWVyeS5yZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIG5leHQodGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXJ5LndoZXJlKSB7IC8vIGhhcyB3aGVyZSBzdGF0ZW1lbnQsIHNlbGVjdCByb3dzIHRoZW4gZGVsZXRlIHRoZW1cclxuICAgICAgICAgICAgdGhpcy5fZ2V0Um93cyhmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgcm93cyA9IHJvd3MuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByOyB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwocm93cywgZnVuY3Rpb24gKHIsIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLl9kZWxldGUoX3RoaXMuX3F1ZXJ5LnRhYmxlLCByW190aGlzLl9zdG9yZS50YWJsZUluZm9bX3RoaXMuX3F1ZXJ5LnRhYmxlXS5fcGtdLCBkb25lKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChhZmZlY3RlZFJvd3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55IGNoYW5nZXMgdG8gdGhpcyB0YWJsZSBpbnZhbGlkYXRlIHRoZSBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmUuX2NhY2hlW190aGlzLl9xdWVyeS50YWJsZV0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBrcyA9IHJvd3MubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiByW190aGlzLl9zdG9yZS50YWJsZUluZm9bX3RoaXMuX3F1ZXJ5LnRhYmxlXS5fcGtdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLl9pbnZhbGlkYXRlQ2FjaGUoX3RoaXMuX3F1ZXJ5LnRhYmxlLCBwa3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcXVlcnkucmVzdWx0ID0gW3sgbXNnOiByb3dzLmxlbmd0aCArIFwiIHJvdyhzKSBkZWxldGVkLlwiLCBhZmZlY3RlZFJvd1BLUzogcGtzLCBhZmZlY3RlZFJvd3M6IHJvd3MgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zeW5jT1JNKFwiZGVsXCIsIHJvd3MsIFtdLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZG9BZnRlclF1ZXJ5KHJvd3MsIHRydWUsIG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9xdWVyeS5yZXN1bHQgPSBbeyBtc2c6IFwiMCByb3cocykgZGVsZXRlZC5cIiwgYWZmZWN0ZWRSb3dQS1M6IFtdLCBhZmZlY3RlZFJvd3M6IFtdIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoX3RoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgeyAvLyBubyB3aGVyZSBzdGF0ZW1lbnQsIHBlcmZvcm0gZHJvcFxyXG4gICAgICAgICAgICB0aGlzLl9kcm9wKG5leHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpbGl6ZSBhIERST1AgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0geyhxOiBJZGJRdWVyeSkgPT4gdm9pZH0gbmV4dFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFN0b3JhZ2VRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFN0b3JhZ2VRdWVyeS5wcm90b3R5cGUuX2Ryb3AgPSBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5zdGFuY2VUYWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9xdWVyeS5yZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgbmV4dCh0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc3RvcmUuX3JhbmdlUmVhZCh0aGlzLl9xdWVyeS50YWJsZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZhbHNlLCBmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICBfdGhpcy5fc3RvcmUuX2NhY2hlW190aGlzLl9xdWVyeS50YWJsZV0gPSB7fTtcclxuICAgICAgICAgICAgX3RoaXMuX3N0b3JlLl9jYWNoZUtleXNbX3RoaXMuX3F1ZXJ5LnRhYmxlXSA9IHt9O1xyXG4gICAgICAgICAgICBfdGhpcy5fc3RvcmUuX2Ryb3AoX3RoaXMuX3F1ZXJ5LnRhYmxlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fcXVlcnkucmVzdWx0ID0gW3sgbXNnOiBcIidcIiArIF90aGlzLl9xdWVyeS50YWJsZSArIFwiJyB0YWJsZSBkcm9wcGVkLlwiLCBhZmZlY3RlZFJvd1BLUzogcm93cy5tYXAoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHJbX3RoaXMuX3N0b3JlLnRhYmxlSW5mb1tfdGhpcy5fcXVlcnkudGFibGVdLl9wa107IH0pLCBhZmZlY3RlZFJvd3M6IHJvd3MgfV07XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fc3luY09STShcImRlbFwiLCByb3dzLCBbXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9kb0FmdGVyUXVlcnkocm93cywgdHJ1ZSwgbmV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9OYW5vU1FMU3RvcmFnZVF1ZXJ5O1xyXG59KCkpO1xyXG5leHBvcnRzLl9OYW5vU1FMU3RvcmFnZVF1ZXJ5ID0gX05hbm9TUUxTdG9yYWdlUXVlcnk7XHJcbi8qKlxyXG4gKiBUYWtlcyBhIHNlbGVjdGlvbiBvZiByb3dzIGFuZCBhcHBseXMgbW9kaWZpZXJzIGxpa2Ugb3JkZXJCeSwgam9pbiBhbmQgb3RoZXJzIHRvIHRoZSByb3dzLlxyXG4gKiBSZXR1cm5zIHRoZSBhZmZlY3RlZCByb3dzIHVwZGF0ZWQgaW4gdGhlIHdheSB0aGUgcXVlcnkgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBNdXRhdGVTZWxlY3Rpb25cclxuICovXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG52YXIgX011dGF0ZVNlbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIF9NdXRhdGVTZWxlY3Rpb24ocSwgcykge1xyXG4gICAgICAgIHRoaXMucSA9IHE7XHJcbiAgICAgICAgdGhpcy5zID0gcztcclxuICAgICAgICB0aGlzLl9ncm91cEJ5Q29sdW1ucyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQZWZvcm0gYSBqb2luIGNvbW1hbmQuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0ge0RCUm93W119IHJvd3NcclxuICAgICAqIEBwYXJhbSB7KHJvd3M6IERCUm93W10pID0+IHZvaWR9IGNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqIEBtZW1iZXJvZiBfTXV0YXRlU2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIF9NdXRhdGVTZWxlY3Rpb24ucHJvdG90eXBlLl9qb2luID0gZnVuY3Rpb24gKHJvd3MsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMucS5qb2luKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKHJvd3MpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBqb2luQ29uZGl0aW9ucyA9IHt9O1xyXG4gICAgICAgIGlmICh0aGlzLnEuam9pbi50eXBlICE9PSBcImNyb3NzXCIgJiYgdGhpcy5xLmpvaW4ud2hlcmUpIHtcclxuICAgICAgICAgICAgam9pbkNvbmRpdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBfbGVmdDogdGhpcy5xLmpvaW4ud2hlcmVbMF0sXHJcbiAgICAgICAgICAgICAgICBfY2hlY2s6IHRoaXMucS5qb2luLndoZXJlWzFdLFxyXG4gICAgICAgICAgICAgICAgX3JpZ2h0OiB0aGlzLnEuam9pbi53aGVyZVsyXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGVmdFRhYmxlID0gdGhpcy5xLnRhYmxlO1xyXG4gICAgICAgIHZhciByaWdodFRhYmxlID0gdGhpcy5xLmpvaW4udGFibGU7XHJcbiAgICAgICAgdGhpcy5fZG9Kb2luKHRoaXMucS5qb2luLnR5cGUsIGxlZnRUYWJsZSwgcmlnaHRUYWJsZSwgam9pbkNvbmRpdGlvbnMsIGZ1bmN0aW9uIChqb2luZWRSb3dzKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5xLndoZXJlKSB7IC8vIGFwcGx5IHdoZXJlIHN0YXRlbWVudCB0byBqb2luXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShqb2luZWRSb3dzLmZpbHRlcihmdW5jdGlvbiAocm93LCBpZHgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShfdGhpcy5xLndoZXJlKSA/IF93aGVyZShyb3csIF90aGlzLnEud2hlcmUgfHwgW10sIGlkeCwgdHJ1ZSkgOiBfdGhpcy5xLndoZXJlKHJvdywgaWR4KTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5xLnJhbmdlKSB7IC8vIGFwcGx5IHJhbmdlIHN0YXRlbWVudCB0byBqb2luXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShqb2luZWRSb3dzLmZpbHRlcihmdW5jdGlvbiAocm93LCBpZHgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucS5yYW5nZSAmJiBfdGhpcy5xLnJhbmdlWzBdID49IGlkeCAmJiBfdGhpcy5xLnJhbmdlWzFdIDw9IGlkeDtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgLy8gc2VuZCB0aGUgd2hvbGUgcmVzdWx0XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShqb2luZWRSb3dzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgYSB1bmlxdWUgZ3JvdXAgYnkga2V5IGdpdmVuIGEgZ3JvdXAgYnkgb2JqZWN0IGFuZCBhIHJvdy5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGNvbHVtbnNcclxuICAgICAqIEBwYXJhbSB7Kn0gcm93XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICogQG1lbWJlcm9mIF9NdXRhdGVTZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgX011dGF0ZVNlbGVjdGlvbi5wcm90b3R5cGUuX2dyb3VwQnlLZXkgPSBmdW5jdGlvbiAoY29sdW1ucywgcm93KSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbHVtbnMucmVkdWNlKGZ1bmN0aW9uIChwLCBjKSB7XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSBcIi5sZW5ndGhcIlxyXG4gICAgICAgICAgICBpZiAoYy5pbmRleE9mKFwiLmxlbmd0aFwiKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwICsgXCIuXCIgKyBTdHJpbmcoKHJvd1tjLnJlcGxhY2UoXCIubGVuZ3RoXCIsIFwiXCIpXSB8fCBbXSkubGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwICsgXCIuXCIgKyBTdHJpbmcocm93W2NdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFwiXCIpLnNsaWNlKDEpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSB0aGUgR3JvdXAgQnkgbXV0YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0ge0RCUm93W119IHJvd3NcclxuICAgICAqIEByZXR1cm5zIHthbnlbXX1cclxuICAgICAqIEBtZW1iZXJvZiBfTXV0YXRlU2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIF9NdXRhdGVTZWxlY3Rpb24ucHJvdG90eXBlLl9ncm91cEJ5ID0gZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb2x1bW5zID0gdGhpcy5xLmdyb3VwQnkgfHwge307XHJcbiAgICAgICAgdmFyIHNvcnRlZFJvd3MgPSByb3dzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9zb3J0T2JqKGEsIGIsIGNvbHVtbnMsIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNvcnRlZFJvd3MuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpZHgpIHtcclxuICAgICAgICAgICAgdmFyIGdyb3VwQnlLZXkgPSBPYmplY3Qua2V5cyhjb2x1bW5zKS5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIFN0cmluZyh2YWxba10pIHx8IFwiXCI7IH0pLmpvaW4oXCIuXCIpO1xyXG4gICAgICAgICAgICBpZiAoIV90aGlzLl9zb3J0R3JvdXBzKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fc29ydEdyb3VwcyA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghX3RoaXMuX3NvcnRHcm91cHNbZ3JvdXBCeUtleV0pIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9zb3J0R3JvdXBzW2dyb3VwQnlLZXldID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuX3NvcnRHcm91cHNbZ3JvdXBCeUtleV0ucHVzaChpZHgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzb3J0ZWRSb3dzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBIQVZJTkcgbXV0YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0ge0RCUm93W119IHJvd3NcclxuICAgICAqIEByZXR1cm5zIHthbnlbXX1cclxuICAgICAqIEBtZW1iZXJvZiBfTXV0YXRlU2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIF9NdXRhdGVTZWxlY3Rpb24ucHJvdG90eXBlLl9oYXZpbmcgPSBmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHJvd3MuZmlsdGVyKGZ1bmN0aW9uIChyb3csIGlkeCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShfdGhpcy5xLmhhdmluZykgPyBfd2hlcmUocm93LCBfdGhpcy5xLmhhdmluZyB8fCBbXSwgaWR4LCB0cnVlKSA6IF90aGlzLnEuaGF2aW5nKHJvdywgaWR4KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gdGhlIG9yZGVyQnkgbXV0YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0ge0RCUm93W119IHJvd3NcclxuICAgICAqIEByZXR1cm5zIHthbnlbXX1cclxuICAgICAqIEBtZW1iZXJvZiBfTXV0YXRlU2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIF9NdXRhdGVTZWxlY3Rpb24ucHJvdG90eXBlLl9vcmRlckJ5ID0gZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiByb3dzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9zb3J0T2JqKGEsIGIsIF90aGlzLnEub3JkZXJCeSB8fCB7fSwgZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSB0aGUgT2Zmc2V0IG11dGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHtEQlJvd1tdfSByb3dzXHJcbiAgICAgKiBAcmV0dXJucyB7YW55W119XHJcbiAgICAgKiBAbWVtYmVyb2YgX011dGF0ZVNlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBfTXV0YXRlU2VsZWN0aW9uLnByb3RvdHlwZS5fb2Zmc2V0ID0gZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiByb3dzLmZpbHRlcihmdW5jdGlvbiAocm93LCBpbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucS5vZmZzZXQgPyBpbmRleCA+PSBfdGhpcy5xLm9mZnNldCA6IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtIHRoZSBsaW1pdCBtdXRhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSB7REJSb3dbXX0gcm93c1xyXG4gICAgICogQHJldHVybnMge2FueVtdfVxyXG4gICAgICogQG1lbWJlcm9mIF9NdXRhdGVTZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgX011dGF0ZVNlbGVjdGlvbi5wcm90b3R5cGUuX2xpbWl0ID0gZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiByb3dzLmZpbHRlcihmdW5jdGlvbiAocm93LCBpbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucS5saW1pdCA/IGluZGV4IDwgX3RoaXMucS5saW1pdCA6IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgT1JNIHZhbHVlcyB0byByb3dzIGJhc2VkIG9uIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHtEQlJvd1tdfSByb3dzXHJcbiAgICAgKiBAcGFyYW0geyhyb3dzOiBEQlJvd1tdKSA9PiB2b2lkfSBjb21wbGV0ZVxyXG4gICAgICogQG1lbWJlcm9mIF9NdXRhdGVTZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgX011dGF0ZVNlbGVjdGlvbi5wcm90b3R5cGUuX29ybSA9IGZ1bmN0aW9uIChyb3dzLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG9ybVF1ZXJpZXMgPSB0aGlzLnEub3JtID8gdGhpcy5xLm9ybS5tYXAoZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogbyxcclxuICAgICAgICAgICAgICAgICAgICBsaW1pdDogNVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbztcclxuICAgICAgICB9KSA6IFtdO1xyXG4gICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwocm93cywgZnVuY3Rpb24gKHJvdywgaSwgcm93UmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHJvdyA9IE9iamVjdC5pc0Zyb3plbihyb3cpID8gdXRpbGl0aWVzXzEuX2Fzc2lnbihyb3cpIDogcm93O1xyXG4gICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKG9ybVF1ZXJpZXMsIGZ1bmN0aW9uIChvcm0sIGssIG9ybVJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyb3dbb3JtLmtleV0gfHwgIXJvd1tvcm0ua2V5XS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcm1SZXN1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVsYXRlRGF0YSA9IF90aGlzLnMuX2NvbHVtbnNBcmVUYWJsZXNbX3RoaXMucS50YWJsZV1bb3JtLmtleV07XHJcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnMuX25zcWwucXVlcnkoXCJzZWxlY3RcIikud2hlcmUoW190aGlzLnMudGFibGVJbmZvW3JlbGF0ZURhdGEuX3RvVGFibGVdLl9waywgcmVsYXRlRGF0YS5fdGhpc1R5cGUgPT09IFwiYXJyYXlcIiA/IFwiSU5cIiA6IFwiPVwiLCByb3dbb3JtLmtleV1dKS5tYW51YWxFeGVjKHsgdGFibGU6IHJlbGF0ZURhdGEuX3RvVGFibGUgfSkudGhlbihmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcSA9IGluZGV4XzEublNRTCgpLnF1ZXJ5KFwic2VsZWN0XCIsIG9ybS5zZWxlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JtLndoZXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLndoZXJlKG9ybS53aGVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ybS5saW1pdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLmxpbWl0KG9ybS5saW1pdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ybS5vZmZzZXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcS5vZmZzZXQob3JtLm9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ybS5vcmRlckJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLm9yZGVyQnkob3JtLm9yZGVyQnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcm0uZ3JvdXBCeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcS5ncm91cEJ5KG9ybS5ncm91cEJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxLm1hbnVhbEV4ZWMoeyB0YWJsZTogcm93cyB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcm93cy5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHI7IH0pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tvcm0ua2V5XSA9IHJlbGF0ZURhdGEuX3RoaXNUeXBlID09PSBcImFycmF5XCIgPyBbXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tvcm0ua2V5XSA9IHJlbGF0ZURhdGEuX3RoaXNUeXBlID09PSBcImFycmF5XCIgPyByZXN1bHQgOiByZXN1bHRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcm1SZXN1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvcm1SZXN1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByb3dSZXN1bHQocm93KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkudGhlbihjb21wbGV0ZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyB0aGUgYWN0dWFsIEpPSU4gbXV0YXRpb24sIGluY2x1ZGluZyB0aGUgT14yIHNlbGVjdCBxdWVyeSB0byBjaGVjayBhbGwgcm93cyBhZ2FpbnN0IGV2ZXJ5IG90aGVyIHJvdy5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSB7KFwibGVmdFwiIHwgXCJpbm5lclwiIHwgXCJyaWdodFwiIHwgXCJjcm9zc1wiIHwgXCJvdXRlclwiKX0gdHlwZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxlZnRUYWJsZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJpZ2h0VGFibGVcclxuICAgICAqIEBwYXJhbSB7KG51bGwgfCB7IF9sZWZ0OiBzdHJpbmcsIF9jaGVjazogc3RyaW5nLCBfcmlnaHQ6IHN0cmluZyB9KX0gam9pbkNvbmRpdGlvbnNcclxuICAgICAqIEBwYXJhbSB7KHJvd3M6IERCUm93W10pID0+IHZvaWR9IGNvbXBsZXRlXHJcbiAgICAgKiBAbWVtYmVyb2YgX011dGF0ZVNlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBfTXV0YXRlU2VsZWN0aW9uLnByb3RvdHlwZS5fZG9Kb2luID0gZnVuY3Rpb24gKHR5cGUsIGxlZnRUYWJsZSwgcmlnaHRUYWJsZSwgam9pbkNvbmRpdGlvbnMsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIEwgPSBcImxlZnRcIjtcclxuICAgICAgICB2YXIgUiA9IFwicmlnaHRcIjtcclxuICAgICAgICB2YXIgTyA9IFwib3V0ZXJcIjtcclxuICAgICAgICB2YXIgQyA9IFwiY3Jvc3NcIjtcclxuICAgICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGZpcnN0VGFibGVEYXRhID0gdC5zLnRhYmxlSW5mb1t0eXBlID09PSBSID8gcmlnaHRUYWJsZSA6IGxlZnRUYWJsZV07XHJcbiAgICAgICAgdmFyIHNlY29uVGFibGVEYXRhID0gdC5zLnRhYmxlSW5mb1t0eXBlID09PSBSID8gbGVmdFRhYmxlIDogcmlnaHRUYWJsZV07XHJcbiAgICAgICAgdmFyIGRvSm9pblJvd3MgPSBmdW5jdGlvbiAobGVmdFJvdywgcmlnaHRSb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtmaXJzdFRhYmxlRGF0YSwgc2Vjb25UYWJsZURhdGFdLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXIuX2tleXMuZm9yRWFjaChmdW5jdGlvbiAoaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZbY3VyLl9uYW1lICsgXCIuXCIgKyBrXSA9ICgoaSA9PT0gMCA/IGxlZnRSb3cgOiByaWdodFJvdykgfHwge30pW2tdO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGpvaW5UYWJsZSA9IFtdO1xyXG4gICAgICAgIHZhciByaWdodEtleSA9IGpvaW5Db25kaXRpb25zICYmIGpvaW5Db25kaXRpb25zLl9yaWdodCA/IGpvaW5Db25kaXRpb25zLl9yaWdodC5zcGxpdChcIi5cIikucG9wKCkgfHwgXCJcIiA6IFwiXCI7XHJcbiAgICAgICAgdmFyIHVzZWRTZWNvbmRUYWJsZVJvd3MgPSB7fTtcclxuICAgICAgICB2YXIgc2Vjb25kUm93Q2FjaGUgPSBbXTtcclxuICAgICAgICAvLyBPXjIsIFlBWSFcclxuICAgICAgICB0LnMuX3JlYWQoZmlyc3RUYWJsZURhdGEuX25hbWUsIGZ1bmN0aW9uIChmaXJzdFJvdywgaWR4LCBrZWVwKSB7XHJcbiAgICAgICAgICAgIHZhciBoYXNPbmVSZWxhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0LnMuX3JlYWQoc2Vjb25UYWJsZURhdGEuX25hbWUsIGZ1bmN0aW9uIChzZWNvbmRSb3csIGlkeDIsIGtlZXAyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWpvaW5Db25kaXRpb25zIHx8IHR5cGUgPT09IEMpIHsgLy8gbm8gY29uZGl0aW9uYWwgdG8gY2hlY2sgT1IgY3Jvc3Mgam9pbiwgYWx3YXlzIGFkZFxyXG4gICAgICAgICAgICAgICAgICAgIGpvaW5UYWJsZS5wdXNoKGRvSm9pblJvd3MoZmlyc3RSb3csIHNlY29uZFJvdykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc09uZVJlbGF0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBjaGVjayBjb25kaXRpb25hbCBzdGF0ZW1lbnQgdG8gcG9zc2libHkgam9pblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWxsSm9pblJvd3MgPSBfd2hlcmUoKF9hID0ge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hW2ZpcnN0VGFibGVEYXRhLl9uYW1lXSA9IGZpcnN0Um93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtzZWNvblRhYmxlRGF0YS5fbmFtZV0gPSBzZWNvbmRSb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKSwgW2pvaW5Db25kaXRpb25zLl9sZWZ0LCBqb2luQ29uZGl0aW9ucy5fY2hlY2ssIHR5cGUgPT09IFIgPyBmaXJzdFJvd1tyaWdodEtleV0gOiBzZWNvbmRSb3dbcmlnaHRLZXldXSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbGxKb2luUm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gTylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWRTZWNvbmRUYWJsZVJvd3NbaWR4Ml0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqb2luVGFibGUucHVzaChkb0pvaW5Sb3dzKGZpcnN0Um93LCBzZWNvbmRSb3cpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzT25lUmVsYXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IE8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRSb3dDYWNoZVtpZHgyXSA9IHNlY29uZFJvdztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBrZWVwMihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGxlZnQsIHJpZ2h0IG9yIG91dGVyIGpvaW4gd2lsbCBjYXVzZSByb3dzIHdpdGhvdXQgYSByZWxhdGlvbiB0byBiZSBhZGRlZCBhbnl3YXkgd2l0aCBudWxsIHJlbGF0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhc09uZVJlbGF0aW9uICYmIFtMLCBSLCBPXS5pbmRleE9mKHR5cGUpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBqb2luVGFibGUucHVzaChkb0pvaW5Sb3dzKGZpcnN0Um93LCBudWxsKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBrZWVwKGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBmdWxsIG91dGVyIGpvaW4sIGFkZCB0aGUgc2Vjb25kYXJ5IHJvd3MgdGhhdCBoYXZlbid0IGJlZW4gYWRkZWQgeWV0XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBPKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWRkUm93cyA9IHNlY29uZFJvd0NhY2hlLmZpbHRlcihmdW5jdGlvbiAodmFsLCBpKSB7IHJldHVybiAhdXNlZFNlY29uZFRhYmxlUm93c1tpXTsgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGFkZFJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgam9pblRhYmxlLnB1c2goZG9Kb2luUm93cyhudWxsLCBhZGRSb3dzW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoam9pblRhYmxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKGpvaW5UYWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgc29ydCBkaXJlY3Rpb24gZm9yIHR3byBvYmplY3RzIGdpdmVuIHRoZSBvYmplY3RzLCBjb2x1bW5zIGFuZCByZXNvbHZlIHBhdGhzLlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHsqfSBvYmpBXHJcbiAgICAgKiBAcGFyYW0geyp9IG9iakJcclxuICAgICAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfX0gY29sdW1uc1xyXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZXNvbHZlUGF0aHNcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAbWVtYmVyb2YgX011dGF0ZVNlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBfTXV0YXRlU2VsZWN0aW9uLnByb3RvdHlwZS5fc29ydE9iaiA9IGZ1bmN0aW9uIChvYmpBLCBvYmpCLCBjb2x1bW5zLCByZXNvbHZlUGF0aHMpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoY29sdW1ucykucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcclxuICAgICAgICAgICAgdmFyIEEgPSByZXNvbHZlUGF0aHMgPyB1dGlsaXRpZXNfMS5vYmpRdWVyeShjdXIsIG9iakEpIDogb2JqQVtjdXJdO1xyXG4gICAgICAgICAgICB2YXIgQiA9IHJlc29sdmVQYXRocyA/IHV0aWxpdGllc18xLm9ialF1ZXJ5KGN1ciwgb2JqQikgOiBvYmpCW2N1cl07XHJcbiAgICAgICAgICAgIGlmICghcHJldikge1xyXG4gICAgICAgICAgICAgICAgaWYgKEEgPT09IEIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKEEgPiBCID8gMSA6IC0xKSAqIChjb2x1bW5zW2N1cl0gPT09IFwiZGVzY1wiID8gLTEgOiAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBBUywgZnVuY3Rpb25zIGFuZCBHcm91cCBCeVxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHtEQlJvd1tdfSByb3dzXHJcbiAgICAgKiBAcGFyYW0geyhyb3dzOiBEQlJvd1tdKSA9PiB2b2lkfSBjb21wbGV0ZVxyXG4gICAgICogQG1lbWJlcm9mIF9NdXRhdGVTZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgX011dGF0ZVNlbGVjdGlvbi5wcm90b3R5cGUuX211dGF0ZVJvd3MgPSBmdW5jdGlvbiAocm93cywgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb2x1bW5TZWxlY3Rpb24gPSB0aGlzLnEuYWN0aW9uQXJncztcclxuICAgICAgICB2YXIgZnVuY3Rpb25SZXN1bHRzID0ge307XHJcbiAgICAgICAgdmFyIGZuR3JvdXBCeVJlc3VsdHMgPSB7fTtcclxuICAgICAgICBpZiAoY29sdW1uU2VsZWN0aW9uICYmIGNvbHVtblNlbGVjdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gcG9zc2libHkgaGFzIGZ1bmN0aW9ucywgQVMgc3RhdGVtZW50c1xyXG4gICAgICAgICAgICB2YXIgaGFzQWdncmVnYXRlRnVuXzEgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbkRhdGFfMSA9IHt9O1xyXG4gICAgICAgICAgICBjb2x1bW5TZWxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmluZGV4T2YoXCIoXCIpID09PSAtMSkgeyAvLyBubyBmdW5jdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZm5OYW1lID0gKGNvbHVtbi5tYXRjaCgvXi4qXFwoL2cpIHx8IFtcIlwiXSlbMF0ucmVwbGFjZSgvXFwofFxcKS9nLCBcIlwiKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZuID0gaW5kZXhfMS5OYW5vU1FMSW5zdGFuY2UuZnVuY3Rpb25zW2ZuTmFtZV07XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gY29sdW1uLnNwbGl0KFwiIEFTIFwiKS5sZW5ndGggPT09IDEgPyBmbk5hbWUgOiAoY29sdW1uLnNwbGl0KFwiIEFTIFwiKS5wb3AoKSB8fCBcIlwiKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ1wiICsgZm5OYW1lICsgXCInIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uIVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChmbi50eXBlID09PSBcIkFcIikgeyAvLyBhZ3JlZ2F0ZSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGhhc0FnZ3JlZ2F0ZUZ1bl8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbHVtbkRhdGFfMVtjb2x1bW5dID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuOiBmbixcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoY29sdW1uU2VsZWN0aW9uLCBmdW5jdGlvbiAoY29sdW1uLCBqLCBjb2x1bW5Eb25lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmluZGV4T2YoXCIoXCIpID4gLTEpIHsgLy8gZnVuY3Rpb24gZXhpc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuQXJnc18xID0gKGNvbHVtbi5tYXRjaCgvXFwoLipcXCkvZykgfHwgW1wiXCJdKVswXS5yZXBsYWNlKC9cXCh8XFwpL2csIFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYudHJpbSgpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3NvcnRHcm91cHMgJiYgaGFzQWdncmVnYXRlRnVuXzEpIHsgLy8gZ3JvdXAgYnkgZXhpc3RzIHdpdGggYWdncmVnYXRlIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoT2JqZWN0LmtleXMoX3RoaXMuX3NvcnRHcm91cHMpLCBmdW5jdGlvbiAoaywgbCwgZm5Eb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZuR3JvdXBCeVJlc3VsdHNba10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbkdyb3VwQnlSZXN1bHRzW2tdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBjb2x1bW5EYXRhXzFbY29sdW1uXS5mbikuY2FsbC5hcHBseShfYSwgW3Jvd3MuZmlsdGVyKGZ1bmN0aW9uIChyLCBpKSB7IHJldHVybiBfdGhpcy5fc29ydEdyb3Vwc1trXS5pbmRleE9mKGkpID4gLTE7IH0pLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuR3JvdXBCeVJlc3VsdHNba11bY29sdW1uRGF0YV8xW2NvbHVtbl0ua2V5XSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm5Eb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0uY29uY2F0KGZuQXJnc18xKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oY29sdW1uRG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBubyBncm91cCBieVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBjb2x1bW5EYXRhXzFbY29sdW1uXS5mbikuY2FsbC5hcHBseShfYSwgW3Jvd3MsIGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblJlc3VsdHNbY29sdW1uRGF0YV8xW2NvbHVtbl0ua2V5XSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5Eb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XS5jb25jYXQoZm5BcmdzXzEpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5Eb25lKCk7IC8vIG5vIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gdGltZSB0byByZWJ1aWxkIHJvdyByZXN1bHRzXHJcbiAgICAgICAgICAgICAgICB2YXIgZG9NdWF0ZVJvd3MgPSBmdW5jdGlvbiAocm93LCBpZHgsIGZuUmVzdWx0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdSb3cgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdW5zZWxlY3RlZCBjb2x1bW5zLCBhcHBseSBBUyBhbmQgaW50ZWdyYXRlIGZ1bmN0aW9uIHJlc3VsdHNcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5TZWxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNGdW5jID0gY29sdW1uLmluZGV4T2YoXCIoXCIpID4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gaGFzRnVuYyA/IGNvbHVtbkRhdGFfMVtjb2x1bW5dLmZuLnR5cGUgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmluZGV4T2YoXCIgQVMgXCIpID4gLTEpIHsgLy8gYWxpYXMgY29sdW1uIGRhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGlhcyA9IGNvbHVtbi5zcGxpdChcIiBBUyBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gaGFzRnVuYyA/IGNvbHVtbkRhdGFfMVtjb2x1bW5dLmtleSA6IGFsaWFzWzBdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Jvd1thbGlhc1sxXV0gPSBoYXNGdW5jID8gKHR5cGUgPT09IFwiQVwiID8gZm5SZXN1bHRzW2tleV0gOiBmblJlc3VsdHNba2V5XVtpZHhdKSA6IHV0aWxpdGllc18xLm9ialF1ZXJ5KGtleSwgcm93LCBfdGhpcy5xLmpvaW4gIT09IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gaGFzRnVuYyA/IGNvbHVtbkRhdGFfMVtjb2x1bW5dLmtleSA6IGNvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Jvd1tjb2x1bW5dID0gaGFzRnVuYyA/ICh0eXBlID09PSBcIkFcIiA/IGZuUmVzdWx0c1trZXldIDogZm5SZXN1bHRzW2tleV1baWR4XSkgOiB1dGlsaXRpZXNfMS5vYmpRdWVyeShrZXksIHJvdywgX3RoaXMucS5qb2luICE9PSB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1JvdztcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJvd3MubGVuZ3RoICYmIGhhc0FnZ3JlZ2F0ZUZ1bl8xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uZVJvd18xID0gW3t9XTtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjb2x1bW5EYXRhXzEpLmZvckVhY2goZnVuY3Rpb24gKGZuTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9uUmVzdWx0c1tjb2x1bW5EYXRhXzFbZm5OYW1lXS5rZXldICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVSb3dfMVswXVtmbk5hbWVdID0gZnVuY3Rpb25SZXN1bHRzW2NvbHVtbkRhdGFfMVtmbk5hbWVdLmtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShvbmVSb3dfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9zb3J0R3JvdXBzICYmIGhhc0FnZ3JlZ2F0ZUZ1bl8xKSB7IC8vIGdyb3VwIGJ5IHdpdGggYWdncmVnYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1Jvd3NfMSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKF90aGlzLl9zb3J0R3JvdXBzKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzUm93ID0gcm93cy5maWx0ZXIoZnVuY3Rpb24gKHIsIGkpIHsgcmV0dXJuIF90aGlzLl9zb3J0R3JvdXBzW2tdLmluZGV4T2YoaSkgPiAtMTsgfSkuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBpIDwgMTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUm93ICYmIHRoaXNSb3cubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdSb3dzXzEucHVzaChkb011YXRlUm93cyh0aGlzUm93WzBdLCAwLCBmbkdyb3VwQnlSZXN1bHRzW2tdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZShuZXdSb3dzXzEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGFzQWdncmVnYXRlRnVuXzEpIHsgLy8ganVzdCBhZ2dyZWdhdGUgKHJldHVybnMgMSByb3cpXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUocm93cy5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGkgPCAxOyB9KS5tYXAoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGRvTXVhdGVSb3dzKHYsIGksIGZ1bmN0aW9uUmVzdWx0cyk7IH0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBubyBhZ2dyZWdhdGUgYW5kIG5vIGdyb3VwIGJ5LCBlYXN5IHBlYXN5XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUocm93cy5tYXAoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGRvTXVhdGVSb3dzKHYsIGksIGZ1bmN0aW9uUmVzdWx0cyk7IH0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhyb3VnaFxyXG4gICAgICAgICAgICBjb21wbGV0ZShyb3dzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB0aGUgbXV0YXRpb25zIGluIHRoZSBvcmRlciBvZiBvcGVyYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7REJSb3dbXX0gaW5wdXRSb3dzXHJcbiAgICAgKiBAcGFyYW0geyhyb3dzOiBEQlJvd1tdKSA9PiB2b2lkfSBjYWxsYmFja1xyXG4gICAgICogQG1lbWJlcm9mIF9NdXRhdGVTZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgX011dGF0ZVNlbGVjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGVRdWVyeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIChpbnB1dFJvd3MsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYWZ0ZXJNdXRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5xLmhhdmluZykge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRSb3dzID0gX3RoaXMuX2hhdmluZyhpbnB1dFJvd3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5xLm9yZGVyQnkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0Um93cyA9IF90aGlzLl9vcmRlckJ5KGlucHV0Um93cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKF90aGlzLnEub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFJvd3MgPSBfdGhpcy5fb2Zmc2V0KGlucHV0Um93cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKF90aGlzLnEubGltaXQpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0Um93cyA9IF90aGlzLl9saW1pdChpbnB1dFJvd3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0Um93cyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgYWZ0ZXJPUk0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5xLmFjdGlvbkFyZ3MgJiYgX3RoaXMucS5hY3Rpb25BcmdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX211dGF0ZVJvd3MoaW5wdXRSb3dzLCBmdW5jdGlvbiAobmV3Um93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0Um93cyA9IG5ld1Jvd3M7XHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJNdXRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJNdXRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGFmdGVySm9pbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnEuZ3JvdXBCeSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRSb3dzID0gX3RoaXMuX2dyb3VwQnkoaW5wdXRSb3dzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3RoaXMucS5vcm0pIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9vcm0oaW5wdXRSb3dzLCBmdW5jdGlvbiAobmV3Um93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0Um93cyA9IG5ld1Jvd3M7XHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJPUk0oKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJPUk0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMucS5qb2luKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2pvaW4oaW5wdXRSb3dzLCBmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRSb3dzID0gcm93cztcclxuICAgICAgICAgICAgICAgIGFmdGVySm9pbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFmdGVySm9pbigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gX011dGF0ZVNlbGVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0cy5fTXV0YXRlU2VsZWN0aW9uID0gX011dGF0ZVNlbGVjdGlvbjtcclxuLyoqXHJcbiAqIFNlbGVjdHMgdGhlIG5lZWRlZCByb3dzIGZyb20gdGhlIHN0b3JhZ2Ugc3lzdGVtLlxyXG4gKiBVc2VzIHRoZSBmYXN0ZXMgcG9zc2libGUgbWV0aG9kIHRvIGdldCB0aGUgcm93cy5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAY2xhc3MgX1Jvd1NlbGVjdGlvblxyXG4gKi9cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbnZhciBfUm93U2VsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX1Jvd1NlbGVjdGlvbihxLCBzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5xID0gcTtcclxuICAgICAgICB0aGlzLnMgPSBzO1xyXG4gICAgICAgIGlmICh0aGlzLnEuam9pbiAmJiB0aGlzLnEub3JtKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBkbyBhIEpPSU4gYW5kIE9STSBjb21tYW5kIGF0IHRoZSBzYW1lIHRpbWUhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoW3RoaXMucS53aGVyZSwgdGhpcy5xLnJhbmdlLCB0aGlzLnEudHJpZV0uZmlsdGVyKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBvbmx5IGhhdmUgT05FIG9mIFRyaWUsIFJhbmdlIG9yIFdoZXJlIVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gam9pbiBjb21tYW5kIHJlcXVpcmVzIG5eMiBzY2FuIHRoYXQgZ2V0cyB0YWtlbiBjYXJlIG9mIGluIGpvaW4gbG9naWMuXHJcbiAgICAgICAgaWYgKHRoaXMucS5qb2luKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKFtdKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0cmllIHNlYXJjaCwgbmljZSBhbmQgZmFzdC5cclxuICAgICAgICBpZiAodGhpcy5xLnRyaWUgJiYgdGhpcy5xLnRyaWUuY29sdW1uICYmIHRoaXMucS50cmllLnNlYXJjaCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RCeVRyaWUoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJhbmdlIHNlbGVjdCwgdmVyeSBmYXN0XHJcbiAgICAgICAgaWYgKHRoaXMucS5yYW5nZSAmJiB0aGlzLnEucmFuZ2UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdEJ5UmFuZ2UoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG5vIHdoZXJlIHN0YXRlbWVudCwgcmVhZCB3aG9sZSBkYiA6KFxyXG4gICAgICAgIC8vIE9SXHJcbiAgICAgICAgLy8gd2hlcmUgc3RhdGVtZW50IGlzIGZ1bmN0aW9uLCBzdGlsbCBnb3R0YSByZWFkIHRoZSB3aG9sZSBkYi5cclxuICAgICAgICBpZiAoKCF0aGlzLnEud2hlcmUgfHwgIXRoaXMucS53aGVyZS5sZW5ndGgpIHx8ICFBcnJheS5pc0FycmF5KHRoaXMucS53aGVyZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fZnVsbFRhYmxlU2NhbihjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gd2hlcmUgc3RhdGVtZW50IHBvc3NpYmx5IGNvbnRhaW5zIG9ubHkgcHJpbWFyeSBrZXkgYW5kIHNlY29uZGFyeSBrZXkgcXVlcmllcywgZG8gZmFzdGVyIHF1ZXJ5IGlmIHBvc3NpYmxlLlxyXG4gICAgICAgIHZhciBkb0Zhc3RSZWFkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnEud2hlcmVbMF0gPT09IFwic3RyaW5nXCIpIHsgLy8gU2luZ2xlIFdIRVJFXHJcbiAgICAgICAgICAgIGRvRmFzdFJlYWQgPSB0aGlzLl9pc09wdGltaXplZFdoZXJlKHRoaXMucS53aGVyZSkgPT09IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgeyAvLyBjb21iaW5lZCB3aGVyZSBzdGF0ZW1lbnRzXHJcbiAgICAgICAgICAgIGRvRmFzdFJlYWQgPSAodGhpcy5xLndoZXJlIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1ciwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgJSAyID09PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXYgKyBfdGhpcy5faXNPcHRpbWl6ZWRXaGVyZShjdXIpO1xyXG4gICAgICAgICAgICB9LCAwKSA9PT0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRvRmFzdFJlYWQpIHsgLy8gY2FuIGdvIHN0cmFpZ2h0IHRvIHByaW1hcnkgb3Igc2Vjb25kYXJ5IGtleXMsIHdlZSFcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0QnlLZXlzKHRoaXMucS53aGVyZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIGNvbXBvdW5kIHdoZXJlIHN0YXRlbWVudCBpbmNsdWRlcyBwcmltYXJ5IGtleS9zZWNvbmRhcnkgaW5kZXggcXVlcmllcyBmb2xsb3dlZCBieSBBTkQgd2l0aCBvdGhlciBjb25kaXRpb25zLlxyXG4gICAgICAgIC8vIGdyYWJzIHRoZSBzZWN0aW9uIG9mIGRhdGEgcmVsYXRlZCB0byB0aGUgb3B0aW1pemVkIHJlYWQsIHRoZW4gZnVsbCB0YWJsZSBzY2FucyB0aGUgcmVzdWx0LlxyXG4gICAgICAgIHZhciB3aGVyZVNsaWNlID0gdGhpcy5faXNTdWJPcHRpbWl6ZWRXaGVyZSh0aGlzLnEud2hlcmUpO1xyXG4gICAgICAgIGlmICh3aGVyZVNsaWNlID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgZmFzdFdoZXJlID0gdGhpcy5xLndoZXJlLnNsaWNlKDAsIHdoZXJlU2xpY2UpO1xyXG4gICAgICAgICAgICB2YXIgc2xvd1doZXJlXzEgPSB0aGlzLnEud2hlcmUuc2xpY2Uod2hlcmVTbGljZSArIDEpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RCeUtleXMoZmFzdFdoZXJlLCBmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2socm93cy5maWx0ZXIoZnVuY3Rpb24gKHIsIGkpIHsgcmV0dXJuIF93aGVyZShyLCBzbG93V2hlcmVfMSwgaSk7IH0pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRnVsbCB0YWJsZSBzY2FuIDooXHJcbiAgICAgICAgdGhpcy5fZnVsbFRhYmxlU2NhbihjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERvZXMgc3VwZXIgZmFzdCBwcmltYXJ5IGtleSBvciBzZWNvbmRhcnkgaW5kZXggc2VsZWN0LlxyXG4gICAgICogSGFuZGxlcyBjb21wb3VuZCBXSEVSRSBzdGF0ZW1lbnRzLCBjb21iaW5pbmcgdGhlaXIgcmVzdWx0cy5cclxuICAgICAqIFdvcmtzIGFzIGxvbmcgYXMgZXZlcnkgV0hFUkUgc3RhdGVtZW50IGlzIHNlbGVjdGluZyBhZ2FpbnN0IGEgcHJpbWFyeSBrZXkgb3Igc2Vjb25kYXJ5IGluZGV4LlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHsocm93czogREJSb3dbXSkgPT4gdm9pZH0gY2FsbGJhY2tcclxuICAgICAqIEBtZW1iZXJvZiBfUm93U2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIF9Sb3dTZWxlY3Rpb24ucHJvdG90eXBlLl9zZWxlY3RCeUtleXMgPSBmdW5jdGlvbiAod2hlcmUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAod2hlcmUgJiYgdHlwZW9mIHdoZXJlWzBdID09PSBcInN0cmluZ1wiKSB7IC8vIHNpbmdsZSB3aGVyZVxyXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RSb3dzQnlJbmRleCh3aGVyZSwgY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh3aGVyZSkgeyAvLyBjb21wb3VuZCB3aGVyZVxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0Um93c18xID0gW107XHJcbiAgICAgICAgICAgIHZhciBsYXN0Q29tbWFuZF8xID0gXCJcIjtcclxuICAgICAgICAgICAgdXRpbGl0aWVzXzEuZmFzdENIQUlOKHdoZXJlLCBmdW5jdGlvbiAod0FyZywgaSwgbmV4dFdBcmcpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd0FyZyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb21tYW5kXzEgPSB3QXJnO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRXQXJnKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3NlbGVjdFJvd3NCeUluZGV4KHdBcmcsIGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RDb21tYW5kXzEgPT09IFwiQU5EXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeF8xID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpXzEgPSByb3dzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGlfMS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHhfMVtyb3dzW2lfMV1bX3RoaXMucy50YWJsZUluZm9bX3RoaXMucS50YWJsZV0uX3BrXV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFJvd3NfMSA9IHJlc3VsdFJvd3NfMS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkeF8xW3Jvd1tfdGhpcy5zLnRhYmxlSW5mb1tfdGhpcy5xLnRhYmxlXS5fcGtdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRSb3dzXzEgPSByZXN1bHRSb3dzXzEuY29uY2F0KHJvd3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXh0V0FyZygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0Um93c18xKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTXVjaCBmYXN0ZXIgU0VMRUNUIGJ5IHByaW1hcnkga2V5IG9yIHNlY29uZGFyeSBpbmRleC5cclxuICAgICAqIEFjY2VwdHMgYSBzaW5nbGUgV0hFUkUgc3RhdGVtZW50LCBubyBjb21wb3VuZCBzdGF0ZW1lbnRzIGFsbG93ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSB3aGVyZVxyXG4gICAgICogQHBhcmFtIHsocm93czogREJSb3dbXSkgPT4gdm9pZH0gY2FsbGJhY2tcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAbWVtYmVyb2YgX1Jvd1NlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBfUm93U2VsZWN0aW9uLnByb3RvdHlwZS5fc2VsZWN0Um93c0J5SW5kZXggPSBmdW5jdGlvbiAod2hlcmUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAod2hlcmVbMV0gPT09IFwiQkVUV0VFTlwiKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWNvbmRhcnlJbmRleEtleSA9IHdoZXJlWzBdID09PSB0aGlzLnMudGFibGVJbmZvW3RoaXMucS50YWJsZV0uX3BrID8gXCJcIiA6IHdoZXJlWzBdO1xyXG4gICAgICAgICAgICBpZiAoc2Vjb25kYXJ5SW5kZXhLZXkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZHhUYWJsZSA9IFwiX1wiICsgdGhpcy5xLnRhYmxlICsgXCJfaWR4X1wiICsgc2Vjb25kYXJ5SW5kZXhLZXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnMuX3JhbmdlUmVhZChpZHhUYWJsZSwgd2hlcmVbMl1bMF0sIHdoZXJlWzJdWzFdLCB0cnVlLCBmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSByb3dzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChyb3dzW2ldLnJvd3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zLl9yZWFkKF90aGlzLnEudGFibGUsIGtleXMsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zLl9yYW5nZVJlYWQodGhpcy5xLnRhYmxlLCB3aGVyZVsyXVswXSwgd2hlcmVbMl1bMV0sIHRydWUsIGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socm93cyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBrZXlzID0gW107XHJcbiAgICAgICAgc3dpdGNoICh3aGVyZVsxXSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiSU5cIjpcclxuICAgICAgICAgICAgICAgIGtleXMgPSB3aGVyZVsyXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICAgICAgICAgICAga2V5cyA9IFt3aGVyZVsyXV07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHdoZXJlWzBdID09PSB0aGlzLnMudGFibGVJbmZvW3RoaXMucS50YWJsZV0uX3BrKSB7IC8vIHByaW1hcnkga2V5IHNlbGVjdFxyXG4gICAgICAgICAgICB0aGlzLnMuX3JlYWQodGhpcy5xLnRhYmxlLCBrZXlzLCBjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgeyAvLyBzZWNvbmRhcnkgaW5kZXggc2VsZWN0XHJcbiAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoa2V5cywgZnVuY3Rpb24gKGlkeCwgaSwgY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnMuX3NlY29uZGFyeUluZGV4UmVhZChfdGhpcy5xLnRhYmxlLCB3aGVyZVswXSwgaWR4LCBjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKFtdLmNvbmNhdC5hcHBseShbXSwgcm93cykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZWxlY3Qgcm93cyB3aXRoaW4gYSBudW1lcmljYWwgcmFuZ2UgdXNpbmcgbGltaXQgYW5kIG9mZnNldCB2YWx1ZXMuXHJcbiAgICAgKiBOZWdhdGl2ZSBsaW1pdCB2YWx1ZXMgd2lsbCBzdGFydCB0aGUgcmFuZ2UgZnJvbSB0aGUgYm90dG9tIG9mIHRoZSB0YWJsZS5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSB7KHJvd3M6IERCUm93W10pID0+IHZvaWR9IGNhbGxiYWNrXHJcbiAgICAgKiBAbWVtYmVyb2YgX1Jvd1NlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICAvLyBbbGltaXQsIG9mZnNldF1cclxuICAgIF9Sb3dTZWxlY3Rpb24ucHJvdG90eXBlLl9zZWxlY3RCeVJhbmdlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5xLnJhbmdlKSB7XHJcbiAgICAgICAgICAgIHZhciByXzEgPSB0aGlzLnEucmFuZ2U7XHJcbiAgICAgICAgICAgIGlmIChyXzFbMF0gPiAwKSB7IC8vIHBvc2l0aXZlIGxpbWl0IHZhbHVlLCB3ZSBjYW4gc2VuZCB0aGlzIHN0cmFpZ2h0IHRvIHRoZSBhZGFwdGVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLnMuX3JhbmdlUmVhZCh0aGlzLnEudGFibGUsIHJfMVsxXSwgcl8xWzFdICsgcl8xWzBdLCBmYWxzZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyB1c2luZyBuZWdhdGl2ZSBsaW1pdCB2YWx1ZSB0byBnZXQgcm93cyBhdCB0aGUgZW5kIG9mIHRoZSBkYXRhYmFzZS5cclxuICAgICAgICAgICAgICAgIHRoaXMucy5hZGFwdGVyc1swXS5hZGFwdGVyLmdldEluZGV4KHRoaXMucS50YWJsZSwgdHJ1ZSwgZnVuY3Rpb24gKGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21JZHggPSByXzFbMF0gPiAwID8gcl8xWzFdIDogY291bnQgKyByXzFbMF0gLSByXzFbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvSWR4ID0gZnJvbUlkeDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRlciA9IE1hdGguYWJzKHJfMVswXSkgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudGVyLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9JZHgrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucy5fcmFuZ2VSZWFkKF90aGlzLnEudGFibGUsIGZyb21JZHgsIHRvSWR4LCBmYWxzZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKFtdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZWxlY3Qgcm93cyBiYXNlZCBvbiBhIFRyaWUgUXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAcGFyYW0geyhyb3dzOiBEQlJvd1tdKSA9PiB2b2lkfSBjYWxsYmFja1xyXG4gICAgICogQG1lbWJlcm9mIF9Sb3dTZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgX1Jvd1NlbGVjdGlvbi5wcm90b3R5cGUuX3NlbGVjdEJ5VHJpZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLnEudHJpZSkge1xyXG4gICAgICAgICAgICB0aGlzLnMuX3RyaWVSZWFkKHRoaXMucS50YWJsZSwgdGhpcy5xLnRyaWUuY29sdW1uLCB0aGlzLnEudHJpZS5zZWFyY2gsIGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKFtdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEbyBhIGZ1bGwgdGFibGUgc2NhbiwgY2hlY2tpbmcgZXZlcnkgcm93IGFnYWluc3QgdGhlIFdIRVJFIHN0YXRlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSB7KHJvd3M6IERCUm93W10pID0+IHZvaWR9IGNhbGxiYWNrXHJcbiAgICAgKiBAbWVtYmVyb2YgX1Jvd1NlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBfUm93U2VsZWN0aW9uLnByb3RvdHlwZS5fZnVsbFRhYmxlU2NhbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGhhc1doZXJlID0gdGhpcy5xLndoZXJlICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdmFyIGFycldoZXJlID0gaGFzV2hlcmUgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnEud2hlcmUpO1xyXG4gICAgICAgIHRoaXMucy5fcmVhZCh0aGlzLnEudGFibGUsIGZ1bmN0aW9uIChyb3csIGksIGtlZXApIHtcclxuICAgICAgICAgICAgaWYgKCFoYXNXaGVyZSkgeyAvLyBubyB3aGVyZSBzdGF0ZW1lbnRcclxuICAgICAgICAgICAgICAgIGtlZXAodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFycldoZXJlKSB7IC8vIHdoZXJlIGlzIGFycmF5XHJcbiAgICAgICAgICAgICAgICBrZWVwKF93aGVyZShyb3csIF90aGlzLnEud2hlcmUsIGkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgLy8gd2hlcmUgaXMgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgIGtlZXAoX3RoaXMucS53aGVyZShyb3csIGkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGEgY29tcG91bmQgd2hlcmUgc3RhdGVtZW50IGxpa2UgW1t2YWx1ZSwgPSwga2V5XSwgQU5ELCBbc29tZXRoaW5nLCA9LCBzb21ldGhpbmddXVxyXG4gICAgICogQ2hlY2sgaWYgZmlyc3Qgd2hlcmUgY29uZGl0aW9ucyBhcmUgcHJpbWFyeSBrZXkvIHNlY29uZGFyeSBpbmRleCBmb2xsb3dlZCBieSB1bm9wdGltaXplZC91bmluZGV4ZWQgY29uZGl0aW9uc1xyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSB3ZSBjYW4gZ3JhYiB0aGUgcHJpbWFyeSBrZXkvc2Vjb25kYXJ5IGluZGV4IHF1ZXJ5IGZyb20gdGhlIGRhdGFiYXNlIGFuZCBkbyBhIGZhc3RlciBxdWVyeSBvbiB0aGUgc21hbGxlciByZXN1bHQgc2V0LlxyXG4gICAgICpcclxuICAgICAqIFJldHVybnMgMCBpZiB0aGlzIGlzbid0IGEgc3Vib3B0aW1pemVkIHdoZXJlIGNvbmRpdGlvbi5cclxuICAgICAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSB3aGVyZSBhcnJheSB3aGVyZSB0aGUgQU5EIHNwbGl0cyBiZXR3ZWVuIG9wdGltaXplZCBhbmQgdW5vcHRpbWl6ZWQgY29uZGl0aW9ucyBvdGhlcndpc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7YW55W119IHdBcmdzXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQG1lbWJlcm9mIF9Sb3dTZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgX1Jvd1NlbGVjdGlvbi5wcm90b3R5cGUuX2lzU3ViT3B0aW1pemVkV2hlcmUgPSBmdW5jdGlvbiAod0FyZ3MpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd0FyZ3NbMF0gPT09IFwic3RyaW5nXCIpIHsgLy8gbm90IGNvbXBvdW5kIHdoZXJlXHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5faXNPcHRpbWl6ZWRXaGVyZSh3QXJnc1swXSkgPT09IDApIHsgLy8gYXQgbGVhc3QgZmlyc3QgdmFsdWUgaXMgb3B0aW1pemVkXHJcbiAgICAgICAgICAgIC8vIGxhc3QgcHJpbWFyeSBrZXkvc2Vjb25kYXJ5IGluZGV4IGNvbmRpdGlvbiBNVVNUIGJlIGZvbGxvd2VkIGJ5IEFORFxyXG4gICAgICAgICAgICB2YXIgbGFzdENoZWNrXzEgPSAwO1xyXG4gICAgICAgICAgICB3QXJncy5mb3JFYWNoKGZ1bmN0aW9uICh3QXJnLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzT3B0aW1pemVkV2hlcmUod0FyZykgPT09IDAgJiYgd0FyZ3NbaSArIDFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDaGVja18xID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gQU5EIG11c3QgZm9sbG93IHRoZSBsYXN0IHNlY29uZGFyeSBpbmRleC9wcmltYXJ5IGtleSBjb25kaXRpb25cclxuICAgICAgICAgICAgaWYgKHdBcmdzW2xhc3RDaGVja18xXSAhPT0gXCJBTkRcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFzdENoZWNrXzE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIGEgc2luZ2xlIFdIRVJFIHN0YXRlbWVudCBbXCJyb3dcIiwgXCI9XCIsIHZhbHVlXSB1c2VzIGEgcHJpbWFyeSBrZXkgb3Igc2Vjb25kYXJ5IGluZGV4IGFzIGl0J3Mgcm93LlxyXG4gICAgICogSWYgc28sIHdlIGNhbiB1c2UgYSBtdWNoIGZhc3RlciBTRUxFQ1QgbWV0aG9kLlxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICogQHBhcmFtIHthbnlbXX0gd0FyZ3NcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAbWVtYmVyb2YgX1Jvd1NlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBfUm93U2VsZWN0aW9uLnByb3RvdHlwZS5faXNPcHRpbWl6ZWRXaGVyZSA9IGZ1bmN0aW9uICh3QXJncykge1xyXG4gICAgICAgIHZhciB0YWJsZURhdGEgPSB0aGlzLnMudGFibGVJbmZvW3RoaXMucS50YWJsZV07XHJcbiAgICAgICAgaWYgKFtcIj1cIiwgXCJJTlwiLCBcIkJFVFdFRU5cIl0uaW5kZXhPZih3QXJnc1sxXSkgPiAtMSkge1xyXG4gICAgICAgICAgICAvLyBpZiAod0FyZ3NbMF0gPT09IHRhYmxlRGF0YS5fcGspIHtcclxuICAgICAgICAgICAgaWYgKHdBcmdzWzBdID09PSB0YWJsZURhdGEuX3BrIHx8IHRhYmxlRGF0YS5fc2Vjb25kYXJ5SW5kZXhlcy5pbmRleE9mKHdBcmdzWzBdKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX1Jvd1NlbGVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0cy5fUm93U2VsZWN0aW9uID0gX1Jvd1NlbGVjdGlvbjtcclxuLyoqXHJcbiAqIFNlbGVjdCByb3dzIGZyb20gYW4gaW5zdGFuY2UgdGFibGUuIFN1cHBvcnRzIFJBTkdFIGFuZCBXSEVSRSBzdGF0ZW1lbnRzLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBJbnN0YW5jZVNlbGVjdGlvblxyXG4gKi9cclxudmFyIEluc3RhbmNlU2VsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSW5zdGFuY2VTZWxlY3Rpb24ocSkge1xyXG4gICAgICAgIHRoaXMucSA9IHE7XHJcbiAgICB9XHJcbiAgICBJbnN0YW5jZVNlbGVjdGlvbi5wcm90b3R5cGUuZ2V0Um93cyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMucS5qb2luIHx8IHRoaXMucS5vcm0gfHwgdGhpcy5xLnRyaWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGRvIGEgSk9JTiwgT1JNIG9yIFRSSUUgY29tbWFuZCB3aXRoIGluc3RhbmNlIHRhYmxlIVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucS5yYW5nZSAmJiB0aGlzLnEucmFuZ2UubGVuZ3RoKSB7IC8vIHJhbmdlIHNlbGVjdCBbbGltaXQsIG9mZnNldF1cclxuICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5xLnJhbmdlLCBmcm9tXzEsIHRvXzE7XHJcbiAgICAgICAgICAgIGlmIChyYW5nZVswXSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGZyb21fMSA9ICh0aGlzLnEudGFibGUubGVuZ3RoKSArIHJhbmdlWzBdIC0gcmFuZ2VbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tXzEgPSByYW5nZVsxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY250ID0gTWF0aC5hYnMocmFuZ2VbMF0pIC0gMTtcclxuICAgICAgICAgICAgdG9fMSA9IGZyb21fMTtcclxuICAgICAgICAgICAgd2hpbGUgKGNudC0tKSB7XHJcbiAgICAgICAgICAgICAgICB0b18xKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5xLnRhYmxlLmZpbHRlcihmdW5jdGlvbiAodmFsLCBpZHgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpZHggPj0gZnJvbV8xICYmIGlkeCA8PSB0b18xO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGJhY2sodGhpcy5xLnRhYmxlLmZpbHRlcihmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5xLndoZXJlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShfdGhpcy5xLndoZXJlKSA/IF93aGVyZShyb3csIF90aGlzLnEud2hlcmUgfHwgW10sIGkpIDogX3RoaXMucS53aGVyZShyb3csIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSW5zdGFuY2VTZWxlY3Rpb247XHJcbn0oKSk7XHJcbmV4cG9ydHMuSW5zdGFuY2VTZWxlY3Rpb24gPSBJbnN0YW5jZVNlbGVjdGlvbjtcclxuLyoqXHJcbiAqIEhhbmRsZXMgV0hFUkUgc3RhdGVtZW50cywgY29tYmluaW5nIG11bHRpcGxlIGNvbXBhcmVkIHN0YXRlbWVudHMgYWdpbnN0IEFORC9PUiBhcyBuZWVkZWQgdG8gcmV0dXJuIGEgZmluYWwgYm9vbGVhbiB2YWx1ZS5cclxuICogVGhlIGZpbmFsIGJvb2xlYW4gdmFsdWUgaXMgd2V0aGVyIHRoZSByb3cgbWF0Y2hlcyBhbGwgV0hFUkUgY29uZGl0aW9ucyBvciBub3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gc2luZ2xlUm93XHJcbiAqIEBwYXJhbSB7YW55W119IHdoZXJlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByb3dJRFhcclxuICogQHBhcmFtIHtib29sZWFufSBbaWdub3JlRmlyc3RQYXRoXVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBfd2hlcmUgPSBmdW5jdGlvbiAoc2luZ2xlUm93LCB3aGVyZSwgcm93SURYLCBpZ25vcmVGaXJzdFBhdGgpIHtcclxuICAgIHZhciBjb21tYW5kcyA9IFtcIkFORFwiLCBcIk9SXCJdO1xyXG4gICAgaWYgKHR5cGVvZiB3aGVyZVswXSAhPT0gXCJzdHJpbmdcIikgeyAvLyBjb21wb3VuZCB3aGVyZSBzdGF0ZW1lbnRzXHJcbiAgICAgICAgdmFyIGhhc0FuZF8xID0gZmFsc2U7XHJcbiAgICAgICAgLy8gdHVybiB3aGVyZSBzdGF0ZW1lbnQgaW50byBhcnJheSBvZiBib29sZWFucyBhbmQgY29uZGl0aW9uc1xyXG4gICAgICAgIC8vIFtbaWQsIFwiPVwiLCAxXSwgXCJPUlwiLCBbXCJ0aGlzXCIsIFwiPVwiLCBcInRoYXRcIl1dID0+IFt0cnVlLCBcIk9SXCIsIGZhbHNlXTtcclxuICAgICAgICB2YXIgY2hlY2tXaGVyZV8xID0gd2hlcmUubWFwKGZ1bmN0aW9uICh3QXJnLCBpZHgpIHtcclxuICAgICAgICAgICAgaWYgKGNvbW1hbmRzLmluZGV4T2Yod0FyZykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod0FyZyA9PT0gXCJBTkRcIilcclxuICAgICAgICAgICAgICAgICAgICBoYXNBbmRfMSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd0FyZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfY29tcGFyZSh3QXJnWzJdLCB3QXJnWzFdLCB1dGlsaXRpZXNfMS5vYmpRdWVyeSh3QXJnWzBdLCBzaW5nbGVSb3csIGlnbm9yZUZpcnN0UGF0aCkpID09PSAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gY29tYmluZSBhbGwgT1Igc3RhdGVtZW50cyBpbnRvIGEgc2luZ2xlIGJvb2xlYW4gb2YgdGhlIHN1cnJvdW5kaW5nIGJvb2xlYW5zXHJcbiAgICAgICAgLy8gW3RydWUsIFwiT1JcIiwgZmFsc2UsIFwiQU5EXCIsIHRydWVdID0+IFt1bmRlZmluZWQsIHRydWUsIHVuZGVmaW5lZCwgXCJBTkRcIiwgdHJ1ZV1cclxuICAgICAgICAvLyBbZmFsc2UsIFwiT1JcIiwgZmFsc2UsIFwiQU5EXCIsIHRydWVdID0+IFt1bmRlZmluZWQsIGZhbHNlLCB1bmRlZmluZWQsIFwiQU5EXCIsIHRydWVdO1xyXG4gICAgICAgIGNoZWNrV2hlcmVfMS5mb3JFYWNoKGZ1bmN0aW9uICh3QXJnLCBpZHgpIHtcclxuICAgICAgICAgICAgaWYgKHdBcmcgPT09IFwiT1JcIikge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tXaGVyZV8xW2lkeF0gPSBjaGVja1doZXJlXzFbaWR4IC0gMV0gfHwgY2hlY2tXaGVyZV8xW2lkeCArIDFdO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tXaGVyZV8xW2lkeCAtIDFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tXaGVyZV8xW2lkeCArIDFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSB1bmRlZmluZWQgZWxlbWVudHMgZnJvbSB0aGUgYWJvdmUgYWN0aW9uXHJcbiAgICAgICAgLy8gW3VuZGVmaW5lZCwgZmFsc2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmYWxzZSwgdW5kZWZpbmVkLCBcIkFORFwiLCB0cnVlXSA9PiBbZmFsc2UsIGZhbHNlLCB0cnVlXVxyXG4gICAgICAgIC8vIGNoZWNrV2hlcmUgPSBjaGVja1doZXJlLmZpbHRlcih2YWwgPT4gdmFsICE9PSB1bmRlZmluZWQgJiYgdmFsICE9PSBcIkFORFwiKTtcclxuICAgICAgICAvLyBpZiB0aGVyZSBhcmUgYW55IGZhbHNlIGJvb2xzIGluIHRoZSBhcnJheSB0aGUgcm93IGRvZXNuJ3QgbWF0Y2guXHJcbiAgICAgICAgcmV0dXJuIGNoZWNrV2hlcmVfMS5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XHJcbiAgICAgICAgLypcclxuXHJcbiAgICAgICAgaWYgKCFoYXNBbmQpIHsgLy8gQWxsIE9SIHN0YXRlbWVudHMsIGlmIHRoZXJlIGFyZSB6ZXJvIHRydWUgdmFsdWVzIHRoZW4gdGhlIHJvdyBkb2Vzbid0IHBhc3MuXHJcbiAgICAgICAgICAgIHJldHVybiBjaGVja1doZXJlLmluZGV4T2YodHJ1ZSkgIT09IC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCByZWR1Y2luZzogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgcHJldkFuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gY2hlY2tXaGVyZS5yZWR1Y2UoKHByZXYsIGN1ciwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldi5wdXNoKGN1cik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNpbmcgPSBwcmV2Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyID09PSBcIkFORFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkFuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJldi5wdXNoKGN1cik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldkFuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXYucHVzaChjdXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZHVjaW5nID0gcHJldi5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZBbmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZWR1Y2luZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldltyZWR1Y2luZ10gPSBjdXIgfHwgcHJldltyZWR1Y2luZ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICAgICAgfSwgW10pLmluZGV4T2YoZmFsc2UpID09PSAtMTtcclxuICAgICAgICB9Ki9cclxuICAgIH1cclxuICAgIGVsc2UgeyAvLyBzaW5nbGUgd2hlcmUgc3RhdGVtZW50XHJcbiAgICAgICAgcmV0dXJuIF9jb21wYXJlKHdoZXJlWzJdLCB3aGVyZVsxXSwgdXRpbGl0aWVzXzEub2JqUXVlcnkod2hlcmVbMF0sIHNpbmdsZVJvdywgaWdub3JlRmlyc3RQYXRoKSkgPT09IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBDb21wYXJlIGZ1bmN0aW9uIHVzZWQgYnkgV0hFUkUgdG8gZGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gdmFsdWUgbWF0Y2hlcyBhIGdpdmVuIGNvbmRpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHsqfSB2YWwxXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wYXJlXHJcbiAqIEBwYXJhbSB7Kn0gdmFsMlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxudmFyIF9jb21wYXJlID0gZnVuY3Rpb24gKHZhbDEsIGNvbXBhcmUsIHZhbDIpIHtcclxuICAgIHZhciBzZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICByZXR1cm4gW1wiTElLRVwiLCBcIk5PVCBMSUtFXCJdLmluZGV4T2YoY29tcGFyZSkgPiAtMSA/IFN0cmluZyh2YWwgfHwgXCJcIikudG9Mb3dlckNhc2UoKSA6IHZhbDtcclxuICAgIH07XHJcbiAgICB2YXIgY29sdW1uVmFsdWUgPSBzZXRWYWx1ZSh2YWwyKTtcclxuICAgIHZhciBnaXZlblZhbHVlID0gc2V0VmFsdWUodmFsMSk7XHJcbiAgICBpZiAodmFsMSA9PT0gXCJOVUxMXCIgfHwgdmFsMSA9PT0gXCJOT1QgTlVMTFwiKSB7XHJcbiAgICAgICAgdmFyIHBvcyA9IGNvbXBhcmUgPT09IFwiPVwiIHx8IGNvbXBhcmUgPT09IFwiTElLRVwiO1xyXG4gICAgICAgIHJldHVybiAodmFsMSA9PT0gXCJOVUxMXCIgP1xyXG4gICAgICAgICAgICAodmFsMiA9PT0gbnVsbCB8fCB2YWwyID09PSB1bmRlZmluZWQpIDpcclxuICAgICAgICAgICAgKHZhbDIgIT09IG51bGwgJiYgdmFsMiAhPT0gdW5kZWZpbmVkKSkgP1xyXG4gICAgICAgICAgICAocG9zID8gMCA6IDEpIDogKHBvcyA/IDEgOiAwKTtcclxuICAgIH1cclxuICAgIHN3aXRjaCAoY29tcGFyZSkge1xyXG4gICAgICAgIC8vIGlmIGNvbHVtbiBlcXVhbCB0byBnaXZlbiB2YWx1ZVxyXG4gICAgICAgIGNhc2UgXCI9XCI6IHJldHVybiBjb2x1bW5WYWx1ZSA9PT0gZ2l2ZW5WYWx1ZSA/IDAgOiAxO1xyXG4gICAgICAgIC8vIGlmIGNvbHVtbiBub3QgZXF1YWwgdG8gZ2l2ZW4gdmFsdWVcclxuICAgICAgICBjYXNlIFwiIT1cIjogcmV0dXJuIGNvbHVtblZhbHVlICE9PSBnaXZlblZhbHVlID8gMCA6IDE7XHJcbiAgICAgICAgLy8gaWYgY29sdW1uIGdyZWF0aGVyIHRoYW4gZ2l2ZW4gdmFsdWVcclxuICAgICAgICBjYXNlIFwiPlwiOiByZXR1cm4gY29sdW1uVmFsdWUgPiBnaXZlblZhbHVlID8gMCA6IDE7XHJcbiAgICAgICAgLy8gaWYgY29sdW1uIGxlc3MgdGhhbiBnaXZlbiB2YWx1ZVxyXG4gICAgICAgIGNhc2UgXCI8XCI6IHJldHVybiBjb2x1bW5WYWx1ZSA8IGdpdmVuVmFsdWUgPyAwIDogMTtcclxuICAgICAgICAvLyBpZiBjb2x1bW4gbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGdpdmVuIHZhbHVlXHJcbiAgICAgICAgY2FzZSBcIjw9XCI6IHJldHVybiBjb2x1bW5WYWx1ZSA8PSBnaXZlblZhbHVlID8gMCA6IDE7XHJcbiAgICAgICAgLy8gaWYgY29sdW1uIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBnaXZlbiB2YWx1ZVxyXG4gICAgICAgIGNhc2UgXCI+PVwiOiByZXR1cm4gY29sdW1uVmFsdWUgPj0gZ2l2ZW5WYWx1ZSA/IDAgOiAxO1xyXG4gICAgICAgIC8vIGlmIGNvbHVtbiB2YWx1ZSBleGlzdHMgaW4gZ2l2ZW4gYXJyYXlcclxuICAgICAgICBjYXNlIFwiSU5cIjogcmV0dXJuIChnaXZlblZhbHVlIHx8IFtdKS5pbmRleE9mKGNvbHVtblZhbHVlKSA8IDAgPyAxIDogMDtcclxuICAgICAgICAvLyBpZiBjb2x1bW4gZG9lcyBub3QgZXhpc3QgaW4gZ2l2ZW4gYXJyYXlcclxuICAgICAgICBjYXNlIFwiTk9UIElOXCI6IHJldHVybiAoZ2l2ZW5WYWx1ZSB8fCBbXSkuaW5kZXhPZihjb2x1bW5WYWx1ZSkgPCAwID8gMCA6IDE7XHJcbiAgICAgICAgLy8gcmVnZXhwIHNlYXJjaCB0aGUgY29sdW1uXHJcbiAgICAgICAgY2FzZSBcIlJFR0VYXCI6IHJldHVybiBjb2x1bW5WYWx1ZS5tYXRjaChnaXZlblZhbHVlKS5sZW5ndGggPyAwIDogMTtcclxuICAgICAgICAvLyBpZiBnaXZlbiB2YWx1ZSBleGlzdHMgaW4gY29sdW1uIHZhbHVlXHJcbiAgICAgICAgY2FzZSBcIkxJS0VcIjogcmV0dXJuIGNvbHVtblZhbHVlLmluZGV4T2YoZ2l2ZW5WYWx1ZSkgPCAwID8gMSA6IDA7XHJcbiAgICAgICAgLy8gaWYgZ2l2ZW4gdmFsdWUgZG9lcyBub3QgZXhpc3QgaW4gY29sdW1uIHZhbHVlXHJcbiAgICAgICAgY2FzZSBcIk5PVCBMSUtFXCI6IHJldHVybiBjb2x1bW5WYWx1ZS5pbmRleE9mKGdpdmVuVmFsdWUpID49IDAgPyAxIDogMDtcclxuICAgICAgICAvLyBpZiB0aGUgY29sdW1uIHZhbHVlIGlzIGJldHdlZW4gdHdvIGdpdmVuIG51bWJlcnNcclxuICAgICAgICBjYXNlIFwiQkVUV0VFTlwiOiByZXR1cm4gZ2l2ZW5WYWx1ZVswXSA8PSBjb2x1bW5WYWx1ZSAmJiBnaXZlblZhbHVlWzFdID49IGNvbHVtblZhbHVlID8gMCA6IDE7XHJcbiAgICAgICAgLy8gaWYgc2luZ2xlIHZhbHVlIGV4aXN0cyBpbiBhcnJheSBjb2x1bW5cclxuICAgICAgICBjYXNlIFwiSEFWRVwiOiByZXR1cm4gKGNvbHVtblZhbHVlIHx8IFtdKS5pbmRleE9mKGdpdmVuVmFsdWUpIDwgMCA/IDEgOiAwO1xyXG4gICAgICAgIC8vIGlmIHNpbmdsZSB2YWx1ZSBkb2VzIG5vdCBleGlzdCBpbiBhcnJheSBjb2x1bW5cclxuICAgICAgICBjYXNlIFwiTk9UIEhBVkVcIjogcmV0dXJuIChjb2x1bW5WYWx1ZSB8fCBbXSkuaW5kZXhPZihnaXZlblZhbHVlKSA8IDAgPyAwIDogMTtcclxuICAgICAgICAvLyBpZiBhcnJheSBvZiB2YWx1ZXMgaW50ZXJzZWN0cyB3aXRoIGFycmF5IGNvbHVtblxyXG4gICAgICAgIGNhc2UgXCJJTlRFUlNFQ1RcIjogcmV0dXJuIChjb2x1bW5WYWx1ZSB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uIChsKSB7IHJldHVybiAoZ2l2ZW5WYWx1ZSB8fCBbXSkuaW5kZXhPZihsKSA+IC0xOyB9KS5sZW5ndGggPiAwID8gMCA6IDE7XHJcbiAgICAgICAgLy8gaWYgYXJyYXkgb2YgdmFsdWVzIGRvZXMgbm90IGludGVyc2VjdCB3aXRoIGFycmF5IGNvbHVtblxyXG4gICAgICAgIGNhc2UgXCJOT1QgSU5URVJTRUNUXCI6IHJldHVybiAoY29sdW1uVmFsdWUgfHwgW10pLmZpbHRlcihmdW5jdGlvbiAobCkgeyByZXR1cm4gKGdpdmVuVmFsdWUgfHwgW10pLmluZGV4T2YobCkgPiAtMTsgfSkubGVuZ3RoID09PSAwID8gMCA6IDE7XHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIDE7XHJcbiAgICB9XHJcbn07XHJcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGluZGV4XzEgPSByZXF1aXJlKFwiLi4vaW5kZXhcIik7XHJcbnZhciBxdWVyeV8xID0gcmVxdWlyZShcIi4vcXVlcnlcIik7XHJcbnZhciB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuLi91dGlsaXRpZXNcIik7XHJcbnZhciBzdG9yYWdlXzEgPSByZXF1aXJlKFwiLi9zdG9yYWdlXCIpO1xyXG52YXIgTmFub1NRTERlZmF1bHRCYWNrZW5kID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmFub1NRTERlZmF1bHRCYWNrZW5kKCkge1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5UG9vbCA9IFtdO1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5UHRyID0gMDtcclxuICAgIH1cclxuICAgIE5hbm9TUUxEZWZhdWx0QmFja2VuZC5wcm90b3R5cGUud2lsbENvbm5lY3QgPSBmdW5jdGlvbiAoY29ubmVjdEFyZ3MsIG5leHQpIHtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IGNvbm5lY3RBcmdzLnBhcmVudDtcclxuICAgICAgICB0aGlzLl9zdG9yZSA9IG5ldyBzdG9yYWdlXzEuX05hbm9TUUxTdG9yYWdlKGNvbm5lY3RBcmdzLnBhcmVudCwgX19hc3NpZ24oe30sIGNvbm5lY3RBcmdzLmNvbmZpZykpO1xyXG4gICAgICAgIC8qZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9xdWVyeVBvb2wucHVzaChuZXcgX05hbm9TUUxTdG9yYWdlUXVlcnkodGhpcy5fc3RvcmUpKTtcclxuICAgICAgICB9Ki9cclxuICAgICAgICB0aGlzLl9zdG9yZS5pbml0KGNvbm5lY3RBcmdzLm1vZGVscywgZnVuY3Rpb24gKG5ld01vZGVscykge1xyXG4gICAgICAgICAgICBjb25uZWN0QXJncy5tb2RlbHMgPSBfX2Fzc2lnbih7fSwgY29ubmVjdEFyZ3MubW9kZWxzLCBuZXdNb2RlbHMpO1xyXG4gICAgICAgICAgICBuZXh0KGNvbm5lY3RBcmdzKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBOYW5vU1FMRGVmYXVsdEJhY2tlbmQucHJvdG90eXBlLmRvRXhlYyA9IGZ1bmN0aW9uIChleGVjQXJncywgbmV4dCkge1xyXG4gICAgICAgIGV4ZWNBcmdzLnN0YXRlID0gXCJjb21wbGV0ZVwiO1xyXG4gICAgICAgIC8qdGhpcy5fcXVlcnlQdHIrKztcclxuICAgICAgICBpZiAodGhpcy5fcXVlcnlQdHIgPiB0aGlzLl9xdWVyeVBvb2wubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLl9xdWVyeVB0ciA9IDA7XHJcbiAgICAgICAgfSovXHJcbiAgICAgICAgbmV3IHF1ZXJ5XzEuX05hbm9TUUxTdG9yYWdlUXVlcnkodGhpcy5fc3RvcmUpLmRvUXVlcnkoZXhlY0FyZ3MsIG5leHQpO1xyXG4gICAgfTtcclxuICAgIC8qcHVibGljIHRyYW5zYWN0aW9uQmVnaW4oaWQ6IHN0cmluZywgbmV4dDogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIG5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHJhbnNhY3Rpb25FbmQoaWQ6IHN0cmluZywgbmV4dDogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIG5leHQoKTtcclxuICAgIH1cclxuICAgICovXHJcbiAgICBOYW5vU1FMRGVmYXVsdEJhY2tlbmQucHJvdG90eXBlLmR1bXBUYWJsZXMgPSBmdW5jdGlvbiAodGFibGVzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IHV0aWxpdGllc18xLlByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XHJcbiAgICAgICAgICAgIHZhciBkdW1wID0ge307XHJcbiAgICAgICAgICAgIHZhciBleHBvcnRUYWJsZXMgPSB0YWJsZXMgJiYgdGFibGVzLmxlbmd0aCA/IHRhYmxlcyA6IE9iamVjdC5rZXlzKF90aGlzLl9zdG9yZS50YWJsZUluZm8pO1xyXG4gICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKGV4cG9ydFRhYmxlcywgZnVuY3Rpb24gKHRhYmxlLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgICAgICBkdW1wW3RhYmxlXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLmFkYXB0ZXJzWzBdLmFkYXB0ZXIucmFuZ2VSZWFkKHRhYmxlLCBmdW5jdGlvbiAociwgaWR4LCByb3dEb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVtcFt0YWJsZV0ucHVzaChyKTtcclxuICAgICAgICAgICAgICAgICAgICByb3dEb25lKCk7XHJcbiAgICAgICAgICAgICAgICB9LCBkb25lKTtcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXMoZHVtcCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5hbm9TUUxEZWZhdWx0QmFja2VuZC5wcm90b3R5cGUuaW1wb3J0VGFibGVzID0gZnVuY3Rpb24gKHRhYmxlcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB1dGlsaXRpZXNfMS5Qcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xyXG4gICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKHRhYmxlcyksIGZ1bmN0aW9uICh0YWJsZU5hbWUsIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwa0tleSA9IF90aGlzLl9zdG9yZS50YWJsZUluZm9bdGFibGVOYW1lXS5fcGs7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHRhYmxlc1t0YWJsZU5hbWVdLCBmdW5jdGlvbiAocm93LCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd1twa0tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLmFkYXB0ZXJzWzBdLmFkYXB0ZXIud3JpdGUodGFibGVOYW1lLCByb3dbcGtLZXldLCByb3csIGRvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZG9uZSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVzKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5hbm9TUUxEZWZhdWx0QmFja2VuZC5wcm90b3R5cGUud2lsbERpc2Nvbm5lY3QgPSBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwodGhpcy5fc3RvcmUuYWRhcHRlcnMgfHwgW10sIGZ1bmN0aW9uIChhZGFwdGVyLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgIGlmIChhZGFwdGVyLmRpc2Nvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgIGFkYXB0ZXIuZGlzY29ubmVjdChkb25lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4obmV4dCk7XHJcbiAgICB9O1xyXG4gICAgTmFub1NRTERlZmF1bHRCYWNrZW5kLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAobmV4dCwgYXJncywgcmVzdWx0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBzd2l0Y2ggKGFyZ3NbMF0pIHtcclxuICAgICAgICAgICAgY2FzZSBcImNsb25lXCI6XHJcbiAgICAgICAgICAgICAgICB2YXIgblNRTGlfMSA9IG5ldyBpbmRleF8xLk5hbm9TUUxJbnN0YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5wYXJlbnQuZGF0YU1vZGVscykuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuU1FMaV8xLnRhYmxlKHRhYmxlKS5tb2RlbChfdGhpcy5wYXJlbnQuZGF0YU1vZGVsc1t0YWJsZV0sIFtdLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgblNRTGlfMVxyXG4gICAgICAgICAgICAgICAgICAgIC5jb25maWcoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLl9zdG9yZS5faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogYXJnc1sxXVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY29ubmVjdCgpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4oT2JqZWN0LmtleXMoX3RoaXMucGFyZW50LmRhdGFNb2RlbHMpLCBmdW5jdGlvbiAodGFibGUsIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJbXBvcnRpbmcgXCIgKyB0YWJsZSArIFwiLi4uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wYXJlbnQucmF3RHVtcChbdGFibGVdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuU1FMaV8xLnJhd0ltcG9ydChkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KGFyZ3MsIFtdKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJmbHVzaFwiOlxyXG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlc18xID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFyZ3NbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZXNfMSA9IHRoaXMucGFyZW50LnRhYmxlTmFtZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZXNfMSA9IFthcmdzWzFdXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RDSEFJTih0YWJsZXNfMSwgZnVuY3Rpb24gKHRhYmxlLCBpLCBuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlLl9kcm9wKHRhYmxlLCBuZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoYXJncywgdGFibGVzXzEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImdldF9hZGFwdGVyXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFyZ3NbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0KGFyZ3MsIFt0aGlzLl9zdG9yZS5hZGFwdGVyc1swXS5hZGFwdGVyXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0KGFyZ3MsIFt0aGlzLl9zdG9yZS5hZGFwdGVyc1thcmdzWzFdXS5hZGFwdGVyXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImlkeC5sZW5ndGhcIjpcclxuICAgICAgICAgICAgY2FzZSBcImlkeFwiOlxyXG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gYXJnc1sxXTtcclxuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9zdG9yZS50YWJsZUluZm8pLmluZGV4T2YodGFibGUpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZS5hZGFwdGVyc1swXS5hZGFwdGVyLmdldEluZGV4KHRhYmxlLCBhcmdzWzBdICE9PSBcImlkeFwiLCBmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoYXJncywgaWR4KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoYXJncywgW10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyZWJ1aWxkX2lkeFwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3NbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZS5yZWJ1aWxkSW5kZXhlcyhhcmdzWzFdLCBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KGFyZ3MsIFt0aW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKE9iamVjdC5rZXlzKHRoaXMuX3N0b3JlLnRhYmxlSW5mbyksIGZ1bmN0aW9uICh0YWJsZSwgaSwgZG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmUucmVidWlsZEluZGV4ZXModGFibGUsIGRvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHRpbWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoYXJncywgdGltZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjbGVhcl9jYWNoZVwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3NbMV0gJiYgYXJnc1syXSkgeyAvLyBpbnZhbGlkYXRlIHJvd3Mgb24gYSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JlLl9pbnZhbGlkYXRlQ2FjaGUoYXJnc1sxXSwgYXJnc1syXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmdzWzFdKSB7IC8vIGludmFsaWRhdGUgd2hvbGUgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZS5fY2FjaGVbYXJnc1sxXV0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZS5fY2FjaGVLZXlzW2FyZ3NbMV1dID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHsgLy8gaW52YWxpZGF0ZSBhbGwgdGFibGVzXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fc3RvcmUudGFibGVJbmZvKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmUuX2NhY2hlW3RhYmxlXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmUuX2NhY2hlS2V5c1t0YWJsZV0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQoYXJncywgYXJnc1sxXSB8fCBPYmplY3Qua2V5cyh0aGlzLl9zdG9yZS50YWJsZUluZm8pKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbmV4dChhcmdzLCByZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gTmFub1NRTERlZmF1bHRCYWNrZW5kO1xyXG59KCkpO1xyXG5leHBvcnRzLk5hbm9TUUxEZWZhdWx0QmFja2VuZCA9IE5hbm9TUUxEZWZhdWx0QmFja2VuZDtcclxuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgUmVhbGx5U21hbGxFdmVudHMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVhbGx5U21hbGxFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHt9O1xyXG4gICAgfVxyXG4gICAgUmVhbGx5U21hbGxFdmVudHMucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghdGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgUmVhbGx5U21hbGxFdmVudHMucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XSAmJiB0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2IsIGlkeCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNiID09PSBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlYWxseVNtYWxsRXZlbnRzLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIGNiLmFwcGx5KHZvaWQgMCwgYXJncyk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVhbGx5U21hbGxFdmVudHM7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUmVhbGx5U21hbGxFdmVudHMgPSBSZWFsbHlTbWFsbEV2ZW50cztcclxuZXhwb3J0cy5SU0UgPSBuZXcgUmVhbGx5U21hbGxFdmVudHMoKTtcclxuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxudmFyIF9OYW5vU1FMVHJhbnNhY3Rpb25RdWVyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIF9OYW5vU1FMVHJhbnNhY3Rpb25RdWVyeShhY3Rpb24sIGFyZ3MsIHRhYmxlLCBxdWVyaWVzLCB0cmFuc2FjdGlvbklEKSB7XHJcbiAgICAgICAgdGhpcy50aGlzUSA9IHtcclxuICAgICAgICAgICAgc3RhdGU6IFwicGVuZGluZ1wiLFxyXG4gICAgICAgICAgICB0YWJsZTogdGFibGUsXHJcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxyXG4gICAgICAgICAgICBhY3Rpb25BcmdzOiBhcmdzLFxyXG4gICAgICAgICAgICBxdWVyeUlEOiB0cmFuc2FjdGlvbklELFxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgY29tbWVudHM6IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9xdWVyaWVzID0gcXVlcmllcztcclxuICAgIH1cclxuICAgIF9OYW5vU1FMVHJhbnNhY3Rpb25RdWVyeS5wcm90b3R5cGUud2hlcmUgPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIHRoaXMudGhpc1Eud2hlcmUgPSBhcmdzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIF9OYW5vU1FMVHJhbnNhY3Rpb25RdWVyeS5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9xdWVyaWVzLnB1c2godGhpcy50aGlzUSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9OYW5vU1FMVHJhbnNhY3Rpb25RdWVyeTtcclxufSgpKTtcclxuZXhwb3J0cy5fTmFub1NRTFRyYW5zYWN0aW9uUXVlcnkgPSBfTmFub1NRTFRyYW5zYWN0aW9uUXVlcnk7XHJcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHV0aWxpdGllc18xID0gcmVxdWlyZShcIi4uL3V0aWxpdGllc1wiKTtcclxudmFyIGJsYW5rUm93ID0geyBhZmZlY3RlZFJvd1BLUzogW10sIGFmZmVjdGVkUm93czogW10gfTtcclxudmFyIHJ1blF1ZXJ5ID0gZnVuY3Rpb24gKHNlbGYsIGNvbXBsZXRlKSB7XHJcbiAgICBpZiAoc2VsZi5fZGIucGx1Z2lucy5sZW5ndGggPT09IDEgJiYgIXNlbGYuX2RiLmhhc0FueUV2ZW50cykge1xyXG4gICAgICAgIC8vIGZhc3QgcXVlcnkgcGF0aCwgb25seSB1c2VkIGlmIHRoZXJlJ3MgYSBzaW5nbGUgcGx1Z2luIGFuZCBubyBldmVudCBsaXN0ZW5lcnNcclxuICAgICAgICBzZWxmLl9kYi5wbHVnaW5zWzBdLmRvRXhlYyhzZWxmLl9xdWVyeSwgZnVuY3Rpb24gKG5ld1EpIHtcclxuICAgICAgICAgICAgc2VsZi5fcXVlcnkgPSBuZXdRO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5fZGIuaGFzUEtbc2VsZi5fcXVlcnkudGFibGVdKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShzZWxmLl9xdWVyeS5yZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGUoc2VsZi5fcXVlcnkucmVzdWx0Lm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gKF9fYXNzaWduKHt9LCByLCB7IF9pZF86IHVuZGVmaW5lZCB9KSk7IH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdXRpbGl0aWVzXzEuZmFzdENIQUlOKHNlbGYuX2RiLnBsdWdpbnMsIGZ1bmN0aW9uIChwLCBpLCBuZXh0UCkge1xyXG4gICAgICAgICAgICBpZiAocC5kb0V4ZWMpIHtcclxuICAgICAgICAgICAgICAgIHAuZG9FeGVjKHNlbGYuX3F1ZXJ5LCBmdW5jdGlvbiAobmV3USkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3F1ZXJ5ID0gbmV3USB8fCBzZWxmLl9xdWVyeTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0UCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0UCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLl9kYi5oYXNQS1tzZWxmLl9xdWVyeS50YWJsZV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHNlbGYuX3F1ZXJ5LnJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShzZWxmLl9xdWVyeS5yZXN1bHQubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiAoX19hc3NpZ24oe30sIHIsIHsgX2lkXzogdW5kZWZpbmVkIH0pKTsgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzZWxmLl9kYi5oYXNBbnlFdmVudHMgfHwgc2VsZi5fZGIucGx1Z2luSGFzRGlkRXhlYykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50VHlwZXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc2VsZi5fcXVlcnkuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjogcmV0dXJuIFtzZWxmLl9xdWVyeS5hY3Rpb25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1cHNlcnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRyb3BcIjogcmV0dXJuIFtzZWxmLl9xdWVyeS5hY3Rpb24sIFwiY2hhbmdlXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkoKTtcclxuICAgICAgICAgICAgICAgIHZhciBoYXNMZW5ndGggPSBzZWxmLl9xdWVyeS5yZXN1bHQgJiYgc2VsZi5fcXVlcnkucmVzdWx0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudF8xID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlOiBzZWxmLl9xdWVyeS50YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogc2VsZi5fcXVlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHNlbGYuX3F1ZXJ5LnJlc3VsdCxcclxuICAgICAgICAgICAgICAgICAgICBub3RlczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZXM6IGV2ZW50VHlwZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uT3JWaWV3OiBzZWxmLl9BVixcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbklEOiBzZWxmLl9xdWVyeS50cmFuc2FjdGlvbiA/IHNlbGYuX3F1ZXJ5LnF1ZXJ5SUQgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWRSb3dQS1M6IGhhc0xlbmd0aCA/IChzZWxmLl9xdWVyeS5yZXN1bHRbMF0gfHwgYmxhbmtSb3cpLmFmZmVjdGVkUm93UEtTIDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWRSb3dzOiBoYXNMZW5ndGggPyAoc2VsZi5fcXVlcnkucmVzdWx0WzBdIHx8IGJsYW5rUm93KS5hZmZlY3RlZFJvd3MgOiBbXSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0Q0hBSU4oc2VsZi5fZGIucGx1Z2lucywgZnVuY3Rpb24gKHAsIGksIG5leHRQKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAuZGlkRXhlYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwLmRpZEV4ZWMoZXZlbnRfMSwgZnVuY3Rpb24gKG5ld0UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50XzEgPSBuZXdFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0UCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2RiLnRyaWdnZXJFdmVudChldmVudF8xKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBkZWJvdW5jZVRpbWVycyA9IHt9O1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxudmFyIF9OYW5vU1FMUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfTmFub1NRTFF1ZXJ5KGRiLCB0YWJsZSwgcXVlcnlBY3Rpb24sIHF1ZXJ5QXJncywgYWN0aW9uT3JWaWV3KSB7XHJcbiAgICAgICAgdGhpcy5fZGIgPSBkYjtcclxuICAgICAgICB0aGlzLl9BViA9IGFjdGlvbk9yVmlldyB8fCBcIlwiO1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5ID0ge1xyXG4gICAgICAgICAgICB0YWJsZTogdGFibGUsXHJcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbXSxcclxuICAgICAgICAgICAgc3RhdGU6IFwicGVuZGluZ1wiLFxyXG4gICAgICAgICAgICBxdWVyeUlEOiBEYXRlLm5vdygpICsgXCIuXCIgKyB0aGlzLl9kYi5mYXN0UmFuZCgpLFxyXG4gICAgICAgICAgICBhY3Rpb246IHF1ZXJ5QWN0aW9uLFxyXG4gICAgICAgICAgICBhY3Rpb25BcmdzOiBxdWVyeUFyZ3MsXHJcbiAgICAgICAgICAgIHJlc3VsdDogW11cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHNlbGVjdCBzcGVjaWZpYyByb3dzIGJhc2VkIG9uIGEgc2V0IG9mIGNvbmRpdGlvbnMuXHJcbiAgICAgKiBZb3UgY2FuIHBhc3MgaW4gYSBzaW5nbGUgYXJyYXkgd2l0aCBhIGNvbmRpdGlvbmFsIHN0YXRlbWVudCBvciBhbiBhcnJheSBvZiBhcnJheXMgc2VwZXJhdGVkIGJ5IFwiYW5kXCIsIFwib3JcIiBmb3IgY29tcG91bmQgc2VsZWN0cy5cclxuICAgICAqIEEgc2luZ2xlIHdoZXJlIHN0YXRlbWVudCBoYXMgdGhlIGNvbHVtbiBuYW1lIG9uIHRoZSBsZWZ0LCBhbiBvcGVyYXRvciBpbiB0aGUgbWlkZGxlLCB0aGVuIGEgY29tcGFyaXNvbiBvbiB0aGUgcmlnaHQuXHJcbiAgICAgKlxyXG4gICAgICogV2hlcmUgRXhhbXBsZXM6XHJcbiAgICAgKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIC53aGVyZShbJ3VzZXJuYW1lJywnPScsJ2JpbGx5J10pXHJcbiAgICAgKiAud2hlcmUoWydiYWxhbmNlJywnPicsMjBdKVxyXG4gICAgICogLndoZXJlKFsnY2F0Z29yeScsJ0lOJyxbJ2plYW5zJywnc2hpcnRzJ11dKVxyXG4gICAgICogLndoZXJlKFtbJ25hbWUnLCc9Jywnc2NvdHQnXSwnYW5kJyxbJ2JhbGFuY2UnLCc+JywyMDBdXSlcclxuICAgICAqIC53aGVyZShbWydpZCcsJz4nLDUwXSwnb3InLFsncG9zdElEcycsJ0lOJyxbMTIsMjAsMzBdXSwnYW5kJyxbJ25hbWUnLCdMSUtFJywnQmlsbHknXV0pXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyhBcnJheTxhbnl8QXJyYXk8YW55Pj4pfSBhcmdzXHJcbiAgICAgKiBAcmV0dXJucyB7X05hbm9TUUxRdWVyeX1cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS53aGVyZSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fcXVlcnkud2hlcmUgPSBhcmdzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUXVlcnkgdG8gZ2V0IGEgc3BlY2lmaWMgcmFuZ2Ugb2Ygcm93cyB2ZXJ5IGVmZmljaWVudGx5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5yYW5nZSA9IGZ1bmN0aW9uIChsaW1pdCwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdGhpcy5fcXVlcnkucmFuZ2UgPSBbbGltaXQsIG9mZnNldF07XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHVzaW5nIFwiZnJvbVwiIGZlYXR1cmVzIHNwZWNpZmljIHdoYXQgcHJpbWFyeSBrZXlzIHRvIHVwZGF0ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBwcmltYXJ5S2V5c1xyXG4gICAgICogQHJldHVybnMge19OYW5vU1FMUXVlcnl9XHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChwcmltYXJ5S2V5cykge1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5Lm9uID0gcHJpbWFyeUtleXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWJvdW5jZSBhZ2dyZWdhdGUgZnVuY3Rpb24gY2FsbHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFtbXRcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMUXVlcnkucHJvdG90eXBlLmRlYm91bmNlID0gZnVuY3Rpb24gKG1zKSB7XHJcbiAgICAgICAgdGhpcy5fcXVlcnkuZGVib3VuY2UgPSBtcyB8fCAyNTA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2UgT1JNIHF1ZXJpZXMgZm9yIGFsbCByZXN1bHQgcm93cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geygoc3RyaW5nfE9STUFyZ3MpW10pfSBbb3JtQXJnc11cclxuICAgICAqIEByZXR1cm5zIHtfTmFub1NRTFF1ZXJ5fVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBfTmFub1NRTFF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMUXVlcnkucHJvdG90eXBlLm9ybSA9IGZ1bmN0aW9uIChvcm1BcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fcXVlcnkub3JtID0gb3JtQXJncztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE9yZGVyIHRoZSByZXN1bHRzIGJ5IGEgZ2l2ZW4gY29sdW1uIG9yIGNvbHVtbnMuXHJcbiAgICAgKlxyXG4gICAgICogRXhhbXBsZXM6XHJcbiAgICAgKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIC5vcmRlckJ5KHt1c2VybmFtZTpcImFzY1wifSkgLy8gb3JkZXIgYnkgdXNlcm5hbWUgY29sdW1uLCBhc2NlbmRpbmdcclxuICAgICAqIC5vcmRlckJ5KHtiYWxhbmNlOlwiZGVzY1wiLGxhc3ROYW1lOlwiYXNjXCJ9KSAvLyBvcmRlciBieSBiYWxhbmNlIGRlc2NlbmRpbmcsIHRoZW4gbGFzdE5hbWUgYXNjZW5kaW5nLlxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFyZ3NcclxuICAgICAqIEByZXR1cm5zIHtfTmFub1NRTFF1ZXJ5fVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBfTmFub1NRTFF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIF9OYW5vU1FMUXVlcnkucHJvdG90eXBlLm9yZGVyQnkgPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5Lm9yZGVyQnkgPSBhcmdzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR3JvdXAgQnkgY29tbWFuZCwgdHlwaWNhbGx5IHVzZWQgd2l0aCBhbiBhZ2dyZWdhdGUgZnVuY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogRXhhbXBsZTpcclxuICAgICAqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogblNRTChcInVzZXJzXCIpLnF1ZXJ5KFwic2VsZWN0XCIsW1wiZmF2b3JpdGVDb2xvclwiLFwiY291bnQoKilcIl0pLmdyb3VwQnkoe1wiZmF2b3JpdGVDb2xvclwiOlwiYXNjXCJ9KS5leGVjKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBUaGlzIHdpbGwgcHJvdmlkZSBhIGxpc3Qgb2YgYWxsIGZhdm9yaXRlIGNvbG9ycyBhbmQgaG93IG1hbnkgZWFjaCBvZiB0aGVtIGFyZSBpbiB0aGUgZGIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoe1trZXk6IHN0cmluZ106XCJhc2NcInxcImRlc2NcIn0pfSBjb2x1bW5zXHJcbiAgICAgKiBAcmV0dXJucyB7X05hbm9TUUxRdWVyeX1cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5ncm91cEJ5ID0gZnVuY3Rpb24gKGNvbHVtbnMpIHtcclxuICAgICAgICB0aGlzLl9xdWVyeS5ncm91cEJ5ID0gY29sdW1ucztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEhhdmluZyBzdGF0ZW1lbnQsIHVzZWQgdG8gZmlsdGVyIEdyb3VwIEJZIHN0YXRlbWVudHMuIFN5bnRheCBpcyBpZGVudGljYWwgdG8gd2hlcmUgc3RhdGVtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7X05hbm9TUUxRdWVyeX1cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5oYXZpbmcgPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIGlmICghYXJncy5sZW5ndGggfHwgIUFycmF5LmlzQXJyYXkoYXJncykpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcIkhhdmluZyBjb25kaXRpb24gcmVxdWlyZXMgYW4gYXJyYXkhXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3F1ZXJ5LmhhdmluZyA9IGFyZ3M7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBKb2luIGNvbW1hbmQuXHJcbiAgICAgKlxyXG4gICAgICogRXhhbXBsZTpcclxuICAgICAqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIG5TUUwoXCJvcmRlcnNcIilcclxuICAgICAqICAucXVlcnkoXCJzZWxlY3RcIiwgW1wib3JkZXJzLmlkXCIsXCJvcmRlcnMudGl0bGVcIixcInVzZXJzLm5hbWVcIl0pXHJcbiAgICAgKiAgLndoZXJlKFtcIm9yZGVycy5zdGF0dXNcIixcIj1cIixcImNvbXBsZXRlXCJdKVxyXG4gICAgICogIC5vcmRlckJ5KHtcIm9yZGVycy5kYXRlXCI6XCJhc2NcIn0pXHJcbiAgICAgKiAgLmpvaW4oe1xyXG4gICAgICogICAgICB0eXBlOlwiaW5uZXJcIixcclxuICAgICAqICAgICAgdGFibGU6XCJ1c2Vyc1wiLFxyXG4gICAgICogICAgICB3aGVyZTpbXCJvcmRlcnMuY3VzdG9tZXJJRFwiLFwiPVwiLFwidXNlci5pZFwiXVxyXG4gICAgICogIH0pLmV4ZWMoKTtcclxuICAgICAqYGBgXHJcbiAgICAgKiBBIGZldyBub3RlcyBvbiB0aGUgam9pbiBjb21tYW5kOlxyXG4gICAgICogMS4gWW91IG11c2UgdXNlIGRvdCBub3RhdGlvbiB3aXRoIHRoZSB0YWJsZSBuYW1lcyBpbiBhbGwgXCJ3aGVyZVwiLCBcInNlbGVjdFwiLCBcIm9yZGVyYnlcIiwgYW5kIFwiZ3JvdXBieVwiIGFyZ3VtZW50cy5cclxuICAgICAqIDIuIFBvc3NpYmxlIGpvaW4gdHlwZXMgYXJlIGBpbm5lcmAsIGBsZWZ0YCwgYHJpZ2h0YCwgYW5kIGBvdXRlcmAuXHJcbiAgICAgKiAzLiBUaGUgXCJ0YWJsZVwiIGFyZ3VtZW50IGxldHMgeW91IGRldGVybWluZSB0aGUgZGF0YSBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgam9pbi5cclxuICAgICAqIDQuIFRoZSBcIndoZXJlXCIgYXJndW1lbnQgbGV0cyB5b3Ugc2V0IHdoYXQgY29uZGl0aW9ucyB0aGUgdGFibGVzIGFyZSBqb2luZWQgb24uXHJcbiAgICAgKlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0pvaW5BcmdzfSBhcmdzXHJcbiAgICAgKiBAcmV0dXJucyB7X05hbm9TUUxRdWVyeX1cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9xdWVyeS50YWJsZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBKT0lOIHdpdGggaW5zdGFuY2UgdGFibGUhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFyZ3MudGFibGUgfHwgIWFyZ3MudHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiSm9pbiBjb21tYW5kIHJlcXVpcmVzIHRhYmxlIGFuZCB0eXBlIGFyZ3VtZW50cyFcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcXVlcnkuam9pbiA9IGFyZ3M7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBMaW1pdHMgdGhlIHJlc3VsdCB0byBhIHNwZWNpZmljIGFtb3VudC4gIEV4YW1wbGU6XHJcbiAgICAgKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIC5saW1pdCgyMCkgLy8gTGltaXQgdG8gdGhlIGZpcnN0IDIwIHJlc3VsdHNcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcmdzXHJcbiAgICAgKiBAcmV0dXJucyB7X05hbm9TUUxRdWVyeX1cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5saW1pdCA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fcXVlcnkubGltaXQgPSBhcmdzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBhIHRyaWUgc2VhcmNoIG9uIGEgdHJpZSBjb2x1bW4uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1RvU2VhcmNoXHJcbiAgICAgKiBAcmV0dXJucyB7X05hbm9TUUxRdWVyeX1cclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyT2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS50cmllU2VhcmNoID0gZnVuY3Rpb24gKGNvbHVtbiwgc3RyaW5nVG9TZWFyY2gpIHtcclxuICAgICAgICB0aGlzLl9xdWVyeS50cmllID0geyBjb2x1bW46IGNvbHVtbiwgc2VhcmNoOiBzdHJpbmdUb1NlYXJjaCB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGFzcyBjb21tZW50cyBhbG9uZyB3aXRoIHRoZSBxdWVyeS5cclxuICAgICAqIFRoZXNlIGNvbW1lbnRzIHdpbGwgYmUgZW1pdHRlZCBhbG9uZyB3aXRoIHRoZSBvdGhlciBxdWVyeSBkYXRheSBieSB0aGUgZXZlbnQgc3lzdGVtLCB1c2VmdWwgZm9yIHRyYWNraW5nIHF1ZXJpZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtfTmFub1NRTFF1ZXJ5fVxyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMUXVlcnlcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxRdWVyeS5wcm90b3R5cGUuY29tbWVudCA9IGZ1bmN0aW9uIChjb21tZW50KSB7XHJcbiAgICAgICAgdGhpcy5fcXVlcnkuY29tbWVudHMucHVzaChjb21tZW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gY3VzdG9tIGFjdGlvbnMgc3VwcG9ydGVkIGJ5IHBsdWdpbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsuLi5hbnlbXX0gYXJnc1xyXG4gICAgICogQHJldHVybnMge19OYW5vU1FMUXVlcnl9XHJcbiAgICAgKiBAbWVtYmVyb2YgX05hbm9TUUxRdWVyeVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3F1ZXJ5LmV4dGVuZCA9IGFyZ3M7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPZmZzZXRzIHRoZSByZXN1bHRzIGJ5IGEgc3BlY2lmaWMgYW1vdW50IGZyb20gdGhlIGJlZ2lubmluZy4gIEV4YW1wbGU6XHJcbiAgICAgKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIC5vZmZzZXQoMTApIC8vIFNraXAgdGhlIGZpcnN0IDEwIHJlc3VsdHMuXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJnc1xyXG4gICAgICogQHJldHVybnMge19OYW5vU1FMUXVlcnl9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIF9OYW5vU1FMUXVlcnlcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxRdWVyeS5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICB0aGlzLl9xdWVyeS5vZmZzZXQgPSBhcmdzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXhwb3J0IHRoZSBjdXJyZW50IHF1ZXJ5IHRvIGEgQ1NWIGZpbGUsIHVzZSBpbiBwbGFjZSBvZiBcImV4ZWMoKVwiO1xyXG4gICAgICpcclxuICAgICAqIEV4YW1wbGU6XHJcbiAgICAgKiBuU1FMKFwidXNlcnNcIikucXVlcnkoXCJzZWxlY3RcIikudG9DU1YodHJ1ZSkudGhlbihmdW5jdGlvbihjc3YsIGRiKSB7XHJcbiAgICAgKiAgIGNvbnNvbGUubG9nKGNzdik7XHJcbiAgICAgKiAgIC8vIFJldHVybnMgc29tZXRoaW5nIGxpa2U6XHJcbiAgICAgKiAgIGlkLG5hbWUscGFzcyxwb3N0SURzXHJcbiAgICAgKiAgIDEsXCJzY290dFwiLFwiMTIzNFwiLFwiWzEsMiwzLDRdXCJcclxuICAgICAqICAgMixcImplYlwiLFwiNTY3OFwiLFwiWzUsNiw3LDhdXCJcclxuICAgICAqIH0pO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hlYWRlcnNdXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBOYW5vU1FMSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxRdWVyeS5wcm90b3R5cGUudG9DU1YgPSBmdW5jdGlvbiAoaGVhZGVycykge1xyXG4gICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IHV0aWxpdGllc18xLlByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XHJcbiAgICAgICAgICAgIHQuZXhlYygpLnRoZW4oZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBjc3YgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmICghanNvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMoXCJcIiwgdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNzdi5wdXNoKE9iamVjdC5rZXlzKGpzb25bMF0pLmpvaW4oXCIsXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGpzb24uZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3N2LnB1c2goT2JqZWN0LmtleXMocm93KS5tYXAoZnVuY3Rpb24gKGspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd1trXSA9PT0gbnVsbCB8fCByb3dba10gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygcm93W2tdID09PSBcIm9iamVjdFwiID8gJ1wiJyArIEpTT04uc3RyaW5naWZ5KHJvd1trXSkucmVwbGFjZSgvXFxcIi9nLCAnXFwnJykgKyAnXCInIDogcm93W2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oXCIsXCIpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzKGNzdi5qb2luKFwiXFxuXCIpLCB0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXNzIGluIGEgcXVlcnkgb2JqZWN0IHRvIG1hbnVhbGx5IGV4ZWN1dGUgYSBxdWVyeSBhZ2FpbnN0IHRoZSBzeXN0ZW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJZGJRdWVyeX0gcXVlcnlcclxuICAgICAqIEBwYXJhbSB7KGVycjogYW55LCByZXN1bHQ6IGFueVtdKSA9PiB2b2lkfSBbY29tcGxldGVdXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMUXVlcnlcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxRdWVyeS5wcm90b3R5cGUubWFudWFsRXhlYyA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5ID0gX19hc3NpZ24oe30sIHRoaXMuX3F1ZXJ5LCBxdWVyeSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhlYygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIGRlbm9ybWFsaXphdGlvbiByZXF1ZXN0cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICogQG1lbWJlcm9mIF9OYW5vU1FMUXVlcnlcclxuICAgICAqL1xyXG4gICAgX05hbm9TUUxRdWVyeS5wcm90b3R5cGUuZGVub3JtYWxpemF0aW9uUXVlcnkgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IHV0aWxpdGllc18xLlByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidG9jb2x1bW5cIjpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm5zVG9SdW5fMSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcXVlcnkuYWN0aW9uQXJncyAmJiBfdGhpcy5fcXVlcnkuYWN0aW9uQXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoX3RoaXMuX2RiLnRvQ29sUnVsZXNbX3RoaXMuX3F1ZXJ5LnRhYmxlXSkuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBfdGhpcy5fcXVlcnkuYWN0aW9uQXJncy5pbmRleE9mKGMpICE9PSAtMTsgfSkuZm9yRWFjaChmdW5jdGlvbiAoY29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbnNUb1J1bl8xW2NvbF0gPSBfdGhpcy5fZGIudG9Db2xSdWxlc1tfdGhpcy5fcXVlcnkudGFibGVdW2NvbF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm5zVG9SdW5fMSA9IF90aGlzLl9kYi50b0NvbFJ1bGVzW190aGlzLl9xdWVyeS50YWJsZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9xdWVyeS5hY3Rpb24gPSBcInNlbGVjdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9xdWVyeS5hY3Rpb25BcmdzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zXzEgPSBPYmplY3Qua2V5cyhmbnNUb1J1bl8xKTtcclxuICAgICAgICAgICAgICAgICAgICBydW5RdWVyeShfdGhpcywgZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbGl0aWVzXzEuZmFzdENIQUlOKHJvd3MsIGZ1bmN0aW9uIChyb3csIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4ocm93KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IHV0aWxpdGllc18xLl9hc3NpZ24ocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxpdGllc18xLmZhc3RBTEwoY29sdW1uc18xLCBmdW5jdGlvbiAoY29sLCBpLCBuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gX3RoaXMuX2RiLnRvQ29sRm5zW190aGlzLl9xdWVyeS50YWJsZV1bZm5zVG9SdW5fMVtjb2xdWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbi5hcHBseShudWxsLCBbcm93W2NvbF0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93W2NvbF0gPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0uY29uY2F0KGZuc1RvUnVuXzFbY29sXS5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGkgPiAwOyB9KS5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIHJvd1tjXTsgfSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kYi5xdWVyeShcInVwc2VydFwiLCByb3cpLm1hbnVhbEV4ZWMoeyB0YWJsZTogX3RoaXMuX3F1ZXJ5LnRhYmxlIH0pLnRoZW4oZG9uZSkuY2F0Y2goZG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMoeyBtc2c6IHJvd3MubGVuZ3RoICsgXCIgcm93cyBtb2RpZmllZFwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0b3Jvd1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbktleSA9IChfdGhpcy5fcXVlcnkuYWN0aW9uQXJncyB8fCBcIlwiKS5yZXBsYWNlKFwiKClcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9kYi50b1Jvd0Zuc1tfdGhpcy5fcXVlcnkudGFibGVdICYmIF90aGlzLl9kYi50b1Jvd0Zuc1tfdGhpcy5fcXVlcnkudGFibGVdW2ZuS2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm5fMSA9IF90aGlzLl9kYi50b1Jvd0Zuc1tfdGhpcy5fcXVlcnkudGFibGVdW2ZuS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBLXzEgPSBfdGhpcy5fZGIudGFibGVQS3NbX3RoaXMuX3F1ZXJ5LnRhYmxlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9xdWVyeS5vbiAmJiBfdGhpcy5fcXVlcnkub24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKF90aGlzLl9xdWVyeS5vbiwgZnVuY3Rpb24gKHBrLCBpLCBkb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm5fMShwaywge30sIGZ1bmN0aW9uIChuZXdSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Um93W1BLXzFdID0gcGs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kYi5xdWVyeShcInVwc2VydFwiLCBuZXdSb3cpLm1hbnVhbEV4ZWMoeyB0YWJsZTogX3RoaXMuX3F1ZXJ5LnRhYmxlIH0pLnRoZW4oZG9uZSkuY2F0Y2goZG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMoW3sgbXNnOiAoX3RoaXMuX3F1ZXJ5Lm9uIHx8IFtdKS5sZW5ndGggKyBcIiByb3dzIG1vZGlmaWVkIG9yIGFkZGVkLlwiIH1dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9xdWVyeS5hY3Rpb24gPSBcInNlbGVjdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcXVlcnkuYWN0aW9uQXJncyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuUXVlcnkoX3RoaXMsIGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsaXRpZXNfMS5mYXN0QUxMKHJvd3MsIGZ1bmN0aW9uIChyb3csIGksIGRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKHJvdykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gdXRpbGl0aWVzXzEuX2Fzc2lnbihyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbl8xKHJvd1tQS18xXSwgcm93LCBmdW5jdGlvbiAobmV3Um93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Jvd1tQS18xXSA9IHJvd1tQS18xXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RiLnF1ZXJ5KFwidXBzZXJ0XCIsIG5ld1JvdykubWFudWFsRXhlYyh7IHRhYmxlOiBfdGhpcy5fcXVlcnkudGFibGUgfSkudGhlbihkb25lKS5jYXRjaChkb25lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyh7IG1zZzogcm93cy5sZW5ndGggKyBcIiByb3dzIG1vZGlmaWVkXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWooXCJObyBmdW5jdGlvbiBcIiArIF90aGlzLl9xdWVyeS5hY3Rpb25BcmdzICsgXCIgZm91bmQgdG8gcGVyZm9ybSB1cGRhdGVzIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgdGhlIGN1cnJlbnQgcGVuZGluZyBxdWVyeSB0byB0aGUgZGIgZW5naW5lLCByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSByb3dzIGFzIG9iamVjdHMgaW4gYW4gYXJyYXkuXHJcbiAgICAgKlxyXG4gICAgICogRXhhbXBsZTpcclxuICAgICAqIG5TUUwoXCJ1c2Vyc1wiKS5xdWVyeShcInNlbGVjdFwiKS5leGVjKCkudGhlbihmdW5jdGlvbihyb3dzKSB7XHJcbiAgICAgKiAgICAgY29uc29sZS5sb2cocm93cykgLy8gPD0gW3tpZDoxLHVzZXJuYW1lOlwiU2NvdHRcIixwYXNzd29yZDpcIjEyMzRcIn0se2lkOjIsdXNlcm5hbWU6XCJKZWJcIixwYXNzd29yZDpcIjEyMzRcIn1dXHJcbiAgICAgKiAgICAgcmV0dXJuIG5TUUwoKS5xdWVyeShcInVwc2VydFwiLHtwYXNzd29yZDpcInNvbWV0aGluZyBtb3JlIHNlY3VyZVwifSkud2hlcmUoW1wiaWRcIixcIj1cIiwxXSkuZXhlYygpO1xyXG4gICAgICogfSkudGhlbihmdW5jdGlvbihyb3dzKSB7XHJcbiAgICAgKiAgLi4uXHJcbiAgICAgKiB9KS4uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHsoUHJvbWlzZTxBcnJheTxPYmplY3Q+Pil9XHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlck9mIE5hbm9TUUxJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBfTmFub1NRTFF1ZXJ5LnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXJ5LnRhYmxlID09PSBcIipcIilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICB2YXIgYSA9IHRoaXMuX3F1ZXJ5LmFjdGlvbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGlmIChbXCJ0b2NvbHVtblwiLCBcInRvcm93XCJdLmluZGV4T2YoYSkgPiAtMSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcXVlcnkuZGVib3VuY2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZW5vcm1hbGl6YXRpb25LZXlfMSA9IHV0aWxpdGllc18xLmhhc2goSlNPTi5zdHJpbmdpZnkoW3RoaXMuX3F1ZXJ5LnRhYmxlLCBhLCB0aGlzLl9xdWVyeS5hY3Rpb25BcmdzLCB0aGlzLl9xdWVyeS5vbiwgdGhpcy5fcXVlcnkud2hlcmVdLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gcjsgfSkpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVib3VuY2VUaW1lcnNbZGVub3JtYWxpemF0aW9uS2V5XzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChkZWJvdW5jZVRpbWVyc1tkZW5vcm1hbGl6YXRpb25LZXlfMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWVyc1tkZW5vcm1hbGl6YXRpb25LZXlfMV0gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVub3JtYWxpemF0aW9uUXVlcnkoYSkudGhlbihyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIF90aGlzLl9xdWVyeS5kZWJvdW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZW5vcm1hbGl6YXRpb25RdWVyeShhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFtcInNlbGVjdFwiLCBcInVwc2VydFwiLCBcImRlbGV0ZVwiLCBcImRyb3BcIiwgXCJzaG93IHRhYmxlc1wiLCBcImRlc2NyaWJlXCJdLmluZGV4T2YoYSkgPiAtMSkge1xyXG4gICAgICAgICAgICB2YXIgbmV3QXJnc18xID0gdGhpcy5fcXVlcnkuYWN0aW9uQXJncyB8fCAoYSA9PT0gXCJzZWxlY3RcIiB8fCBhID09PSBcImRlbGV0ZVwiID8gW10gOiB7fSk7XHJcbiAgICAgICAgICAgIGlmIChhID09PSBcInVwc2VydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDYXN0IHJvdyB0eXBlcyBhbmQgcmVtb3ZlIGNvbHVtbnMgdGhhdCBkb24ndCBleGlzdCBpbiB0aGUgZGF0YSBtb2RlbFxyXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0QXJnc18xID0ge307XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kZWxzID0gdGhpcy5fZGIuZGF0YU1vZGVsc1t0aGlzLl9xdWVyeS50YWJsZV07XHJcbiAgICAgICAgICAgICAgICB2YXIgayA9IDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA8IG1vZGVscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3QXJnc18xW21vZGVsc1trXS5rZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRBcmdzXzFbbW9kZWxzW2tdLmtleV0gPSB1dGlsaXRpZXNfMS5jYXN0KG1vZGVsc1trXS50eXBlLCBuZXdBcmdzXzFbbW9kZWxzW2tdLmtleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBrKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnQgd2lsZGNhcmQgY29sdW1uc1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RiLnNraXBQdXJnZVt0aGlzLl9xdWVyeS50YWJsZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWxDb2x1bW5zXzEgPSBtb2RlbHMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmtleTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSBPYmplY3Qua2V5cyhuZXdBcmdzXzEpLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gbW9kZWxDb2x1bW5zXzEuaW5kZXhPZihjKSA9PT0gLTE7IH0pOyAvLyB3aWxkY2FyZCBjb2x1bW5zXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRBcmdzXzFbY29sXSA9IG5ld0FyZ3NfMVtjb2xdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmV3QXJnc18xID0gaW5wdXRBcmdzXzE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkuYWN0aW9uID0gYTtcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkuYWN0aW9uQXJncyA9IHRoaXMuX3F1ZXJ5LmFjdGlvbkFyZ3MgPyBuZXdBcmdzXzEgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5vIHZhbGlkIGRhdGFiYXNlIGFjdGlvbiFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgdXRpbGl0aWVzXzEuUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgLy8gaGFuZGxlIGluc3RhbmNlIHF1ZXJpZXNcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3RoaXMuX3F1ZXJ5LnRhYmxlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9kYi5pQi5kb0V4ZWMpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZGIuaUIuZG9FeGVjKF90aGlzLl9xdWVyeSwgZnVuY3Rpb24gKHEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzKHEucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXQuX2RiLnBsdWdpbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0Ll9lcnJvciA9IFwiTm8gcGx1Z2lucywgbm90aGluZyB0byBkbyFcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5fZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlaih0Ll9lcnJvciwgX3RoaXMuX2RiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3RoaXMuX2RiLnF1ZXJ5TW9kKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGIucXVlcnlNb2QoX3RoaXMuX3F1ZXJ5LCBmdW5jdGlvbiAobmV3USkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9xdWVyeSA9IG5ld1E7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVuUXVlcnkoX3RoaXMsIHJlcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJ1blF1ZXJ5KF90aGlzLCByZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9OYW5vU1FMUXVlcnk7XHJcbn0oKSk7XHJcbmV4cG9ydHMuX05hbm9TUUxRdWVyeSA9IF9OYW5vU1FMUXVlcnk7XHJcbiIsImltcG9ydCB7IG5TUUwgfSBmcm9tICduYW5vLXNxbCdcbmltcG9ydCB7IGJpbmROU1FMIH0gZnJvbSAnbmFuby1zcWwtcmVhY3QnXG5cbmltcG9ydCBBY2NvdW50U3RhdHVzIGZyb20gJy4vY29tcG9uZW50cy9BY2NvdW50U3RhdHVzL0FjY291bnRTdGF0dXMnXG5cbi8vIGxldCBjdXJyZW50VXNlciA9ICdhbnRvbidcblxuY29uc3QgYXNuc3FsID0gYmluZE5TUUwoQWNjb3VudFN0YXR1cylcbmV4cG9ydCB7YXNuc3FsIGFzIEFjY291bnRTdGF0dXN9XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChfLCBjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoJy4vY2FtZWxpemUnKTtcblxudmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbW96LXRyYW5zaXRpb24nKVxuICogICA8IFwiTW96VHJhbnNpdGlvblwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tcy10cmFuc2l0aW9uJylcbiAqICAgPCBcIm1zVHJhbnNpdGlvblwiXG4gKlxuICogQXMgQW5kaSBTbWl0aCBzdWdnZXN0c1xuICogKGh0dHA6Ly93d3cuYW5kaXNtaXRoLmNvbS9ibG9nLzIwMTIvMDIvbW9kZXJuaXpyLXByZWZpeGVkLyksIGFuIGAtbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGxvd2VyY2FzZSBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBjYW1lbGl6ZShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemVTdHlsZU5hbWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF91cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqXG4gKiBGb3IgQ1NTIHN0eWxlIG5hbWVzLCB1c2UgYGh5cGhlbmF0ZVN0eWxlTmFtZWAgaW5zdGVhZCB3aGljaCB3b3JrcyBwcm9wZXJseVxuICogd2l0aCBhbGwgdmVuZG9yIHByZWZpeGVzLCBpbmNsdWRpbmcgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF91cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoJy4vaHlwaGVuYXRlJyk7XG5cbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMVxuICogcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGNoZWNrUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcycpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvY29udGFpbnNOb2RlJyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGh5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2ZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZScpO1xudmFyIGNhbWVsaXplU3R5bGVOYW1lID0gcmVxdWlyZSgnZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUnKTtcblxuLyoqXG4gKiBXQVJOSU5HOiBETyBOT1QgbWFudWFsbHkgcmVxdWlyZSB0aGlzIG1vZHVsZS5cbiAqIFRoaXMgaXMgYSByZXBsYWNlbWVudCBmb3IgYGludmFyaWFudCguLi4pYCB1c2VkIGJ5IHRoZSBlcnJvciBjb2RlIHN5c3RlbVxuICogYW5kIHdpbGwgX29ubHlfIGJlIHJlcXVpcmVkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIGJhYmVsIHBhc3MuXG4gKiBJdCBhbHdheXMgdGhyb3dzLlxuICovXG5cbiFSZWFjdCA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0RE9NIHdhcyBsb2FkZWQgYmVmb3JlIFJlYWN0LiBNYWtlIHN1cmUgeW91IGxvYWQgdGhlIFJlYWN0IHBhY2thZ2UgYmVmb3JlIGxvYWRpbmcgUmVhY3RET00uJykgOiB2b2lkIDA7XG5cbnZhciBpbnZva2VHdWFyZGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB0aGlzLl9oYXNDYXVnaHRFcnJvciA9IGZhbHNlO1xuICB0aGlzLl9jYXVnaHRFcnJvciA9IG51bGw7XG4gIHZhciBmdW5jQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG4gIHRyeSB7XG4gICAgZnVuYy5hcHBseShjb250ZXh0LCBmdW5jQXJncyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhpcy5fY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgICB0aGlzLl9oYXNDYXVnaHRFcnJvciA9IHRydWU7XG4gIH1cbn07XG5cbntcbiAgLy8gSW4gREVWIG1vZGUsIHdlIHN3YXAgb3V0IGludm9rZUd1YXJkZWRDYWxsYmFjayBmb3IgYSBzcGVjaWFsIHZlcnNpb25cbiAgLy8gdGhhdCBwbGF5cyBtb3JlIG5pY2VseSB3aXRoIHRoZSBicm93c2VyJ3MgRGV2VG9vbHMuIFRoZSBpZGVhIGlzIHRvIHByZXNlcnZlXG4gIC8vIFwiUGF1c2Ugb24gZXhjZXB0aW9uc1wiIGJlaGF2aW9yLiBCZWNhdXNlIFJlYWN0IHdyYXBzIGFsbCB1c2VyLXByb3ZpZGVkXG4gIC8vIGZ1bmN0aW9ucyBpbiBpbnZva2VHdWFyZGVkQ2FsbGJhY2ssIGFuZCB0aGUgcHJvZHVjdGlvbiB2ZXJzaW9uIG9mXG4gIC8vIGludm9rZUd1YXJkZWRDYWxsYmFjayB1c2VzIGEgdHJ5LWNhdGNoLCBhbGwgdXNlciBleGNlcHRpb25zIGFyZSB0cmVhdGVkXG4gIC8vIGxpa2UgY2F1Z2h0IGV4Y2VwdGlvbnMsIGFuZCB0aGUgRGV2VG9vbHMgd29uJ3QgcGF1c2UgdW5sZXNzIHRoZSBkZXZlbG9wZXJcbiAgLy8gdGFrZXMgdGhlIGV4dHJhIHN0ZXAgb2YgZW5hYmxpbmcgcGF1c2Ugb24gY2F1Z2h0IGV4Y2VwdGlvbnMuIFRoaXMgaXNcbiAgLy8gdW50aW50dWl0aXZlLCB0aG91Z2gsIGJlY2F1c2UgZXZlbiB0aG91Z2ggUmVhY3QgaGFzIGNhdWdodCB0aGUgZXJyb3IsIGZyb21cbiAgLy8gdGhlIGRldmVsb3BlcidzIHBlcnNwZWN0aXZlLCB0aGUgZXJyb3IgaXMgdW5jYXVnaHQuXG4gIC8vXG4gIC8vIFRvIHByZXNlcnZlIHRoZSBleHBlY3RlZCBcIlBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBiZWhhdmlvciwgd2UgZG9uJ3QgdXNlIGFcbiAgLy8gdHJ5LWNhdGNoIGluIERFVi4gSW5zdGVhZCwgd2Ugc3luY2hyb25vdXNseSBkaXNwYXRjaCBhIGZha2UgZXZlbnQgdG8gYSBmYWtlXG4gIC8vIERPTSBub2RlLCBhbmQgY2FsbCB0aGUgdXNlci1wcm92aWRlZCBjYWxsYmFjayBmcm9tIGluc2lkZSBhbiBldmVudCBoYW5kbGVyXG4gIC8vIGZvciB0aGF0IGZha2UgZXZlbnQuIElmIHRoZSBjYWxsYmFjayB0aHJvd3MsIHRoZSBlcnJvciBpcyBcImNhcHR1cmVkXCIgdXNpbmdcbiAgLy8gYSBnbG9iYWwgZXZlbnQgaGFuZGxlci4gQnV0IGJlY2F1c2UgdGhlIGVycm9yIGhhcHBlbnMgaW4gYSBkaWZmZXJlbnRcbiAgLy8gZXZlbnQgbG9vcCBjb250ZXh0LCBpdCBkb2VzIG5vdCBpbnRlcnJ1cHQgdGhlIG5vcm1hbCBwcm9ncmFtIGZsb3cuXG4gIC8vIEVmZmVjdGl2ZWx5LCB0aGlzIGdpdmVzIHVzIHRyeS1jYXRjaCBiZWhhdmlvciB3aXRob3V0IGFjdHVhbGx5IHVzaW5nXG4gIC8vIHRyeS1jYXRjaC4gTmVhdCFcblxuICAvLyBDaGVjayB0aGF0IHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBBUElzIHdlIG5lZWQgdG8gaW1wbGVtZW50IG91ciBzcGVjaWFsXG4gIC8vIERFViB2ZXJzaW9uIG9mIGludm9rZUd1YXJkZWRDYWxsYmFja1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kaXNwYXRjaEV2ZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGZha2VOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncmVhY3QnKTtcblxuICAgIHZhciBpbnZva2VHdWFyZGVkQ2FsbGJhY2tEZXYgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgLy8gSWYgZG9jdW1lbnQgZG9lc24ndCBleGlzdCB3ZSBrbm93IGZvciBzdXJlIHdlIHdpbGwgY3Jhc2ggaW4gdGhpcyBtZXRob2RcbiAgICAgIC8vIHdoZW4gd2UgY2FsbCBkb2N1bWVudC5jcmVhdGVFdmVudCgpLiBIb3dldmVyIHRoaXMgY2FuIGNhdXNlIGNvbmZ1c2luZ1xuICAgICAgLy8gZXJyb3JzOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMzQ4MlxuICAgICAgLy8gU28gd2UgcHJlZW1wdGl2ZWx5IHRocm93IHdpdGggYSBiZXR0ZXIgbWVzc2FnZSBpbnN0ZWFkLlxuICAgICAgISh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSA/IGludmFyaWFudChmYWxzZSwgJ1RoZSBgZG9jdW1lbnRgIGdsb2JhbCB3YXMgZGVmaW5lZCB3aGVuIFJlYWN0IHdhcyBpbml0aWFsaXplZCwgYnV0IGlzIG5vdCBkZWZpbmVkIGFueW1vcmUuIFRoaXMgY2FuIGhhcHBlbiBpbiBhIHRlc3QgZW52aXJvbm1lbnQgaWYgYSBjb21wb25lbnQgc2NoZWR1bGVzIGFuIHVwZGF0ZSBmcm9tIGFuIGFzeW5jaHJvbm91cyBjYWxsYmFjaywgYnV0IHRoZSB0ZXN0IGhhcyBhbHJlYWR5IGZpbmlzaGVkIHJ1bm5pbmcuIFRvIHNvbHZlIHRoaXMsIHlvdSBjYW4gZWl0aGVyIHVubW91bnQgdGhlIGNvbXBvbmVudCBhdCB0aGUgZW5kIG9mIHlvdXIgdGVzdCAoYW5kIGVuc3VyZSB0aGF0IGFueSBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyBnZXQgY2FuY2VsZWQgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YCksIG9yIHlvdSBjYW4gY2hhbmdlIHRoZSB0ZXN0IGl0c2VsZiB0byBiZSBhc3luY2hyb25vdXMuJykgOiB2b2lkIDA7XG4gICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cbiAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHdoZXRoZXIgdGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2sgdGhyZXcgYW4gZXJyb3IuIFdlXG4gICAgICAvLyBzZXQgdGhpcyB0byB0cnVlIGF0IHRoZSBiZWdpbm5pbmcsIHRoZW4gc2V0IGl0IHRvIGZhbHNlIHJpZ2h0IGFmdGVyXG4gICAgICAvLyBjYWxsaW5nIHRoZSBmdW5jdGlvbi4gSWYgdGhlIGZ1bmN0aW9uIGVycm9ycywgYGRpZEVycm9yYCB3aWxsIG5ldmVyIGJlXG4gICAgICAvLyBzZXQgdG8gZmFsc2UuIFRoaXMgc3RyYXRlZ3kgd29ya3MgZXZlbiBpZiB0aGUgYnJvd3NlciBpcyBmbGFreSBhbmRcbiAgICAgIC8vIGZhaWxzIHRvIGNhbGwgb3VyIGdsb2JhbCBlcnJvciBoYW5kbGVyLCBiZWNhdXNlIGl0IGRvZXNuJ3QgcmVseSBvblxuICAgICAgLy8gdGhlIGVycm9yIGV2ZW50IGF0IGFsbC5cbiAgICAgIHZhciBkaWRFcnJvciA9IHRydWU7XG5cbiAgICAgIC8vIENyZWF0ZSBhbiBldmVudCBoYW5kbGVyIGZvciBvdXIgZmFrZSBldmVudC4gV2Ugd2lsbCBzeW5jaHJvbm91c2x5XG4gICAgICAvLyBkaXNwYXRjaCBvdXIgZmFrZSBldmVudCB1c2luZyBgZGlzcGF0Y2hFdmVudGAuIEluc2lkZSB0aGUgaGFuZGxlciwgd2VcbiAgICAgIC8vIGNhbGwgdGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2suXG4gICAgICB2YXIgZnVuY0FyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuICAgICAgZnVuY3Rpb24gY2FsbENhbGxiYWNrKCkge1xuICAgICAgICAvLyBXZSBpbW1lZGlhdGVseSByZW1vdmUgdGhlIGNhbGxiYWNrIGZyb20gZXZlbnQgbGlzdGVuZXJzIHNvIHRoYXRcbiAgICAgICAgLy8gbmVzdGVkIGBpbnZva2VHdWFyZGVkQ2FsbGJhY2tgIGNhbGxzIGRvIG5vdCBjbGFzaC4gT3RoZXJ3aXNlLCBhXG4gICAgICAgIC8vIG5lc3RlZCBjYWxsIHdvdWxkIHRyaWdnZXIgdGhlIGZha2UgZXZlbnQgaGFuZGxlcnMgb2YgYW55IGNhbGwgaGlnaGVyXG4gICAgICAgIC8vIGluIHRoZSBzdGFjay5cbiAgICAgICAgZmFrZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBjYWxsQ2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBmdW5jQXJncyk7XG4gICAgICAgIGRpZEVycm9yID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBhIGdsb2JhbCBlcnJvciBldmVudCBoYW5kbGVyLiBXZSB1c2UgdGhpcyB0byBjYXB0dXJlIHRoZSB2YWx1ZVxuICAgICAgLy8gdGhhdCB3YXMgdGhyb3duLiBJdCdzIHBvc3NpYmxlIHRoYXQgdGhpcyBlcnJvciBoYW5kbGVyIHdpbGwgZmlyZSBtb3JlXG4gICAgICAvLyB0aGFuIG9uY2U7IGZvciBleGFtcGxlLCBpZiBub24tUmVhY3QgY29kZSBhbHNvIGNhbGxzIGBkaXNwYXRjaEV2ZW50YFxuICAgICAgLy8gYW5kIGEgaGFuZGxlciBmb3IgdGhhdCBldmVudCB0aHJvd3MuIFdlIHNob3VsZCBiZSByZXNpbGllbnQgdG8gbW9zdCBvZlxuICAgICAgLy8gdGhvc2UgY2FzZXMuIEV2ZW4gaWYgb3VyIGVycm9yIGV2ZW50IGhhbmRsZXIgZmlyZXMgbW9yZSB0aGFuIG9uY2UsIHRoZVxuICAgICAgLy8gbGFzdCBlcnJvciBldmVudCBpcyBhbHdheXMgdXNlZC4gSWYgdGhlIGNhbGxiYWNrIGFjdHVhbGx5IGRvZXMgZXJyb3IsXG4gICAgICAvLyB3ZSBrbm93IHRoYXQgdGhlIGxhc3QgZXJyb3IgZXZlbnQgaXMgdGhlIGNvcnJlY3Qgb25lLCBiZWNhdXNlIGl0J3Mgbm90XG4gICAgICAvLyBwb3NzaWJsZSBmb3IgYW55dGhpbmcgZWxzZSB0byBoYXZlIGhhcHBlbmVkIGluIGJldHdlZW4gb3VyIGNhbGxiYWNrXG4gICAgICAvLyBlcnJvcmluZyBhbmQgdGhlIGNvZGUgdGhhdCBmb2xsb3dzIHRoZSBgZGlzcGF0Y2hFdmVudGAgY2FsbCBiZWxvdy4gSWZcbiAgICAgIC8vIHRoZSBjYWxsYmFjayBkb2Vzbid0IGVycm9yLCBidXQgdGhlIGVycm9yIGV2ZW50IHdhcyBmaXJlZCwgd2Uga25vdyB0b1xuICAgICAgLy8gaWdub3JlIGl0IGJlY2F1c2UgYGRpZEVycm9yYCB3aWxsIGJlIGZhbHNlLCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAgICB2YXIgZXJyb3IgPSB2b2lkIDA7XG4gICAgICAvLyBVc2UgdGhpcyB0byB0cmFjayB3aGV0aGVyIHRoZSBlcnJvciBldmVudCBpcyBldmVyIGNhbGxlZC5cbiAgICAgIHZhciBkaWRTZXRFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIGlzQ3Jvc3NPcmlnaW5FcnJvciA9IGZhbHNlO1xuXG4gICAgICBmdW5jdGlvbiBvbkVycm9yKGV2ZW50KSB7XG4gICAgICAgIGVycm9yID0gZXZlbnQuZXJyb3I7XG4gICAgICAgIGRpZFNldEVycm9yID0gdHJ1ZTtcbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGV2ZW50LmNvbG5vID09PSAwICYmIGV2ZW50LmxpbmVubyA9PT0gMCkge1xuICAgICAgICAgIGlzQ3Jvc3NPcmlnaW5FcnJvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGEgZmFrZSBldmVudCB0eXBlLlxuICAgICAgdmFyIGV2dFR5cGUgPSAncmVhY3QtJyArIChuYW1lID8gbmFtZSA6ICdpbnZva2VndWFyZGVkY2FsbGJhY2snKTtcblxuICAgICAgLy8gQXR0YWNoIG91ciBldmVudCBoYW5kbGVyc1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICBmYWtlTm9kZS5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGNhbGxDYWxsYmFjaywgZmFsc2UpO1xuXG4gICAgICAvLyBTeW5jaHJvbm91c2x5IGRpc3BhdGNoIG91ciBmYWtlIGV2ZW50LiBJZiB0aGUgdXNlci1wcm92aWRlZCBmdW5jdGlvblxuICAgICAgLy8gZXJyb3JzLCBpdCB3aWxsIHRyaWdnZXIgb3VyIGdsb2JhbCBlcnJvciBoYW5kbGVyLlxuICAgICAgZXZ0LmluaXRFdmVudChldnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgZmFrZU5vZGUuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gICAgICBpZiAoZGlkRXJyb3IpIHtcbiAgICAgICAgaWYgKCFkaWRTZXRFcnJvcikge1xuICAgICAgICAgIC8vIFRoZSBjYWxsYmFjayBlcnJvcmVkLCBidXQgdGhlIGVycm9yIGV2ZW50IG5ldmVyIGZpcmVkLlxuICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKCdBbiBlcnJvciB3YXMgdGhyb3duIGluc2lkZSBvbmUgb2YgeW91ciBjb21wb25lbnRzLCBidXQgUmVhY3QgJyArIFwiZG9lc24ndCBrbm93IHdoYXQgaXQgd2FzLiBUaGlzIGlzIGxpa2VseSBkdWUgdG8gYnJvd3NlciBcIiArICdmbGFraW5lc3MuIFJlYWN0IGRvZXMgaXRzIGJlc3QgdG8gcHJlc2VydmUgdGhlIFwiUGF1c2Ugb24gJyArICdleGNlcHRpb25zXCIgYmVoYXZpb3Igb2YgdGhlIERldlRvb2xzLCB3aGljaCByZXF1aXJlcyBzb21lICcgKyBcIkRFVi1tb2RlIG9ubHkgdHJpY2tzLiBJdCdzIHBvc3NpYmxlIHRoYXQgdGhlc2UgZG9uJ3Qgd29yayBpbiBcIiArICd5b3VyIGJyb3dzZXIuIFRyeSB0cmlnZ2VyaW5nIHRoZSBlcnJvciBpbiBwcm9kdWN0aW9uIG1vZGUsICcgKyAnb3Igc3dpdGNoaW5nIHRvIGEgbW9kZXJuIGJyb3dzZXIuIElmIHlvdSBzdXNwZWN0IHRoYXQgdGhpcyBpcyAnICsgJ2FjdHVhbGx5IGFuIGlzc3VlIHdpdGggUmVhY3QsIHBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQ3Jvc3NPcmlnaW5FcnJvcikge1xuICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKFwiQSBjcm9zcy1vcmlnaW4gZXJyb3Igd2FzIHRocm93bi4gUmVhY3QgZG9lc24ndCBoYXZlIGFjY2VzcyB0byBcIiArICd0aGUgYWN0dWFsIGVycm9yIG9iamVjdCBpbiBkZXZlbG9wbWVudC4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1jcm9zc29yaWdpbi1lcnJvciBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oYXNDYXVnaHRFcnJvciA9IHRydWU7XG4gICAgICAgIHRoaXMuX2NhdWdodEVycm9yID0gZXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9oYXNDYXVnaHRFcnJvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jYXVnaHRFcnJvciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBvdXIgZXZlbnQgbGlzdGVuZXJzXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICB9O1xuXG4gICAgaW52b2tlR3VhcmRlZENhbGxiYWNrID0gaW52b2tlR3VhcmRlZENhbGxiYWNrRGV2O1xuICB9XG59XG5cbnZhciBpbnZva2VHdWFyZGVkQ2FsbGJhY2skMSA9IGludm9rZUd1YXJkZWRDYWxsYmFjaztcblxudmFyIFJlYWN0RXJyb3JVdGlscyA9IHtcbiAgLy8gVXNlZCBieSBGaWJlciB0byBzaW11bGF0ZSBhIHRyeS1jYXRjaC5cbiAgX2NhdWdodEVycm9yOiBudWxsLFxuICBfaGFzQ2F1Z2h0RXJyb3I6IGZhbHNlLFxuXG4gIC8vIFVzZWQgYnkgZXZlbnQgc3lzdGVtIHRvIGNhcHR1cmUvcmV0aHJvdyB0aGUgZmlyc3QgZXJyb3IuXG4gIF9yZXRocm93RXJyb3I6IG51bGwsXG4gIF9oYXNSZXRocm93RXJyb3I6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsIGEgZnVuY3Rpb24gd2hpbGUgZ3VhcmRpbmcgYWdhaW5zdCBlcnJvcnMgdGhhdCBoYXBwZW5zIHdpdGhpbiBpdC5cbiAgICogUmV0dXJucyBhbiBlcnJvciBpZiBpdCB0aHJvd3MsIG90aGVyd2lzZSBudWxsLlxuICAgKlxuICAgKiBJbiBwcm9kdWN0aW9uLCB0aGlzIGlzIGltcGxlbWVudGVkIHVzaW5nIGEgdHJ5LWNhdGNoLiBUaGUgcmVhc29uIHdlIGRvbid0XG4gICAqIHVzZSBhIHRyeS1jYXRjaCBkaXJlY3RseSBpcyBzbyB0aGF0IHdlIGNhbiBzd2FwIG91dCBhIGRpZmZlcmVudFxuICAgKiBpbXBsZW1lbnRhdGlvbiBpbiBERVYgbW9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byB1c2Ugd2hlbiBjYWxsaW5nIHRoZSBmdW5jdGlvblxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzIGZvciBmdW5jdGlvblxuICAgKi9cbiAgaW52b2tlR3VhcmRlZENhbGxiYWNrOiBmdW5jdGlvbiAobmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayQxLmFwcGx5KFJlYWN0RXJyb3JVdGlscywgYXJndW1lbnRzKTtcbiAgfSxcblxuICAvKipcbiAgICogU2FtZSBhcyBpbnZva2VHdWFyZGVkQ2FsbGJhY2ssIGJ1dCBpbnN0ZWFkIG9mIHJldHVybmluZyBhbiBlcnJvciwgaXQgc3RvcmVzXG4gICAqIGl0IGluIGEgZ2xvYmFsIHNvIGl0IGNhbiBiZSByZXRocm93biBieSBgcmV0aHJvd0NhdWdodEVycm9yYCBsYXRlci5cbiAgICogVE9ETzogU2VlIGlmIF9jYXVnaHRFcnJvciBhbmQgX3JldGhyb3dFcnJvciBjYW4gYmUgdW5pZmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byB1c2Ugd2hlbiBjYWxsaW5nIHRoZSBmdW5jdGlvblxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzIGZvciBmdW5jdGlvblxuICAgKi9cbiAgaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOiBmdW5jdGlvbiAobmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoUmVhY3RFcnJvclV0aWxzLmhhc0NhdWdodEVycm9yKCkpIHtcbiAgICAgIHZhciBlcnJvciA9IFJlYWN0RXJyb3JVdGlscy5jbGVhckNhdWdodEVycm9yKCk7XG4gICAgICBpZiAoIVJlYWN0RXJyb3JVdGlscy5faGFzUmV0aHJvd0Vycm9yKSB7XG4gICAgICAgIFJlYWN0RXJyb3JVdGlscy5faGFzUmV0aHJvd0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgUmVhY3RFcnJvclV0aWxzLl9yZXRocm93RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIER1cmluZyBleGVjdXRpb24gb2YgZ3VhcmRlZCBmdW5jdGlvbnMgd2Ugd2lsbCBjYXB0dXJlIHRoZSBmaXJzdCBlcnJvciB3aGljaFxuICAgKiB3ZSB3aWxsIHJldGhyb3cgdG8gYmUgaGFuZGxlZCBieSB0aGUgdG9wIGxldmVsIGVycm9yIGhhbmRsZXIuXG4gICAqL1xuICByZXRocm93Q2F1Z2h0RXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmV0aHJvd0NhdWdodEVycm9yLmFwcGx5KFJlYWN0RXJyb3JVdGlscywgYXJndW1lbnRzKTtcbiAgfSxcblxuICBoYXNDYXVnaHRFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdEVycm9yVXRpbHMuX2hhc0NhdWdodEVycm9yO1xuICB9LFxuXG4gIGNsZWFyQ2F1Z2h0RXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoUmVhY3RFcnJvclV0aWxzLl9oYXNDYXVnaHRFcnJvcikge1xuICAgICAgdmFyIGVycm9yID0gUmVhY3RFcnJvclV0aWxzLl9jYXVnaHRFcnJvcjtcbiAgICAgIFJlYWN0RXJyb3JVdGlscy5fY2F1Z2h0RXJyb3IgPSBudWxsO1xuICAgICAgUmVhY3RFcnJvclV0aWxzLl9oYXNDYXVnaHRFcnJvciA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsICdjbGVhckNhdWdodEVycm9yIHdhcyBjYWxsZWQgYnV0IG5vIGVycm9yIHdhcyBjYXB0dXJlZC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciByZXRocm93Q2F1Z2h0RXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChSZWFjdEVycm9yVXRpbHMuX2hhc1JldGhyb3dFcnJvcikge1xuICAgIHZhciBlcnJvciA9IFJlYWN0RXJyb3JVdGlscy5fcmV0aHJvd0Vycm9yO1xuICAgIFJlYWN0RXJyb3JVdGlscy5fcmV0aHJvd0Vycm9yID0gbnVsbDtcbiAgICBSZWFjdEVycm9yVXRpbHMuX2hhc1JldGhyb3dFcnJvciA9IGZhbHNlO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG4vKipcbiAqIEluamVjdGFibGUgb3JkZXJpbmcgb2YgZXZlbnQgcGx1Z2lucy5cbiAqL1xudmFyIGV2ZW50UGx1Z2luT3JkZXIgPSBudWxsO1xuXG4vKipcbiAqIEluamVjdGFibGUgbWFwcGluZyBmcm9tIG5hbWVzIHRvIGV2ZW50IHBsdWdpbiBtb2R1bGVzLlxuICovXG52YXIgbmFtZXNUb1BsdWdpbnMgPSB7fTtcblxuLyoqXG4gKiBSZWNvbXB1dGVzIHRoZSBwbHVnaW4gbGlzdCB1c2luZyB0aGUgaW5qZWN0ZWQgcGx1Z2lucyBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCkge1xuICBpZiAoIWV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAvLyBXYWl0IHVudGlsIGFuIGBldmVudFBsdWdpbk9yZGVyYCBpcyBpbmplY3RlZC5cbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgIHZhciBwbHVnaW5Nb2R1bGUgPSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICB2YXIgcGx1Z2luSW5kZXggPSBldmVudFBsdWdpbk9yZGVyLmluZGV4T2YocGx1Z2luTmFtZSk7XG4gICAgIShwbHVnaW5JbmRleCA+IC0xKSA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2lucyB0aGF0IGRvIG5vdCBleGlzdCBpbiB0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgIGlmIChwbHVnaW5zW3BsdWdpbkluZGV4XSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgICFwbHVnaW5Nb2R1bGUuZXh0cmFjdEV2ZW50cyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgIG1ldGhvZCwgYnV0IGAlc2AgZG9lcyBub3QuJywgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgcGx1Z2luc1twbHVnaW5JbmRleF0gPSBwbHVnaW5Nb2R1bGU7XG4gICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBwdWJsaXNoZWRFdmVudHMpIHtcbiAgICAgICFwdWJsaXNoRXZlbnRGb3JQbHVnaW4ocHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEZhaWxlZCB0byBwdWJsaXNoIGV2ZW50IGAlc2AgZm9yIHBsdWdpbiBgJXNgLicsIGV2ZW50TmFtZSwgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGFuIGV2ZW50IHNvIHRoYXQgaXQgY2FuIGJlIGRpc3BhdGNoZWQgYnkgdGhlIHN1cHBsaWVkIHBsdWdpbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgRGlzcGF0Y2ggY29uZmlndXJhdGlvbiBmb3IgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgISFldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSBldmVudCBuYW1lLCBgJXNgLicsIGV2ZW50TmFtZSkgOiB2b2lkIDA7XG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdID0gZGlzcGF0Y2hDb25maWc7XG5cbiAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG4gIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIGZvciAodmFyIHBoYXNlTmFtZSBpbiBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlTmFtZSkpIHtcbiAgICAgICAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUgPSBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc1twaGFzZU5hbWVdO1xuICAgICAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShwaGFzZWRSZWdpc3RyYXRpb25OYW1lLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhIHJlZ2lzdHJhdGlvbiBuYW1lIHRoYXQgaXMgdXNlZCB0byBpZGVudGlmeSBkaXNwYXRjaGVkIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgcmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJywgcmVnaXN0cmF0aW9uTmFtZSkgOiB2b2lkIDA7XG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gcGx1Z2luTW9kdWxlO1xuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gcGx1Z2luTW9kdWxlLmV2ZW50VHlwZXNbZXZlbnROYW1lXS5kZXBlbmRlbmNpZXM7XG5cbiAge1xuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IHJlZ2lzdHJhdGlvbk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW2xvd2VyQ2FzZWROYW1lXSA9IHJlZ2lzdHJhdGlvbk5hbWU7XG5cbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gJ29uRG91YmxlQ2xpY2snKSB7XG4gICAgICBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLm9uZGJsY2xpY2sgPSByZWdpc3RyYXRpb25OYW1lO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG5cbi8qKlxuICogT3JkZXJlZCBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMuXG4gKi9cbnZhciBwbHVnaW5zID0gW107XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIGV2ZW50IG5hbWUgdG8gZGlzcGF0Y2ggY29uZmlnXG4gKi9cbnZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSB7fTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gcGx1Z2luIG1vZHVsZVxuICovXG52YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSB7fTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gZXZlbnQgbmFtZVxuICovXG52YXIgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyA9IHt9O1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcmVnaXN0cmF0aW9uIG5hbWVzIHRvIHRoZSBwcm9wZXJseSBjYXNlZCB2ZXJzaW9uLFxuICogdXNlZCB0byB3YXJuIGluIHRoZSBjYXNlIG9mIG1pc3NpbmcgZXZlbnQgaGFuZGxlcnMuIEF2YWlsYWJsZVxuICogb25seSBpbiB0cnVlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgPSB7fTtcbi8vIFRydXN0IHRoZSBkZXZlbG9wZXIgdG8gb25seSB1c2UgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyBpbiB0cnVlXG5cbi8qKlxuICogSW5qZWN0cyBhbiBvcmRlcmluZyBvZiBwbHVnaW5zIChieSBwbHVnaW4gbmFtZSkuIFRoaXMgYWxsb3dzIHRoZSBvcmRlcmluZ1xuICogdG8gYmUgZGVjb3VwbGVkIGZyb20gaW5qZWN0aW9uIG9mIHRoZSBhY3R1YWwgcGx1Z2lucyBzbyB0aGF0IG9yZGVyaW5nIGlzXG4gKiBhbHdheXMgZGV0ZXJtaW5pc3RpYyByZWdhcmRsZXNzIG9mIHBhY2thZ2luZywgb24tdGhlLWZseSBpbmplY3Rpb24sIGV0Yy5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAqIEBpbnRlcm5hbFxuICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luT3JkZXJ9XG4gKi9cbmZ1bmN0aW9uIGluamVjdEV2ZW50UGx1Z2luT3JkZXIoaW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKSB7XG4gICEhZXZlbnRQbHVnaW5PcmRlciA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2luIG9yZGVyaW5nIG1vcmUgdGhhbiBvbmNlLiBZb3UgYXJlIGxpa2VseSB0cnlpbmcgdG8gbG9hZCBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QuJykgOiB2b2lkIDA7XG4gIC8vIENsb25lIHRoZSBvcmRlcmluZyBzbyBpdCBjYW5ub3QgYmUgZHluYW1pY2FsbHkgbXV0YXRlZC5cbiAgZXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGluamVjdGVkRXZlbnRQbHVnaW5PcmRlcik7XG4gIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG59XG5cbi8qKlxuICogSW5qZWN0cyBwbHVnaW5zIHRvIGJlIHVzZWQgYnkgYEV2ZW50UGx1Z2luSHViYC4gVGhlIHBsdWdpbiBuYW1lcyBtdXN0IGJlXG4gKiBpbiB0aGUgb3JkZXJpbmcgaW5qZWN0ZWQgYnkgYGluamVjdEV2ZW50UGx1Z2luT3JkZXJgLlxuICpcbiAqIFBsdWdpbnMgY2FuIGJlIGluamVjdGVkIGFzIHBhcnQgb2YgcGFnZSBpbml0aWFsaXphdGlvbiBvciBvbi10aGUtZmx5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICogQGludGVybmFsXG4gKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lfVxuICovXG5mdW5jdGlvbiBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICB2YXIgaXNPcmRlcmluZ0RpcnR5ID0gZmFsc2U7XG4gIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgIGlmICghaW5qZWN0ZWROYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBwbHVnaW5Nb2R1bGUgPSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIGlmICghbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkgfHwgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gIT09IHBsdWdpbk1vZHVsZSkge1xuICAgICAgISFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgdHdvIGRpZmZlcmVudCBldmVudCBwbHVnaW5zIHVzaW5nIHRoZSBzYW1lIG5hbWUsIGAlc2AuJywgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IHBsdWdpbk1vZHVsZTtcbiAgICAgIGlzT3JkZXJpbmdEaXJ0eSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChpc09yZGVyaW5nRGlydHkpIHtcbiAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICB9XG59XG5cbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gT2JqZWN0LmZyZWV6ZSh7XG5cdHBsdWdpbnM6IHBsdWdpbnMsXG5cdGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczogZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXHRyZWdpc3RyYXRpb25OYW1lTW9kdWxlczogcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMsXG5cdHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMsXG5cdHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6IHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMsXG5cdGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG5cdGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG59KTtcblxudmFyIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUgPSBudWxsO1xudmFyIGdldEluc3RhbmNlRnJvbU5vZGUgPSBudWxsO1xudmFyIGdldE5vZGVGcm9tSW5zdGFuY2UgPSBudWxsO1xuXG52YXIgaW5qZWN0aW9uJDEgPSB7XG4gIGluamVjdENvbXBvbmVudFRyZWU6IGZ1bmN0aW9uIChJbmplY3RlZCkge1xuICAgIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUgPSBJbmplY3RlZC5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO1xuICAgIGdldEluc3RhbmNlRnJvbU5vZGUgPSBJbmplY3RlZC5nZXRJbnN0YW5jZUZyb21Ob2RlO1xuICAgIGdldE5vZGVGcm9tSW5zdGFuY2UgPSBJbmplY3RlZC5nZXROb2RlRnJvbUluc3RhbmNlO1xuXG4gICAge1xuICAgICAgd2FybmluZyhnZXROb2RlRnJvbUluc3RhbmNlICYmIGdldEluc3RhbmNlRnJvbU5vZGUsICdFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RDb21wb25lbnRUcmVlKC4uLik6IEluamVjdGVkICcgKyAnbW9kdWxlIGlzIG1pc3NpbmcgZ2V0Tm9kZUZyb21JbnN0YW5jZSBvciBnZXRJbnN0YW5jZUZyb21Ob2RlLicpO1xuICAgIH1cbiAgfVxufTtcblxuXG5cblxuXG5cbnZhciB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IHZvaWQgMDtcbntcbiAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gICAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuXG4gICAgdmFyIGxpc3RlbmVyc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycyk7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID8gZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoIDogZGlzcGF0Y2hMaXN0ZW5lcnMgPyAxIDogMDtcblxuICAgIHZhciBpbnN0YW5jZXNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICAgIHZhciBpbnN0YW5jZXNMZW4gPSBpbnN0YW5jZXNJc0FyciA/IGRpc3BhdGNoSW5zdGFuY2VzLmxlbmd0aCA6IGRpc3BhdGNoSW5zdGFuY2VzID8gMSA6IDA7XG5cbiAgICB3YXJuaW5nKGluc3RhbmNlc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBpbnN0YW5jZXNMZW4gPT09IGxpc3RlbmVyc0xlbiwgJ0V2ZW50UGx1Z2luVXRpbHM6IEludmFsaWQgYGV2ZW50YC4nKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCB0aGUgZXZlbnQgdG8gdGhlIGxpc3RlbmVyLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgU3ludGhldGljRXZlbnQgdG8gaGFuZGxlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNpbXVsYXRlZCBJZiB0aGUgZXZlbnQgaXMgc2ltdWxhdGVkIChjaGFuZ2VzIGV4biBiZWhhdmlvcilcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IGluc3QgSW50ZXJuYWwgY29tcG9uZW50IGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBsaXN0ZW5lciwgaW5zdCkge1xuICB2YXIgdHlwZSA9IGV2ZW50LnR5cGUgfHwgJ3Vua25vd24tZXZlbnQnO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcih0eXBlLCBsaXN0ZW5lciwgdW5kZWZpbmVkLCBldmVudCk7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIHNpbXVsYXRlZCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSW5zdGFuY2VzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzW2ldLCBkaXNwYXRjaEluc3RhbmNlc1tpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzLCBkaXNwYXRjaEluc3RhbmNlcyk7XG4gIH1cbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbDtcbn1cblxuLyoqXG4gKiBAc2VlIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsXG4gKi9cblxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgZXhlY3V0aW5nIHRoZSBzaW5nbGUgZGlzcGF0Y2guXG4gKi9cblxuXG4vKipcbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmZiBudW1iZXIgb2YgZGlzcGF0Y2hlcyBhY2N1bXVsYXRlZCBpcyBncmVhdGVyIHRoYW4gMC5cbiAqL1xuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGl0ZW1zIHRoYXQgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgaW50byB0aGUgZmlyc3Qgb25lLiBUaGlzXG4gKiBpcyB1c2VkIHRvIGNvbnNlcnZlIG1lbW9yeSBieSBhdm9pZGluZyBhcnJheSBhbGxvY2F0aW9ucywgYW5kIHRodXMgc2FjcmlmaWNlc1xuICogQVBJIGNsZWFubmVzcy4gU2luY2UgYGN1cnJlbnRgIGNhbiBiZSBudWxsIGJlZm9yZSBiZWluZyBwYXNzZWQgaW4gYW5kIG5vdFxuICogbnVsbCBhZnRlciB0aGlzIGZ1bmN0aW9uLCBtYWtlIHN1cmUgdG8gYXNzaWduIGl0IGJhY2sgdG8gYGN1cnJlbnRgOlxuICpcbiAqIGBhID0gYWNjdW11bGF0ZUludG8oYSwgYik7YFxuICpcbiAqIFRoaXMgQVBJIHNob3VsZCBiZSBzcGFyaW5nbHkgdXNlZC4gVHJ5IGBhY2N1bXVsYXRlYCBmb3Igc29tZXRoaW5nIGNsZWFuZXIuXG4gKlxuICogQHJldHVybiB7KnxhcnJheTwqPn0gQW4gYWNjdW11bGF0aW9uIG9mIGl0ZW1zLlxuICovXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVJbnRvKGN1cnJlbnQsIG5leHQpIHtcbiAgIShuZXh0ICE9IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuJykgOiB2b2lkIDA7XG5cbiAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgLy8gQm90aCBhcmUgbm90IGVtcHR5LiBXYXJuaW5nOiBOZXZlciBjYWxsIHguY29uY2F0KHkpIHdoZW4geW91IGFyZSBub3RcbiAgLy8gY2VydGFpbiB0aGF0IHggaXMgYW4gQXJyYXkgKHggY291bGQgYmUgYSBzdHJpbmcgd2l0aCBjb25jYXQgbWV0aG9kKS5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICAgIGN1cnJlbnQucHVzaChuZXh0KTtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG5leHQpKSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIGludm9rZWQgd2l0aCBlYWNoIGVsZW1lbnQgb3IgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHs/fSBbc2NvcGVdIFNjb3BlIHVzZWQgYXMgYHRoaXNgIGluIGEgY2FsbGJhY2suXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hBY2N1bXVsYXRlZChhcnIsIGNiLCBzY29wZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBjYi5jYWxsKHNjb3BlLCBhcnIpO1xuICB9XG59XG5cbi8qKlxuICogSW50ZXJuYWwgcXVldWUgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhY2N1bXVsYXRlZCB0aGVpciBkaXNwYXRjaGVzIGFuZCBhcmVcbiAqIHdhaXRpbmcgdG8gaGF2ZSB0aGVpciBkaXNwYXRjaGVzIGV4ZWN1dGVkLlxuICovXG52YXIgZXZlbnRRdWV1ZSA9IG51bGw7XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBldmVudCBhbmQgcmVsZWFzZXMgaXQgYmFjayBpbnRvIHRoZSBwb29sLCB1bmxlc3MgcGVyc2lzdGVudC5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50IFN5bnRoZXRpYyBldmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlID0gZnVuY3Rpb24gKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgaWYgKGV2ZW50KSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpO1xuXG4gICAgaWYgKCFldmVudC5pc1BlcnNpc3RlbnQoKSkge1xuICAgICAgZXZlbnQuY29uc3RydWN0b3IucmVsZWFzZShldmVudCk7XG4gICAgfVxuICB9XG59O1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCA9IGZ1bmN0aW9uIChlKSB7XG4gIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSwgdHJ1ZSk7XG59O1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlKHRhZykge1xuICByZXR1cm4gdGFnID09PSAnYnV0dG9uJyB8fCB0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAnc2VsZWN0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYSc7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KG5hbWUsIHR5cGUsIHByb3BzKSB7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ29uQ2xpY2snOlxuICAgIGNhc2UgJ29uQ2xpY2tDYXB0dXJlJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZURvd24nOlxuICAgIGNhc2UgJ29uTW91c2VEb3duQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZU1vdmUnOlxuICAgIGNhc2UgJ29uTW91c2VNb3ZlQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZVVwJzpcbiAgICBjYXNlICdvbk1vdXNlVXBDYXB0dXJlJzpcbiAgICAgIHJldHVybiAhIShwcm9wcy5kaXNhYmxlZCAmJiBpc0ludGVyYWN0aXZlKHR5cGUpKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIHVuaWZpZWQgaW50ZXJmYWNlIGZvciBldmVudCBwbHVnaW5zIHRvIGJlIGluc3RhbGxlZCBhbmQgY29uZmlndXJlZC5cbiAqXG4gKiBFdmVudCBwbHVnaW5zIGNhbiBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgYGV4dHJhY3RFdmVudHNgIHtmdW5jdGlvbihzdHJpbmcsIERPTUV2ZW50VGFyZ2V0LCBzdHJpbmcsIG9iamVjdCk6ICp9XG4gKiAgICAgUmVxdWlyZWQuIFdoZW4gYSB0b3AtbGV2ZWwgZXZlbnQgaXMgZmlyZWQsIHRoaXMgbWV0aG9kIGlzIGV4cGVjdGVkIHRvXG4gKiAgICAgZXh0cmFjdCBzeW50aGV0aWMgZXZlbnRzIHRoYXQgd2lsbCBpbiB0dXJuIGJlIHF1ZXVlZCBhbmQgZGlzcGF0Y2hlZC5cbiAqXG4gKiAgIGBldmVudFR5cGVzYCB7b2JqZWN0fVxuICogICAgIE9wdGlvbmFsLCBwbHVnaW5zIHRoYXQgZmlyZSBldmVudHMgbXVzdCBwdWJsaXNoIGEgbWFwcGluZyBvZiByZWdpc3RyYXRpb25cbiAqICAgICBuYW1lcyB0aGF0IGFyZSB1c2VkIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy4gVmFsdWVzIG9mIHRoaXMgbWFwcGluZyBtdXN0XG4gKiAgICAgYmUgb2JqZWN0cyB0aGF0IGNvbnRhaW4gYHJlZ2lzdHJhdGlvbk5hbWVgIG9yIGBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc2AuXG4gKlxuICogICBgZXhlY3V0ZURpc3BhdGNoYCB7ZnVuY3Rpb24ob2JqZWN0LCBmdW5jdGlvbiwgc3RyaW5nKX1cbiAqICAgICBPcHRpb25hbCwgYWxsb3dzIHBsdWdpbnMgdG8gb3ZlcnJpZGUgaG93IGFuIGV2ZW50IGdldHMgZGlzcGF0Y2hlZC4gQnlcbiAqICAgICBkZWZhdWx0LCB0aGUgbGlzdGVuZXIgaXMgc2ltcGx5IGludm9rZWQuXG4gKlxuICogRWFjaCBwbHVnaW4gdGhhdCBpcyBpbmplY3RlZCBpbnRvIGBFdmVudHNQbHVnaW5IdWJgIGlzIGltbWVkaWF0ZWx5IG9wZXJhYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG4vKipcbiAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG4gKi9cbnZhciBpbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5zdCBUaGUgaW5zdGFuY2UsIHdoaWNoIGlzIHRoZSBzb3VyY2Ugb2YgZXZlbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gIHZhciBsaXN0ZW5lciA9IHZvaWQgMDtcblxuICAvLyBUT0RPOiBzaG91bGRQcmV2ZW50TW91c2VFdmVudCBpcyBET00tc3BlY2lmaWMgYW5kIGRlZmluaXRlbHkgc2hvdWxkIG5vdFxuICAvLyBsaXZlIGhlcmU7IG5lZWRzIHRvIGJlIG1vdmVkIHRvIGEgYmV0dGVyIHBsYWNlIHNvb25cbiAgdmFyIHN0YXRlTm9kZSA9IGluc3Quc3RhdGVOb2RlO1xuICBpZiAoIXN0YXRlTm9kZSkge1xuICAgIC8vIFdvcmsgaW4gcHJvZ3Jlc3MgKGV4OiBvbmxvYWQgZXZlbnRzIGluIGluY3JlbWVudGFsIG1vZGUpLlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBwcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoc3RhdGVOb2RlKTtcbiAgaWYgKCFwcm9wcykge1xuICAgIC8vIFdvcmsgaW4gcHJvZ3Jlc3MuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGlzdGVuZXIgPSBwcm9wc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgaWYgKHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGluc3QudHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgISghbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGAlc2AgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbiwgaW5zdGVhZCBnb3QgYSB2YWx1ZSBvZiBgJXNgIHR5cGUuJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufVxuXG4vKipcbiAqIEFsbG93cyByZWdpc3RlcmVkIHBsdWdpbnMgYW4gb3Bwb3J0dW5pdHkgdG8gZXh0cmFjdCBldmVudHMgZnJvbSB0b3AtbGV2ZWxcbiAqIG5hdGl2ZSBicm93c2VyIGV2ZW50cy5cbiAqXG4gKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudHMgPSBudWxsO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBOb3QgZXZlcnkgcGx1Z2luIGluIHRoZSBvcmRlcmluZyBtYXkgYmUgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcbiAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIGlmIChleHRyYWN0ZWRFdmVudHMpIHtcbiAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZXZlbnRzO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudHNJbkJhdGNoKGV2ZW50cywgc2ltdWxhdGVkKSB7XG4gIGlmIChldmVudHMgIT09IG51bGwpIHtcbiAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcbiAgfVxuXG4gIC8vIFNldCBgZXZlbnRRdWV1ZWAgdG8gbnVsbCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBzbyB0aGF0IHdlIGNhbiB0ZWxsIGlmIG1vcmVcbiAgLy8gZXZlbnRzIGdldCBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nLlxuICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICBldmVudFF1ZXVlID0gbnVsbDtcblxuICBpZiAoIXByb2Nlc3NpbmdFdmVudFF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbXVsYXRlZCkge1xuICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkKTtcbiAgfSBlbHNlIHtcbiAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsKTtcbiAgfVxuICAhIWV2ZW50UXVldWUgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC4nKSA6IHZvaWQgMDtcbiAgLy8gVGhpcyB3b3VsZCBiZSBhIGdvb2QgdGltZSB0byByZXRocm93IGlmIGFueSBvZiB0aGUgZXZlbnQgaGFuZGxlcnMgdGhyZXcuXG4gIFJlYWN0RXJyb3JVdGlscy5yZXRocm93Q2F1Z2h0RXJyb3IoKTtcbn1cblxuZnVuY3Rpb24gcnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZXZlbnRzID0gZXh0cmFjdEV2ZW50cyh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIHJ1bkV2ZW50c0luQmF0Y2goZXZlbnRzLCBmYWxzZSk7XG59XG5cbnZhciBFdmVudFBsdWdpbkh1YiA9IE9iamVjdC5mcmVlemUoe1xuXHRpbmplY3Rpb246IGluamVjdGlvbixcblx0Z2V0TGlzdGVuZXI6IGdldExpc3RlbmVyLFxuXHRydW5FdmVudHNJbkJhdGNoOiBydW5FdmVudHNJbkJhdGNoLFxuXHRydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOiBydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoXG59KTtcblxudmFyIEluZGV0ZXJtaW5hdGVDb21wb25lbnQgPSAwOyAvLyBCZWZvcmUgd2Uga25vdyB3aGV0aGVyIGl0IGlzIGZ1bmN0aW9uYWwgb3IgY2xhc3NcbnZhciBGdW5jdGlvbmFsQ29tcG9uZW50ID0gMTtcbnZhciBDbGFzc0NvbXBvbmVudCA9IDI7XG52YXIgSG9zdFJvb3QgPSAzOyAvLyBSb290IG9mIGEgaG9zdCB0cmVlLiBDb3VsZCBiZSBuZXN0ZWQgaW5zaWRlIGFub3RoZXIgbm9kZS5cbnZhciBIb3N0UG9ydGFsID0gNDsgLy8gQSBzdWJ0cmVlLiBDb3VsZCBiZSBhbiBlbnRyeSBwb2ludCB0byBhIGRpZmZlcmVudCByZW5kZXJlci5cbnZhciBIb3N0Q29tcG9uZW50ID0gNTtcbnZhciBIb3N0VGV4dCA9IDY7XG52YXIgQ2FsbENvbXBvbmVudCA9IDc7XG52YXIgQ2FsbEhhbmRsZXJQaGFzZSA9IDg7XG52YXIgUmV0dXJuQ29tcG9uZW50ID0gOTtcbnZhciBGcmFnbWVudCA9IDEwO1xudmFyIE1vZGUgPSAxMTtcbnZhciBDb250ZXh0Q29uc3VtZXIgPSAxMjtcbnZhciBDb250ZXh0UHJvdmlkZXIgPSAxMztcbnZhciBGb3J3YXJkUmVmID0gMTQ7XG5cbnZhciByYW5kb21LZXkgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbnZhciBpbnRlcm5hbEluc3RhbmNlS2V5ID0gJ19fcmVhY3RJbnRlcm5hbEluc3RhbmNlJCcgKyByYW5kb21LZXk7XG52YXIgaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5ID0gJ19fcmVhY3RFdmVudEhhbmRsZXJzJCcgKyByYW5kb21LZXk7XG5cbmZ1bmN0aW9uIHByZWNhY2hlRmliZXJOb2RlJDEoaG9zdEluc3QsIG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGhvc3RJbnN0O1xufVxuXG4vKipcbiAqIEdpdmVuIGEgRE9NIG5vZGUsIHJldHVybiB0aGUgY2xvc2VzdCBSZWFjdERPTUNvbXBvbmVudCBvclxuICogUmVhY3RET01UZXh0Q29tcG9uZW50IGluc3RhbmNlIGFuY2VzdG9yLlxuICovXG5mdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIGlmIChub2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSB7XG4gICAgcmV0dXJuIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIH1cblxuICB3aGlsZSAoIW5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pIHtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUb3Agb2YgdGhlIHRyZWUuIFRoaXMgbm9kZSBtdXN0IG5vdCBiZSBwYXJ0IG9mIGEgUmVhY3QgdHJlZSAob3IgaXNcbiAgICAgIC8vIHVubW91bnRlZCwgcG90ZW50aWFsbHkpLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc3QgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBpZiAoaW5zdC50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgaW5zdC50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgLy8gSW4gRmliZXIsIHRoaXMgd2lsbCBhbHdheXMgYmUgdGhlIGRlZXBlc3Qgcm9vdC5cbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgRE9NIG5vZGUsIHJldHVybiB0aGUgUmVhY3RET01Db21wb25lbnQgb3IgUmVhY3RET01UZXh0Q29tcG9uZW50XG4gKiBpbnN0YW5jZSwgb3IgbnVsbCBpZiB0aGUgbm9kZSB3YXMgbm90IHJlbmRlcmVkIGJ5IHRoaXMgUmVhY3QuXG4gKi9cbmZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUkMShub2RlKSB7XG4gIHZhciBpbnN0ID0gbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgaWYgKGluc3QpIHtcbiAgICBpZiAoaW5zdC50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgaW5zdC50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICByZXR1cm4gaW5zdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVhY3RET01Db21wb25lbnQgb3IgUmVhY3RET01UZXh0Q29tcG9uZW50LCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmdcbiAqIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlJDEoaW5zdCkge1xuICBpZiAoaW5zdC50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgaW5zdC50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgLy8gSW4gRmliZXIgdGhpcywgaXMganVzdCB0aGUgc3RhdGUgbm9kZSByaWdodCBub3cuIFdlIGFzc3VtZSBpdCB3aWxsIGJlXG4gICAgLy8gYSBob3N0IGNvbXBvbmVudCBvciBob3N0IHRleHQuXG4gICAgcmV0dXJuIGluc3Quc3RhdGVOb2RlO1xuICB9XG5cbiAgLy8gV2l0aG91dCB0aGlzIGZpcnN0IGludmFyaWFudCwgcGFzc2luZyBhIG5vbi1ET00tY29tcG9uZW50IHRyaWdnZXJzIHRoZSBuZXh0XG4gIC8vIGludmFyaWFudCBmb3IgYSBtaXNzaW5nIHBhcmVudCwgd2hpY2ggaXMgc3VwZXIgY29uZnVzaW5nLlxuICBpbnZhcmlhbnQoZmFsc2UsICdnZXROb2RlRnJvbUluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpO1xufVxuXG5mdW5jdGlvbiBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlJDEobm9kZSkge1xuICByZXR1cm4gbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldIHx8IG51bGw7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUZpYmVyUHJvcHMkMShub2RlLCBwcm9wcykge1xuICBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV0gPSBwcm9wcztcbn1cblxudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IE9iamVjdC5mcmVlemUoe1xuXHRwcmVjYWNoZUZpYmVyTm9kZTogcHJlY2FjaGVGaWJlck5vZGUkMSxcblx0Z2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlLFxuXHRnZXRJbnN0YW5jZUZyb21Ob2RlOiBnZXRJbnN0YW5jZUZyb21Ob2RlJDEsXG5cdGdldE5vZGVGcm9tSW5zdGFuY2U6IGdldE5vZGVGcm9tSW5zdGFuY2UkMSxcblx0Z2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTogZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSQxLFxuXHR1cGRhdGVGaWJlclByb3BzOiB1cGRhdGVGaWJlclByb3BzJDFcbn0pO1xuXG5mdW5jdGlvbiBnZXRQYXJlbnQoaW5zdCkge1xuICBkbyB7XG4gICAgaW5zdCA9IGluc3RbJ3JldHVybiddO1xuICAgIC8vIFRPRE86IElmIHRoaXMgaXMgYSBIb3N0Um9vdCB3ZSBtaWdodCB3YW50IHRvIGJhaWwgb3V0LlxuICAgIC8vIFRoYXQgaXMgZGVwZW5kaW5nIG9uIGlmIHdlIHdhbnQgbmVzdGVkIHN1YnRyZWVzIChsYXllcnMpIHRvIGJ1YmJsZVxuICAgIC8vIGV2ZW50cyB0byB0aGVpciBwYXJlbnQuIFdlIGNvdWxkIGFsc28gZ28gdGhyb3VnaCBwYXJlbnROb2RlIG9uIHRoZVxuICAgIC8vIGhvc3Qgbm9kZSBidXQgdGhhdCB3b3VsZG4ndCB3b3JrIGZvciBSZWFjdCBOYXRpdmUgYW5kIGRvZXNuJ3QgbGV0IHVzXG4gICAgLy8gZG8gdGhlIHBvcnRhbCBmZWF0dXJlLlxuICB9IHdoaWxlIChpbnN0ICYmIGluc3QudGFnICE9PSBIb3N0Q29tcG9uZW50KTtcbiAgaWYgKGluc3QpIHtcbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxvd2VzdCBjb21tb24gYW5jZXN0b3Igb2YgQSBhbmQgQiwgb3IgbnVsbCBpZiB0aGV5IGFyZSBpblxuICogZGlmZmVyZW50IHRyZWVzLlxuICovXG5mdW5jdGlvbiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcihpbnN0QSwgaW5zdEIpIHtcbiAgdmFyIGRlcHRoQSA9IDA7XG4gIGZvciAodmFyIHRlbXBBID0gaW5zdEE7IHRlbXBBOyB0ZW1wQSA9IGdldFBhcmVudCh0ZW1wQSkpIHtcbiAgICBkZXB0aEErKztcbiAgfVxuICB2YXIgZGVwdGhCID0gMDtcbiAgZm9yICh2YXIgdGVtcEIgPSBpbnN0QjsgdGVtcEI7IHRlbXBCID0gZ2V0UGFyZW50KHRlbXBCKSkge1xuICAgIGRlcHRoQisrO1xuICB9XG5cbiAgLy8gSWYgQSBpcyBkZWVwZXIsIGNyYXdsIHVwLlxuICB3aGlsZSAoZGVwdGhBIC0gZGVwdGhCID4gMCkge1xuICAgIGluc3RBID0gZ2V0UGFyZW50KGluc3RBKTtcbiAgICBkZXB0aEEtLTtcbiAgfVxuXG4gIC8vIElmIEIgaXMgZGVlcGVyLCBjcmF3bCB1cC5cbiAgd2hpbGUgKGRlcHRoQiAtIGRlcHRoQSA+IDApIHtcbiAgICBpbnN0QiA9IGdldFBhcmVudChpbnN0Qik7XG4gICAgZGVwdGhCLS07XG4gIH1cblxuICAvLyBXYWxrIGluIGxvY2tzdGVwIHVudGlsIHdlIGZpbmQgYSBtYXRjaC5cbiAgdmFyIGRlcHRoID0gZGVwdGhBO1xuICB3aGlsZSAoZGVwdGgtLSkge1xuICAgIGlmIChpbnN0QSA9PT0gaW5zdEIgfHwgaW5zdEEgPT09IGluc3RCLmFsdGVybmF0ZSkge1xuICAgICAgcmV0dXJuIGluc3RBO1xuICAgIH1cbiAgICBpbnN0QSA9IGdldFBhcmVudChpbnN0QSk7XG4gICAgaW5zdEIgPSBnZXRQYXJlbnQoaW5zdEIpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybiBpZiBBIGlzIGFuIGFuY2VzdG9yIG9mIEIuXG4gKi9cblxuXG4vKipcbiAqIFJldHVybiB0aGUgcGFyZW50IGluc3RhbmNlIG9mIHRoZSBwYXNzZWQtaW4gaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudEluc3RhbmNlKGluc3QpIHtcbiAgcmV0dXJuIGdldFBhcmVudChpbnN0KTtcbn1cblxuLyoqXG4gKiBTaW11bGF0ZXMgdGhlIHRyYXZlcnNhbCBvZiBhIHR3by1waGFzZSwgY2FwdHVyZS9idWJibGUgZXZlbnQgZGlzcGF0Y2guXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlVHdvUGhhc2UoaW5zdCwgZm4sIGFyZykge1xuICB2YXIgcGF0aCA9IFtdO1xuICB3aGlsZSAoaW5zdCkge1xuICAgIHBhdGgucHVzaChpbnN0KTtcbiAgICBpbnN0ID0gZ2V0UGFyZW50KGluc3QpO1xuICB9XG4gIHZhciBpID0gdm9pZCAwO1xuICBmb3IgKGkgPSBwYXRoLmxlbmd0aDsgaS0tID4gMDspIHtcbiAgICBmbihwYXRoW2ldLCAnY2FwdHVyZWQnLCBhcmcpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4ocGF0aFtpXSwgJ2J1YmJsZWQnLCBhcmcpO1xuICB9XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBJRCBoaWVyYXJjaHkgYW5kIGludm9rZXMgdGhlIHN1cHBsaWVkIGBjYmAgb24gYW55IElEcyB0aGF0XG4gKiBzaG91bGQgd291bGQgcmVjZWl2ZSBhIGBtb3VzZUVudGVyYCBvciBgbW91c2VMZWF2ZWAgZXZlbnQuXG4gKlxuICogRG9lcyBub3QgaW52b2tlIHRoZSBjYWxsYmFjayBvbiB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgYmVjYXVzZSBub3RoaW5nXG4gKiBcImVudGVyZWRcIiBvciBcImxlZnRcIiB0aGF0IGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gIHZhciBjb21tb24gPSBmcm9tICYmIHRvID8gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoZnJvbSwgdG8pIDogbnVsbDtcbiAgdmFyIHBhdGhGcm9tID0gW107XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKCFmcm9tKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGZyb20gPT09IGNvbW1vbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBhbHRlcm5hdGUgPSBmcm9tLmFsdGVybmF0ZTtcbiAgICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIGFsdGVybmF0ZSA9PT0gY29tbW9uKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcGF0aEZyb20ucHVzaChmcm9tKTtcbiAgICBmcm9tID0gZ2V0UGFyZW50KGZyb20pO1xuICB9XG4gIHZhciBwYXRoVG8gPSBbXTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoIXRvKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHRvID09PSBjb21tb24pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgX2FsdGVybmF0ZSA9IHRvLmFsdGVybmF0ZTtcbiAgICBpZiAoX2FsdGVybmF0ZSAhPT0gbnVsbCAmJiBfYWx0ZXJuYXRlID09PSBjb21tb24pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwYXRoVG8ucHVzaCh0byk7XG4gICAgdG8gPSBnZXRQYXJlbnQodG8pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEZyb20ubGVuZ3RoOyBpKyspIHtcbiAgICBmbihwYXRoRnJvbVtpXSwgJ2J1YmJsZWQnLCBhcmdGcm9tKTtcbiAgfVxuICBmb3IgKHZhciBfaSA9IHBhdGhUby5sZW5ndGg7IF9pLS0gPiAwOykge1xuICAgIGZuKHBhdGhUb1tfaV0sICdjYXB0dXJlZCcsIGFyZ1RvKTtcbiAgfVxufVxuXG4vKipcbiAqIFNvbWUgZXZlbnQgdHlwZXMgaGF2ZSBhIG5vdGlvbiBvZiBkaWZmZXJlbnQgcmVnaXN0cmF0aW9uIG5hbWVzIGZvciBkaWZmZXJlbnRcbiAqIFwicGhhc2VzXCIgb2YgcHJvcGFnYXRpb24uIFRoaXMgZmluZHMgbGlzdGVuZXJzIGJ5IGEgZ2l2ZW4gcGhhc2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RlbmVyQXRQaGFzZShpbnN0LCBldmVudCwgcHJvcGFnYXRpb25QaGFzZSkge1xuICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3Byb3BhZ2F0aW9uUGhhc2VdO1xuICByZXR1cm4gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG59XG5cbi8qKlxuICogQSBzbWFsbCBzZXQgb2YgcHJvcGFnYXRpb24gcGF0dGVybnMsIGVhY2ggb2Ygd2hpY2ggd2lsbCBhY2NlcHQgYSBzbWFsbCBhbW91bnRcbiAqIG9mIGluZm9ybWF0aW9uLCBhbmQgZ2VuZXJhdGUgYSBzZXQgb2YgXCJkaXNwYXRjaCByZWFkeSBldmVudCBvYmplY3RzXCIgLSB3aGljaFxuICogYXJlIHNldHMgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYW5ub3RhdGVkIHdpdGggYSBzZXQgb2YgZGlzcGF0Y2hlZFxuICogbGlzdGVuZXIgZnVuY3Rpb25zL2lkcy4gVGhlIEFQSSBpcyBkZXNpZ25lZCB0aGlzIHdheSB0byBkaXNjb3VyYWdlIHRoZXNlXG4gKiBwcm9wYWdhdGlvbiBzdHJhdGVnaWVzIGZyb20gYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBkaXNwYXRjaGVzLCBzaW5jZSB3ZVxuICogYWx3YXlzIHdhbnQgdG8gY29sbGVjdCB0aGUgZW50aXJlIHNldCBvZiBkaXNwYXRjaGVzIGJlZm9yZSBleGVjdXRpbmcgZXZlbiBhXG4gKiBzaW5nbGUgb25lLlxuICovXG5cbi8qKlxuICogVGFncyBhIGBTeW50aGV0aWNFdmVudGAgd2l0aCBkaXNwYXRjaGVkIGxpc3RlbmVycy4gQ3JlYXRpbmcgdGhpcyBmdW5jdGlvblxuICogaGVyZSwgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGJpbmQgb3IgY3JlYXRlIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudC5cbiAqIE11dGF0aW5nIHRoZSBldmVudCdzIG1lbWJlcnMgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGNyZWF0ZSBhIHdyYXBwaW5nXG4gKiBcImRpc3BhdGNoXCIgb2JqZWN0IHRoYXQgcGFpcnMgdGhlIGV2ZW50IHdpdGggdGhlIGxpc3RlbmVyLlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGluc3QsIHBoYXNlLCBldmVudCkge1xuICB7XG4gICAgd2FybmluZyhpbnN0LCAnRGlzcGF0Y2hpbmcgaW5zdCBtdXN0IG5vdCBiZSBudWxsJyk7XG4gIH1cbiAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwaGFzZSk7XG4gIGlmIChsaXN0ZW5lcikge1xuICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRpc3BhdGNoZXMgKG11c3QgYmUgZW50aXJlbHkgY29sbGVjdGVkIGJlZm9yZSBkaXNwYXRjaGluZyAtIHNlZSB1bml0XG4gKiB0ZXN0cykuIExhemlseSBhbGxvY2F0ZSB0aGUgYXJyYXkgdG8gY29uc2VydmUgbWVtb3J5LiAgV2UgbXVzdCBsb29wIHRocm91Z2hcbiAqIGVhY2ggZXZlbnQgYW5kIHBlcmZvcm0gdGhlIHRyYXZlcnNhbCBmb3IgZWFjaCBvbmUuIFdlIGNhbm5vdCBwZXJmb3JtIGFcbiAqIHNpbmdsZSB0cmF2ZXJzYWwgZm9yIHRoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBldmVudHMgYmVjYXVzZSBlYWNoIGV2ZW50IG1heVxuICogaGF2ZSBhIGRpZmZlcmVudCB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgdHJhdmVyc2VUd29QaGFzZShldmVudC5fdGFyZ2V0SW5zdCwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogU2FtZSBhcyBgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZWAsIGJ1dCBza2lwcyBvdmVyIHRoZSB0YXJnZXRJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBldmVudC5fdGFyZ2V0SW5zdDtcbiAgICB2YXIgcGFyZW50SW5zdCA9IHRhcmdldEluc3QgPyBnZXRQYXJlbnRJbnN0YW5jZSh0YXJnZXRJbnN0KSA6IG51bGw7XG4gICAgdHJhdmVyc2VUd29QaGFzZShwYXJlbnRJbnN0LCBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLCBldmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyB3aXRob3V0IHJlZ2FyZCB0byBkaXJlY3Rpb24sIGRvZXMgbm90IGxvb2sgZm9yIHBoYXNlZFxuICogcmVnaXN0cmF0aW9uIG5hbWVzLiBTYW1lIGFzIGBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZWAgYnV0IHdpdGhvdXRcbiAqIHJlcXVpcmluZyB0aGF0IHRoZSBgZGlzcGF0Y2hNYXJrZXJgIGJlIHRoZSBzYW1lIGFzIHRoZSBkaXNwYXRjaGVkIElELlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpbnN0LCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICBpZiAoaW5zdCAmJiBldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lO1xuICAgIHZhciBsaXN0ZW5lciA9IGdldExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMsIGluc3QpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGRpc3BhdGNoZXMgb24gYW4gYFN5bnRoZXRpY0V2ZW50YCwgYnV0IG9ubHkgZm9yIHRoZVxuICogYGRpc3BhdGNoTWFya2VyYC5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuX3RhcmdldEluc3QsIG51bGwsIGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVTa2lwVGFyZ2V0KTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbSwgdG8pIHtcbiAgdHJhdmVyc2VFbnRlckxlYXZlKGZyb20sIHRvLCBhY2N1bXVsYXRlRGlzcGF0Y2hlcywgbGVhdmUsIGVudGVyKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSBPYmplY3QuZnJlZXplKHtcblx0YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyxcblx0YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0LFxuXHRhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyxcblx0YWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6IGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzXG59KTtcblxudmFyIGNvbnRlbnRLZXkgPSBudWxsO1xuXG4vKipcbiAqIEdldHMgdGhlIGtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQgb24gYSBET00gbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBLZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKSB7XG4gIGlmICghY29udGVudEtleSAmJiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAvLyBQcmVmZXIgdGV4dENvbnRlbnQgdG8gaW5uZXJUZXh0IGJlY2F1c2UgbWFueSBicm93c2VycyBzdXBwb3J0IGJvdGggYnV0XG4gICAgLy8gU1ZHIDx0ZXh0PiBlbGVtZW50cyBkb24ndCBzdXBwb3J0IGlubmVyVGV4dCBldmVuIHdoZW4gPGRpdj4gZG9lcy5cbiAgICBjb250ZW50S2V5ID0gJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyAndGV4dENvbnRlbnQnIDogJ2lubmVyVGV4dCc7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRLZXk7XG59XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgb2JqZWN0IHN0b3JlcyBpbmZvcm1hdGlvbiBhYm91dCB0ZXh0IGNvbnRlbnQgb2YgYSB0YXJnZXQgbm9kZSxcbiAqIGFsbG93aW5nIGNvbXBhcmlzb24gb2YgY29udGVudCBiZWZvcmUgYW5kIGFmdGVyIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogSWRlbnRpZnkgdGhlIG5vZGUgd2hlcmUgc2VsZWN0aW9uIGN1cnJlbnRseSBiZWdpbnMsIHRoZW4gb2JzZXJ2ZVxuICogYm90aCBpdHMgdGV4dCBjb250ZW50IGFuZCBpdHMgY3VycmVudCBwb3NpdGlvbiBpbiB0aGUgRE9NLiBTaW5jZSB0aGVcbiAqIGJyb3dzZXIgbWF5IG5hdGl2ZWx5IHJlcGxhY2UgdGhlIHRhcmdldCBub2RlIGR1cmluZyBjb21wb3NpdGlvbiwgd2UgY2FuXG4gKiB1c2UgaXRzIHBvc2l0aW9uIHRvIGZpbmQgaXRzIHJlcGxhY2VtZW50LlxuICpcbiAqXG4gKi9cbnZhciBjb21wb3NpdGlvblN0YXRlID0ge1xuICBfcm9vdDogbnVsbCxcbiAgX3N0YXJ0VGV4dDogbnVsbCxcbiAgX2ZhbGxiYWNrVGV4dDogbnVsbFxufTtcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZShuYXRpdmVFdmVudFRhcmdldCkge1xuICBjb21wb3NpdGlvblN0YXRlLl9yb290ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gIGNvbXBvc2l0aW9uU3RhdGUuX3N0YXJ0VGV4dCA9IGdldFRleHQoKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlc2V0KCkge1xuICBjb21wb3NpdGlvblN0YXRlLl9yb290ID0gbnVsbDtcbiAgY29tcG9zaXRpb25TdGF0ZS5fc3RhcnRUZXh0ID0gbnVsbDtcbiAgY29tcG9zaXRpb25TdGF0ZS5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgaWYgKGNvbXBvc2l0aW9uU3RhdGUuX2ZhbGxiYWNrVGV4dCkge1xuICAgIHJldHVybiBjb21wb3NpdGlvblN0YXRlLl9mYWxsYmFja1RleHQ7XG4gIH1cblxuICB2YXIgc3RhcnQgPSB2b2lkIDA7XG4gIHZhciBzdGFydFZhbHVlID0gY29tcG9zaXRpb25TdGF0ZS5fc3RhcnRUZXh0O1xuICB2YXIgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHZvaWQgMDtcbiAgdmFyIGVuZFZhbHVlID0gZ2V0VGV4dCgpO1xuICB2YXIgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuXG4gIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRdICE9PSBlbmRWYWx1ZVtzdGFydF0pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtaW5FbmQgPSBzdGFydExlbmd0aCAtIHN0YXJ0O1xuICBmb3IgKGVuZCA9IDE7IGVuZCA8PSBtaW5FbmQ7IGVuZCsrKSB7XG4gICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRMZW5ndGggLSBlbmRdICE9PSBlbmRWYWx1ZVtlbmRMZW5ndGggLSBlbmRdKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgc2xpY2VUYWlsID0gZW5kID4gMSA/IDEgLSBlbmQgOiB1bmRlZmluZWQ7XG4gIGNvbXBvc2l0aW9uU3RhdGUuX2ZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCBzbGljZVRhaWwpO1xuICByZXR1cm4gY29tcG9zaXRpb25TdGF0ZS5fZmFsbGJhY2tUZXh0O1xufVxuXG5mdW5jdGlvbiBnZXRUZXh0KCkge1xuICBpZiAoJ3ZhbHVlJyBpbiBjb21wb3NpdGlvblN0YXRlLl9yb290KSB7XG4gICAgcmV0dXJuIGNvbXBvc2l0aW9uU3RhdGUuX3Jvb3QudmFsdWU7XG4gIH1cbiAgcmV0dXJuIGNvbXBvc2l0aW9uU3RhdGUuX3Jvb3RbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXTtcbn1cblxuLyogZXNsaW50IHZhbGlkLXR5cGVvZjogMCAqL1xuXG52YXIgZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgPSBmYWxzZTtcbnZhciBFVkVOVF9QT09MX1NJWkUgPSAxMDtcblxudmFyIHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzID0gWydkaXNwYXRjaENvbmZpZycsICdfdGFyZ2V0SW5zdCcsICduYXRpdmVFdmVudCcsICdpc0RlZmF1bHRQcmV2ZW50ZWQnLCAnaXNQcm9wYWdhdGlvblN0b3BwZWQnLCAnX2Rpc3BhdGNoTGlzdGVuZXJzJywgJ19kaXNwYXRjaEluc3RhbmNlcyddO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHR5cGU6IG51bGwsXG4gIHRhcmdldDogbnVsbCxcbiAgLy8gY3VycmVudFRhcmdldCBpcyBzZXQgd2hlbiBkaXNwYXRjaGluZzsgbm8gdXNlIGluIGNvcHlpbmcgaXQgaGVyZVxuICBjdXJyZW50VGFyZ2V0OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCxcbiAgZXZlbnRQaGFzZTogbnVsbCxcbiAgYnViYmxlczogbnVsbCxcbiAgY2FuY2VsYWJsZTogbnVsbCxcbiAgdGltZVN0YW1wOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0geyp9IHRhcmdldEluc3QgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSBuYXRpdmVFdmVudFRhcmdldCBUYXJnZXQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB7XG4gICAgLy8gdGhlc2UgaGF2ZSBhIGdldHRlci9zZXR0ZXIgZm9yIHdhcm5pbmdzXG4gICAgZGVsZXRlIHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgZGVsZXRlIHRoaXMucHJldmVudERlZmF1bHQ7XG4gICAgZGVsZXRlIHRoaXMuc3RvcFByb3BhZ2F0aW9uO1xuICB9XG5cbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLl90YXJnZXRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuXG4gIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgaWYgKCFJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAge1xuICAgICAgZGVsZXRlIHRoaXNbcHJvcE5hbWVdOyAvLyB0aGlzIGhhcyBhIGdldHRlci9zZXR0ZXIgZm9yIHdhcm5pbmdzXG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BOYW1lID09PSAndGFyZ2V0Jykge1xuICAgICAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDogbmF0aXZlRXZlbnQucmV0dXJuVmFsdWUgPT09IGZhbHNlO1xuICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG4gIH1cbiAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbl9hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnQucmV0dXJuVmFsdWUgIT09ICd1bmtub3duJykge1xuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5jYW5jZWxCdWJibGUgIT09ICd1bmtub3duJykge1xuICAgICAgLy8gVGhlIENoYW5nZUV2ZW50UGx1Z2luIHJlZ2lzdGVycyBhIFwicHJvcGVydHljaGFuZ2VcIiBldmVudCBmb3JcbiAgICAgIC8vIElFLiBUaGlzIGV2ZW50IGRvZXMgbm90IHN1cHBvcnQgYnViYmxpbmcgb3IgY2FuY2VsbGluZywgYW5kXG4gICAgICAvLyBhbnkgcmVmZXJlbmNlcyB0byBjYW5jZWxCdWJibGUgdGhyb3cgXCJNZW1iZXIgbm90IGZvdW5kXCIuICBBXG4gICAgICAvLyB0eXBlb2YgY2hlY2sgb2YgXCJ1bmtub3duXCIgY2lyY3VtdmVudHMgdGhpcyBpc3N1ZSAoYW5kIGlzIGFsc29cbiAgICAgIC8vIElFIHNwZWNpZmljKS5cbiAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXZSByZWxlYXNlIGFsbCBkaXNwYXRjaGVkIGBTeW50aGV0aWNFdmVudGBzIGFmdGVyIGVhY2ggZXZlbnQgbG9vcCwgYWRkaW5nXG4gICAqIHRoZW0gYmFjayBpbnRvIHRoZSBwb29sLiBUaGlzIGFsbG93cyBhIHdheSB0byBob2xkIG9udG8gYSByZWZlcmVuY2UgdGhhdFxuICAgKiB3b24ndCBiZSBhZGRlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqL1xuICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgICB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wTmFtZSwgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgSW50ZXJmYWNlW3Byb3BOYW1lXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzW3Nob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzW2ldXSA9IG51bGw7XG4gICAgfVxuICAgIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmF0aXZlRXZlbnQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCduYXRpdmVFdmVudCcsIG51bGwpKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncHJldmVudERlZmF1bHQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCdwcmV2ZW50RGVmYXVsdCcsIGVtcHR5RnVuY3Rpb24pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RvcFByb3BhZ2F0aW9uJywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignc3RvcFByb3BhZ2F0aW9uJywgZW1wdHlGdW5jdGlvbikpO1xuICAgIH1cbiAgfVxufSk7XG5cblN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuXG4vKipcbiAqIEhlbHBlciB0byByZWR1Y2UgYm9pbGVycGxhdGUgd2hlbiBjcmVhdGluZyBzdWJjbGFzc2VzLlxuICovXG5TeW50aGV0aWNFdmVudC5leHRlbmQgPSBmdW5jdGlvbiAoSW50ZXJmYWNlKSB7XG4gIHZhciBTdXBlciA9IHRoaXM7XG5cbiAgdmFyIEUgPSBmdW5jdGlvbiAoKSB7fTtcbiAgRS5wcm90b3R5cGUgPSBTdXBlci5wcm90b3R5cGU7XG4gIHZhciBwcm90b3R5cGUgPSBuZXcgRSgpO1xuXG4gIGZ1bmN0aW9uIENsYXNzKCkge1xuICAgIHJldHVybiBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG4gIF9hc3NpZ24ocHJvdG90eXBlLCBDbGFzcy5wcm90b3R5cGUpO1xuICBDbGFzcy5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENsYXNzO1xuXG4gIENsYXNzLkludGVyZmFjZSA9IF9hc3NpZ24oe30sIFN1cGVyLkludGVyZmFjZSwgSW50ZXJmYWNlKTtcbiAgQ2xhc3MuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICBhZGRFdmVudFBvb2xpbmdUbyhDbGFzcyk7XG5cbiAgcmV0dXJuIENsYXNzO1xufTtcblxuLyoqIFByb3h5aW5nIGFmdGVyIGV2ZXJ5dGhpbmcgc2V0IG9uIFN5bnRoZXRpY0V2ZW50XG4gKiB0byByZXNvbHZlIFByb3h5IGlzc3VlIG9uIHNvbWUgV2ViS2l0IGJyb3dzZXJzXG4gKiBpbiB3aGljaCBzb21lIEV2ZW50IHByb3BlcnRpZXMgYXJlIHNldCB0byB1bmRlZmluZWQgKEdIIzEwMDEwKVxuICovXG57XG4gIHZhciBpc1Byb3h5U3VwcG9ydGVkID0gdHlwZW9mIFByb3h5ID09PSAnZnVuY3Rpb24nICYmXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTIwMTFcbiAgIU9iamVjdC5pc1NlYWxlZChuZXcgUHJveHkoe30sIHt9KSk7XG5cbiAgaWYgKGlzUHJveHlTdXBwb3J0ZWQpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIG5vLWZ1bmMtYXNzaWduICovXG4gICAgU3ludGhldGljRXZlbnQgPSBuZXcgUHJveHkoU3ludGhldGljRXZlbnQsIHtcbiAgICAgIGNvbnN0cnVjdDogZnVuY3Rpb24gKHRhcmdldCwgYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseSh0YXJnZXQsIE9iamVjdC5jcmVhdGUodGFyZ2V0LnByb3RvdHlwZSksIGFyZ3MpO1xuICAgICAgfSxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbiAoY29uc3RydWN0b3IsIHRoYXQsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eShjb25zdHJ1Y3Rvci5hcHBseSh0aGF0LCBhcmdzKSwge1xuICAgICAgICAgIHNldDogZnVuY3Rpb24gKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChwcm9wICE9PSAnaXNQZXJzaXN0ZW50JyAmJiAhdGFyZ2V0LmNvbnN0cnVjdG9yLkludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiBzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgICAgICAgICB3YXJuaW5nKGRpZFdhcm5Gb3JBZGRlZE5ld1Byb3BlcnR5IHx8IHRhcmdldC5pc1BlcnNpc3RlbnQoKSwgXCJUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdSdyZSBcIiArIFwic2VlaW5nIHRoaXMsIHlvdSdyZSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgaW4gdGhlIHN5bnRoZXRpYyBldmVudCBvYmplY3QuIFwiICsgJ1RoZSBwcm9wZXJ0eSBpcyBuZXZlciByZWxlYXNlZC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgICAgICAgICAgICBkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLWZ1bmMtYXNzaWduICovXG4gIH1cbn1cblxuYWRkRXZlbnRQb29saW5nVG8oU3ludGhldGljRXZlbnQpO1xuXG4vKipcbiAqIEhlbHBlciB0byBudWxsaWZ5IHN5bnRoZXRpY0V2ZW50IGluc3RhbmNlIHByb3BlcnRpZXMgd2hlbiBkZXN0cnVjdGluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wTmFtZVxuICogQHBhcmFtIHs/b2JqZWN0fSBnZXRWYWxcbiAqIEByZXR1cm4ge29iamVjdH0gZGVmaW5lUHJvcGVydHkgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24ocHJvcE5hbWUsIGdldFZhbCkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBnZXRWYWwgPT09ICdmdW5jdGlvbic7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHNldDogc2V0LFxuICAgIGdldDogZ2V0XG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgIHZhciBhY3Rpb24gPSBpc0Z1bmN0aW9uID8gJ3NldHRpbmcgdGhlIG1ldGhvZCcgOiAnc2V0dGluZyB0aGUgcHJvcGVydHknO1xuICAgIHdhcm4oYWN0aW9uLCAnVGhpcyBpcyBlZmZlY3RpdmVseSBhIG5vLW9wJyk7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldCgpIHtcbiAgICB2YXIgYWN0aW9uID0gaXNGdW5jdGlvbiA/ICdhY2Nlc3NpbmcgdGhlIG1ldGhvZCcgOiAnYWNjZXNzaW5nIHRoZSBwcm9wZXJ0eSc7XG4gICAgdmFyIHJlc3VsdCA9IGlzRnVuY3Rpb24gPyAnVGhpcyBpcyBhIG5vLW9wIGZ1bmN0aW9uJyA6ICdUaGlzIGlzIHNldCB0byBudWxsJztcbiAgICB3YXJuKGFjdGlvbiwgcmVzdWx0KTtcbiAgICByZXR1cm4gZ2V0VmFsO1xuICB9XG5cbiAgZnVuY3Rpb24gd2FybihhY3Rpb24sIHJlc3VsdCkge1xuICAgIHZhciB3YXJuaW5nQ29uZGl0aW9uID0gZmFsc2U7XG4gICAgd2FybmluZyh3YXJuaW5nQ29uZGl0aW9uLCBcIlRoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91J3JlIHNlZWluZyB0aGlzLCBcIiArIFwieW91J3JlICVzIGAlc2Agb24gYSByZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiAlcy4gXCIgKyAnSWYgeW91IG11c3Qga2VlcCB0aGUgb3JpZ2luYWwgc3ludGhldGljIGV2ZW50IGFyb3VuZCwgdXNlIGV2ZW50LnBlcnNpc3QoKS4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIGFjdGlvbiwgcHJvcE5hbWUsIHJlc3VsdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UG9vbGVkRXZlbnQoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVJbnN0KSB7XG4gIHZhciBFdmVudENvbnN0cnVjdG9yID0gdGhpcztcbiAgaWYgKEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLnBvcCgpO1xuICAgIEV2ZW50Q29uc3RydWN0b3IuY2FsbChpbnN0YW5jZSwgZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVJbnN0KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cbiAgcmV0dXJuIG5ldyBFdmVudENvbnN0cnVjdG9yKGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlSW5zdCk7XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VQb29sZWRFdmVudChldmVudCkge1xuICB2YXIgRXZlbnRDb25zdHJ1Y3RvciA9IHRoaXM7XG4gICEoZXZlbnQgaW5zdGFuY2VvZiBFdmVudENvbnN0cnVjdG9yKSA/IGludmFyaWFudChmYWxzZSwgJ1RyeWluZyB0byByZWxlYXNlIGFuIGV2ZW50IGluc3RhbmNlICBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLicpIDogdm9pZCAwO1xuICBldmVudC5kZXN0cnVjdG9yKCk7XG4gIGlmIChFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5sZW5ndGggPCBFVkVOVF9QT09MX1NJWkUpIHtcbiAgICBFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5wdXNoKGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRFdmVudFBvb2xpbmdUbyhFdmVudENvbnN0cnVjdG9yKSB7XG4gIEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sID0gW107XG4gIEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkID0gZ2V0UG9vbGVkRXZlbnQ7XG4gIEV2ZW50Q29uc3RydWN0b3IucmVsZWFzZSA9IHJlbGVhc2VQb29sZWRFdmVudDtcbn1cblxudmFyIFN5bnRoZXRpY0V2ZW50JDEgPSBTeW50aGV0aWNFdmVudDtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWNvbXBvc2l0aW9uZXZlbnRzXG4gKi9cbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gU3ludGhldGljRXZlbnQkMS5leHRlbmQoe1xuICBkYXRhOiBudWxsXG59KTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gU3ludGhldGljRXZlbnQkMS5leHRlbmQoe1xuICBkYXRhOiBudWxsXG59KTtcblxudmFyIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXTsgLy8gVGFiLCBSZXR1cm4sIEVzYywgU3BhY2VcbnZhciBTVEFSVF9LRVlDT0RFID0gMjI5O1xuXG52YXIgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnQ29tcG9zaXRpb25FdmVudCcgaW4gd2luZG93O1xuXG52YXIgZG9jdW1lbnRNb2RlID0gbnVsbDtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHtcbiAgZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xufVxuXG4vLyBXZWJraXQgb2ZmZXJzIGEgdmVyeSB1c2VmdWwgYHRleHRJbnB1dGAgZXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0b1xuLy8gZGlyZWN0bHkgcmVwcmVzZW50IGBiZWZvcmVJbnB1dGAuIFRoZSBJRSBgdGV4dGlucHV0YCBldmVudCBpcyBub3QgYXNcbi8vIHVzZWZ1bCwgc28gd2UgZG9uJ3QgdXNlIGl0LlxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdUZXh0RXZlbnQnIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlO1xuXG4vLyBJbiBJRTkrLCB3ZSBoYXZlIGFjY2VzcyB0byBjb21wb3NpdGlvbiBldmVudHMsIGJ1dCB0aGUgZGF0YSBzdXBwbGllZFxuLy8gYnkgdGhlIG5hdGl2ZSBjb21wb3NpdGlvbmVuZCBldmVudCBtYXkgYmUgaW5jb3JyZWN0LiBKYXBhbmVzZSBpZGVvZ3JhcGhpY1xuLy8gc3BhY2VzLCBmb3IgaW5zdGFuY2UgKFxcdTMwMDApIGFyZSBub3QgcmVjb3JkZWQgY29ycmVjdGx5LlxudmFyIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fCBkb2N1bWVudE1vZGUgJiYgZG9jdW1lbnRNb2RlID4gOCAmJiBkb2N1bWVudE1vZGUgPD0gMTEpO1xuXG52YXIgU1BBQ0VCQVJfQ09ERSA9IDMyO1xudmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuXG4vLyBFdmVudHMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgbmFtZXMuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uQmVmb3JlSW5wdXQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkJlZm9yZUlucHV0Q2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BDb21wb3NpdGlvbkVuZCcsICd0b3BLZXlQcmVzcycsICd0b3BUZXh0SW5wdXQnLCAndG9wUGFzdGUnXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Db21wb3NpdGlvbkVuZCcsXG4gICAgICBjYXB0dXJlZDogJ29uQ29tcG9zaXRpb25FbmRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29tcG9zaXRpb25FbmQnLCAndG9wS2V5RG93bicsICd0b3BLZXlQcmVzcycsICd0b3BLZXlVcCcsICd0b3BNb3VzZURvd24nXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29tcG9zaXRpb25TdGFydCcsICd0b3BLZXlEb3duJywgJ3RvcEtleVByZXNzJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93biddXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNvbXBvc2l0aW9uVXBkYXRlJyxcbiAgICAgIGNhcHR1cmVkOiAnb25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDb21wb3NpdGlvblVwZGF0ZScsICd0b3BLZXlEb3duJywgJ3RvcEtleVByZXNzJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93biddXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSAndG9wQ29tcG9zaXRpb25TdGFydCc6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uRW5kJzpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uVXBkYXRlJzpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09ICd0b3BLZXlEb3duJyAmJiBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFO1xufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcEtleVVwJzpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMTtcbiAgICBjYXNlICd0b3BLZXlEb3duJzpcbiAgICAgIC8vIEV4cGVjdCBJTUUga2V5Q29kZSBvbiBlYWNoIGtleWRvd24uIElmIHdlIGdldCBhbnkgb3RoZXJcbiAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREU7XG4gICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgY2FzZSAndG9wQmx1cic6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUcmFjayB0aGUgY3VycmVudCBJTUUgY29tcG9zaXRpb24gc3RhdHVzLCBpZiBhbnkuXG52YXIgaXNDb21wb3NpbmcgPSBmYWxzZTtcblxuLyoqXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudFR5cGUgPSB2b2lkIDA7XG4gIHZhciBmYWxsYmFja0RhdGEgPSB2b2lkIDA7XG5cbiAgaWYgKGNhblVzZUNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICBldmVudFR5cGUgPSBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpO1xuICB9IGVsc2UgaWYgKCFpc0NvbXBvc2luZykge1xuICAgIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICB9XG5cbiAgaWYgKCFldmVudFR5cGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSkge1xuICAgIC8vIFRoZSBjdXJyZW50IGNvbXBvc2l0aW9uIGlzIHN0b3JlZCBzdGF0aWNhbGx5IGFuZCBtdXN0IG5vdCBiZVxuICAgIC8vIG92ZXJ3cml0dGVuIHdoaWxlIGNvbXBvc2l0aW9uIGNvbnRpbnVlcy5cbiAgICBpZiAoIWlzQ29tcG9zaW5nICYmIGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSB7XG4gICAgICBpc0NvbXBvc2luZyA9IGluaXRpYWxpemUobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICBpZiAoaXNDb21wb3NpbmcpIHtcbiAgICAgICAgZmFsbGJhY2tEYXRhID0gZ2V0RGF0YSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICBpZiAoZmFsbGJhY2tEYXRhKSB7XG4gICAgLy8gSW5qZWN0IGRhdGEgZ2VuZXJhdGVkIGZyb20gZmFsbGJhY2sgcGF0aCBpbnRvIHRoZSBzeW50aGV0aWMgZXZlbnQuXG4gICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICBldmVudC5kYXRhID0gZmFsbGJhY2tEYXRhO1xuICB9IGVsc2Uge1xuICAgIHZhciBjdXN0b21EYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgaWYgKGN1c3RvbURhdGEgIT09IG51bGwpIHtcbiAgICAgIGV2ZW50LmRhdGEgPSBjdXN0b21EYXRhO1xuICAgIH1cbiAgfVxuXG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtUb3BMZXZlbFR5cGVzfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEJyb3dzZXJFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlICd0b3BDb21wb3NpdGlvbkVuZCc6XG4gICAgICByZXR1cm4gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgICAgLyoqXG4gICAgICAgKiBJZiBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRzIGFyZSBhdmFpbGFibGUsIG91ciBnb2FsIGlzIHRvIG1ha2VcbiAgICAgICAqIHVzZSBvZiB0aGVtLiBIb3dldmVyLCB0aGVyZSBpcyBhIHNwZWNpYWwgY2FzZTogdGhlIHNwYWNlYmFyIGtleS5cbiAgICAgICAqIEluIFdlYmtpdCwgcHJldmVudGluZyBkZWZhdWx0IG9uIGEgc3BhY2ViYXIgYHRleHRJbnB1dGAgZXZlbnRcbiAgICAgICAqIGNhbmNlbHMgY2hhcmFjdGVyIGluc2VydGlvbiwgYnV0IGl0ICphbHNvKiBjYXVzZXMgdGhlIGJyb3dzZXJcbiAgICAgICAqIHRvIGZhbGwgYmFjayB0byBpdHMgZGVmYXVsdCBzcGFjZWJhciBiZWhhdmlvciBvZiBzY3JvbGxpbmcgdGhlXG4gICAgICAgKiBwYWdlLlxuICAgICAgICpcbiAgICAgICAqIFRyYWNraW5nIGF0OlxuICAgICAgICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM1NTEwM1xuICAgICAgICpcbiAgICAgICAqIFRvIGF2b2lkIHRoaXMgaXNzdWUsIHVzZSB0aGUga2V5cHJlc3MgZXZlbnQgYXMgaWYgbm8gYHRleHRJbnB1dGBcbiAgICAgICAqIGV2ZW50IGlzIGF2YWlsYWJsZS5cbiAgICAgICAqL1xuICAgICAgdmFyIHdoaWNoID0gbmF0aXZlRXZlbnQud2hpY2g7XG4gICAgICBpZiAod2hpY2ggIT09IFNQQUNFQkFSX0NPREUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGhhc1NwYWNlS2V5cHJlc3MgPSB0cnVlO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG5cbiAgICBjYXNlICd0b3BUZXh0SW5wdXQnOlxuICAgICAgLy8gUmVjb3JkIHRoZSBjaGFyYWN0ZXJzIHRvIGJlIGFkZGVkIHRvIHRoZSBET00uXG4gICAgICB2YXIgY2hhcnMgPSBuYXRpdmVFdmVudC5kYXRhO1xuXG4gICAgICAvLyBJZiBpdCdzIGEgc3BhY2ViYXIgY2hhcmFjdGVyLCBhc3N1bWUgdGhhdCB3ZSBoYXZlIGFscmVhZHkgaGFuZGxlZFxuICAgICAgLy8gaXQgYXQgdGhlIGtleXByZXNzIGxldmVsIGFuZCBiYWlsIGltbWVkaWF0ZWx5LiBBbmRyb2lkIENocm9tZVxuICAgICAgLy8gZG9lc24ndCBnaXZlIHVzIGtleWNvZGVzLCBzbyB3ZSBuZWVkIHRvIGJsYWNrbGlzdCBpdC5cbiAgICAgIGlmIChjaGFycyA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhcnM7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRm9yIG90aGVyIG5hdGl2ZSBldmVudCB0eXBlcywgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRm9yIGJyb3dzZXJzIHRoYXQgZG8gbm90IHByb3ZpZGUgdGhlIGB0ZXh0SW5wdXRgIGV2ZW50LCBleHRyYWN0IHRoZVxuICogYXBwcm9wcmlhdGUgc3RyaW5nIHRvIHVzZSBmb3IgU3ludGhldGljSW5wdXRFdmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBCcm93c2VyRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGZhbGxiYWNrIHN0cmluZyBmb3IgdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGNvbXBvc2luZyAoSU1FKSBhbmQgdXNpbmcgYSBmYWxsYmFjayB0byBkbyBzbyxcbiAgLy8gdHJ5IHRvIGV4dHJhY3QgdGhlIGNvbXBvc2VkIGNoYXJhY3RlcnMgZnJvbSB0aGUgZmFsbGJhY2sgb2JqZWN0LlxuICAvLyBJZiBjb21wb3NpdGlvbiBldmVudCBpcyBhdmFpbGFibGUsIHdlIGV4dHJhY3QgYSBzdHJpbmcgb25seSBhdFxuICAvLyBjb21wb3NpdGlvbmV2ZW50LCBvdGhlcndpc2UgZXh0cmFjdCBpdCBhdCBmYWxsYmFjayBldmVudHMuXG4gIGlmIChpc0NvbXBvc2luZykge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BDb21wb3NpdGlvbkVuZCcgfHwgIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgJiYgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICB2YXIgY2hhcnMgPSBnZXREYXRhKCk7XG4gICAgICByZXNldCgpO1xuICAgICAgaXNDb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcFBhc3RlJzpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgJ3RvcEtleVByZXNzJzpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmICghaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIC8vIElFIGZpcmVzIHRoZSBga2V5cHJlc3NgIGV2ZW50IHdoZW4gYSB1c2VyIHR5cGVzIGFuIGVtb2ppIHZpYVxuICAgICAgICAvLyBUb3VjaCBrZXlib2FyZCBvZiBXaW5kb3dzLiAgSW4gc3VjaCBhIGNhc2UsIHRoZSBgY2hhcmAgcHJvcGVydHlcbiAgICAgICAgLy8gaG9sZHMgYW4gZW1vamkgY2hhcmFjdGVyIGxpa2UgYFxcdUQ4M0RcXHVERTBBYC4gIEJlY2F1c2UgaXRzIGxlbmd0aFxuICAgICAgICAvLyBpcyAyLCB0aGUgcHJvcGVydHkgYHdoaWNoYCBkb2VzIG5vdCByZXByZXNlbnQgYW4gZW1vamkgY29ycmVjdGx5LlxuICAgICAgICAvLyBJbiBzdWNoIGEgY2FzZSwgd2UgZGlyZWN0bHkgcmV0dXJuIHRoZSBgY2hhcmAgcHJvcGVydHkgaW5zdGVhZCBvZlxuICAgICAgICAvLyB1c2luZyBgd2hpY2hgLlxuICAgICAgICBpZiAobmF0aXZlRXZlbnQuY2hhciAmJiBuYXRpdmVFdmVudC5jaGFyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gbmF0aXZlRXZlbnQuY2hhcjtcbiAgICAgICAgfSBlbHNlIGlmIChuYXRpdmVFdmVudC53aGljaCkge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAndG9wQ29tcG9zaXRpb25FbmQnOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID8gbnVsbCA6IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdCBhIFN5bnRoZXRpY0lucHV0RXZlbnQgZm9yIGBiZWZvcmVJbnB1dGAsIGJhc2VkIG9uIGVpdGhlciBuYXRpdmVcbiAqIGB0ZXh0SW5wdXRgIG9yIGZhbGxiYWNrIGJlaGF2aW9yLlxuICpcbiAqIEByZXR1cm4gez9vYmplY3R9IEEgU3ludGhldGljSW5wdXRFdmVudC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGNoYXJzID0gdm9pZCAwO1xuXG4gIGlmIChjYW5Vc2VUZXh0SW5wdXRFdmVudCkge1xuICAgIGNoYXJzID0gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBjaGFycyA9IGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfVxuXG4gIC8vIElmIG5vIGNoYXJhY3RlcnMgYXJlIGJlaW5nIGluc2VydGVkLCBubyBCZWZvcmVJbnB1dCBldmVudCBzaG91bGRcbiAgLy8gYmUgZmlyZWQuXG4gIGlmICghY2hhcnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0lucHV0RXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuYmVmb3JlSW5wdXQsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgZXZlbnQuZGF0YSA9IGNoYXJzO1xuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgb25CZWZvcmVJbnB1dGAgZXZlbnQgdG8gbWF0Y2hcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1LyNldmVudHMtaW5wdXRldmVudHMuXG4gKlxuICogVGhpcyBldmVudCBwbHVnaW4gaXMgYmFzZWQgb24gdGhlIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudFxuICogYXZhaWxhYmxlIGluIENocm9tZSwgU2FmYXJpLCBPcGVyYSwgYW5kIElFLiBUaGlzIGV2ZW50IGZpcmVzIGFmdGVyXG4gKiBgb25LZXlQcmVzc2AgYW5kIGBvbkNvbXBvc2l0aW9uRW5kYCwgYnV0IGJlZm9yZSBgb25JbnB1dGAuXG4gKlxuICogYGJlZm9yZUlucHV0YCBpcyBzcGVjJ2QgYnV0IG5vdCBpbXBsZW1lbnRlZCBpbiBhbnkgYnJvd3NlcnMsIGFuZFxuICogdGhlIGBpbnB1dGAgZXZlbnQgZG9lcyBub3QgcHJvdmlkZSBhbnkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaGFzXG4gKiBhY3R1YWxseSBiZWVuIGFkZGVkLCBjb250cmFyeSB0byB0aGUgc3BlYy4gVGh1cywgYHRleHRJbnB1dGAgaXMgdGhlIGJlc3RcbiAqIGF2YWlsYWJsZSBldmVudCB0byBpZGVudGlmeSB0aGUgY2hhcmFjdGVycyB0aGF0IGhhdmUgYWN0dWFsbHkgYmVlbiBpbnNlcnRlZFxuICogaW50byB0aGUgdGFyZ2V0IG5vZGUuXG4gKlxuICogVGhpcyBwbHVnaW4gaXMgYWxzbyByZXNwb25zaWJsZSBmb3IgZW1pdHRpbmcgYGNvbXBvc2l0aW9uYCBldmVudHMsIHRodXNcbiAqIGFsbG93aW5nIHVzIHRvIHNoYXJlIGNvbXBvc2l0aW9uIGZhbGxiYWNrIGNvZGUgZm9yIGJvdGggYGJlZm9yZUlucHV0YCBhbmRcbiAqIGBjb21wb3NpdGlvbmAgZXZlbnQgdHlwZXMuXG4gKi9cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBjb21wb3NpdGlvbiA9IGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICAgIHZhciBiZWZvcmVJbnB1dCA9IGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICAgIGlmIChjb21wb3NpdGlvbiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGJlZm9yZUlucHV0O1xuICAgIH1cblxuICAgIGlmIChiZWZvcmVJbnB1dCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBbY29tcG9zaXRpb24sIGJlZm9yZUlucHV0XTtcbiAgfVxufTtcblxuLy8gVXNlIHRvIHJlc3RvcmUgY29udHJvbGxlZCBzdGF0ZSBhZnRlciBhIGNoYW5nZSBldmVudCBoYXMgZmlyZWQuXG5cbnZhciBmaWJlckhvc3RDb21wb25lbnQgPSBudWxsO1xuXG52YXIgUmVhY3RDb250cm9sbGVkQ29tcG9uZW50SW5qZWN0aW9uID0ge1xuICBpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OiBmdW5jdGlvbiAoaG9zdENvbXBvbmVudEltcGwpIHtcbiAgICAvLyBUaGUgZmliZXIgaW1wbGVtZW50YXRpb24gZG9lc24ndCB1c2UgZHluYW1pYyBkaXNwYXRjaCBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gaW5qZWN0IHRoZSBpbXBsZW1lbnRhdGlvbi5cbiAgICBmaWJlckhvc3RDb21wb25lbnQgPSBob3N0Q29tcG9uZW50SW1wbDtcbiAgfVxufTtcblxudmFyIHJlc3RvcmVUYXJnZXQgPSBudWxsO1xudmFyIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHRhcmdldCkge1xuICAvLyBXZSBwZXJmb3JtIHRoaXMgdHJhbnNsYXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgZXZlbnQgbG9vcCBzbyB0aGF0IHdlXG4gIC8vIGFsd2F5cyByZWNlaXZlIHRoZSBjb3JyZWN0IGZpYmVyIGhlcmVcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKHRhcmdldCk7XG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIC8vIFVubW91bnRlZFxuICAgIHJldHVybjtcbiAgfVxuICAhKGZpYmVySG9zdENvbXBvbmVudCAmJiB0eXBlb2YgZmliZXJIb3N0Q29tcG9uZW50LnJlc3RvcmVDb250cm9sbGVkU3RhdGUgPT09ICdmdW5jdGlvbicpID8gaW52YXJpYW50KGZhbHNlLCAnRmliZXIgbmVlZHMgdG8gYmUgaW5qZWN0ZWQgdG8gaGFuZGxlIGEgZmliZXIgdGFyZ2V0IGZvciBjb250cm9sbGVkIGV2ZW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgdmFyIHByb3BzID0gZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZShpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSk7XG4gIGZpYmVySG9zdENvbXBvbmVudC5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlLCBpbnRlcm5hbEluc3RhbmNlLnR5cGUsIHByb3BzKTtcbn1cblxudmFyIGluamVjdGlvbiQyID0gUmVhY3RDb250cm9sbGVkQ29tcG9uZW50SW5qZWN0aW9uO1xuXG5mdW5jdGlvbiBlbnF1ZXVlU3RhdGVSZXN0b3JlKHRhcmdldCkge1xuICBpZiAocmVzdG9yZVRhcmdldCkge1xuICAgIGlmIChyZXN0b3JlUXVldWUpIHtcbiAgICAgIHJlc3RvcmVRdWV1ZS5wdXNoKHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3RvcmVRdWV1ZSA9IFt0YXJnZXRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXN0b3JlVGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5lZWRzU3RhdGVSZXN0b3JlKCkge1xuICByZXR1cm4gcmVzdG9yZVRhcmdldCAhPT0gbnVsbCB8fCByZXN0b3JlUXVldWUgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZUlmTmVlZGVkKCkge1xuICBpZiAoIXJlc3RvcmVUYXJnZXQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHRhcmdldCA9IHJlc3RvcmVUYXJnZXQ7XG4gIHZhciBxdWV1ZWRUYXJnZXRzID0gcmVzdG9yZVF1ZXVlO1xuICByZXN0b3JlVGFyZ2V0ID0gbnVsbDtcbiAgcmVzdG9yZVF1ZXVlID0gbnVsbDtcblxuICByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpO1xuICBpZiAocXVldWVkVGFyZ2V0cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWVkVGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdG9yZVN0YXRlT2ZUYXJnZXQocXVldWVkVGFyZ2V0c1tpXSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdENvbnRyb2xsZWRDb21wb25lbnQgPSBPYmplY3QuZnJlZXplKHtcblx0aW5qZWN0aW9uOiBpbmplY3Rpb24kMixcblx0ZW5xdWV1ZVN0YXRlUmVzdG9yZTogZW5xdWV1ZVN0YXRlUmVzdG9yZSxcblx0bmVlZHNTdGF0ZVJlc3RvcmU6IG5lZWRzU3RhdGVSZXN0b3JlLFxuXHRyZXN0b3JlU3RhdGVJZk5lZWRlZDogcmVzdG9yZVN0YXRlSWZOZWVkZWRcbn0pO1xuXG4vLyBVc2VkIGFzIGEgd2F5IHRvIGNhbGwgYmF0Y2hlZFVwZGF0ZXMgd2hlbiB3ZSBkb24ndCBoYXZlIGEgcmVmZXJlbmNlIHRvXG4vLyB0aGUgcmVuZGVyZXIuIFN1Y2ggYXMgd2hlbiB3ZSdyZSBkaXNwYXRjaGluZyBldmVudHMgb3IgaWYgdGhpcmQgcGFydHlcbi8vIGxpYnJhcmllcyBuZWVkIHRvIGNhbGwgYmF0Y2hlZFVwZGF0ZXMuIEV2ZW50dWFsbHksIHRoaXMgQVBJIHdpbGwgZ28gYXdheSB3aGVuXG4vLyBldmVyeXRoaW5nIGlzIGJhdGNoZWQgYnkgZGVmYXVsdC4gV2UnbGwgdGhlbiBoYXZlIGEgc2ltaWxhciBBUEkgdG8gb3B0LW91dCBvZlxuLy8gc2NoZWR1bGVkIHdvcmsgYW5kIGluc3RlYWQgZG8gc3luY2hyb25vdXMgd29yay5cblxuLy8gRGVmYXVsdHNcbnZhciBfYmF0Y2hlZFVwZGF0ZXMgPSBmdW5jdGlvbiAoZm4sIGJvb2trZWVwaW5nKSB7XG4gIHJldHVybiBmbihib29ra2VlcGluZyk7XG59O1xudmFyIF9pbnRlcmFjdGl2ZVVwZGF0ZXMgPSBmdW5jdGlvbiAoZm4sIGEsIGIpIHtcbiAgcmV0dXJuIGZuKGEsIGIpO1xufTtcbnZhciBfZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMgPSBmdW5jdGlvbiAoKSB7fTtcblxudmFyIGlzQmF0Y2hpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzKGZuLCBib29ra2VlcGluZykge1xuICBpZiAoaXNCYXRjaGluZykge1xuICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW5zaWRlIGFub3RoZXIgYmF0Y2gsIHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdFxuICAgIC8vIGZ1bGx5IGNvbXBsZXRlcyBiZWZvcmUgcmVzdG9yaW5nIHN0YXRlLlxuICAgIHJldHVybiBmbihib29ra2VlcGluZyk7XG4gIH1cbiAgaXNCYXRjaGluZyA9IHRydWU7XG4gIHRyeSB7XG4gICAgcmV0dXJuIF9iYXRjaGVkVXBkYXRlcyhmbiwgYm9va2tlZXBpbmcpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIEhlcmUgd2Ugd2FpdCB1bnRpbCBhbGwgdXBkYXRlcyBoYXZlIHByb3BhZ2F0ZWQsIHdoaWNoIGlzIGltcG9ydGFudFxuICAgIC8vIHdoZW4gdXNpbmcgY29udHJvbGxlZCBjb21wb25lbnRzIHdpdGhpbiBsYXllcnM6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG4gICAgLy8gVGhlbiB3ZSByZXN0b3JlIHN0YXRlIG9mIGFueSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICBpc0JhdGNoaW5nID0gZmFsc2U7XG4gICAgdmFyIGNvbnRyb2xsZWRDb21wb25lbnRzSGF2ZVBlbmRpbmdVcGRhdGVzID0gbmVlZHNTdGF0ZVJlc3RvcmUoKTtcbiAgICBpZiAoY29udHJvbGxlZENvbXBvbmVudHNIYXZlUGVuZGluZ1VwZGF0ZXMpIHtcbiAgICAgIC8vIElmIGEgY29udHJvbGxlZCBldmVudCB3YXMgZmlyZWQsIHdlIG1heSBuZWVkIHRvIHJlc3RvcmUgdGhlIHN0YXRlIG9mXG4gICAgICAvLyB0aGUgRE9NIG5vZGUgYmFjayB0byB0aGUgY29udHJvbGxlZCB2YWx1ZS4gVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBSZWFjdFxuICAgICAgLy8gYmFpbHMgb3V0IG9mIHRoZSB1cGRhdGUgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgICAgX2ZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzKCk7XG4gICAgICByZXN0b3JlU3RhdGVJZk5lZWRlZCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcmFjdGl2ZVVwZGF0ZXMoZm4sIGEsIGIpIHtcbiAgcmV0dXJuIF9pbnRlcmFjdGl2ZVVwZGF0ZXMoZm4sIGEsIGIpO1xufVxuXG5cblxudmFyIGluamVjdGlvbiQzID0ge1xuICBpbmplY3RSZW5kZXJlcjogZnVuY3Rpb24gKHJlbmRlcmVyKSB7XG4gICAgX2JhdGNoZWRVcGRhdGVzID0gcmVuZGVyZXIuYmF0Y2hlZFVwZGF0ZXM7XG4gICAgX2ludGVyYWN0aXZlVXBkYXRlcyA9IHJlbmRlcmVyLmludGVyYWN0aXZlVXBkYXRlcztcbiAgICBfZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMgPSByZW5kZXJlci5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbiAgfVxufTtcblxuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS1pbnB1dC1lbGVtZW50Lmh0bWwjaW5wdXQtdHlwZS1hdHRyLXN1bW1hcnlcbiAqL1xudmFyIHN1cHBvcnRlZElucHV0VHlwZXMgPSB7XG4gIGNvbG9yOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBkYXRldGltZTogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZSxcbiAgZW1haWw6IHRydWUsXG4gIG1vbnRoOiB0cnVlLFxuICBudW1iZXI6IHRydWUsXG4gIHBhc3N3b3JkOiB0cnVlLFxuICByYW5nZTogdHJ1ZSxcbiAgc2VhcmNoOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIHRleHQ6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgd2VlazogdHJ1ZVxufTtcblxuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcpIHtcbiAgICByZXR1cm4gISFzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV07XG4gIH1cblxuICBpZiAobm9kZU5hbWUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBIVE1MIG5vZGVUeXBlIHZhbHVlcyB0aGF0IHJlcHJlc2VudCB0aGUgdHlwZSBvZiB0aGUgbm9kZVxuICovXG5cbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIFRFWFRfTk9ERSA9IDM7XG52YXIgQ09NTUVOVF9OT0RFID0gODtcbnZhciBET0NVTUVOVF9OT0RFID0gOTtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gMTE7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgd2luZG93O1xuXG4gIC8vIE5vcm1hbGl6ZSBTVkcgPHVzZT4gZWxlbWVudCBldmVudHMgIzQ5NjNcbiAgaWYgKHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCkge1xuICAgIHRhcmdldCA9IHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudDtcbiAgfVxuXG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IFRFWFRfTk9ERSA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fCBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cblxuZnVuY3Rpb24gaXNDaGVja2FibGUoZWxlbSkge1xuICB2YXIgdHlwZSA9IGVsZW0udHlwZTtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKHR5cGUgPT09ICdjaGVja2JveCcgfHwgdHlwZSA9PT0gJ3JhZGlvJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRyYWNrZXIobm9kZSkge1xuICByZXR1cm4gbm9kZS5fdmFsdWVUcmFja2VyO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hUcmFja2VyKG5vZGUpIHtcbiAgbm9kZS5fdmFsdWVUcmFja2VyID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVGcm9tTm9kZShub2RlKSB7XG4gIHZhciB2YWx1ZSA9ICcnO1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAoaXNDaGVja2FibGUobm9kZSkpIHtcbiAgICB2YWx1ZSA9IG5vZGUuY2hlY2tlZCA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBub2RlLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpIHtcbiAgdmFyIHZhbHVlRmllbGQgPSBpc0NoZWNrYWJsZShub2RlKSA/ICdjaGVja2VkJyA6ICd2YWx1ZSc7XG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihub2RlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgdmFsdWVGaWVsZCk7XG5cbiAgdmFyIGN1cnJlbnRWYWx1ZSA9ICcnICsgbm9kZVt2YWx1ZUZpZWxkXTtcblxuICAvLyBpZiBzb21lb25lIGhhcyBhbHJlYWR5IGRlZmluZWQgYSB2YWx1ZSBvciBTYWZhcmksIHRoZW4gYmFpbFxuICAvLyBhbmQgZG9uJ3QgdHJhY2sgdmFsdWUgd2lsbCBjYXVzZSBvdmVyIHJlcG9ydGluZyBvZiBjaGFuZ2VzLFxuICAvLyBidXQgaXQncyBiZXR0ZXIgdGhlbiBhIGhhcmQgZmFpbHVyZVxuICAvLyAobmVlZGVkIGZvciBjZXJ0YWluIHRlc3RzIHRoYXQgc3B5T24gaW5wdXQgdmFsdWVzIGFuZCBTYWZhcmkpXG4gIGlmIChub2RlLmhhc093blByb3BlcnR5KHZhbHVlRmllbGQpIHx8IHR5cGVvZiBkZXNjcmlwdG9yLmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZGVzY3JpcHRvci5zZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZXNjcmlwdG9yLmdldC5jYWxsKHRoaXMpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICAvLyBXZSBjb3VsZCd2ZSBwYXNzZWQgdGhpcyB0aGUgZmlyc3QgdGltZVxuICAvLyBidXQgaXQgdHJpZ2dlcnMgYSBidWcgaW4gSUUxMSBhbmQgRWRnZSAxNC8xNS5cbiAgLy8gQ2FsbGluZyBkZWZpbmVQcm9wZXJ0eSgpIGFnYWluIHNob3VsZCBiZSBlcXVpdmFsZW50LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzExNzY4XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlXG4gIH0pO1xuXG4gIHZhciB0cmFja2VyID0ge1xuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgIH0sXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgY3VycmVudFZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICB9LFxuICAgIHN0b3BUcmFja2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgZGV0YWNoVHJhY2tlcihub2RlKTtcbiAgICAgIGRlbGV0ZSBub2RlW3ZhbHVlRmllbGRdO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHRyYWNrZXI7XG59XG5cbmZ1bmN0aW9uIHRyYWNrKG5vZGUpIHtcbiAgaWYgKGdldFRyYWNrZXIobm9kZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUT0RPOiBPbmNlIGl0J3MganVzdCBGaWJlciB3ZSBjYW4gbW92ZSB0aGlzIHRvIG5vZGUuX3dyYXBwZXJTdGF0ZVxuICBub2RlLl92YWx1ZVRyYWNrZXIgPSB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVWYWx1ZUlmQ2hhbmdlZChub2RlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciB0cmFja2VyID0gZ2V0VHJhY2tlcihub2RlKTtcbiAgLy8gaWYgdGhlcmUgaXMgbm8gdHJhY2tlciBhdCB0aGlzIHBvaW50IGl0J3MgdW5saWtlbHlcbiAgLy8gdGhhdCB0cnlpbmcgYWdhaW4gd2lsbCBzdWNjZWVkXG4gIGlmICghdHJhY2tlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGxhc3RWYWx1ZSA9IHRyYWNrZXIuZ2V0VmFsdWUoKTtcbiAgdmFyIG5leHRWYWx1ZSA9IGdldFZhbHVlRnJvbU5vZGUobm9kZSk7XG4gIGlmIChuZXh0VmFsdWUgIT09IGxhc3RWYWx1ZSkge1xuICAgIHRyYWNrZXIuc2V0VmFsdWUobmV4dFZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBSZWFjdEludGVybmFscyA9IFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSBSZWFjdEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcblxudmFyIGRlc2NyaWJlQ29tcG9uZW50RnJhbWUgPSBmdW5jdGlvbiAobmFtZSwgc291cmNlLCBvd25lck5hbWUpIHtcbiAgcmV0dXJuICdcXG4gICAgaW4gJyArIChuYW1lIHx8ICdVbmtub3duJykgKyAoc291cmNlID8gJyAoYXQgJyArIHNvdXJjZS5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLCAnJykgKyAnOicgKyBzb3VyY2UubGluZU51bWJlciArICcpJyA6IG93bmVyTmFtZSA/ICcgKGNyZWF0ZWQgYnkgJyArIG93bmVyTmFtZSArICcpJyA6ICcnKTtcbn07XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2xbJ2ZvciddO1xuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xudmFyIFJFQUNUX0NBTExfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmNhbGwnKSA6IDB4ZWFjODtcbnZhciBSRUFDVF9SRVRVUk5fVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbFsnZm9yJ10oJ3JlYWN0LnJldHVybicpIDogMHhlYWM5O1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QucG9ydGFsJykgOiAweGVhY2E7XG52YXIgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmZyYWdtZW50JykgOiAweGVhY2I7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbFsnZm9yJ10oJ3JlYWN0LnN0cmljdF9tb2RlJykgOiAweGVhY2M7XG52YXIgUkVBQ1RfUFJPVklERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbFsnZm9yJ10oJ3JlYWN0LnByb3ZpZGVyJykgOiAweGVhY2Q7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QuY29udGV4dCcpIDogMHhlYWNlO1xudmFyIFJFQUNUX0FTWU5DX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmFzeW5jX21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcblxudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG1heWJlSXRlcmFibGUgPT09IG51bGwgfHwgdHlwZW9mIG1heWJlSXRlcmFibGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIG1heWJlSXRlcmF0b3IgPSBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdIHx8IG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdO1xuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShmaWJlcikge1xuICB2YXIgdHlwZSA9IGZpYmVyLnR5cGU7XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lO1xuICB9XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gJ1JlYWN0RnJhZ21lbnQnO1xuICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICByZXR1cm4gJ1JlYWN0UG9ydGFsJztcbiAgICBjYXNlIFJFQUNUX0NBTExfVFlQRTpcbiAgICAgIHJldHVybiAnUmVhY3RDYWxsJztcbiAgICBjYXNlIFJFQUNUX1JFVFVSTl9UWVBFOlxuICAgICAgcmV0dXJuICdSZWFjdFJldHVybic7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIEluZGV0ZXJtaW5hdGVDb21wb25lbnQ6XG4gICAgY2FzZSBGdW5jdGlvbmFsQ29tcG9uZW50OlxuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgdmFyIG93bmVyID0gZmliZXIuX2RlYnVnT3duZXI7XG4gICAgICB2YXIgc291cmNlID0gZmliZXIuX2RlYnVnU291cmNlO1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGZpYmVyKTtcbiAgICAgIHZhciBvd25lck5hbWUgPSBudWxsO1xuICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgIG93bmVyTmFtZSA9IGdldENvbXBvbmVudE5hbWUob3duZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlc2NyaWJlQ29tcG9uZW50RnJhbWUobmFtZSwgc291cmNlLCBvd25lck5hbWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIgYW5kXG4vLyBvbmx5IGR1cmluZyBiZWdpbiBvciBjb21wbGV0ZSBwaGFzZS4gRG8gbm90IGNhbGwgaXQgdW5kZXIgYW55IG90aGVyXG4vLyBjaXJjdW1zdGFuY2VzLlxuZnVuY3Rpb24gZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcih3b3JrSW5Qcm9ncmVzcykge1xuICB2YXIgaW5mbyA9ICcnO1xuICB2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzO1xuICBkbyB7XG4gICAgaW5mbyArPSBkZXNjcmliZUZpYmVyKG5vZGUpO1xuICAgIC8vIE90aGVyd2lzZSB0aGlzIHJldHVybiBwb2ludGVyIG1pZ2h0IHBvaW50IHRvIHRoZSB3cm9uZyB0cmVlOlxuICAgIG5vZGUgPSBub2RlWydyZXR1cm4nXTtcbiAgfSB3aGlsZSAobm9kZSk7XG4gIHJldHVybiBpbmZvO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50RmliZXJPd25lck5hbWUkMSgpIHtcbiAge1xuICAgIHZhciBmaWJlciA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuY3VycmVudDtcbiAgICBpZiAoZmliZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgb3duZXIgPSBmaWJlci5fZGVidWdPd25lcjtcbiAgICBpZiAob3duZXIgIT09IG51bGwgJiYgdHlwZW9mIG93bmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUob3duZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQxKCkge1xuICB7XG4gICAgdmFyIGZpYmVyID0gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5jdXJyZW50O1xuICAgIGlmIChmaWJlciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIFNhZmUgYmVjYXVzZSBpZiBjdXJyZW50IGZpYmVyIGV4aXN0cywgd2UgYXJlIHJlY29uY2lsaW5nLFxuICAgIC8vIGFuZCBpdCBpcyBndWFyYW50ZWVkIHRvIGJlIHRoZSB3b3JrLWluLXByb2dyZXNzIHZlcnNpb24uXG4gICAgcmV0dXJuIGdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXIoZmliZXIpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiByZXNldEN1cnJlbnRGaWJlcigpIHtcbiAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2sgPSBudWxsO1xuICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLmN1cnJlbnQgPSBudWxsO1xuICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLnBoYXNlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0Q3VycmVudEZpYmVyKGZpYmVyKSB7XG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0Q3VycmVudFN0YWNrID0gZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQxO1xuICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLmN1cnJlbnQgPSBmaWJlcjtcbiAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5waGFzZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRQaGFzZShwaGFzZSkge1xuICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLnBoYXNlID0gcGhhc2U7XG59XG5cbnZhciBSZWFjdERlYnVnQ3VycmVudEZpYmVyID0ge1xuICBjdXJyZW50OiBudWxsLFxuICBwaGFzZTogbnVsbCxcbiAgcmVzZXRDdXJyZW50RmliZXI6IHJlc2V0Q3VycmVudEZpYmVyLFxuICBzZXRDdXJyZW50RmliZXI6IHNldEN1cnJlbnRGaWJlcixcbiAgc2V0Q3VycmVudFBoYXNlOiBzZXRDdXJyZW50UGhhc2UsXG4gIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZTogZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lJDEsXG4gIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW06IGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMVxufTtcblxuLy8gQSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4vLyBJdCBpcyBoYW5kbGVkIGJ5IFJlYWN0IHNlcGFyYXRlbHkgYW5kIHNob3VsZG4ndCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG52YXIgUkVTRVJWRUQgPSAwO1xuXG4vLyBBIHNpbXBsZSBzdHJpbmcgYXR0cmlidXRlLlxuLy8gQXR0cmlidXRlcyB0aGF0IGFyZW4ndCBpbiB0aGUgd2hpdGVsaXN0IGFyZSBwcmVzdW1lZCB0byBoYXZlIHRoaXMgdHlwZS5cbnZhciBTVFJJTkcgPSAxO1xuXG4vLyBBIHN0cmluZyBhdHRyaWJ1dGUgdGhhdCBhY2NlcHRzIGJvb2xlYW5zIGluIFJlYWN0LiBJbiBIVE1MLCB0aGVzZSBhcmUgY2FsbGVkXG4vLyBcImVudW1lcmF0ZWRcIiBhdHRyaWJ1dGVzIHdpdGggXCJ0cnVlXCIgYW5kIFwiZmFsc2VcIiBhcyBwb3NzaWJsZSB2YWx1ZXMuXG4vLyBXaGVuIHRydWUsIGl0IHNob3VsZCBiZSBzZXQgdG8gYSBcInRydWVcIiBzdHJpbmcuXG4vLyBXaGVuIGZhbHNlLCBpdCBzaG91bGQgYmUgc2V0IHRvIGEgXCJmYWxzZVwiIHN0cmluZy5cbnZhciBCT09MRUFOSVNIX1NUUklORyA9IDI7XG5cbi8vIEEgcmVhbCBib29sZWFuIGF0dHJpYnV0ZS5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHByZXNlbnQgKHNldCBlaXRoZXIgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGl0cyBuYW1lKS5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBvbWl0dGVkLlxudmFyIEJPT0xFQU4gPSAzO1xuXG4vLyBBbiBhdHRyaWJ1dGUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIGZsYWcgYXMgd2VsbCBhcyB3aXRoIGEgdmFsdWUuXG4vLyBXaGVuIHRydWUsIGl0IHNob3VsZCBiZSBwcmVzZW50IChzZXQgZWl0aGVyIHRvIGFuIGVtcHR5IHN0cmluZyBvciBpdHMgbmFtZSkuXG4vLyBXaGVuIGZhbHNlLCBpdCBzaG91bGQgYmUgb21pdHRlZC5cbi8vIEZvciBhbnkgb3RoZXIgdmFsdWUsIHNob3VsZCBiZSBwcmVzZW50IHdpdGggdGhhdCB2YWx1ZS5cbnZhciBPVkVSTE9BREVEX0JPT0xFQU4gPSA0O1xuXG4vLyBBbiBhdHRyaWJ1dGUgdGhhdCBtdXN0IGJlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBudW1lcmljLlxuLy8gV2hlbiBmYWxzeSwgaXQgc2hvdWxkIGJlIHJlbW92ZWQuXG52YXIgTlVNRVJJQyA9IDU7XG5cbi8vIEFuIGF0dHJpYnV0ZSB0aGF0IG11c3QgYmUgcG9zaXRpdmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIHBvc2l0aXZlIG51bWVyaWMuXG4vLyBXaGVuIGZhbHN5LCBpdCBzaG91bGQgYmUgcmVtb3ZlZC5cbnZhciBQT1NJVElWRV9OVU1FUklDID0gNjtcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xudmFyIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgPSAnOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbnZhciBBVFRSSUJVVEVfTkFNRV9DSEFSID0gQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArICdcXFxcLS4wLTlcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCc7XG5cblxudmFyIFJPT1RfQVRUUklCVVRFX05BTUUgPSAnZGF0YS1yZWFjdHJvb3QnO1xudmFyIFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYID0gbmV3IFJlZ0V4cCgnXlsnICsgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArICddWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xuXG52YXIgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xudmFyIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAge1xuICAgIHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBgJXNgJywgYXR0cmlidXRlTmFtZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRJZ25vcmVBdHRyaWJ1dGUobmFtZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SW5mby50eXBlID09PSBSRVNFUlZFRDtcbiAgfVxuICBpZiAoaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG5hbWUubGVuZ3RoID4gMiAmJiAobmFtZVswXSA9PT0gJ28nIHx8IG5hbWVbMF0gPT09ICdPJykgJiYgKG5hbWVbMV0gPT09ICduJyB8fCBuYW1lWzFdID09PSAnTicpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsICYmIHByb3BlcnR5SW5mby50eXBlID09PSBSRVNFUlZFRCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAvLyAkRmxvd0lzc3VlIHN5bWJvbCBpcyBwZXJmZWN0bHkgdmFsaWQgaGVyZVxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gIXByb3BlcnR5SW5mby5hY2NlcHRzQm9vbGVhbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZWZpeCA9IG5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCA1KTtcbiAgICAgICAgICByZXR1cm4gcHJlZml4ICE9PSAnZGF0YS0nICYmIHByZWZpeCAhPT0gJ2FyaWEtJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcbiAgICBzd2l0Y2ggKHByb3BlcnR5SW5mby50eXBlKSB7XG4gICAgICBjYXNlIEJPT0xFQU46XG4gICAgICAgIHJldHVybiAhdmFsdWU7XG4gICAgICBjYXNlIE9WRVJMT0FERURfQk9PTEVBTjpcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcbiAgICAgIGNhc2UgTlVNRVJJQzpcbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKTtcbiAgICAgIGNhc2UgUE9TSVRJVkVfTlVNRVJJQzpcbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA8IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlJbmZvKG5hbWUpIHtcbiAgcmV0dXJuIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9wZXJ0aWVzW25hbWVdIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIHR5cGUsIG11c3RVc2VQcm9wZXJ0eSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlTmFtZXNwYWNlKSB7XG4gIHRoaXMuYWNjZXB0c0Jvb2xlYW5zID0gdHlwZSA9PT0gQk9PTEVBTklTSF9TVFJJTkcgfHwgdHlwZSA9PT0gQk9PTEVBTiB8fCB0eXBlID09PSBPVkVSTE9BREVEX0JPT0xFQU47XG4gIHRoaXMuYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gIHRoaXMuYXR0cmlidXRlTmFtZXNwYWNlID0gYXR0cmlidXRlTmFtZXNwYWNlO1xuICB0aGlzLm11c3RVc2VQcm9wZXJ0eSA9IG11c3RVc2VQcm9wZXJ0eTtcbiAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBuYW1lO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xufVxuXG4vLyBXaGVuIGFkZGluZyBhdHRyaWJ1dGVzIHRvIHRoaXMgbGlzdCwgYmUgc3VyZSB0byBhbHNvIGFkZCB0aGVtIHRvXG4vLyB0aGUgYHBvc3NpYmxlU3RhbmRhcmROYW1lc2AgbW9kdWxlIHRvIGVuc3VyZSBjYXNpbmcgYW5kIGluY29ycmVjdFxuLy8gbmFtZSB3YXJuaW5ncy5cbnZhciBwcm9wZXJ0aWVzID0ge307XG5cbi8vIFRoZXNlIHByb3BzIGFyZSByZXNlcnZlZCBieSBSZWFjdC4gVGhleSBzaG91bGRuJ3QgYmUgd3JpdHRlbiB0byB0aGUgRE9NLlxuWydjaGlsZHJlbicsICdkYW5nZXJvdXNseVNldElubmVySFRNTCcsXG4vLyBUT0RPOiBUaGlzIHByZXZlbnRzIHRoZSBhc3NpZ25tZW50IG9mIGRlZmF1bHRWYWx1ZSB0byByZWd1bGFyXG4vLyBlbGVtZW50cyAobm90IGp1c3QgaW5wdXRzKS4gTm93IHRoYXQgUmVhY3RET01JbnB1dCBhc3NpZ25zIHRvIHRoZVxuLy8gZGVmYXVsdFZhbHVlIHByb3BlcnR5IC0tIGRvIHdlIG5lZWQgdGhpcz9cbidkZWZhdWx0VmFsdWUnLCAnZGVmYXVsdENoZWNrZWQnLCAnaW5uZXJIVE1MJywgJ3N1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZycsICdzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcnLCAnc3R5bGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFJFU0VSVkVELCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCk7XG59KTtcblxuLy8gQSBmZXcgUmVhY3Qgc3RyaW5nIGF0dHJpYnV0ZXMgaGF2ZSBhIGRpZmZlcmVudCBuYW1lLlxuLy8gVGhpcyBpcyBhIG1hcHBpbmcgZnJvbSBSZWFjdCBwcm9wIG5hbWVzIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZXMuXG5bWydhY2NlcHRDaGFyc2V0JywgJ2FjY2VwdC1jaGFyc2V0J10sIFsnY2xhc3NOYW1lJywgJ2NsYXNzJ10sIFsnaHRtbEZvcicsICdmb3InXSwgWydodHRwRXF1aXYnLCAnaHR0cC1lcXVpdiddXS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBuYW1lID0gX3JlZlswXSxcbiAgICAgIGF0dHJpYnV0ZU5hbWUgPSBfcmVmWzFdO1xuXG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSk7XG5cbi8vIFRoZXNlIGFyZSBcImVudW1lcmF0ZWRcIiBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBhY2NlcHQgXCJ0cnVlXCIgYW5kIFwiZmFsc2VcIi5cbi8vIEluIFJlYWN0LCB3ZSBsZXQgdXNlcnMgcGFzcyBgdHJ1ZWAgYW5kIGBmYWxzZWAgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHlcbi8vIHRoZXNlIGFyZW4ndCBib29sZWFuIGF0dHJpYnV0ZXMgKHRoZXkgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncykuXG5bJ2NvbnRlbnRFZGl0YWJsZScsICdkcmFnZ2FibGUnLCAnc3BlbGxDaGVjaycsICd2YWx1ZSddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgQk9PTEVBTklTSF9TVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgbmFtZS50b0xvd2VyQ2FzZSgpLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSk7XG5cbi8vIFRoZXNlIGFyZSBcImVudW1lcmF0ZWRcIiBTVkcgYXR0cmlidXRlcyB0aGF0IGFjY2VwdCBcInRydWVcIiBhbmQgXCJmYWxzZVwiLlxuLy8gSW4gUmVhY3QsIHdlIGxldCB1c2VycyBwYXNzIGB0cnVlYCBhbmQgYGZhbHNlYCBldmVuIHRob3VnaCB0ZWNobmljYWxseVxuLy8gdGhlc2UgYXJlbid0IGJvb2xlYW4gYXR0cmlidXRlcyAodGhleSBhcmUgY29lcmNlZCB0byBzdHJpbmdzKS5cbi8vIFNpbmNlIHRoZXNlIGFyZSBTVkcgYXR0cmlidXRlcywgdGhlaXIgYXR0cmlidXRlIG5hbWVzIGFyZSBjYXNlLXNlbnNpdGl2ZS5cblsnYXV0b1JldmVyc2UnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdwcmVzZXJ2ZUFscGhhJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBCT09MRUFOSVNIX1NUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSk7XG5cbi8vIFRoZXNlIGFyZSBIVE1MIGJvb2xlYW4gYXR0cmlidXRlcy5cblsnYWxsb3dGdWxsU2NyZWVuJywgJ2FzeW5jJyxcbi8vIE5vdGU6IHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlIHRoYXQgcHJldmVudHMgaXQgZnJvbSBiZWluZyB3cml0dGVuIHRvIHRoZSBET01cbi8vIG9uIHRoZSBjbGllbnQgc2lkZSBiZWNhdXNlIHRoZSBicm93c2VycyBhcmUgaW5jb25zaXN0ZW50LiBJbnN0ZWFkIHdlIGNhbGwgZm9jdXMoKS5cbidhdXRvRm9jdXMnLCAnYXV0b1BsYXknLCAnY29udHJvbHMnLCAnZGVmYXVsdCcsICdkZWZlcicsICdkaXNhYmxlZCcsICdmb3JtTm9WYWxpZGF0ZScsICdoaWRkZW4nLCAnbG9vcCcsICdub01vZHVsZScsICdub1ZhbGlkYXRlJywgJ29wZW4nLCAncGxheXNJbmxpbmUnLCAncmVhZE9ubHknLCAncmVxdWlyZWQnLCAncmV2ZXJzZWQnLCAnc2NvcGVkJywgJ3NlYW1sZXNzJyxcbi8vIE1pY3JvZGF0YVxuJ2l0ZW1TY29wZSddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgQk9PTEVBTiwgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCk7XG59KTtcblxuLy8gVGhlc2UgYXJlIHRoZSBmZXcgUmVhY3QgcHJvcHMgdGhhdCB3ZSBzZXQgYXMgRE9NIHByb3BlcnRpZXNcbi8vIHJhdGhlciB0aGFuIGF0dHJpYnV0ZXMuIFRoZXNlIGFyZSBhbGwgYm9vbGVhbnMuXG5bJ2NoZWNrZWQnLFxuLy8gTm90ZTogYG9wdGlvbi5zZWxlY3RlZGAgaXMgbm90IHVwZGF0ZWQgaWYgYHNlbGVjdC5tdWx0aXBsZWAgaXNcbi8vIGRpc2FibGVkIHdpdGggYHJlbW92ZUF0dHJpYnV0ZWAuIFdlIGhhdmUgc3BlY2lhbCBsb2dpYyBmb3IgaGFuZGxpbmcgdGhpcy5cbidtdWx0aXBsZScsICdtdXRlZCcsICdzZWxlY3RlZCddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgQk9PTEVBTiwgdHJ1ZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0pO1xuXG4vLyBUaGVzZSBhcmUgSFRNTCBhdHRyaWJ1dGVzIHRoYXQgYXJlIFwib3ZlcmxvYWRlZCBib29sZWFuc1wiOiB0aGV5IGJlaGF2ZSBsaWtlXG4vLyBib29sZWFucywgYnV0IGNhbiBhbHNvIGFjY2VwdCBhIHN0cmluZyB2YWx1ZS5cblsnY2FwdHVyZScsICdkb3dubG9hZCddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgT1ZFUkxPQURFRF9CT09MRUFOLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0pO1xuXG4vLyBUaGVzZSBhcmUgSFRNTCBhdHRyaWJ1dGVzIHRoYXQgbXVzdCBiZSBwb3NpdGl2ZSBudW1iZXJzLlxuWydjb2xzJywgJ3Jvd3MnLCAnc2l6ZScsICdzcGFuJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBQT1NJVElWRV9OVU1FUklDLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0pO1xuXG4vLyBUaGVzZSBhcmUgSFRNTCBhdHRyaWJ1dGVzIHRoYXQgbXVzdCBiZSBudW1iZXJzLlxuWydyb3dTcGFuJywgJ3N0YXJ0J10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBOVU1FUklDLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0pO1xuXG52YXIgQ0FNRUxJWkUgPSAvW1xcLVxcOl0oW2Etel0pL2c7XG52YXIgY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uICh0b2tlbikge1xuICByZXR1cm4gdG9rZW5bMV0udG9VcHBlckNhc2UoKTtcbn07XG5cbi8vIFRoaXMgaXMgYSBsaXN0IG9mIGFsbCBTVkcgYXR0cmlidXRlcyB0aGF0IG5lZWQgc3BlY2lhbCBjYXNpbmcsIG5hbWVzcGFjaW5nLFxuLy8gb3IgYm9vbGVhbiB2YWx1ZSBhc3NpZ25tZW50LiBSZWd1bGFyIGF0dHJpYnV0ZXMgdGhhdCBqdXN0IGFjY2VwdCBzdHJpbmdzXG4vLyBhbmQgaGF2ZSB0aGUgc2FtZSBuYW1lcyBhcmUgb21pdHRlZCwganVzdCBsaWtlIGluIHRoZSBIVE1MIHdoaXRlbGlzdC5cbi8vIFNvbWUgb2YgdGhlc2UgYXR0cmlidXRlcyBjYW4gYmUgaGFyZCB0byBmaW5kLiBUaGlzIGxpc3Qgd2FzIGNyZWF0ZWQgYnlcbi8vIHNjcmFwcGluZyB0aGUgTUROIGRvY3VtZW50YXRpb24uXG5bJ2FjY2VudC1oZWlnaHQnLCAnYWxpZ25tZW50LWJhc2VsaW5lJywgJ2FyYWJpYy1mb3JtJywgJ2Jhc2VsaW5lLXNoaWZ0JywgJ2NhcC1oZWlnaHQnLCAnY2xpcC1wYXRoJywgJ2NsaXAtcnVsZScsICdjb2xvci1pbnRlcnBvbGF0aW9uJywgJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdjb2xvci1wcm9maWxlJywgJ2NvbG9yLXJlbmRlcmluZycsICdkb21pbmFudC1iYXNlbGluZScsICdlbmFibGUtYmFja2dyb3VuZCcsICdmaWxsLW9wYWNpdHknLCAnZmlsbC1ydWxlJywgJ2Zsb29kLWNvbG9yJywgJ2Zsb29kLW9wYWNpdHknLCAnZm9udC1mYW1pbHknLCAnZm9udC1zaXplJywgJ2ZvbnQtc2l6ZS1hZGp1c3QnLCAnZm9udC1zdHJldGNoJywgJ2ZvbnQtc3R5bGUnLCAnZm9udC12YXJpYW50JywgJ2ZvbnQtd2VpZ2h0JywgJ2dseXBoLW5hbWUnLCAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCcsICdnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCcsICdob3Jpei1hZHYteCcsICdob3Jpei1vcmlnaW4teCcsICdpbWFnZS1yZW5kZXJpbmcnLCAnbGV0dGVyLXNwYWNpbmcnLCAnbGlnaHRpbmctY29sb3InLCAnbWFya2VyLWVuZCcsICdtYXJrZXItbWlkJywgJ21hcmtlci1zdGFydCcsICdvdmVybGluZS1wb3NpdGlvbicsICdvdmVybGluZS10aGlja25lc3MnLCAncGFpbnQtb3JkZXInLCAncGFub3NlLTEnLCAncG9pbnRlci1ldmVudHMnLCAncmVuZGVyaW5nLWludGVudCcsICdzaGFwZS1yZW5kZXJpbmcnLCAnc3RvcC1jb2xvcicsICdzdG9wLW9wYWNpdHknLCAnc3RyaWtldGhyb3VnaC1wb3NpdGlvbicsICdzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcycsICdzdHJva2UtZGFzaGFycmF5JywgJ3N0cm9rZS1kYXNob2Zmc2V0JywgJ3N0cm9rZS1saW5lY2FwJywgJ3N0cm9rZS1saW5lam9pbicsICdzdHJva2UtbWl0ZXJsaW1pdCcsICdzdHJva2Utb3BhY2l0eScsICdzdHJva2Utd2lkdGgnLCAndGV4dC1hbmNob3InLCAndGV4dC1kZWNvcmF0aW9uJywgJ3RleHQtcmVuZGVyaW5nJywgJ3VuZGVybGluZS1wb3NpdGlvbicsICd1bmRlcmxpbmUtdGhpY2tuZXNzJywgJ3VuaWNvZGUtYmlkaScsICd1bmljb2RlLXJhbmdlJywgJ3VuaXRzLXBlci1lbScsICd2LWFscGhhYmV0aWMnLCAndi1oYW5naW5nJywgJ3YtaWRlb2dyYXBoaWMnLCAndi1tYXRoZW1hdGljYWwnLCAndmVjdG9yLWVmZmVjdCcsICd2ZXJ0LWFkdi15JywgJ3ZlcnQtb3JpZ2luLXgnLCAndmVydC1vcmlnaW4teScsICd3b3JkLXNwYWNpbmcnLCAnd3JpdGluZy1tb2RlJywgJ3htbG5zOnhsaW5rJywgJ3gtaGVpZ2h0J10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZShDQU1FTElaRSwgY2FwaXRhbGl6ZSk7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCBudWxsKTtcbn0pO1xuXG4vLyBTdHJpbmcgU1ZHIGF0dHJpYnV0ZXMgd2l0aCB0aGUgeGxpbmsgbmFtZXNwYWNlLlxuWyd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZSddLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgdmFyIG5hbWUgPSBhdHRyaWJ1dGVOYW1lLnJlcGxhY2UoQ0FNRUxJWkUsIGNhcGl0YWxpemUpO1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBTVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgYXR0cmlidXRlTmFtZSwgJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnKTtcbn0pO1xuXG4vLyBTdHJpbmcgU1ZHIGF0dHJpYnV0ZXMgd2l0aCB0aGUgeG1sIG5hbWVzcGFjZS5cblsneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZShDQU1FTElaRSwgY2FwaXRhbGl6ZSk7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJyk7XG59KTtcblxuLy8gU3BlY2lhbCBjYXNlOiB0aGlzIGF0dHJpYnV0ZSBleGlzdHMgYm90aCBpbiBIVE1MIGFuZCBTVkcuXG4vLyBJdHMgXCJ0YWJpbmRleFwiIGF0dHJpYnV0ZSBuYW1lIGlzIGNhc2Utc2Vuc2l0aXZlIGluIFNWRyBzbyB3ZSBjYW4ndCBqdXN0IHVzZVxuLy8gaXRzIFJlYWN0IGB0YWJJbmRleGAgbmFtZSwgbGlrZSB3ZSBkbyBmb3IgYXR0cmlidXRlcyB0aGF0IGV4aXN0IG9ubHkgaW4gSFRNTC5cbnByb3BlcnRpZXMudGFiSW5kZXggPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKCd0YWJJbmRleCcsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuJ3RhYmluZGV4JywgLy8gYXR0cmlidXRlTmFtZVxubnVsbCk7XG5cbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuIE9ubHkgdXNlZCBpbiBERVYgZm9yIFNTUiB2YWxpZGF0aW9uLlxuICogVGhlIFwiZXhwZWN0ZWRcIiBhcmd1bWVudCBpcyB1c2VkIGFzIGEgaGludCBvZiB3aGF0IHRoZSBleHBlY3RlZCB2YWx1ZSBpcy5cbiAqIFNvbWUgcHJvcGVydGllcyBoYXZlIG11bHRpcGxlIGVxdWl2YWxlbnQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIGV4cGVjdGVkLCBwcm9wZXJ0eUluZm8pIHtcbiAge1xuICAgIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5KSB7XG4gICAgICB2YXIgcHJvcGVydHlOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcblxuICAgICAgcmV0dXJuIG5vZGVbcHJvcGVydHlOYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcblxuICAgICAgdmFyIHN0cmluZ1ZhbHVlID0gbnVsbDtcblxuICAgICAgaWYgKHByb3BlcnR5SW5mby50eXBlID09PSBPVkVSTE9BREVEX0JPT0xFQU4pIHtcbiAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGUobmFtZSwgZXhwZWN0ZWQsIHByb3BlcnR5SW5mbywgZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJycgKyBleHBlY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZShuYW1lLCBleHBlY3RlZCwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgICAgICAvLyBXZSBoYWQgYW4gYXR0cmlidXRlIGJ1dCBzaG91bGRuJ3QgaGF2ZSBoYWQgb25lLCBzbyByZWFkIGl0XG4gICAgICAgICAgLy8gZm9yIHRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAgICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcGVydHlJbmZvLnR5cGUgPT09IEJPT0xFQU4pIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIHdhcyBhIGJvb2xlYW4sIGl0IGRvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIHZhbHVlIGlzXG4gICAgICAgICAgLy8gdGhlIGZhY3QgdGhhdCB3ZSBoYXZlIGl0IGlzIHRoZSBzYW1lIGFzIHRoZSBleHBlY3RlZC5cbiAgICAgICAgICByZXR1cm4gZXhwZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXZlbiBpZiB0aGlzIHByb3BlcnR5IHVzZXMgYSBuYW1lc3BhY2Ugd2UgdXNlIGdldEF0dHJpYnV0ZVxuICAgICAgICAvLyBiZWNhdXNlIHdlIGFzc3VtZSBpdHMgbmFtZXNwYWNlZCBuYW1lIGlzIHRoZSBzYW1lIGFzIG91ciBjb25maWcuXG4gICAgICAgIC8vIFRvIHVzZSBnZXRBdHRyaWJ1dGVOUyB3ZSBuZWVkIHRoZSBsb2NhbCBuYW1lIHdoaWNoIHdlIGRvbid0IGhhdmVcbiAgICAgICAgLy8gaW4gb3VyIGNvbmZpZyBhdG0uXG4gICAgICAgIHN0cmluZ1ZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGUobmFtZSwgZXhwZWN0ZWQsIHByb3BlcnR5SW5mbywgZmFsc2UpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gbnVsbCA/IGV4cGVjdGVkIDogc3RyaW5nVmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZ1ZhbHVlID09PSAnJyArIGV4cGVjdGVkKSB7XG4gICAgICAgIHJldHVybiBleHBlY3RlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIGZvciBhIGF0dHJpYnV0ZSBvbiBhIG5vZGUuIE9ubHkgdXNlZCBpbiBERVYgZm9yIFNTUiB2YWxpZGF0aW9uLlxuICogVGhlIHRoaXJkIGFyZ3VtZW50IGlzIHVzZWQgYXMgYSBoaW50IG9mIHdoYXQgdGhlIGV4cGVjdGVkIHZhbHVlIGlzLiBTb21lXG4gKiBhdHRyaWJ1dGVzIGhhdmUgbXVsdGlwbGUgZXF1aXZhbGVudCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIG5hbWUsIGV4cGVjdGVkKSB7XG4gIHtcbiAgICBpZiAoIWlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFub2RlLmhhc0F0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgcmV0dXJuIGV4cGVjdGVkID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBudWxsO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBpZiAodmFsdWUgPT09ICcnICsgZXhwZWN0ZWQpIHtcbiAgICAgIHJldHVybiBleHBlY3RlZDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqL1xuZnVuY3Rpb24gc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSwgaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgdmFyIHByb3BlcnR5SW5mbyA9IGdldFByb3BlcnR5SW5mbyhuYW1lKTtcbiAgaWYgKHNob3VsZElnbm9yZUF0dHJpYnV0ZShuYW1lLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSkge1xuICAgIHZhbHVlID0gbnVsbDtcbiAgfVxuICAvLyBJZiB0aGUgcHJvcCBpc24ndCBpbiB0aGUgc3BlY2lhbCBsaXN0LCB0cmVhdCBpdCBhcyBhIHNpbXBsZSBhdHRyaWJ1dGUuXG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZyB8fCBwcm9wZXJ0eUluZm8gPT09IG51bGwpIHtcbiAgICBpZiAoaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSkge1xuICAgICAgdmFyIF9hdHRyaWJ1dGVOYW1lID0gbmFtZTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShfYXR0cmlidXRlTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShfYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbXVzdFVzZVByb3BlcnR5ID0gcHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eTtcblxuICBpZiAobXVzdFVzZVByb3BlcnR5KSB7XG4gICAgdmFyIHByb3BlcnR5TmFtZSA9IHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWU7XG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHZhciB0eXBlID0gcHJvcGVydHlJbmZvLnR5cGU7XG5cbiAgICAgIG5vZGVbcHJvcGVydHlOYW1lXSA9IHR5cGUgPT09IEJPT0xFQU4gPyBmYWxzZSA6ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250cmFyeSB0byBgc2V0QXR0cmlidXRlYCwgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHByb3Blcmx5XG4gICAgICAvLyBgdG9TdHJpbmdgZWQgYnkgSUU4LzkuXG4gICAgICBub2RlW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFRoZSByZXN0IGFyZSB0cmVhdGVkIGFzIGF0dHJpYnV0ZXMgd2l0aCBzcGVjaWFsIGNhc2VzLlxuICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lLFxuICAgICAgYXR0cmlidXRlTmFtZXNwYWNlID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWVzcGFjZTtcblxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX3R5cGUgPSBwcm9wZXJ0eUluZm8udHlwZTtcblxuICAgIHZhciBhdHRyaWJ1dGVWYWx1ZSA9IHZvaWQgMDtcbiAgICBpZiAoX3R5cGUgPT09IEJPT0xFQU4gfHwgX3R5cGUgPT09IE9WRVJMT0FERURfQk9PTEVBTiAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgYXR0cmlidXRlVmFsdWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYHNldEF0dHJpYnV0ZWAgd2l0aCBvYmplY3RzIGJlY29tZXMgb25seSBgW29iamVjdF1gIGluIElFOC85LFxuICAgICAgLy8gKCcnICsgdmFsdWUpIG1ha2VzIGl0IG91dHB1dCB0aGUgY29ycmVjdCB0b1N0cmluZygpLXZhbHVlLlxuICAgICAgYXR0cmlidXRlVmFsdWUgPSAnJyArIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlTmFtZXNwYWNlKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGF0dHJpYnV0ZU5hbWVzcGFjZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcyA9IHtcbiAgY2hlY2tQcm9wVHlwZXM6IG51bGxcbn07XG5cbntcbiAgdmFyIGhhc1JlYWRPbmx5VmFsdWUgPSB7XG4gICAgYnV0dG9uOiB0cnVlLFxuICAgIGNoZWNrYm94OiB0cnVlLFxuICAgIGltYWdlOiB0cnVlLFxuICAgIGhpZGRlbjogdHJ1ZSxcbiAgICByYWRpbzogdHJ1ZSxcbiAgICByZXNldDogdHJ1ZSxcbiAgICBzdWJtaXQ6IHRydWVcbiAgfTtcblxuICB2YXIgcHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgICB9LFxuICAgIGNoZWNrZWQ6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIGlmICghcHJvcHNbcHJvcE5hbWVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAgICogdGhpcyBvdXRzaWRlIG9mIHRoZSBSZWFjdERPTSBjb250cm9sbGVkIGZvcm0gY29tcG9uZW50cy5cbiAgICovXG4gIFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZnVuY3Rpb24gKHRhZ05hbWUsIHByb3BzLCBnZXRTdGFjaykge1xuICAgIGNoZWNrUHJvcFR5cGVzKHByb3BUeXBlcywgcHJvcHMsICdwcm9wJywgdGFnTmFtZSwgZ2V0U3RhY2spO1xuICB9O1xufVxuXG4vLyBUT0RPOiBkaXJlY3QgaW1wb3J0cyBsaWtlIHNvbWUtcGFja2FnZS9zcmMvKiBhcmUgYmFkLiBGaXggbWUuXG52YXIgZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lID0gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5nZXRDdXJyZW50RmliZXJPd25lck5hbWU7XG52YXIgZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bTtcblxudmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IGZhbHNlO1xudmFyIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSBmYWxzZTtcbnZhciBkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkID0gZmFsc2U7XG52YXIgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpc0NvbnRyb2xsZWQocHJvcHMpIHtcbiAgdmFyIHVzZXNDaGVja2VkID0gcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBwcm9wcy50eXBlID09PSAncmFkaW8nO1xuICByZXR1cm4gdXNlc0NoZWNrZWQgPyBwcm9wcy5jaGVja2VkICE9IG51bGwgOiBwcm9wcy52YWx1ZSAhPSBudWxsO1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPGlucHV0PiBob3N0IGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIHRoZXNlIG9wdGlvbmFsXG4gKiBwcm9wczogYGNoZWNrZWRgLCBgdmFsdWVgLCBgZGVmYXVsdENoZWNrZWRgLCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKlxuICogSWYgYGNoZWNrZWRgIG9yIGB2YWx1ZWAgYXJlIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnNcbiAqIHRoYXQgYWZmZWN0IHRoZSBjaGVja2VkIHN0YXRlIG9yIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIHRoZXkgYXJlIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBub3RcbiAqIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIHByb3BzIG11c3QgY2hhbmdlIGluIG9yZGVyIGZvclxuICogdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIGFzIHVuY2hlY2tlZCAob3IgYGRlZmF1bHRDaGVja2VkYClcbiAqIHdpdGggYW4gZW1wdHkgdmFsdWUgKG9yIGBkZWZhdWx0VmFsdWVgKS5cbiAqXG4gKiBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1odG1sNS0yMDEyMTAyNS90aGUtaW5wdXQtZWxlbWVudC5odG1sXG4gKi9cblxuZnVuY3Rpb24gZ2V0SG9zdFByb3BzKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkO1xuXG4gIHZhciBob3N0UHJvcHMgPSBfYXNzaWduKHt9LCBwcm9wcywge1xuICAgIGRlZmF1bHRDaGVja2VkOiB1bmRlZmluZWQsXG4gICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICBjaGVja2VkOiBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogbm9kZS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkXG4gIH0pO1xuXG4gIHJldHVybiBob3N0UHJvcHM7XG59XG5cbmZ1bmN0aW9uIGluaXRXcmFwcGVyU3RhdGUoZWxlbWVudCwgcHJvcHMpIHtcbiAge1xuICAgIFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCdpbnB1dCcsIHByb3BzLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKTtcblxuICAgIGlmIChwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdENoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIGNoZWNrZWQgYW5kIGRlZmF1bHRDaGVja2VkIHByb3BzLiAnICsgJ0lucHV0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSBjaGVja2VkIHByb3AsIG9yIHRoZSBkZWZhdWx0Q2hlY2tlZCBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKTtcbiAgICAgIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggdmFsdWUgYW5kIGRlZmF1bHRWYWx1ZSBwcm9wcy4gJyArICdJbnB1dCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKTtcbiAgICAgIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlID09IG51bGwgPyAnJyA6IHByb3BzLmRlZmF1bHRWYWx1ZTtcblxuICBub2RlLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgaW5pdGlhbENoZWNrZWQ6IHByb3BzLmNoZWNrZWQgIT0gbnVsbCA/IHByb3BzLmNoZWNrZWQgOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICBpbml0aWFsVmFsdWU6IGdldFNhZmVWYWx1ZShwcm9wcy52YWx1ZSAhPSBudWxsID8gcHJvcHMudmFsdWUgOiBkZWZhdWx0VmFsdWUpLFxuICAgIGNvbnRyb2xsZWQ6IGlzQ29udHJvbGxlZChwcm9wcylcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hlY2tlZChlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcbiAgaWYgKGNoZWNrZWQgIT0gbnVsbCkge1xuICAgIHNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgJ2NoZWNrZWQnLCBjaGVja2VkLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlV3JhcHBlcihlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHtcbiAgICB2YXIgX2NvbnRyb2xsZWQgPSBpc0NvbnRyb2xsZWQocHJvcHMpO1xuXG4gICAgaWYgKCFub2RlLl93cmFwcGVyU3RhdGUuY29udHJvbGxlZCAmJiBfY29udHJvbGxlZCAmJiAhZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ0EgY29tcG9uZW50IGlzIGNoYW5naW5nIGFuIHVuY29udHJvbGxlZCBpbnB1dCBvZiB0eXBlICVzIHRvIGJlIGNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJXMnLCBwcm9wcy50eXBlLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCkpO1xuICAgICAgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChub2RlLl93cmFwcGVyU3RhdGUuY29udHJvbGxlZCAmJiAhX2NvbnRyb2xsZWQgJiYgIWRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyBhIGNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSB1bmNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJXMnLCBwcm9wcy50eXBlLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCkpO1xuICAgICAgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQ2hlY2tlZChlbGVtZW50LCBwcm9wcyk7XG5cbiAgdmFyIHZhbHVlID0gZ2V0U2FmZVZhbHVlKHByb3BzLnZhbHVlKTtcblxuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIGlmIChwcm9wcy50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKHZhbHVlID09PSAwICYmIG5vZGUudmFsdWUgPT09ICcnIHx8XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5vZGUudmFsdWUgIT0gdmFsdWUpIHtcbiAgICAgICAgbm9kZS52YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnZhbHVlICE9PSAnJyArIHZhbHVlKSB7XG4gICAgICBub2RlLnZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICBzZXREZWZhdWx0VmFsdWUobm9kZSwgcHJvcHMudHlwZSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCdkZWZhdWx0VmFsdWUnKSkge1xuICAgIHNldERlZmF1bHRWYWx1ZShub2RlLCBwcm9wcy50eXBlLCBnZXRTYWZlVmFsdWUocHJvcHMuZGVmYXVsdFZhbHVlKSk7XG4gIH1cblxuICBpZiAocHJvcHMuY2hlY2tlZCA9PSBudWxsICYmIHByb3BzLmRlZmF1bHRDaGVja2VkICE9IG51bGwpIHtcbiAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gISFwcm9wcy5kZWZhdWx0Q2hlY2tlZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb3N0TW91bnRXcmFwcGVyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcblxuICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHwgcHJvcHMuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHRWYWx1ZScpKSB7XG4gICAgLy8gRG8gbm90IGFzc2lnbiB2YWx1ZSBpZiBpdCBpcyBhbHJlYWR5IHNldC4gVGhpcyBwcmV2ZW50cyB1c2VyIHRleHQgaW5wdXRcbiAgICAvLyBmcm9tIGJlaW5nIGxvc3QgZHVyaW5nIFNTUiBoeWRyYXRpb24uXG4gICAgaWYgKG5vZGUudmFsdWUgPT09ICcnKSB7XG4gICAgICBub2RlLnZhbHVlID0gJycgKyBub2RlLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO1xuICAgIH1cblxuICAgIC8vIHZhbHVlIG11c3QgYmUgYXNzaWduZWQgYmVmb3JlIGRlZmF1bHRWYWx1ZS4gVGhpcyBmaXhlcyBhbiBpc3N1ZSB3aGVyZSB0aGVcbiAgICAvLyB2aXN1YWxseSBkaXNwbGF5ZWQgdmFsdWUgb2YgZGF0ZSBpbnB1dHMgZGlzYXBwZWFycyBvbiBtb2JpbGUgU2FmYXJpIGFuZCBDaHJvbWU6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjMzXG4gICAgbm9kZS5kZWZhdWx0VmFsdWUgPSAnJyArIG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7XG4gIH1cblxuICAvLyBOb3JtYWxseSwgd2UnZCBqdXN0IGRvIGBub2RlLmNoZWNrZWQgPSBub2RlLmNoZWNrZWRgIHVwb24gaW5pdGlhbCBtb3VudCwgbGVzcyB0aGlzIGJ1Z1xuICAvLyB0aGlzIGlzIG5lZWRlZCB0byB3b3JrIGFyb3VuZCBhIGNocm9tZSBidWcgd2hlcmUgc2V0dGluZyBkZWZhdWx0Q2hlY2tlZFxuICAvLyB3aWxsIHNvbWV0aW1lcyBpbmZsdWVuY2UgdGhlIHZhbHVlIG9mIGNoZWNrZWQgKGV2ZW4gYWZ0ZXIgZGV0YWNobWVudCkuXG4gIC8vIFJlZmVyZW5jZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjA4NDE2XG4gIC8vIFdlIG5lZWQgdG8gdGVtcG9yYXJpbHkgdW5zZXQgbmFtZSB0byBhdm9pZCBkaXNydXB0aW5nIHJhZGlvIGJ1dHRvbiBncm91cHMuXG4gIHZhciBuYW1lID0gbm9kZS5uYW1lO1xuICBpZiAobmFtZSAhPT0gJycpIHtcbiAgICBub2RlLm5hbWUgPSAnJztcbiAgfVxuICBub2RlLmRlZmF1bHRDaGVja2VkID0gIW5vZGUuZGVmYXVsdENoZWNrZWQ7XG4gIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhbm9kZS5kZWZhdWx0Q2hlY2tlZDtcbiAgaWYgKG5hbWUgIT09ICcnKSB7XG4gICAgbm9kZS5uYW1lID0gbmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN0b3JlQ29udHJvbGxlZFN0YXRlKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdXBkYXRlV3JhcHBlcihub2RlLCBwcm9wcyk7XG4gIHVwZGF0ZU5hbWVkQ291c2lucyhub2RlLCBwcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU5hbWVkQ291c2lucyhyb290Tm9kZSwgcHJvcHMpIHtcbiAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICBpZiAocHJvcHMudHlwZSA9PT0gJ3JhZGlvJyAmJiBuYW1lICE9IG51bGwpIHtcbiAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG5cbiAgICB3aGlsZSAocXVlcnlSb290LnBhcmVudE5vZGUpIHtcbiAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIC8vIElmIGByb290Tm9kZS5mb3JtYCB3YXMgbm9uLW51bGwsIHRoZW4gd2UgY291bGQgdHJ5IGBmb3JtLmVsZW1lbnRzYCxcbiAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgIC8vIGBmb3JtLmdldEVsZW1lbnRzQnlOYW1lYCwgYnV0IHRoYXQgd2lsbCBvbmx5IHJldHVybiBkaXJlY3QgY2hpbGRyZW5cbiAgICAvLyBhbmQgd29uJ3QgaW5jbHVkZSBpbnB1dHMgdGhhdCB1c2UgdGhlIEhUTUw1IGBmb3JtPWAgYXR0cmlidXRlLiBTaW5jZVxuICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0uIEl0IG1pZ2h0IG5vdCBldmVuIGJlIGluIHRoZVxuICAgIC8vIGRvY3VtZW50LiBMZXQncyBqdXN0IHVzZSB0aGUgbG9jYWwgYHF1ZXJ5U2VsZWN0b3JBbGxgIHRvIGVuc3VyZSB3ZSBkb24ndFxuICAgIC8vIG1pc3MgYW55dGhpbmcuXG4gICAgdmFyIGdyb3VwID0gcXVlcnlSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9JyArIEpTT04uc3RyaW5naWZ5KCcnICsgbmFtZSkgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChvdGhlck5vZGUgPT09IHJvb3ROb2RlIHx8IG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIHJhZGlvIGJ1dHRvbnMgcmVuZGVyZWQgYnkgZGlmZmVyZW50IGNvcGllcyBvZiBSZWFjdFxuICAgICAgLy8gYW5kIHRoZSBzYW1lIG5hbWUgYXJlIHJlbmRlcmVkIGludG8gdGhlIHNhbWUgZm9ybSAoc2FtZSBhcyAjMTkzOSkuXG4gICAgICAvLyBUaGF0J3MgcHJvYmFibHkgb2theTsgd2UgZG9uJ3Qgc3VwcG9ydCBpdCBqdXN0IGFzIHdlIGRvbid0IHN1cHBvcnRcbiAgICAgIC8vIG1peGluZyBSZWFjdCByYWRpbyBidXR0b25zIHdpdGggbm9uLVJlYWN0IG9uZXMuXG4gICAgICB2YXIgb3RoZXJQcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUkMShvdGhlck5vZGUpO1xuICAgICAgIW90aGVyUHJvcHMgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTUlucHV0OiBNaXhpbmcgUmVhY3QgYW5kIG5vbi1SZWFjdCByYWRpbyBpbnB1dHMgd2l0aCB0aGUgc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nKSA6IHZvaWQgMDtcblxuICAgICAgLy8gV2UgbmVlZCB1cGRhdGUgdGhlIHRyYWNrZWQgdmFsdWUgb24gdGhlIG5hbWVkIGNvdXNpbiBzaW5jZSB0aGUgdmFsdWVcbiAgICAgIC8vIHdhcyBjaGFuZ2VkIGJ1dCB0aGUgaW5wdXQgc2F3IG5vIGV2ZW50IG9yIHZhbHVlIHNldFxuICAgICAgdXBkYXRlVmFsdWVJZkNoYW5nZWQob3RoZXJOb2RlKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbnRyb2xsZWQgcmFkaW8gYnV0dG9uIGdyb3VwLCBmb3JjaW5nIHRoZSBpbnB1dCB0aGF0XG4gICAgICAvLyB3YXMgcHJldmlvdXNseSBjaGVja2VkIHRvIHVwZGF0ZSB3aWxsIGNhdXNlIGl0IHRvIGJlIGNvbWUgcmUtY2hlY2tlZFxuICAgICAgLy8gYXMgYXBwcm9wcmlhdGUuXG4gICAgICB1cGRhdGVXcmFwcGVyKG90aGVyTm9kZSwgb3RoZXJQcm9wcyk7XG4gICAgfVxuICB9XG59XG5cbi8vIEluIENocm9tZSwgYXNzaWduaW5nIGRlZmF1bHRWYWx1ZSB0byBjZXJ0YWluIGlucHV0IHR5cGVzIHRyaWdnZXJzIGlucHV0IHZhbGlkYXRpb24uXG4vLyBGb3IgbnVtYmVyIGlucHV0cywgdGhlIGRpc3BsYXkgdmFsdWUgbG9zZXMgdHJhaWxpbmcgZGVjaW1hbCBwb2ludHMuIEZvciBlbWFpbCBpbnB1dHMsXG4vLyBDaHJvbWUgcmFpc2VzIFwiVGhlIHNwZWNpZmllZCB2YWx1ZSA8eD4gaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzc1wiLlxuLy9cbi8vIEhlcmUgd2UgY2hlY2sgdG8gc2VlIGlmIHRoZSBkZWZhdWx0VmFsdWUgaGFzIGFjdHVhbGx5IGNoYW5nZWQsIGF2b2lkaW5nIHRoZXNlIHByb2JsZW1zXG4vLyB3aGVuIHRoZSB1c2VyIGlzIGlucHV0dGluZyB0ZXh0XG4vL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjUzXG5mdW5jdGlvbiBzZXREZWZhdWx0VmFsdWUobm9kZSwgdHlwZSwgdmFsdWUpIHtcbiAgaWYgKFxuICAvLyBGb2N1c2VkIG51bWJlciBpbnB1dHMgc3luY2hyb25pemUgb24gYmx1ci4gU2VlIENoYW5nZUV2ZW50UGx1Z2luLmpzXG4gIHR5cGUgIT09ICdudW1iZXInIHx8IG5vZGUub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBub2RlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gJycgKyBub2RlLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO1xuICAgIH0gZWxzZSBpZiAobm9kZS5kZWZhdWx0VmFsdWUgIT09ICcnICsgdmFsdWUpIHtcbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2FmZVZhbHVlKHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gZnVuY3Rpb24sIHN5bWJvbCBhcmUgYXNzaWduZWQgYXMgZW1wdHkgc3RyaW5nc1xuICAgICAgcmV0dXJuICcnO1xuICB9XG59XG5cbnZhciBldmVudFR5cGVzJDEgPSB7XG4gIGNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25DaGFuZ2UnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNoYW5nZUNhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDaGFuZ2UnLCAndG9wQ2xpY2snLCAndG9wRm9jdXMnLCAndG9wSW5wdXQnLCAndG9wS2V5RG93bicsICd0b3BLZXlVcCcsICd0b3BTZWxlY3Rpb25DaGFuZ2UnXVxuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoaW5zdCwgbmF0aXZlRXZlbnQsIHRhcmdldCkge1xuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudCQxLmdldFBvb2xlZChldmVudFR5cGVzJDEuY2hhbmdlLCBpbnN0LCBuYXRpdmVFdmVudCwgdGFyZ2V0KTtcbiAgZXZlbnQudHlwZSA9ICdjaGFuZ2UnO1xuICAvLyBGbGFnIHRoaXMgZXZlbnQgbG9vcCBhcyBuZWVkaW5nIHN0YXRlIHJlc3RvcmUuXG4gIGVucXVldWVTdGF0ZVJlc3RvcmUodGFyZ2V0KTtcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cbi8qKlxuICogRm9yIElFIHNoaW1zXG4gKi9cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ3NlbGVjdCcgfHwgbm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAnZmlsZSc7XG59XG5cbmZ1bmN0aW9uIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGV2ZW50ID0gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGFjdGl2ZUVsZW1lbnRJbnN0LCBuYXRpdmVFdmVudCwgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpKTtcblxuICAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuICAvLyBvdGhlciBldmVudHMgYW5kIGhhdmUgaXQgZ28gdGhyb3VnaCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuIFNpbmNlIGl0XG4gIC8vIGRvZXNuJ3QsIHdlIG1hbnVhbGx5IGxpc3RlbiBmb3IgdGhlIGV2ZW50cyBhbmQgc28gd2UgaGF2ZSB0byBlbnF1ZXVlIGFuZFxuICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cbiAgLy9cbiAgLy8gQmF0Y2hpbmcgaXMgbmVjZXNzYXJ5IGhlcmUgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIGV2ZW50IGhhbmRsZXJzIHJ1blxuICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuICAvLyBlbGVtZW50cyBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBpbnB1dCkuIFdpdGhvdXQgdGhpcywgY29udHJvbGxlZFxuICAvLyBjb21wb25lbnRzIGRvbid0IHdvcmsgcHJvcGVybHkgaW4gY29uanVuY3Rpb24gd2l0aCBldmVudCBidWJibGluZyBiZWNhdXNlXG4gIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG4gIC8vIGhhbmRsZXJzIGNhbiBydW4uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcwOC5cbiAgYmF0Y2hlZFVwZGF0ZXMocnVuRXZlbnRJbkJhdGNoLCBldmVudCk7XG59XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50SW5CYXRjaChldmVudCkge1xuICBydW5FdmVudHNJbkJhdGNoKGV2ZW50LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KSB7XG4gIHZhciB0YXJnZXROb2RlID0gZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKHRhcmdldEluc3QpO1xuICBpZiAodXBkYXRlVmFsdWVJZkNoYW5nZWQodGFyZ2V0Tm9kZSkpIHtcbiAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BDaGFuZ2UnKSB7XG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50cy5cbiAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KTtcbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9OSkgU3RhcnRzIHRyYWNraW5nIHByb3BlcnR5Y2hhbmdlIGV2ZW50cyBvbiB0aGUgcGFzc2VkLWluIGVsZW1lbnRcbiAqIGFuZCBvdmVycmlkZSB0aGUgdmFsdWUgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gZGlzdGluZ3Vpc2ggdXNlciBldmVudHMgZnJvbVxuICogdmFsdWUgY2hhbmdlcyBpbiBKUy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG59XG5cbi8qKlxuICogKEZvciBJRSA8PTkpIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xufVxuXG4vKipcbiAqIChGb3IgSUUgPD05KSBIYW5kbGVzIGEgcHJvcGVydHljaGFuZ2UgZXZlbnQsIHNlbmRpbmcgYSBgY2hhbmdlYCBldmVudCBpZlxuICogdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3ZhbHVlJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0KSkge1xuICAgIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbCh0b3BMZXZlbFR5cGUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wRm9jdXMnKSB7XG4gICAgLy8gSW4gSUU5LCBwcm9wZXJ0eWNoYW5nZSBmaXJlcyBmb3IgbW9zdCBpbnB1dCBldmVudHMgYnV0IGlzIGJ1Z2d5IGFuZFxuICAgIC8vIGRvZXNuJ3QgZmlyZSB3aGVuIHRleHQgaXMgZGVsZXRlZCwgYnV0IGNvbnZlbmllbnRseSwgc2VsZWN0aW9uY2hhbmdlXG4gICAgLy8gYXBwZWFycyB0byBmaXJlIGluIGFsbCBvZiB0aGUgcmVtYWluaW5nIGNhc2VzIHNvIHdlIGNhdGNoIHRob3NlIGFuZFxuICAgIC8vIGZvcndhcmQgdGhlIGV2ZW50IGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZFxuICAgIC8vIEluIGVpdGhlciBjYXNlLCB3ZSBkb24ndCB3YW50IHRvIGNhbGwgdGhlIGV2ZW50IGhhbmRsZXIgaWYgdGhlIHZhbHVlXG4gICAgLy8gaXMgY2hhbmdlZCBmcm9tIEpTIHNvIHdlIHJlZGVmaW5lIGEgc2V0dGVyIGZvciBgLnZhbHVlYCB0aGF0IHVwZGF0ZXNcbiAgICAvLyBvdXIgYWN0aXZlRWxlbWVudFZhbHVlIHZhcmlhYmxlLCBhbGxvd2luZyB1cyB0byBpZ25vcmUgdGhvc2UgY2hhbmdlc1xuICAgIC8vXG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldEluc3QpO1xuICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcEJsdXInKSB7XG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wU2VsZWN0aW9uQ2hhbmdlJyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BLZXlVcCcgfHwgdG9wTGV2ZWxUeXBlID09PSAndG9wS2V5RG93bicpIHtcbiAgICAvLyBPbiB0aGUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50LCB0aGUgdGFyZ2V0IGlzIGp1c3QgZG9jdW1lbnQgd2hpY2ggaXNuJ3RcbiAgICAvLyBoZWxwZnVsIGZvciB1cyBzbyBqdXN0IGNoZWNrIGFjdGl2ZUVsZW1lbnQgaW5zdGVhZC5cbiAgICAvL1xuICAgIC8vIDk5JSBvZiB0aGUgdGltZSwga2V5ZG93biBhbmQga2V5dXAgYXJlbid0IG5lY2Vzc2FyeS4gSUU4IGZhaWxzIHRvIGZpcmVcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBvbiB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYWZ0ZXIgc2V0dGluZyBgdmFsdWVgIGZyb20gYVxuICAgIC8vIHNjcmlwdCBhbmQgZmlyZXMgb25seSBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAuIENhdGNoaW5nIGtleXVwIHVzdWFsbHlcbiAgICAvLyBnZXRzIGl0IGFuZCBjYXRjaGluZyBrZXlkb3duIGxldHMgdXMgZmlyZSBhbiBldmVudCBmb3IgdGhlIGZpcnN0XG4gICAgLy8ga2V5c3Ryb2tlIGlmIHVzZXIgZG9lcyBhIGtleSByZXBlYXQgKGl0J2xsIGJlIGEgbGl0dGxlIGRlbGF5ZWQ6IHJpZ2h0XG4gICAgLy8gYmVmb3JlIHRoZSBzZWNvbmQga2V5c3Ryb2tlKS4gT3RoZXIgaW5wdXQgbWV0aG9kcyAoZS5nLiwgcGFzdGUpIHNlZW0gdG9cbiAgICAvLyBmaXJlIHNlbGVjdGlvbmNoYW5nZSBub3JtYWxseS5cbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0KTtcbiAgfVxufVxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgY2xpY2tgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNsaWNrRXZlbnQoZWxlbSkge1xuICAvLyBVc2UgdGhlIGBjbGlja2AgZXZlbnQgdG8gZGV0ZWN0IGNoYW5nZXMgdG8gY2hlY2tib3ggYW5kIHJhZGlvIGlucHV0cy5cbiAgLy8gVGhpcyBhcHByb2FjaCB3b3JrcyBhY3Jvc3MgYWxsIGJyb3dzZXJzLCB3aGVyZWFzIGBjaGFuZ2VgIGRvZXMgbm90IGZpcmVcbiAgLy8gdW50aWwgYGJsdXJgIGluIElFOC5cbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKGVsZW0udHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlbGVtLnR5cGUgPT09ICdyYWRpbycpO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcENsaWNrJykge1xuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcElucHV0JyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BDaGFuZ2UnKSB7XG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVDb250cm9sbGVkSW5wdXRCbHVyKGluc3QsIG5vZGUpIHtcbiAgLy8gVE9ETzogSW4gSUUsIGluc3QgaXMgb2NjYXNpb25hbGx5IG51bGwuIFdoeT9cbiAgaWYgKGluc3QgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpYmVyIGFuZCBSZWFjdERPTSBrZWVwIHdyYXBwZXIgc3RhdGUgaW4gc2VwYXJhdGUgcGxhY2VzXG4gIHZhciBzdGF0ZSA9IGluc3QuX3dyYXBwZXJTdGF0ZSB8fCBub2RlLl93cmFwcGVyU3RhdGU7XG5cbiAgaWYgKCFzdGF0ZSB8fCAhc3RhdGUuY29udHJvbGxlZCB8fCBub2RlLnR5cGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgY29udHJvbGxlZCwgYXNzaWduIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgdG8gdGhlIGN1cnJlbnQgdmFsdWUgb24gYmx1clxuICBzZXREZWZhdWx0VmFsdWUobm9kZSwgJ251bWJlcicsIG5vZGUudmFsdWUpO1xufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uQ2hhbmdlYCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgY2hhbmdlIGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuICogY2hhbmdlIHRoZSBlbGVtZW50J3MgdmFsdWUgd2l0aG91dCBzZWVpbmcgYSBmbGlja2VyLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIHNlbGVjdFxuICovXG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMkMSxcblxuICBfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldE5vZGUgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKHRhcmdldEluc3QpIDogd2luZG93O1xuXG4gICAgdmFyIGdldFRhcmdldEluc3RGdW5jID0gdm9pZCAwLFxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSB2b2lkIDA7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRhcmdldE5vZGUpKSB7XG4gICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudDtcbiAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZFVzZUNsaWNrRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGdldFRhcmdldEluc3RGdW5jKSB7XG4gICAgICB2YXIgaW5zdCA9IGdldFRhcmdldEluc3RGdW5jKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCk7XG4gICAgICBpZiAoaW5zdCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoaW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyh0b3BMZXZlbFR5cGUsIHRhcmdldE5vZGUsIHRhcmdldEluc3QpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gYmx1cnJpbmcsIHNldCB0aGUgdmFsdWUgYXR0cmlidXRlIGZvciBudW1iZXIgaW5wdXRzXG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcEJsdXInKSB7XG4gICAgICBoYW5kbGVDb250cm9sbGVkSW5wdXRCbHVyKHRhcmdldEluc3QsIHRhcmdldE5vZGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBNb2R1bGUgdGhhdCBpcyBpbmplY3RhYmxlIGludG8gYEV2ZW50UGx1Z2luSHViYCwgdGhhdCBzcGVjaWZpZXMgYVxuICogZGV0ZXJtaW5pc3RpYyBvcmRlcmluZyBvZiBgRXZlbnRQbHVnaW5gcy4gQSBjb252ZW5pZW50IHdheSB0byByZWFzb24gYWJvdXRcbiAqIHBsdWdpbnMsIHdpdGhvdXQgaGF2aW5nIHRvIHBhY2thZ2UgZXZlcnkgb25lIG9mIHRoZW0uIFRoaXMgaXMgYmV0dGVyIHRoYW5cbiAqIGhhdmluZyBwbHVnaW5zIGJlIG9yZGVyZWQgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IGFyZSBpbmplY3RlZCBiZWNhdXNlXG4gKiB0aGF0IG9yZGVyaW5nIHdvdWxkIGJlIGluZmx1ZW5jZWQgYnkgdGhlIHBhY2thZ2luZyBvcmRlci5cbiAqIGBSZXNwb25kZXJFdmVudFBsdWdpbmAgbXVzdCBvY2N1ciBiZWZvcmUgYFNpbXBsZUV2ZW50UGx1Z2luYCBzbyB0aGF0XG4gKiBwcmV2ZW50aW5nIGRlZmF1bHQgb24gZXZlbnRzIGlzIGNvbnZlbmllbnQgaW4gYFNpbXBsZUV2ZW50UGx1Z2luYCBoYW5kbGVycy5cbiAqL1xudmFyIERPTUV2ZW50UGx1Z2luT3JkZXIgPSBbJ1Jlc3BvbmRlckV2ZW50UGx1Z2luJywgJ1NpbXBsZUV2ZW50UGx1Z2luJywgJ1RhcEV2ZW50UGx1Z2luJywgJ0VudGVyTGVhdmVFdmVudFBsdWdpbicsICdDaGFuZ2VFdmVudFBsdWdpbicsICdTZWxlY3RFdmVudFBsdWdpbicsICdCZWZvcmVJbnB1dEV2ZW50UGx1Z2luJ107XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gU3ludGhldGljRXZlbnQkMS5leHRlbmQoe1xuICB2aWV3OiBudWxsLFxuICBkZXRhaWw6IG51bGxcbn0pO1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNrZXlzLU1vZGlmaWVyc1xuICovXG5cbnZhciBtb2RpZmllcktleVRvUHJvcCA9IHtcbiAgQWx0OiAnYWx0S2V5JyxcbiAgQ29udHJvbDogJ2N0cmxLZXknLFxuICBNZXRhOiAnbWV0YUtleScsXG4gIFNoaWZ0OiAnc2hpZnRLZXknXG59O1xuXG4vLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuLy8gbW9kaWZpZXIga2V5cyBleHBvc2VkIGJ5IHRoZSBldmVudCBpdHNlbGYsIGRvZXMgbm90IHN1cHBvcnQgTG9jay1rZXlzLlxuLy8gQ3VycmVudGx5LCBhbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IENocm9tZSBzZWVtcyB0byBzdXBwb3J0IExvY2sta2V5cy5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG4vKipcbiAqIEBpbnRlcmZhY2UgTW91c2VFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gU3ludGhldGljVUlFdmVudC5leHRlbmQoe1xuICBzY3JlZW5YOiBudWxsLFxuICBzY3JlZW5ZOiBudWxsLFxuICBjbGllbnRYOiBudWxsLFxuICBjbGllbnRZOiBudWxsLFxuICBwYWdlWDogbnVsbCxcbiAgcGFnZVk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBudWxsLFxuICBidXR0b25zOiBudWxsLFxuICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnQgPyBldmVudC50b0VsZW1lbnQgOiBldmVudC5mcm9tRWxlbWVudCk7XG4gIH1cbn0pO1xuXG52YXIgZXZlbnRUeXBlcyQyID0ge1xuICBtb3VzZUVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW91c2VFbnRlcicsXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcE1vdXNlT3V0JywgJ3RvcE1vdXNlT3ZlciddXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Nb3VzZUxlYXZlJyxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wTW91c2VPdXQnLCAndG9wTW91c2VPdmVyJ11cbiAgfVxufTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyQyLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wTW91c2VPdmVyJyAmJiAobmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodG9wTGV2ZWxUeXBlICE9PSAndG9wTW91c2VPdXQnICYmIHRvcExldmVsVHlwZSAhPT0gJ3RvcE1vdXNlT3ZlcicpIHtcbiAgICAgIC8vIE11c3Qgbm90IGJlIGEgbW91c2UgaW4gb3IgbW91c2Ugb3V0IC0gaWdub3JpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgd2luID0gdm9pZCAwO1xuICAgIGlmIChuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAvLyBgbmF0aXZlRXZlbnRUYXJnZXRgIGlzIHByb2JhYmx5IGEgd2luZG93IG9iamVjdC5cbiAgICAgIHdpbiA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgICB2YXIgZG9jID0gbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW4gPSB3aW5kb3c7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGZyb20gPSB2b2lkIDA7XG4gICAgdmFyIHRvID0gdm9pZCAwO1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BNb3VzZU91dCcpIHtcbiAgICAgIGZyb20gPSB0YXJnZXRJbnN0O1xuICAgICAgdmFyIHJlbGF0ZWQgPSBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudDtcbiAgICAgIHRvID0gcmVsYXRlZCA/IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHJlbGF0ZWQpIDogbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTW92aW5nIHRvIGEgbm9kZSBmcm9tIG91dHNpZGUgdGhlIHdpbmRvdy5cbiAgICAgIGZyb20gPSBudWxsO1xuICAgICAgdG8gPSB0YXJnZXRJbnN0O1xuICAgIH1cblxuICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgLy8gTm90aGluZyBwZXJ0YWlucyB0byBvdXIgbWFuYWdlZCBjb21wb25lbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyb21Ob2RlID0gZnJvbSA9PSBudWxsID8gd2luIDogZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKGZyb20pO1xuICAgIHZhciB0b05vZGUgPSB0byA9PSBudWxsID8gd2luIDogZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKHRvKTtcblxuICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMkMi5tb3VzZUxlYXZlLCBmcm9tLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGxlYXZlLnR5cGUgPSAnbW91c2VsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbU5vZGU7XG4gICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvTm9kZTtcblxuICAgIHZhciBlbnRlciA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMkMi5tb3VzZUVudGVyLCB0bywgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBlbnRlci50eXBlID0gJ21vdXNlZW50ZXInO1xuICAgIGVudGVyLnRhcmdldCA9IHRvTm9kZTtcbiAgICBlbnRlci5yZWxhdGVkVGFyZ2V0ID0gZnJvbU5vZGU7XG5cbiAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tLCB0byk7XG5cbiAgICByZXR1cm4gW2xlYXZlLCBlbnRlcl07XG4gIH1cbn07XG5cbi8qKlxuICogYFJlYWN0SW5zdGFuY2VNYXBgIG1haW50YWlucyBhIG1hcHBpbmcgZnJvbSBhIHB1YmxpYyBmYWNpbmcgc3RhdGVmdWxcbiAqIGluc3RhbmNlIChrZXkpIGFuZCB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gKHZhbHVlKS4gVGhpcyBhbGxvd3MgcHVibGljXG4gKiBtZXRob2RzIHRvIGFjY2VwdCB0aGUgdXNlciBmYWNpbmcgaW5zdGFuY2UgYXMgYW4gYXJndW1lbnQgYW5kIG1hcCB0aGVtIGJhY2tcbiAqIHRvIGludGVybmFsIG1ldGhvZHMuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgbW9kdWxlIGlzIGN1cnJlbnRseSBzaGFyZWQgYW5kIGFzc3VtZWQgdG8gYmUgc3RhdGVsZXNzLlxuICogSWYgdGhpcyBiZWNvbWVzIGFuIGFjdHVhbCBNYXAsIHRoYXQgd2lsbCBicmVhay5cbiAqL1xuXG4vKipcbiAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gKiB0cmFuc2Zvcm0gdGhlc2UgdG8gc3RyaW5ncyBmb3IgSUUgc3VwcG9ydC4gV2hlbiB0aGlzIHRyYW5zZm9ybSBpcyBmdWxseVxuICogc3VwcG9ydGVkIHdlIGNhbiByZW5hbWUgaXQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXQoa2V5KSB7XG4gIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxGaWJlcjtcbn1cblxuZnVuY3Rpb24gaGFzKGtleSkge1xuICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsRmliZXIgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAga2V5Ll9yZWFjdEludGVybmFsRmliZXIgPSB2YWx1ZTtcbn1cblxuLy8gRG9uJ3QgY2hhbmdlIHRoZXNlIHR3byB2YWx1ZXMuIFRoZXkncmUgdXNlZCBieSBSZWFjdCBEZXYgVG9vbHMuXG52YXIgTm9FZmZlY3QgPSAvKiAgICAgICAgICAgICAgKi8wO1xudmFyIFBlcmZvcm1lZFdvcmsgPSAvKiAgICAgICAgICovMTtcblxuLy8gWW91IGNhbiBjaGFuZ2UgdGhlIHJlc3QgKGFuZCBhZGQgbW9yZSkuXG52YXIgUGxhY2VtZW50ID0gLyogICAgICAgICAgICAgKi8yO1xudmFyIFVwZGF0ZSA9IC8qICAgICAgICAgICAgICAgICovNDtcbnZhciBQbGFjZW1lbnRBbmRVcGRhdGUgPSAvKiAgICAqLzY7XG52YXIgRGVsZXRpb24gPSAvKiAgICAgICAgICAgICAgKi84O1xudmFyIENvbnRlbnRSZXNldCA9IC8qICAgICAgICAgICovMTY7XG52YXIgQ2FsbGJhY2sgPSAvKiAgICAgICAgICAgICAgKi8zMjtcbnZhciBEaWRDYXB0dXJlID0gLyogICAgICAgICAgICAqLzY0O1xudmFyIFJlZiA9IC8qICAgICAgICAgICAgICAgICAgICovMTI4O1xudmFyIEVyckxvZyA9IC8qICAgICAgICAgICAgICAgICovMjU2O1xudmFyIFNuYXBzaG90ID0gLyogICAgICAgICAgICAgICovMjA0ODtcblxuLy8gVW5pb24gb2YgYWxsIGhvc3QgZWZmZWN0c1xudmFyIEhvc3RFZmZlY3RNYXNrID0gLyogICAgICAgICovMjU1OTtcblxudmFyIEluY29tcGxldGUgPSAvKiAgICAgICAgICAgICovNTEyO1xudmFyIFNob3VsZENhcHR1cmUgPSAvKiAgICAgICAgICovMTAyNDtcblxudmFyIE1PVU5USU5HID0gMTtcbnZhciBNT1VOVEVEID0gMjtcbnZhciBVTk1PVU5URUQgPSAzO1xuXG5mdW5jdGlvbiBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpIHtcbiAgdmFyIG5vZGUgPSBmaWJlcjtcbiAgaWYgKCFmaWJlci5hbHRlcm5hdGUpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBhbHRlcm5hdGUsIHRoaXMgbWlnaHQgYmUgYSBuZXcgdHJlZSB0aGF0IGlzbid0IGluc2VydGVkXG4gICAgLy8geWV0LiBJZiBpdCBpcywgdGhlbiBpdCB3aWxsIGhhdmUgYSBwZW5kaW5nIGluc2VydGlvbiBlZmZlY3Qgb24gaXQuXG4gICAgaWYgKChub2RlLmVmZmVjdFRhZyAmIFBsYWNlbWVudCkgIT09IE5vRWZmZWN0KSB7XG4gICAgICByZXR1cm4gTU9VTlRJTkc7XG4gICAgfVxuICAgIHdoaWxlIChub2RlWydyZXR1cm4nXSkge1xuICAgICAgbm9kZSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgaWYgKChub2RlLmVmZmVjdFRhZyAmIFBsYWNlbWVudCkgIT09IE5vRWZmZWN0KSB7XG4gICAgICAgIHJldHVybiBNT1VOVElORztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKG5vZGVbJ3JldHVybiddKSB7XG4gICAgICBub2RlID0gbm9kZVsncmV0dXJuJ107XG4gICAgfVxuICB9XG4gIGlmIChub2RlLnRhZyA9PT0gSG9zdFJvb3QpIHtcbiAgICAvLyBUT0RPOiBDaGVjayBpZiB0aGlzIHdhcyBhIG5lc3RlZCBIb3N0Um9vdCB3aGVuIHVzZWQgd2l0aFxuICAgIC8vIHJlbmRlckNvbnRhaW5lckludG9TdWJ0cmVlLlxuICAgIHJldHVybiBNT1VOVEVEO1xuICB9XG4gIC8vIElmIHdlIGRpZG4ndCBoaXQgdGhlIHJvb3QsIHRoYXQgbWVhbnMgdGhhdCB3ZSdyZSBpbiBhbiBkaXNjb25uZWN0ZWQgdHJlZVxuICAvLyB0aGF0IGhhcyBiZWVuIHVubW91bnRlZC5cbiAgcmV0dXJuIFVOTU9VTlRFRDtcbn1cblxuZnVuY3Rpb24gaXNGaWJlck1vdW50ZWQoZmliZXIpIHtcbiAgcmV0dXJuIGlzRmliZXJNb3VudGVkSW1wbChmaWJlcikgPT09IE1PVU5URUQ7XG59XG5cbmZ1bmN0aW9uIGlzTW91bnRlZChjb21wb25lbnQpIHtcbiAge1xuICAgIHZhciBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgaWYgKG93bmVyICE9PSBudWxsICYmIG93bmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgIHZhciBvd25lckZpYmVyID0gb3duZXI7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBvd25lckZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIHdhcm5pbmcoaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyLCAnJXMgaXMgYWNjZXNzaW5nIGlzTW91bnRlZCBpbnNpZGUgaXRzIHJlbmRlcigpIGZ1bmN0aW9uLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgZ2V0Q29tcG9uZW50TmFtZShvd25lckZpYmVyKSB8fCAnQSBjb21wb25lbnQnKTtcbiAgICAgIGluc3RhbmNlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpYmVyID0gZ2V0KGNvbXBvbmVudCk7XG4gIGlmICghZmliZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzRmliZXJNb3VudGVkSW1wbChmaWJlcikgPT09IE1PVU5URUQ7XG59XG5cbmZ1bmN0aW9uIGFzc2VydElzTW91bnRlZChmaWJlcikge1xuICAhKGlzRmliZXJNb3VudGVkSW1wbChmaWJlcikgPT09IE1PVU5URUQpID8gaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoIWFsdGVybmF0ZSkge1xuICAgIC8vIElmIHRoZXJlIGlzIG5vIGFsdGVybmF0ZSwgdGhlbiB3ZSBvbmx5IG5lZWQgdG8gY2hlY2sgaWYgaXQgaXMgbW91bnRlZC5cbiAgICB2YXIgc3RhdGUgPSBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpO1xuICAgICEoc3RhdGUgIT09IFVOTU9VTlRFRCkgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJykgOiB2b2lkIDA7XG4gICAgaWYgKHN0YXRlID09PSBNT1VOVElORykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmaWJlcjtcbiAgfVxuICAvLyBJZiB3ZSBoYXZlIHR3byBwb3NzaWJsZSBicmFuY2hlcywgd2UnbGwgd2FsayBiYWNrd2FyZHMgdXAgdG8gdGhlIHJvb3RcbiAgLy8gdG8gc2VlIHdoYXQgcGF0aCB0aGUgcm9vdCBwb2ludHMgdG8uIE9uIHRoZSB3YXkgd2UgbWF5IGhpdCBvbmUgb2YgdGhlXG4gIC8vIHNwZWNpYWwgY2FzZXMgYW5kIHdlJ2xsIGRlYWwgd2l0aCB0aGVtLlxuICB2YXIgYSA9IGZpYmVyO1xuICB2YXIgYiA9IGFsdGVybmF0ZTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgcGFyZW50QSA9IGFbJ3JldHVybiddO1xuICAgIHZhciBwYXJlbnRCID0gcGFyZW50QSA/IHBhcmVudEEuYWx0ZXJuYXRlIDogbnVsbDtcbiAgICBpZiAoIXBhcmVudEEgfHwgIXBhcmVudEIpIHtcbiAgICAgIC8vIFdlJ3JlIGF0IHRoZSByb290LlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gSWYgYm90aCBjb3BpZXMgb2YgdGhlIHBhcmVudCBmaWJlciBwb2ludCB0byB0aGUgc2FtZSBjaGlsZCwgd2UgY2FuXG4gICAgLy8gYXNzdW1lIHRoYXQgdGhlIGNoaWxkIGlzIGN1cnJlbnQuIFRoaXMgaGFwcGVucyB3aGVuIHdlIGJhaWxvdXQgb24gbG93XG4gICAgLy8gcHJpb3JpdHk6IHRoZSBiYWlsZWQgb3V0IGZpYmVyJ3MgY2hpbGQgcmV1c2VzIHRoZSBjdXJyZW50IGNoaWxkLlxuICAgIGlmIChwYXJlbnRBLmNoaWxkID09PSBwYXJlbnRCLmNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGQgPSBwYXJlbnRBLmNoaWxkO1xuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZCA9PT0gYSkge1xuICAgICAgICAgIC8vIFdlJ3ZlIGRldGVybWluZWQgdGhhdCBBIGlzIHRoZSBjdXJyZW50IGJyYW5jaC5cbiAgICAgICAgICBhc3NlcnRJc01vdW50ZWQocGFyZW50QSk7XG4gICAgICAgICAgcmV0dXJuIGZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCA9PT0gYikge1xuICAgICAgICAgIC8vIFdlJ3ZlIGRldGVybWluZWQgdGhhdCBCIGlzIHRoZSBjdXJyZW50IGJyYW5jaC5cbiAgICAgICAgICBhc3NlcnRJc01vdW50ZWQocGFyZW50QSk7XG4gICAgICAgICAgcmV0dXJuIGFsdGVybmF0ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICAvLyBXZSBzaG91bGQgbmV2ZXIgaGF2ZSBhbiBhbHRlcm5hdGUgZm9yIGFueSBtb3VudGluZyBub2RlLiBTbyB0aGUgb25seVxuICAgICAgLy8gd2F5IHRoaXMgY291bGQgcG9zc2libHkgaGFwcGVuIGlzIGlmIHRoaXMgd2FzIHVubW91bnRlZCwgaWYgYXQgYWxsLlxuICAgICAgaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpO1xuICAgIH1cblxuICAgIGlmIChhWydyZXR1cm4nXSAhPT0gYlsncmV0dXJuJ10pIHtcbiAgICAgIC8vIFRoZSByZXR1cm4gcG9pbnRlciBvZiBBIGFuZCB0aGUgcmV0dXJuIHBvaW50ZXIgb2YgQiBwb2ludCB0byBkaWZmZXJlbnRcbiAgICAgIC8vIGZpYmVycy4gV2UgYXNzdW1lIHRoYXQgcmV0dXJuIHBvaW50ZXJzIG5ldmVyIGNyaXNzLWNyb3NzLCBzbyBBIG11c3RcbiAgICAgIC8vIGJlbG9uZyB0byB0aGUgY2hpbGQgc2V0IG9mIEEucmV0dXJuLCBhbmQgQiBtdXN0IGJlbG9uZyB0byB0aGUgY2hpbGRcbiAgICAgIC8vIHNldCBvZiBCLnJldHVybi5cbiAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgYiA9IHBhcmVudEI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSByZXR1cm4gcG9pbnRlcnMgcG9pbnQgdG8gdGhlIHNhbWUgZmliZXIuIFdlJ2xsIGhhdmUgdG8gdXNlIHRoZVxuICAgICAgLy8gZGVmYXVsdCwgc2xvdyBwYXRoOiBzY2FuIHRoZSBjaGlsZCBzZXRzIG9mIGVhY2ggcGFyZW50IGFsdGVybmF0ZSB0byBzZWVcbiAgICAgIC8vIHdoaWNoIGNoaWxkIGJlbG9uZ3MgdG8gd2hpY2ggc2V0LlxuICAgICAgLy9cbiAgICAgIC8vIFNlYXJjaCBwYXJlbnQgQSdzIGNoaWxkIHNldFxuICAgICAgdmFyIGRpZEZpbmRDaGlsZCA9IGZhbHNlO1xuICAgICAgdmFyIF9jaGlsZCA9IHBhcmVudEEuY2hpbGQ7XG4gICAgICB3aGlsZSAoX2NoaWxkKSB7XG4gICAgICAgIGlmIChfY2hpbGQgPT09IGEpIHtcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSB0cnVlO1xuICAgICAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfY2hpbGQgPT09IGIpIHtcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSB0cnVlO1xuICAgICAgICAgIGIgPSBwYXJlbnRBO1xuICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIF9jaGlsZCA9IF9jaGlsZC5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHtcbiAgICAgICAgLy8gU2VhcmNoIHBhcmVudCBCJ3MgY2hpbGQgc2V0XG4gICAgICAgIF9jaGlsZCA9IHBhcmVudEIuY2hpbGQ7XG4gICAgICAgIHdoaWxlIChfY2hpbGQpIHtcbiAgICAgICAgICBpZiAoX2NoaWxkID09PSBhKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSB0cnVlO1xuICAgICAgICAgICAgYSA9IHBhcmVudEI7XG4gICAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX2NoaWxkID09PSBiKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSB0cnVlO1xuICAgICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfY2hpbGQgPSBfY2hpbGQuc2libGluZztcbiAgICAgICAgfVxuICAgICAgICAhZGlkRmluZENoaWxkID8gaW52YXJpYW50KGZhbHNlLCAnQ2hpbGQgd2FzIG5vdCBmb3VuZCBpbiBlaXRoZXIgcGFyZW50IHNldC4gVGhpcyBpbmRpY2F0ZXMgYSBidWcgaW4gUmVhY3QgcmVsYXRlZCB0byB0aGUgcmV0dXJuIHBvaW50ZXIuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgICEoYS5hbHRlcm5hdGUgPT09IGIpID8gaW52YXJpYW50KGZhbHNlLCAnUmV0dXJuIGZpYmVycyBzaG91bGQgYWx3YXlzIGJlIGVhY2ggb3RoZXJzXFwnIGFsdGVybmF0ZXMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gIH1cbiAgLy8gSWYgdGhlIHJvb3QgaXMgbm90IGEgaG9zdCBjb250YWluZXIsIHdlJ3JlIGluIGEgZGlzY29ubmVjdGVkIHRyZWUuIEkuZS5cbiAgLy8gdW5tb3VudGVkLlxuICAhKGEudGFnID09PSBIb3N0Um9vdCkgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJykgOiB2b2lkIDA7XG4gIGlmIChhLnN0YXRlTm9kZS5jdXJyZW50ID09PSBhKSB7XG4gICAgLy8gV2UndmUgZGV0ZXJtaW5lZCB0aGF0IEEgaXMgdGhlIGN1cnJlbnQgYnJhbmNoLlxuICAgIHJldHVybiBmaWJlcjtcbiAgfVxuICAvLyBPdGhlcndpc2UgQiBoYXMgdG8gYmUgY3VycmVudCBicmFuY2guXG4gIHJldHVybiBhbHRlcm5hdGU7XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SG9zdEZpYmVyKHBhcmVudCkge1xuICB2YXIgY3VycmVudFBhcmVudCA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKHBhcmVudCk7XG4gIGlmICghY3VycmVudFBhcmVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gTmV4dCB3ZSdsbCBkcmlsbCBkb3duIHRoaXMgY29tcG9uZW50IHRvIGZpbmQgdGhlIGZpcnN0IEhvc3RDb21wb25lbnQvVGV4dC5cbiAgdmFyIG5vZGUgPSBjdXJyZW50UGFyZW50O1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCkge1xuICAgICAgbm9kZS5jaGlsZFsncmV0dXJuJ10gPSBub2RlO1xuICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5vZGUgPT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB3aGlsZSAoIW5vZGUuc2libGluZykge1xuICAgICAgaWYgKCFub2RlWydyZXR1cm4nXSB8fCBub2RlWydyZXR1cm4nXSA9PT0gY3VycmVudFBhcmVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlWydyZXR1cm4nXTtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nWydyZXR1cm4nXSA9IG5vZGVbJ3JldHVybiddO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgLy8gRmxvdyBuZWVkcyB0aGUgcmV0dXJuIG51bGwgaGVyZSwgYnV0IEVTTGludCBjb21wbGFpbnMgYWJvdXQgaXQuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnJlYWNoYWJsZVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzKHBhcmVudCkge1xuICB2YXIgY3VycmVudFBhcmVudCA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKHBhcmVudCk7XG4gIGlmICghY3VycmVudFBhcmVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gTmV4dCB3ZSdsbCBkcmlsbCBkb3duIHRoaXMgY29tcG9uZW50IHRvIGZpbmQgdGhlIGZpcnN0IEhvc3RDb21wb25lbnQvVGV4dC5cbiAgdmFyIG5vZGUgPSBjdXJyZW50UGFyZW50O1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCAmJiBub2RlLnRhZyAhPT0gSG9zdFBvcnRhbCkge1xuICAgICAgbm9kZS5jaGlsZFsncmV0dXJuJ10gPSBub2RlO1xuICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5vZGUgPT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB3aGlsZSAoIW5vZGUuc2libGluZykge1xuICAgICAgaWYgKCFub2RlWydyZXR1cm4nXSB8fCBub2RlWydyZXR1cm4nXSA9PT0gY3VycmVudFBhcmVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlWydyZXR1cm4nXTtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nWydyZXR1cm4nXSA9IG5vZGVbJ3JldHVybiddO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgLy8gRmxvdyBuZWVkcyB0aGUgcmV0dXJuIG51bGwgaGVyZSwgYnV0IEVTTGludCBjb21wbGFpbnMgYWJvdXQgaXQuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnJlYWNoYWJsZVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gYWRkRXZlbnRCdWJibGVMaXN0ZW5lcihlbGVtZW50LCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50Q2FwdHVyZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIHRydWUpO1xufVxuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1hbmltYXRpb25zLyNBbmltYXRpb25FdmVudC1pbnRlcmZhY2VcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0FuaW1hdGlvbkV2ZW50XG4gKi9cbnZhciBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9IFN5bnRoZXRpY0V2ZW50JDEuZXh0ZW5kKHtcbiAgYW5pbWF0aW9uTmFtZTogbnVsbCxcbiAgZWxhcHNlZFRpbWU6IG51bGwsXG4gIHBzZXVkb0VsZW1lbnQ6IG51bGxcbn0pO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY2xpcGJvYXJkLWFwaXMvXG4gKi9cbnZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IFN5bnRoZXRpY0V2ZW50JDEuZXh0ZW5kKHtcbiAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdjbGlwYm9hcmREYXRhJyBpbiBldmVudCA/IGV2ZW50LmNsaXBib2FyZERhdGEgOiB3aW5kb3cuY2xpcGJvYXJkRGF0YTtcbiAgfVxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBGb2N1c0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHJlbGF0ZWRUYXJnZXQ6IG51bGxcbn0pO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZSA9IHZvaWQgMDtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gSUUgYW5kIEVkZ2UgKG9uIFdpbmRvd3MpIGFuZCBDaHJvbWUgLyBTYWZhcmkgKG9uIFdpbmRvd3MgYW5kIExpbnV4KVxuICAvLyByZXBvcnQgRW50ZXIgYXMgY2hhckNvZGUgMTAgd2hlbiBjdHJsIGlzIHByZXNzZWQuXG4gIGlmIChjaGFyQ29kZSA9PT0gMTApIHtcbiAgICBjaGFyQ29kZSA9IDEzO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemF0aW9uIG9mIGRlcHJlY2F0ZWQgSFRNTDUgYGtleWAgdmFsdWVzXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgbm9ybWFsaXplS2V5ID0ge1xuICBFc2M6ICdFc2NhcGUnLFxuICBTcGFjZWJhcjogJyAnLFxuICBMZWZ0OiAnQXJyb3dMZWZ0JyxcbiAgVXA6ICdBcnJvd1VwJyxcbiAgUmlnaHQ6ICdBcnJvd1JpZ2h0JyxcbiAgRG93bjogJ0Fycm93RG93bicsXG4gIERlbDogJ0RlbGV0ZScsXG4gIFdpbjogJ09TJyxcbiAgTWVudTogJ0NvbnRleHRNZW51JyxcbiAgQXBwczogJ0NvbnRleHRNZW51JyxcbiAgU2Nyb2xsOiAnU2Nyb2xsTG9jaycsXG4gIE1velByaW50YWJsZUtleTogJ1VuaWRlbnRpZmllZCdcbn07XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBsZWdhY3kgYGtleUNvZGVgIHRvIEhUTUw1IGBrZXlgXG4gKiBPbmx5IHNwZWNpYWwga2V5cyBzdXBwb3J0ZWQsIGFsbCBvdGhlcnMgZGVwZW5kIG9uIGtleWJvYXJkIGxheW91dCBvciBicm93c2VyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICc4JzogJ0JhY2tzcGFjZScsXG4gICc5JzogJ1RhYicsXG4gICcxMic6ICdDbGVhcicsXG4gICcxMyc6ICdFbnRlcicsXG4gICcxNic6ICdTaGlmdCcsXG4gICcxNyc6ICdDb250cm9sJyxcbiAgJzE4JzogJ0FsdCcsXG4gICcxOSc6ICdQYXVzZScsXG4gICcyMCc6ICdDYXBzTG9jaycsXG4gICcyNyc6ICdFc2NhcGUnLFxuICAnMzInOiAnICcsXG4gICczMyc6ICdQYWdlVXAnLFxuICAnMzQnOiAnUGFnZURvd24nLFxuICAnMzUnOiAnRW5kJyxcbiAgJzM2JzogJ0hvbWUnLFxuICAnMzcnOiAnQXJyb3dMZWZ0JyxcbiAgJzM4JzogJ0Fycm93VXAnLFxuICAnMzknOiAnQXJyb3dSaWdodCcsXG4gICc0MCc6ICdBcnJvd0Rvd24nLFxuICAnNDUnOiAnSW5zZXJ0JyxcbiAgJzQ2JzogJ0RlbGV0ZScsXG4gICcxMTInOiAnRjEnLFxuICAnMTEzJzogJ0YyJyxcbiAgJzExNCc6ICdGMycsXG4gICcxMTUnOiAnRjQnLFxuICAnMTE2JzogJ0Y1JyxcbiAgJzExNyc6ICdGNicsXG4gICcxMTgnOiAnRjcnLFxuICAnMTE5JzogJ0Y4JyxcbiAgJzEyMCc6ICdGOScsXG4gICcxMjEnOiAnRjEwJyxcbiAgJzEyMic6ICdGMTEnLFxuICAnMTIzJzogJ0YxMicsXG4gICcxNDQnOiAnTnVtTG9jaycsXG4gICcxNDUnOiAnU2Nyb2xsTG9jaycsXG4gICcyMjQnOiAnTWV0YSdcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBrZXlgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQua2V5KSB7XG4gICAgLy8gTm9ybWFsaXplIGluY29uc2lzdGVudCB2YWx1ZXMgcmVwb3J0ZWQgYnkgYnJvd3NlcnMgZHVlIHRvXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGEgd29ya2luZyBkcmFmdCBzcGVjaWZpY2F0aW9uLlxuXG4gICAgLy8gRmlyZUZveCBpbXBsZW1lbnRzIGBrZXlgIGJ1dCByZXR1cm5zIGBNb3pQcmludGFibGVLZXlgIGZvciBhbGxcbiAgICAvLyBwcmludGFibGUgY2hhcmFjdGVycyAobm9ybWFsaXplZCB0byBgVW5pZGVudGlmaWVkYCksIGlnbm9yZSBpdC5cbiAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgIGlmIChrZXkgIT09ICdVbmlkZW50aWZpZWQnKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIEJyb3dzZXIgZG9lcyBub3QgaW1wbGVtZW50IGBrZXlgLCBwb2x5ZmlsbCBhcyBtdWNoIG9mIGl0IGFzIHdlIGNhbi5cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICB2YXIgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcblxuICAgIC8vIFRoZSBlbnRlci1rZXkgaXMgdGVjaG5pY2FsbHkgYm90aCBwcmludGFibGUgYW5kIG5vbi1wcmludGFibGUgYW5kIGNhblxuICAgIC8vIHRodXMgYmUgY2FwdHVyZWQgYnkgYGtleXByZXNzYCwgbm8gb3RoZXIgbm9uLXByaW50YWJsZSBrZXkgc2hvdWxkLlxuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gIH1cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBuYXRpdmVFdmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgLy8gV2hpbGUgdXNlciBrZXlib2FyZCBsYXlvdXQgZGV0ZXJtaW5lcyB0aGUgYWN0dWFsIG1lYW5pbmcgb2YgZWFjaFxuICAgIC8vIGBrZXlDb2RlYCB2YWx1ZSwgYWxtb3N0IGFsbCBmdW5jdGlvbiBrZXlzIGhhdmUgYSB1bml2ZXJzYWwgdmFsdWUuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IFN5bnRoZXRpY1VJRXZlbnQuZXh0ZW5kKHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgbG9jYXRpb246IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIHJlcGVhdDogbnVsbCxcbiAgbG9jYWxlOiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoZSBhY3R1YWwgcHJpbnRhYmxlIGNoYXJhY3Rlci5cblxuICAgIC8vIEtleVByZXNzIGlzIGRlcHJlY2F0ZWQsIGJ1dCBpdHMgcmVwbGFjZW1lbnQgaXMgbm90IHlldCBmaW5hbCBhbmQgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQgaW4gYW55IG1ham9yIGJyb3dzZXIuIE9ubHkgS2V5UHJlc3MgaGFzIGNoYXJDb2RlLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59KTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIERyYWdFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBTeW50aGV0aWNEcmFnRXZlbnQgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmV4dGVuZCh7XG4gIGRhdGFUcmFuc2ZlcjogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBUb3VjaEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL3RvdWNoLWV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHRvdWNoZXM6IG51bGwsXG4gIHRhcmdldFRvdWNoZXM6IG51bGwsXG4gIGNoYW5nZWRUb3VjaGVzOiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbn0pO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1jc3MzLXRyYW5zaXRpb25zLTIwMDkwMzIwLyN0cmFuc2l0aW9uLWV2ZW50cy1cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RyYW5zaXRpb25FdmVudFxuICovXG52YXIgU3ludGhldGljVHJhbnNpdGlvbkV2ZW50ID0gU3ludGhldGljRXZlbnQkMS5leHRlbmQoe1xuICBwcm9wZXJ0eU5hbWU6IG51bGwsXG4gIGVsYXBzZWRUaW1lOiBudWxsLFxuICBwc2V1ZG9FbGVtZW50OiBudWxsXG59KTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFdoZWVsRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgU3ludGhldGljV2hlZWxFdmVudCA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZXh0ZW5kKHtcbiAgZGVsdGFYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVhgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAocmlnaHQgaXMgcG9zaXRpdmUpLlxuICAgICd3aGVlbERlbHRhWCcgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVggOiAwO1xuICB9LFxuICBkZWx0YVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnZGVsdGFZJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWSA6IC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWWAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDogLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFgIGZvciBJRTw5IGFuZCBub3JtYWxpemUgKGRvd24gaXMgcG9zaXRpdmUpLlxuICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMDtcbiAgfSxcblxuICBkZWx0YVo6IG51bGwsXG5cbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IG51bGxcbn0pO1xuXG4vKipcbiAqIFR1cm5zXG4gKiBbJ2Fib3J0JywgLi4uXVxuICogaW50b1xuICogZXZlbnRUeXBlcyA9IHtcbiAqICAgJ2Fib3J0Jzoge1xuICogICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gKiAgICAgICBidWJibGVkOiAnb25BYm9ydCcsXG4gKiAgICAgICBjYXB0dXJlZDogJ29uQWJvcnRDYXB0dXJlJyxcbiAqICAgICB9LFxuICogICAgIGRlcGVuZGVuY2llczogWyd0b3BBYm9ydCddLFxuICogICB9LFxuICogICAuLi5cbiAqIH07XG4gKiB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7XG4gKiAgICd0b3BBYm9ydCc6IHsgc2FtZUNvbmZpZyB9XG4gKiB9O1xuICovXG52YXIgaW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcyA9IFsnYmx1cicsICdjYW5jZWwnLCAnY2xpY2snLCAnY2xvc2UnLCAnY29udGV4dE1lbnUnLCAnY29weScsICdjdXQnLCAnZG91YmxlQ2xpY2snLCAnZHJhZ0VuZCcsICdkcmFnU3RhcnQnLCAnZHJvcCcsICdmb2N1cycsICdpbnB1dCcsICdpbnZhbGlkJywgJ2tleURvd24nLCAna2V5UHJlc3MnLCAna2V5VXAnLCAnbW91c2VEb3duJywgJ21vdXNlVXAnLCAncGFzdGUnLCAncGF1c2UnLCAncGxheScsICdyYXRlQ2hhbmdlJywgJ3Jlc2V0JywgJ3NlZWtlZCcsICdzdWJtaXQnLCAndG91Y2hDYW5jZWwnLCAndG91Y2hFbmQnLCAndG91Y2hTdGFydCcsICd2b2x1bWVDaGFuZ2UnXTtcbnZhciBub25JbnRlcmFjdGl2ZUV2ZW50VHlwZU5hbWVzID0gWydhYm9ydCcsICdhbmltYXRpb25FbmQnLCAnYW5pbWF0aW9uSXRlcmF0aW9uJywgJ2FuaW1hdGlvblN0YXJ0JywgJ2NhblBsYXknLCAnY2FuUGxheVRocm91Z2gnLCAnZHJhZycsICdkcmFnRW50ZXInLCAnZHJhZ0V4aXQnLCAnZHJhZ0xlYXZlJywgJ2RyYWdPdmVyJywgJ2R1cmF0aW9uQ2hhbmdlJywgJ2VtcHRpZWQnLCAnZW5jcnlwdGVkJywgJ2VuZGVkJywgJ2Vycm9yJywgJ2xvYWQnLCAnbG9hZGVkRGF0YScsICdsb2FkZWRNZXRhZGF0YScsICdsb2FkU3RhcnQnLCAnbW91c2VNb3ZlJywgJ21vdXNlT3V0JywgJ21vdXNlT3ZlcicsICdwbGF5aW5nJywgJ3Byb2dyZXNzJywgJ3Njcm9sbCcsICdzZWVraW5nJywgJ3N0YWxsZWQnLCAnc3VzcGVuZCcsICd0aW1lVXBkYXRlJywgJ3RvZ2dsZScsICd0b3VjaE1vdmUnLCAndHJhbnNpdGlvbkVuZCcsICd3YWl0aW5nJywgJ3doZWVsJ107XG5cbnZhciBldmVudFR5cGVzJDQgPSB7fTtcbnZhciB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7fTtcblxuZnVuY3Rpb24gYWRkRXZlbnRUeXBlTmFtZVRvQ29uZmlnKGV2ZW50LCBpc0ludGVyYWN0aXZlKSB7XG4gIHZhciBjYXBpdGFsaXplZEV2ZW50ID0gZXZlbnRbMF0udG9VcHBlckNhc2UoKSArIGV2ZW50LnNsaWNlKDEpO1xuICB2YXIgb25FdmVudCA9ICdvbicgKyBjYXBpdGFsaXplZEV2ZW50O1xuICB2YXIgdG9wRXZlbnQgPSAndG9wJyArIGNhcGl0YWxpemVkRXZlbnQ7XG5cbiAgdmFyIHR5cGUgPSB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IG9uRXZlbnQsXG4gICAgICBjYXB0dXJlZDogb25FdmVudCArICdDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wRXZlbnRdLFxuICAgIGlzSW50ZXJhY3RpdmU6IGlzSW50ZXJhY3RpdmVcbiAgfTtcbiAgZXZlbnRUeXBlcyQ0W2V2ZW50XSA9IHR5cGU7XG4gIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BFdmVudF0gPSB0eXBlO1xufVxuXG5pbnRlcmFjdGl2ZUV2ZW50VHlwZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50VHlwZU5hbWUpIHtcbiAgYWRkRXZlbnRUeXBlTmFtZVRvQ29uZmlnKGV2ZW50VHlwZU5hbWUsIHRydWUpO1xufSk7XG5ub25JbnRlcmFjdGl2ZUV2ZW50VHlwZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50VHlwZU5hbWUpIHtcbiAgYWRkRXZlbnRUeXBlTmFtZVRvQ29uZmlnKGV2ZW50VHlwZU5hbWUsIGZhbHNlKTtcbn0pO1xuXG4vLyBPbmx5IHVzZWQgaW4gREVWIGZvciBleGhhdXN0aXZlbmVzcyB2YWxpZGF0aW9uLlxudmFyIGtub3duSFRNTFRvcExldmVsVHlwZXMgPSBbJ3RvcEFib3J0JywgJ3RvcENhbmNlbCcsICd0b3BDYW5QbGF5JywgJ3RvcENhblBsYXlUaHJvdWdoJywgJ3RvcENsb3NlJywgJ3RvcER1cmF0aW9uQ2hhbmdlJywgJ3RvcEVtcHRpZWQnLCAndG9wRW5jcnlwdGVkJywgJ3RvcEVuZGVkJywgJ3RvcEVycm9yJywgJ3RvcElucHV0JywgJ3RvcEludmFsaWQnLCAndG9wTG9hZCcsICd0b3BMb2FkZWREYXRhJywgJ3RvcExvYWRlZE1ldGFkYXRhJywgJ3RvcExvYWRTdGFydCcsICd0b3BQYXVzZScsICd0b3BQbGF5JywgJ3RvcFBsYXlpbmcnLCAndG9wUHJvZ3Jlc3MnLCAndG9wUmF0ZUNoYW5nZScsICd0b3BSZXNldCcsICd0b3BTZWVrZWQnLCAndG9wU2Vla2luZycsICd0b3BTdGFsbGVkJywgJ3RvcFN1Ym1pdCcsICd0b3BTdXNwZW5kJywgJ3RvcFRpbWVVcGRhdGUnLCAndG9wVG9nZ2xlJywgJ3RvcFZvbHVtZUNoYW5nZScsICd0b3BXYWl0aW5nJ107XG5cbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyQ0LFxuXG4gIGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTogZnVuY3Rpb24gKHRvcExldmVsVHlwZSkge1xuICAgIHZhciBjb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICByZXR1cm4gY29uZmlnICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmlzSW50ZXJhY3RpdmUgPT09IHRydWU7XG4gIH0sXG5cblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIEV2ZW50Q29uc3RydWN0b3IgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgJ3RvcEtleVByZXNzJzpcbiAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEga2V5cHJlc3MgZXZlbnQgZm9yIGZ1bmN0aW9uIGtleXMgdG9vLiBUaGlzIHJlbW92ZXNcbiAgICAgICAgLy8gdGhlIHVud2FudGVkIGtleXByZXNzIGV2ZW50cy4gRW50ZXIgaXMgaG93ZXZlciBib3RoIHByaW50YWJsZSBhbmRcbiAgICAgICAgLy8gbm9uLXByaW50YWJsZS4gT25lIHdvdWxkIGV4cGVjdCBUYWIgdG8gYmUgYXMgd2VsbCAoYnV0IGl0IGlzbid0KS5cbiAgICAgICAgaWYgKGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3RvcEtleURvd24nOlxuICAgICAgY2FzZSAndG9wS2V5VXAnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BCbHVyJzpcbiAgICAgIGNhc2UgJ3RvcEZvY3VzJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQ2xpY2snOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBjbGljayBldmVudCBvbiByaWdodCBtb3VzZSBjbGlja3MuIFRoaXMgcmVtb3ZlcyB0aGVcbiAgICAgICAgLy8gdW53YW50ZWQgY2xpY2sgZXZlbnRzLlxuICAgICAgICBpZiAobmF0aXZlRXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3RvcERvdWJsZUNsaWNrJzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgICBjYXNlICd0b3BNb3VzZU1vdmUnOlxuICAgICAgY2FzZSAndG9wTW91c2VVcCc6XG4gICAgICAvLyBUT0RPOiBEaXNhYmxlZCBlbGVtZW50cyBzaG91bGQgbm90IHJlc3BvbmQgdG8gbW91c2UgZXZlbnRzXG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICd0b3BNb3VzZU91dCc6XG4gICAgICBjYXNlICd0b3BNb3VzZU92ZXInOlxuICAgICAgY2FzZSAndG9wQ29udGV4dE1lbnUnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BEcmFnJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdFbmQnOlxuICAgICAgY2FzZSAndG9wRHJhZ0VudGVyJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdFeGl0JzpcbiAgICAgIGNhc2UgJ3RvcERyYWdMZWF2ZSc6XG4gICAgICBjYXNlICd0b3BEcmFnT3Zlcic6XG4gICAgICBjYXNlICd0b3BEcmFnU3RhcnQnOlxuICAgICAgY2FzZSAndG9wRHJvcCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wVG91Y2hDYW5jZWwnOlxuICAgICAgY2FzZSAndG9wVG91Y2hFbmQnOlxuICAgICAgY2FzZSAndG9wVG91Y2hNb3ZlJzpcbiAgICAgIGNhc2UgJ3RvcFRvdWNoU3RhcnQnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BBbmltYXRpb25FbmQnOlxuICAgICAgY2FzZSAndG9wQW5pbWF0aW9uSXRlcmF0aW9uJzpcbiAgICAgIGNhc2UgJ3RvcEFuaW1hdGlvblN0YXJ0JzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcFRyYW5zaXRpb25FbmQnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVHJhbnNpdGlvbkV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcFNjcm9sbCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcFdoZWVsJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQ29weSc6XG4gICAgICBjYXNlICd0b3BDdXQnOlxuICAgICAgY2FzZSAndG9wUGFzdGUnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChrbm93bkhUTUxUb3BMZXZlbFR5cGVzLmluZGV4T2YodG9wTGV2ZWxUeXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdTaW1wbGVFdmVudFBsdWdpbjogVW5oYW5kbGVkIGV2ZW50IHR5cGUsIGAlc2AuIFRoaXMgd2FybmluZyAnICsgJ2lzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicsIHRvcExldmVsVHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQkMTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBldmVudCA9IEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkKGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxufTtcblxudmFyIGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSA9IFNpbXBsZUV2ZW50UGx1Z2luLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTtcblxuXG52YXIgQ0FMTEJBQ0tfQk9PS0tFRVBJTkdfUE9PTF9TSVpFID0gMTA7XG52YXIgY2FsbGJhY2tCb29ra2VlcGluZ1Bvb2wgPSBbXTtcblxuLyoqXG4gKiBGaW5kIHRoZSBkZWVwZXN0IFJlYWN0IGNvbXBvbmVudCBjb21wbGV0ZWx5IGNvbnRhaW5pbmcgdGhlIHJvb3Qgb2YgdGhlXG4gKiBwYXNzZWQtaW4gaW5zdGFuY2UgKGZvciB1c2Ugd2hlbiBlbnRpcmUgUmVhY3QgdHJlZXMgYXJlIG5lc3RlZCB3aXRoaW4gZWFjaFxuICogb3RoZXIpLiBJZiBSZWFjdCB0cmVlcyBhcmUgbm90IG5lc3RlZCwgcmV0dXJucyBudWxsLlxuICovXG5mdW5jdGlvbiBmaW5kUm9vdENvbnRhaW5lck5vZGUoaW5zdCkge1xuICAvLyBUT0RPOiBJdCBtYXkgYmUgYSBnb29kIGlkZWEgdG8gY2FjaGUgdGhpcyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IERPTVxuICAvLyB0cmF2ZXJzYWwsIGJ1dCBjYWNoaW5nIGlzIGRpZmZpY3VsdCB0byBkbyBjb3JyZWN0bHkgd2l0aG91dCB1c2luZyBhXG4gIC8vIG11dGF0aW9uIG9ic2VydmVyIHRvIGxpc3RlbiBmb3IgYWxsIERPTSBjaGFuZ2VzLlxuICB3aGlsZSAoaW5zdFsncmV0dXJuJ10pIHtcbiAgICBpbnN0ID0gaW5zdFsncmV0dXJuJ107XG4gIH1cbiAgaWYgKGluc3QudGFnICE9PSBIb3N0Um9vdCkge1xuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB3ZSdyZSBpbiBhIGRldGFjaGVkIHRyZWUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGluc3Quc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYW5jZXN0b3IgaGllcmFyY2h5IGluIHRvcCBsZXZlbCBjYWxsYmFja1xuZnVuY3Rpb24gZ2V0VG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQsIHRhcmdldEluc3QpIHtcbiAgaWYgKGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLnBvcCgpO1xuICAgIGluc3RhbmNlLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgICBpbnN0YW5jZS5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIGluc3RhbmNlLnRhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRvcExldmVsVHlwZTogdG9wTGV2ZWxUeXBlLFxuICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudCxcbiAgICB0YXJnZXRJbnN0OiB0YXJnZXRJbnN0LFxuICAgIGFuY2VzdG9yczogW11cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVsZWFzZVRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyhpbnN0YW5jZSkge1xuICBpbnN0YW5jZS50b3BMZXZlbFR5cGUgPSBudWxsO1xuICBpbnN0YW5jZS5uYXRpdmVFdmVudCA9IG51bGw7XG4gIGluc3RhbmNlLnRhcmdldEluc3QgPSBudWxsO1xuICBpbnN0YW5jZS5hbmNlc3RvcnMubGVuZ3RoID0gMDtcbiAgaWYgKGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLmxlbmd0aCA8IENBTExCQUNLX0JPT0tLRUVQSU5HX1BPT0xfU0laRSkge1xuICAgIGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nKSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gYm9va0tlZXBpbmcudGFyZ2V0SW5zdDtcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdGFyZ2V0SW5zdDtcbiAgZG8ge1xuICAgIGlmICghYW5jZXN0b3IpIHtcbiAgICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgcm9vdCA9IGZpbmRSb290Q29udGFpbmVyTm9kZShhbmNlc3Rvcik7XG4gICAgaWYgKCFyb290KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYm9va0tlZXBpbmcuYW5jZXN0b3JzLnB1c2goYW5jZXN0b3IpO1xuICAgIGFuY2VzdG9yID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocm9vdCk7XG4gIH0gd2hpbGUgKGFuY2VzdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHRhcmdldEluc3QgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgcnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaChib29rS2VlcGluZy50b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpO1xuICB9XG59XG5cbi8vIFRPRE86IGNhbiB3ZSBzdG9wIGV4cG9ydGluZyB0aGVzZT9cbnZhciBfZW5hYmxlZCA9IHRydWU7XG5cbmZ1bmN0aW9uIHNldEVuYWJsZWQoZW5hYmxlZCkge1xuICBfZW5hYmxlZCA9ICEhZW5hYmxlZDtcbn1cblxuZnVuY3Rpb24gaXNFbmFibGVkKCkge1xuICByZXR1cm4gX2VuYWJsZWQ7XG59XG5cbi8qKlxuICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBCcm93c2VyRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudCBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAqIEByZXR1cm4gez9vYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGRpc3BhdGNoID0gaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlKHRvcExldmVsVHlwZSkgPyBkaXNwYXRjaEludGVyYWN0aXZlRXZlbnQgOiBkaXNwYXRjaEV2ZW50O1xuXG4gIGFkZEV2ZW50QnViYmxlTGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlckJhc2VOYW1lLFxuICAvLyBDaGVjayBpZiBpbnRlcmFjdGl2ZSBhbmQgd3JhcCBpbiBpbnRlcmFjdGl2ZVVwZGF0ZXNcbiAgZGlzcGF0Y2guYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbn1cblxuLyoqXG4gKiBUcmFwcyBhIHRvcC1sZXZlbCBldmVudCBieSB1c2luZyBldmVudCBjYXB0dXJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgQnJvd3NlckV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYW5kbGVyQmFzZU5hbWUgRXZlbnQgbmFtZSAoZS5nLiBcImNsaWNrXCIpLlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB0cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgZGlzcGF0Y2ggPSBpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUodG9wTGV2ZWxUeXBlKSA/IGRpc3BhdGNoSW50ZXJhY3RpdmVFdmVudCA6IGRpc3BhdGNoRXZlbnQ7XG5cbiAgYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlckJhc2VOYW1lLFxuICAvLyBDaGVjayBpZiBpbnRlcmFjdGl2ZSBhbmQgd3JhcCBpbiBpbnRlcmFjdGl2ZVVwZGF0ZXNcbiAgZGlzcGF0Y2guYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hJbnRlcmFjdGl2ZUV2ZW50KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgaW50ZXJhY3RpdmVVcGRhdGVzKGRpc3BhdGNoRXZlbnQsIHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgaWYgKCFfZW5hYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuYXRpdmVFdmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbiAgdmFyIHRhcmdldEluc3QgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCk7XG4gIGlmICh0YXJnZXRJbnN0ICE9PSBudWxsICYmIHR5cGVvZiB0YXJnZXRJbnN0LnRhZyA9PT0gJ251bWJlcicgJiYgIWlzRmliZXJNb3VudGVkKHRhcmdldEluc3QpKSB7XG4gICAgLy8gSWYgd2UgZ2V0IGFuIGV2ZW50IChleDogaW1nIG9ubG9hZCkgYmVmb3JlIGNvbW1pdHRpbmcgdGhhdFxuICAgIC8vIGNvbXBvbmVudCdzIG1vdW50LCBpZ25vcmUgaXQgZm9yIG5vdyAodGhhdCBpcywgdHJlYXQgaXQgYXMgaWYgaXQgd2FzIGFuXG4gICAgLy8gZXZlbnQgb24gYSBub24tUmVhY3QgdHJlZSkuIFdlIG1pZ2h0IGFsc28gY29uc2lkZXIgcXVldWVpbmcgZXZlbnRzIGFuZFxuICAgIC8vIGRpc3BhdGNoaW5nIHRoZW0gYWZ0ZXIgdGhlIG1vdW50LlxuICAgIHRhcmdldEluc3QgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJvb2tLZWVwaW5nID0gZ2V0VG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQsIHRhcmdldEluc3QpO1xuXG4gIHRyeSB7XG4gICAgLy8gRXZlbnQgcXVldWUgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZSBzYW1lIGN5Y2xlIGFsbG93c1xuICAgIC8vIGBwcmV2ZW50RGVmYXVsdGAuXG4gICAgYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWwsIGJvb2tLZWVwaW5nKTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZWxlYXNlVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKGJvb2tLZWVwaW5nKTtcbiAgfVxufVxuXG52YXIgUmVhY3RET01FdmVudExpc3RlbmVyID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGdldCBfZW5hYmxlZCAoKSB7IHJldHVybiBfZW5hYmxlZDsgfSxcblx0c2V0RW5hYmxlZDogc2V0RW5hYmxlZCxcblx0aXNFbmFibGVkOiBpc0VuYWJsZWQsXG5cdHRyYXBCdWJibGVkRXZlbnQ6IHRyYXBCdWJibGVkRXZlbnQsXG5cdHRyYXBDYXB0dXJlZEV2ZW50OiB0cmFwQ2FwdHVyZWRFdmVudCxcblx0ZGlzcGF0Y2hFdmVudDogZGlzcGF0Y2hFdmVudFxufSk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBtYXBwaW5nIG9mIHN0YW5kYXJkIHZlbmRvciBwcmVmaXhlcyB1c2luZyB0aGUgZGVmaW5lZCBzdHlsZSBwcm9wZXJ0eSBhbmQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVQcm9wXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuXG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1snV2Via2l0JyArIHN0eWxlUHJvcF0gPSAnd2Via2l0JyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ01veicgKyBzdHlsZVByb3BdID0gJ21veicgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydtcycgKyBzdHlsZVByb3BdID0gJ01TJyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ08nICsgc3R5bGVQcm9wXSA9ICdvJyArIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2YgZXZlbnQgbmFtZXMgdG8gYSBjb25maWd1cmFibGUgbGlzdCBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkl0ZXJhdGlvbicpLFxuICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvblN0YXJ0JyksXG4gIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ1RyYW5zaXRpb24nLCAnVHJhbnNpdGlvbkVuZCcpXG59O1xuXG4vKipcbiAqIEV2ZW50IG5hbWVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gZGV0ZWN0ZWQgYW5kIHByZWZpeGVkIChpZiBhcHBsaWNhYmxlKS5cbiAqL1xudmFyIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuXG4vKipcbiAqIEVsZW1lbnQgdG8gY2hlY2sgZm9yIHByZWZpeGVzIG9uLlxuICovXG52YXIgc3R5bGUgPSB7fTtcblxuLyoqXG4gKiBCb290c3RyYXAgaWYgYSBET00gZXhpc3RzLlxuICovXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2FibGUsIGFuZCBpZiBub3QgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbWFwLlxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uO1xuICB9XG5cbiAgLy8gU2FtZSBhcyBhYm92ZVxuICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCB2ZW5kb3IgcHJlZml4ZWQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICB9IGVsc2UgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgfVxuXG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdO1xuXG4gIGZvciAodmFyIHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApIHtcbiAgICBpZiAocHJlZml4TWFwLmhhc093blByb3BlcnR5KHN0eWxlUHJvcCkgJiYgc3R5bGVQcm9wIGluIHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnROYW1lO1xufVxuXG4vKipcbiAqIFR5cGVzIG9mIHJhdyBzaWduYWxzIGZyb20gdGhlIGJyb3dzZXIgY2F1Z2h0IGF0IHRoZSB0b3AgbGV2ZWwuXG4gKlxuICogRm9yIGV2ZW50cyBsaWtlICdzdWJtaXQnIG9yIGF1ZGlvL3ZpZGVvIGV2ZW50cyB3aGljaCBkb24ndCBjb25zaXN0ZW50bHlcbiAqIGJ1YmJsZSAod2hpY2ggd2UgdHJhcCBhdCBhIGxvd2VyIG5vZGUgdGhhbiBgZG9jdW1lbnRgKSwgYmluZGluZ1xuICogYXQgYGRvY3VtZW50YCB3b3VsZCBjYXVzZSBkdXBsaWNhdGUgZXZlbnRzIHNvIHdlIGRvbid0IGluY2x1ZGUgdGhlbSBoZXJlLlxuICovXG52YXIgdG9wTGV2ZWxUeXBlcyA9IHtcbiAgdG9wQW5pbWF0aW9uRW5kOiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uZW5kJyksXG4gIHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbml0ZXJhdGlvbicpLFxuICB0b3BBbmltYXRpb25TdGFydDogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbnN0YXJ0JyksXG4gIHRvcEJsdXI6ICdibHVyJyxcbiAgdG9wQ2FuY2VsOiAnY2FuY2VsJyxcbiAgdG9wQ2hhbmdlOiAnY2hhbmdlJyxcbiAgdG9wQ2xpY2s6ICdjbGljaycsXG4gIHRvcENsb3NlOiAnY2xvc2UnLFxuICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG4gIHRvcENvcHk6ICdjb3B5JyxcbiAgdG9wQ3V0OiAnY3V0JyxcbiAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG4gIHRvcERyYWc6ICdkcmFnJyxcbiAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG4gIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gIHRvcERyb3A6ICdkcm9wJyxcbiAgdG9wRm9jdXM6ICdmb2N1cycsXG4gIHRvcElucHV0OiAnaW5wdXQnLFxuICB0b3BLZXlEb3duOiAna2V5ZG93bicsXG4gIHRvcEtleVByZXNzOiAna2V5cHJlc3MnLFxuICB0b3BLZXlVcDogJ2tleXVwJyxcbiAgdG9wTG9hZDogJ2xvYWQnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3BNb3VzZU91dDogJ21vdXNlb3V0JyxcbiAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICB0b3BQYXN0ZTogJ3Bhc3RlJyxcbiAgdG9wU2Nyb2xsOiAnc2Nyb2xsJyxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgdG9wVGV4dElucHV0OiAndGV4dElucHV0JyxcbiAgdG9wVG9nZ2xlOiAndG9nZ2xlJyxcbiAgdG9wVG91Y2hDYW5jZWw6ICd0b3VjaGNhbmNlbCcsXG4gIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICB0b3BUb3VjaE1vdmU6ICd0b3VjaG1vdmUnLFxuICB0b3BUb3VjaFN0YXJ0OiAndG91Y2hzdGFydCcsXG4gIHRvcFRyYW5zaXRpb25FbmQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJyksXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vLyBUaGVyZSBhcmUgc28gbWFueSBtZWRpYSBldmVudHMsIGl0IG1ha2VzIHNlbnNlIHRvIGp1c3Rcbi8vIG1haW50YWluIGEgbGlzdCBvZiB0aGVtLiBOb3RlIHRoZXNlIGFyZW4ndCB0ZWNobmljYWxseVxuLy8gXCJ0b3AtbGV2ZWxcIiBzaW5jZSB0aGV5IGRvbid0IGJ1YmJsZS4gV2Ugc2hvdWxkIGNvbWUgdXBcbi8vIHdpdGggYSBiZXR0ZXIgbmFtaW5nIGNvbnZlbnRpb24gaWYgd2UgY29tZSB0byByZWZhY3RvcmluZ1xuLy8gdGhlIGV2ZW50IHN5c3RlbS5cbnZhciBtZWRpYUV2ZW50VHlwZXMgPSB7XG4gIHRvcEFib3J0OiAnYWJvcnQnLFxuICB0b3BDYW5QbGF5OiAnY2FucGxheScsXG4gIHRvcENhblBsYXlUaHJvdWdoOiAnY2FucGxheXRocm91Z2gnLFxuICB0b3BEdXJhdGlvbkNoYW5nZTogJ2R1cmF0aW9uY2hhbmdlJyxcbiAgdG9wRW1wdGllZDogJ2VtcHRpZWQnLFxuICB0b3BFbmNyeXB0ZWQ6ICdlbmNyeXB0ZWQnLFxuICB0b3BFbmRlZDogJ2VuZGVkJyxcbiAgdG9wRXJyb3I6ICdlcnJvcicsXG4gIHRvcExvYWRlZERhdGE6ICdsb2FkZWRkYXRhJyxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6ICdsb2FkZWRtZXRhZGF0YScsXG4gIHRvcExvYWRTdGFydDogJ2xvYWRzdGFydCcsXG4gIHRvcFBhdXNlOiAncGF1c2UnLFxuICB0b3BQbGF5OiAncGxheScsXG4gIHRvcFBsYXlpbmc6ICdwbGF5aW5nJyxcbiAgdG9wUHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gIHRvcFJhdGVDaGFuZ2U6ICdyYXRlY2hhbmdlJyxcbiAgdG9wU2Vla2VkOiAnc2Vla2VkJyxcbiAgdG9wU2Vla2luZzogJ3NlZWtpbmcnLFxuICB0b3BTdGFsbGVkOiAnc3RhbGxlZCcsXG4gIHRvcFN1c3BlbmQ6ICdzdXNwZW5kJyxcbiAgdG9wVGltZVVwZGF0ZTogJ3RpbWV1cGRhdGUnLFxuICB0b3BWb2x1bWVDaGFuZ2U6ICd2b2x1bWVjaGFuZ2UnLFxuICB0b3BXYWl0aW5nOiAnd2FpdGluZydcbn07XG5cbi8qKlxuICogU3VtbWFyeSBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBldmVudCBoYW5kbGluZzpcbiAqXG4gKiAgLSBUb3AtbGV2ZWwgZGVsZWdhdGlvbiBpcyB1c2VkIHRvIHRyYXAgbW9zdCBuYXRpdmUgYnJvd3NlciBldmVudHMuIFRoaXNcbiAqICAgIG1heSBvbmx5IG9jY3VyIGluIHRoZSBtYWluIHRocmVhZCBhbmQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mXG4gKiAgICBSZWFjdERPTUV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnRcbiAqICAgIHBsdWdnYWJsZSBldmVudCBzb3VyY2VzLiBUaGlzIGlzIHRoZSBvbmx5IHdvcmsgdGhhdCBvY2N1cnMgaW4gdGhlIG1haW5cbiAqICAgIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG5cbi8qKlxuICogVG8gZW5zdXJlIG5vIGNvbmZsaWN0cyB3aXRoIG90aGVyIHBvdGVudGlhbCBSZWFjdCBpbnN0YW5jZXMgb24gdGhlIHBhZ2VcbiAqL1xudmFyIHRvcExpc3RlbmVyc0lES2V5ID0gJ19yZWFjdExpc3RlbmVyc0lEJyArICgnJyArIE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuXG5mdW5jdGlvbiBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KSB7XG4gIC8vIEluIElFOCwgYG1vdW50QXRgIGlzIGEgaG9zdCBvYmplY3QgYW5kIGRvZXNuJ3QgaGF2ZSBgaGFzT3duUHJvcGVydHlgXG4gIC8vIGRpcmVjdGx5LlxuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3VudEF0LCB0b3BMaXN0ZW5lcnNJREtleSkpIHtcbiAgICBtb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XSA9IHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlcisrO1xuICAgIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV0gPSB7fTtcbiAgfVxuICByZXR1cm4gYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXTtcbn1cblxuLyoqXG4gKiBXZSBsaXN0ZW4gZm9yIGJ1YmJsZWQgdG91Y2ggZXZlbnRzIG9uIHRoZSBkb2N1bWVudCBvYmplY3QuXG4gKlxuICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICogbW91bnRpbmcgYG9ubW91c2Vtb3ZlYCBldmVudHMgYXQgc29tZSBub2RlIHRoYXQgd2FzIG5vdCB0aGUgZG9jdW1lbnRcbiAqIGVsZW1lbnQuIFRoZSBzeW1wdG9tcyB3ZXJlIHRoYXQgaWYgeW91ciBtb3VzZSBpcyBub3QgbW92aW5nIG92ZXIgc29tZXRoaW5nXG4gKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgZm9yIGBvbm1vdXNlbW92ZWAgd29uJ3QgYmUgY2FsbGVkLiBIb3dldmVyLCBpZiB5b3VcbiAqIHJlZ2lzdGVyIHRoZSBgbW91c2Vtb3ZlYCBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LCB0aGVuIGl0IHdpbGwgb2YgY291cnNlXG4gKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gKiB0b3AtbGV2ZWwgbGlzdGVuZXJzIHRvIHRoZSBkb2N1bWVudCBvYmplY3Qgb25seSwgYXQgbGVhc3QgZm9yIHRoZXNlXG4gKiBtb3ZlbWVudCB0eXBlcyBvZiBldmVudHMgYW5kIHBvc3NpYmx5IGFsbCBldmVudHMuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICpcbiAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAqIHRoZXkgYnViYmxlIHRvIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZW50RG9jdW1lbnRIYW5kbGUgRG9jdW1lbnQgd2hpY2ggb3ducyB0aGUgY29udGFpbmVyXG4gKi9cbmZ1bmN0aW9uIGxpc3RlblRvKHJlZ2lzdHJhdGlvbk5hbWUsIGNvbnRlbnREb2N1bWVudEhhbmRsZSkge1xuICB2YXIgbW91bnRBdCA9IGNvbnRlbnREb2N1bWVudEhhbmRsZTtcbiAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNbaV07XG4gICAgaWYgKCEoaXNMaXN0ZW5pbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkgJiYgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0pKSB7XG4gICAgICBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcFNjcm9sbCcpIHtcbiAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoJ3RvcFNjcm9sbCcsICdzY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcEZvY3VzJyB8fCBkZXBlbmRlbmN5ID09PSAndG9wQmx1cicpIHtcbiAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoJ3RvcEZvY3VzJywgJ2ZvY3VzJywgbW91bnRBdCk7XG4gICAgICAgIHRyYXBDYXB0dXJlZEV2ZW50KCd0b3BCbHVyJywgJ2JsdXInLCBtb3VudEF0KTtcblxuICAgICAgICAvLyB0byBtYWtlIHN1cmUgYmx1ciBhbmQgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IGF0dGFjaGVkIG9uY2VcbiAgICAgICAgaXNMaXN0ZW5pbmcudG9wQmx1ciA9IHRydWU7XG4gICAgICAgIGlzTGlzdGVuaW5nLnRvcEZvY3VzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcENhbmNlbCcpIHtcbiAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2NhbmNlbCcsIHRydWUpKSB7XG4gICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoJ3RvcENhbmNlbCcsICdjYW5jZWwnLCBtb3VudEF0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0xpc3RlbmluZy50b3BDYW5jZWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSAndG9wQ2xvc2UnKSB7XG4gICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdjbG9zZScsIHRydWUpKSB7XG4gICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoJ3RvcENsb3NlJywgJ2Nsb3NlJywgbW91bnRBdCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNMaXN0ZW5pbmcudG9wQ2xvc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGVzLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgIHRyYXBCdWJibGVkRXZlbnQoZGVwZW5kZW5jeSwgdG9wTGV2ZWxUeXBlc1tkZXBlbmRlbmN5XSwgbW91bnRBdCk7XG4gICAgICB9XG5cbiAgICAgIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMaXN0ZW5pbmdUb0FsbERlcGVuZGVuY2llcyhyZWdpc3RyYXRpb25OYW1lLCBtb3VudEF0KSB7XG4gIHZhciBpc0xpc3RlbmluZyA9IGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpO1xuICB2YXIgZGVwZW5kZW5jaWVzID0gcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2l2ZW4gYW55IG5vZGUgcmV0dXJuIHRoZSBmaXJzdCBsZWFmIG5vZGUgd2l0aG91dCBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG4gICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG5leHQgc2libGluZyB3aXRoaW4gYSBjb250YWluZXIuIFRoaXMgd2lsbCB3YWxrIHVwIHRoZVxuICogRE9NIGlmIGEgbm9kZSdzIHNpYmxpbmdzIGhhdmUgYmVlbiBleGhhdXN0ZWQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZ2V0U2libGluZ05vZGUobm9kZSkge1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBvYmplY3QgZGVzY3JpYmluZyB0aGUgbm9kZXMgd2hpY2ggY29udGFpbiBjaGFyYWN0ZXJzIGF0IG9mZnNldC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IHJvb3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHZhciBub2RlU3RhcnQgPSAwO1xuICB2YXIgbm9kZUVuZCA9IDA7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSB7XG4gICAgICBub2RlRW5kID0gbm9kZVN0YXJ0ICsgbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG5cbiAgICAgIGlmIChub2RlU3RhcnQgPD0gb2Zmc2V0ICYmIG5vZGVFbmQgPj0gb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCAtIG5vZGVTdGFydFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBub2RlU3RhcnQgPSBub2RlRW5kO1xuICAgIH1cblxuICAgIG5vZGUgPSBnZXRMZWFmTm9kZShnZXRTaWJsaW5nTm9kZShub2RlKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG91dGVyTm9kZVxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0cyhvdXRlck5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24gJiYgd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYW5jaG9yTm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICBmb2N1c09mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcblxuICAvLyBJbiBGaXJlZm94LCBhbmNob3JOb2RlIGFuZCBmb2N1c05vZGUgY2FuIGJlIFwiYW5vbnltb3VzIGRpdnNcIiwgZS5nLiB0aGVcbiAgLy8gdXAvZG93biBidXR0b25zIG9uIGFuIDxpbnB1dCB0eXBlPVwibnVtYmVyXCI+LiBBbm9ueW1vdXMgZGl2cyBkbyBub3Qgc2VlbSB0b1xuICAvLyBleHBvc2UgcHJvcGVydGllcywgdHJpZ2dlcmluZyBhIFwiUGVybWlzc2lvbiBkZW5pZWQgZXJyb3JcIiBpZiBhbnkgb2YgaXRzXG4gIC8vIHByb3BlcnRpZXMgYXJlIGFjY2Vzc2VkLiBUaGUgb25seSBzZWVtaW5nbHkgcG9zc2libGUgd2F5IHRvIGF2b2lkIGVycm9yaW5nXG4gIC8vIGlzIHRvIGFjY2VzcyBhIHByb3BlcnR5IHRoYXQgdHlwaWNhbGx5IHdvcmtzIGZvciBub24tYW5vbnltb3VzIGRpdnMgYW5kXG4gIC8vIGNhdGNoIGFueSBlcnJvciB0aGF0IG1heSBvdGhlcndpc2UgYXJpc2UuIFNlZVxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDg0MjdcblxuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIGFuY2hvck5vZGUubm9kZVR5cGU7XG4gICAgZm9jdXNOb2RlLm5vZGVUeXBlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBnZXRNb2Rlcm5PZmZzZXRzRnJvbVBvaW50cyhvdXRlck5vZGUsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB7c3RhcnQsIGVuZH0gd2hlcmUgYHN0YXJ0YCBpcyB0aGUgY2hhcmFjdGVyL2NvZGVwb2ludCBpbmRleCBvZlxuICogKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCkgd2l0aGluIHRoZSB0ZXh0Q29udGVudCBvZiBgb3V0ZXJOb2RlYCwgYW5kXG4gKiBgZW5kYCBpcyB0aGUgaW5kZXggb2YgKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpLlxuICpcbiAqIFJldHVybnMgbnVsbCBpZiB5b3UgcGFzcyBpbiBnYXJiYWdlIGlucHV0IGJ1dCB3ZSBzaG91bGQgcHJvYmFibHkganVzdCBjcmFzaC5cbiAqXG4gKiBFeHBvcnRlZCBvbmx5IGZvciB0ZXN0aW5nLlxuICovXG5mdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzRnJvbVBvaW50cyhvdXRlck5vZGUsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHN0YXJ0ID0gLTE7XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIGluZGV4V2l0aGluQW5jaG9yID0gMDtcbiAgdmFyIGluZGV4V2l0aGluRm9jdXMgPSAwO1xuICB2YXIgbm9kZSA9IG91dGVyTm9kZTtcbiAgdmFyIHBhcmVudE5vZGUgPSBudWxsO1xuXG4gIG91dGVyOiB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBuZXh0ID0gbnVsbDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAobm9kZSA9PT0gYW5jaG9yTm9kZSAmJiAoYW5jaG9yT2Zmc2V0ID09PSAwIHx8IG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkpIHtcbiAgICAgICAgc3RhcnQgPSBsZW5ndGggKyBhbmNob3JPZmZzZXQ7XG4gICAgICB9XG4gICAgICBpZiAobm9kZSA9PT0gZm9jdXNOb2RlICYmIChmb2N1c09mZnNldCA9PT0gMCB8fCBub2RlLm5vZGVUeXBlID09PSBURVhUX05PREUpKSB7XG4gICAgICAgIGVuZCA9IGxlbmd0aCArIGZvY3VzT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSB7XG4gICAgICAgIGxlbmd0aCArPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGlmICgobmV4dCA9IG5vZGUuZmlyc3RDaGlsZCkgPT09IG51bGwpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBNb3ZpbmcgZnJvbSBgbm9kZWAgdG8gaXRzIGZpcnN0IGNoaWxkIGBuZXh0YC5cbiAgICAgIHBhcmVudE5vZGUgPSBub2RlO1xuICAgICAgbm9kZSA9IG5leHQ7XG4gICAgfVxuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChub2RlID09PSBvdXRlck5vZGUpIHtcbiAgICAgICAgLy8gSWYgYG91dGVyTm9kZWAgaGFzIGNoaWxkcmVuLCB0aGlzIGlzIGFsd2F5cyB0aGUgc2Vjb25kIHRpbWUgdmlzaXRpbmdcbiAgICAgICAgLy8gaXQuIElmIGl0IGhhcyBubyBjaGlsZHJlbiwgdGhpcyBpcyBzdGlsbCB0aGUgZmlyc3QgbG9vcCwgYW5kIHRoZSBvbmx5XG4gICAgICAgIC8vIHZhbGlkIHNlbGVjdGlvbiBpcyBhbmNob3JOb2RlIGFuZCBmb2N1c05vZGUgYm90aCBlcXVhbCB0byB0aGlzIG5vZGVcbiAgICAgICAgLy8gYW5kIGJvdGggb2Zmc2V0cyAwLCBpbiB3aGljaCBjYXNlIHdlIHdpbGwgaGF2ZSBoYW5kbGVkIGFib3ZlLlxuICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnROb2RlID09PSBhbmNob3JOb2RlICYmICsraW5kZXhXaXRoaW5BbmNob3IgPT09IGFuY2hvck9mZnNldCkge1xuICAgICAgICBzdGFydCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnROb2RlID09PSBmb2N1c05vZGUgJiYgKytpbmRleFdpdGhpbkZvY3VzID09PSBmb2N1c09mZnNldCkge1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAoKG5leHQgPSBub2RlLm5leHRTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBwYXJlbnROb2RlO1xuICAgICAgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICAvLyBNb3ZpbmcgZnJvbSBgbm9kZWAgdG8gaXRzIG5leHQgc2libGluZyBgbmV4dGAuXG4gICAgbm9kZSA9IG5leHQ7XG4gIH1cblxuICBpZiAoc3RhcnQgPT09IC0xIHx8IGVuZCA9PT0gLTEpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4uIChXb3VsZCBoYXBwZW4gaWYgdGhlIGFuY2hvci9mb2N1cyBub2RlcyBhcmVuJ3RcbiAgICAvLyBhY3R1YWxseSBpbnNpZGUgdGhlIHBhc3NlZC1pbiBub2RlLilcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGVuZDogZW5kXG4gIH07XG59XG5cbi8qKlxuICogSW4gbW9kZXJuIG5vbi1JRSBicm93c2Vycywgd2UgY2FuIHN1cHBvcnQgYm90aCBmb3J3YXJkIGFuZCBiYWNrd2FyZFxuICogc2VsZWN0aW9ucy5cbiAqXG4gKiBOb3RlOiBJRTEwKyBzdXBwb3J0cyB0aGUgU2VsZWN0aW9uIG9iamVjdCwgYnV0IGl0IGRvZXMgbm90IHN1cHBvcnRcbiAqIHRoZSBgZXh0ZW5kYCBtZXRob2QsIHdoaWNoIG1lYW5zIHRoYXQgZXZlbiBpbiBtb2Rlcm4gSUUsIGl0J3Mgbm90IHBvc3NpYmxlXG4gKiB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZSBhIGJhY2t3YXJkIHNlbGVjdGlvbi4gVGh1cywgZm9yIGFsbCBJRVxuICogdmVyc2lvbnMsIHdlIHVzZSB0aGUgb2xkIElFIEFQSSB0byBjcmVhdGUgb3VyIHNlbGVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICovXG5mdW5jdGlvbiBzZXRPZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgaWYgKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGxlbmd0aCA9IG5vZGVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGg7XG4gIHZhciBzdGFydCA9IE1hdGgubWluKG9mZnNldHMuc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBvZmZzZXRzLmVuZCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiBNYXRoLm1pbihvZmZzZXRzLmVuZCwgbGVuZ3RoKTtcblxuICAvLyBJRSAxMSB1c2VzIG1vZGVybiBzZWxlY3Rpb24sIGJ1dCBkb2Vzbid0IHN1cHBvcnQgdGhlIGV4dGVuZCBtZXRob2QuXG4gIC8vIEZsaXAgYmFja3dhcmQgc2VsZWN0aW9ucywgc28gd2UgY2FuIHNldCB3aXRoIGEgc2luZ2xlIHJhbmdlLlxuICBpZiAoIXNlbGVjdGlvbi5leHRlbmQgJiYgc3RhcnQgPiBlbmQpIHtcbiAgICB2YXIgdGVtcCA9IGVuZDtcbiAgICBlbmQgPSBzdGFydDtcbiAgICBzdGFydCA9IHRlbXA7XG4gIH1cblxuICB2YXIgc3RhcnRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIHN0YXJ0KTtcbiAgdmFyIGVuZE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgZW5kKTtcblxuICBpZiAoc3RhcnRNYXJrZXIgJiYgZW5kTWFya2VyKSB7XG4gICAgaWYgKHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAxICYmIHNlbGVjdGlvbi5hbmNob3JOb2RlID09PSBzdGFydE1hcmtlci5ub2RlICYmIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQgPT09IHN0YXJ0TWFya2VyLm9mZnNldCAmJiBzZWxlY3Rpb24uZm9jdXNOb2RlID09PSBlbmRNYXJrZXIubm9kZSAmJiBzZWxlY3Rpb24uZm9jdXNPZmZzZXQgPT09IGVuZE1hcmtlci5vZmZzZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcblxuICAgIGlmIChzdGFydCA+IGVuZCkge1xuICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIHNlbGVjdGlvbi5leHRlbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZS5zZXRFbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpO1xuICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIGNvbnRhaW5zTm9kZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIG5vZGUpO1xufVxuXG4vKipcbiAqIEBSZWFjdElucHV0U2VsZWN0aW9uOiBSZWFjdCBpbnB1dCBzZWxlY3Rpb24gbW9kdWxlLiBCYXNlZCBvbiBTZWxlY3Rpb24uanMsXG4gKiBidXQgbW9kaWZpZWQgdG8gYmUgc3VpdGFibGUgZm9yIHJlYWN0IGFuZCBoYXMgYSBjb3VwbGUgb2YgYnVnIGZpeGVzIChkb2Vzbid0XG4gKiBhc3N1bWUgYnV0dG9ucyBoYXZlIHJhbmdlIHNlbGVjdGlvbnMgYWxsb3dlZCkuXG4gKiBJbnB1dCBzZWxlY3Rpb24gbW9kdWxlIGZvciBSZWFjdC5cbiAqL1xuXG5mdW5jdGlvbiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gbm9kZU5hbWUgJiYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIGVsZW0udHlwZSA9PT0gJ3RleHQnIHx8IG5vZGVOYW1lID09PSAndGV4dGFyZWEnIHx8IGVsZW0uY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbigpIHtcbiAgdmFyIGZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICByZXR1cm4ge1xuICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICBzZWxlY3Rpb25SYW5nZTogaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGZvY3VzZWRFbGVtKSA/IGdldFNlbGVjdGlvbiQxKGZvY3VzZWRFbGVtKSA6IG51bGxcbiAgfTtcbn1cblxuLyoqXG4gKiBAcmVzdG9yZVNlbGVjdGlvbjogSWYgYW55IHNlbGVjdGlvbiBpbmZvcm1hdGlvbiB3YXMgcG90ZW50aWFsbHkgbG9zdCxcbiAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICogbm9kZXMgYW5kIHBsYWNlIHRoZW0gYmFjayBpbiwgcmVzdWx0aW5nIGluIGZvY3VzIGJlaW5nIGxvc3QuXG4gKi9cbmZ1bmN0aW9uIHJlc3RvcmVTZWxlY3Rpb24ocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICB2YXIgY3VyRm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gIHZhciBwcmlvckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbTtcbiAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICBpZiAoY3VyRm9jdXNlZEVsZW0gIT09IHByaW9yRm9jdXNlZEVsZW0gJiYgaXNJbkRvY3VtZW50KHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgaWYgKGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgc2V0U2VsZWN0aW9uKHByaW9yRm9jdXNlZEVsZW0sIHByaW9yU2VsZWN0aW9uUmFuZ2UpO1xuICAgIH1cblxuICAgIC8vIEZvY3VzaW5nIGEgbm9kZSBjYW4gY2hhbmdlIHRoZSBzY3JvbGwgcG9zaXRpb24sIHdoaWNoIGlzIHVuZGVzaXJhYmxlXG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdO1xuICAgIHZhciBhbmNlc3RvciA9IHByaW9yRm9jdXNlZEVsZW07XG4gICAgd2hpbGUgKGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKGFuY2VzdG9yLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2goe1xuICAgICAgICAgIGVsZW1lbnQ6IGFuY2VzdG9yLFxuICAgICAgICAgIGxlZnQ6IGFuY2VzdG9yLnNjcm9sbExlZnQsXG4gICAgICAgICAgdG9wOiBhbmNlc3Rvci5zY3JvbGxUb3BcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJpb3JGb2N1c2VkRWxlbS5mb2N1cygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbmNlc3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpbmZvID0gYW5jZXN0b3JzW2ldO1xuICAgICAgaW5mby5lbGVtZW50LnNjcm9sbExlZnQgPSBpbmZvLmxlZnQ7XG4gICAgICBpbmZvLmVsZW1lbnQuc2Nyb2xsVG9wID0gaW5mby50b3A7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQGdldFNlbGVjdGlvbjogR2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIGZvY3VzZWQgdGV4dGFyZWEsIGlucHV0IG9yXG4gKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAqIC1AaW5wdXQ6IExvb2sgdXAgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0XG4gKiAtQHJldHVybiB7c3RhcnQ6IHNlbGVjdGlvblN0YXJ0LCBlbmQ6IHNlbGVjdGlvbkVuZH1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uJDEoaW5wdXQpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHZvaWQgMDtcblxuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgIC8vIE1vZGVybiBicm93c2VyIHdpdGggaW5wdXQgb3IgdGV4dGFyZWEuXG4gICAgc2VsZWN0aW9uID0ge1xuICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBpbnB1dC5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgIHNlbGVjdGlvbiA9IGdldE9mZnNldHMoaW5wdXQpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcbn1cblxuLyoqXG4gKiBAc2V0U2VsZWN0aW9uOiBTZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgdGV4dGFyZWEgb3IgaW5wdXQgYW5kIGZvY3VzZXNcbiAqIHRoZSBpbnB1dC5cbiAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcbiAqIC1Ab2Zmc2V0cyAgIE9iamVjdCBvZiBzYW1lIGZvcm0gdGhhdCBpcyByZXR1cm5lZCBmcm9tIGdldCpcbiAqL1xuZnVuY3Rpb24gc2V0U2VsZWN0aW9uKGlucHV0LCBvZmZzZXRzKSB7XG4gIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQsXG4gICAgICBlbmQgPSBvZmZzZXRzLmVuZDtcblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSBzdGFydDtcbiAgfVxuXG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gIH1cbn1cblxudmFyIHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPD0gMTE7XG5cbnZhciBldmVudFR5cGVzJDMgPSB7XG4gIHNlbGVjdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25TZWxlY3QnLFxuICAgICAgY2FwdHVyZWQ6ICdvblNlbGVjdENhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDb250ZXh0TWVudScsICd0b3BGb2N1cycsICd0b3BLZXlEb3duJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93bicsICd0b3BNb3VzZVVwJywgJ3RvcFNlbGVjdGlvbkNoYW5nZSddXG4gIH1cbn07XG5cbnZhciBhY3RpdmVFbGVtZW50JDEgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xuXG4vKipcbiAqIEdldCBhbiBvYmplY3Qgd2hpY2ggaXMgYSB1bmlxdWUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBub3QgYmUgY29uc2lzdGVudCBhY3Jvc3Mgbm9kZXMgb3IgYnJvd3NlcnMsIGJ1dFxuICogdHdvIGlkZW50aWNhbCBzZWxlY3Rpb25zIG9uIHRoZSBzYW1lIG5vZGUgd2lsbCByZXR1cm4gaWRlbnRpY2FsIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihub2RlKSB7XG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIG5vZGUgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBub2RlLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZFxuICAgIH07XG4gIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvck5vZGU6IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5mb2N1c09mZnNldFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBQb2xsIHNlbGVjdGlvbiB0byBzZWUgd2hldGhlciBpdCdzIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAvLyBFbnN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgZWxlbWVudCwgYW5kIHRoYXQgdGhlIHVzZXIgaXMgbm90IGRyYWdnaW5nIGFcbiAgLy8gc2VsZWN0aW9uICh0aGlzIG1hdGNoZXMgbmF0aXZlIGBzZWxlY3RgIGV2ZW50IGJlaGF2aW9yKS4gSW4gSFRNTDUsIHNlbGVjdFxuICAvLyBmaXJlcyBvbmx5IG9uIGlucHV0IGFuZCB0ZXh0YXJlYSB0aHVzIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50IHdlXG4gIC8vIHdvbid0IGRpc3BhdGNoLlxuICBpZiAobW91c2VEb3duIHx8IGFjdGl2ZUVsZW1lbnQkMSA9PSBudWxsIHx8IGFjdGl2ZUVsZW1lbnQkMSAhPT0gZ2V0QWN0aXZlRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBPbmx5IGZpcmUgd2hlbiBzZWxlY3Rpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQkMSk7XG4gIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG4gICAgbGFzdFNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb247XG5cbiAgICB2YXIgc3ludGhldGljRXZlbnQgPSBTeW50aGV0aWNFdmVudCQxLmdldFBvb2xlZChldmVudFR5cGVzJDMuc2VsZWN0LCBhY3RpdmVFbGVtZW50SW5zdCQxLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgc3ludGhldGljRXZlbnQudHlwZSA9ICdzZWxlY3QnO1xuICAgIHN5bnRoZXRpY0V2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQkMTtcblxuICAgIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoc3ludGhldGljRXZlbnQpO1xuXG4gICAgcmV0dXJuIHN5bnRoZXRpY0V2ZW50O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25TZWxlY3RgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBzZWxlY3QgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBjb250ZW50RWRpdGFibGVcbiAqXG4gKiBUaGlzIGRpZmZlcnMgZnJvbSBuYXRpdmUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMgaW4gdGhlIGZvbGxvd2luZyB3YXlzOlxuICogLSBGaXJlcyBvbiBjb250ZW50RWRpdGFibGUgZmllbGRzIGFzIHdlbGwgYXMgaW5wdXRzLlxuICogLSBGaXJlcyBmb3IgY29sbGFwc2VkIHNlbGVjdGlvbi5cbiAqIC0gRmlyZXMgYWZ0ZXIgdXNlciBpbnB1dC5cbiAqL1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzJDMsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGRvYyA9IG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXQgPyBuYXRpdmVFdmVudFRhcmdldC5kb2N1bWVudCA6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFID8gbmF0aXZlRXZlbnRUYXJnZXQgOiBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIC8vIFRyYWNrIHdoZXRoZXIgYWxsIGxpc3RlbmVycyBleGlzdHMgZm9yIHRoaXMgcGx1Z2luLiBJZiBub25lIGV4aXN0LCB3ZSBkb1xuICAgIC8vIG5vdCBleHRyYWN0IGV2ZW50cy4gU2VlICMzNjM5LlxuICAgIGlmICghZG9jIHx8ICFpc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzKCdvblNlbGVjdCcsIGRvYykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXROb2RlID0gdGFyZ2V0SW5zdCA/IGdldE5vZGVGcm9tSW5zdGFuY2UkMSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcblxuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cbiAgICAgIGNhc2UgJ3RvcEZvY3VzJzpcbiAgICAgICAgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSB8fCB0YXJnZXROb2RlLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCQxID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCQxID0gdGFyZ2V0SW5zdDtcbiAgICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEJsdXInOlxuICAgICAgICBhY3RpdmVFbGVtZW50JDEgPSBudWxsO1xuICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCQxID0gbnVsbDtcbiAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAgIC8vIHNlbWFudGljcyBvZiB0aGUgbmF0aXZlIHNlbGVjdCBldmVudC5cbiAgICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQ29udGV4dE1lbnUnOlxuICAgICAgY2FzZSAndG9wTW91c2VVcCc6XG4gICAgICAgIG1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIC8vIENocm9tZSBhbmQgSUUgZmlyZSBub24tc3RhbmRhcmQgZXZlbnQgd2hlbiBzZWxlY3Rpb24gaXMgY2hhbmdlZCAoYW5kXG4gICAgICAvLyBzb21ldGltZXMgd2hlbiBpdCBoYXNuJ3QpLiBJRSdzIGV2ZW50IGZpcmVzIG91dCBvZiBvcmRlciB3aXRoIHJlc3BlY3RcbiAgICAgIC8vIHRvIGtleSBhbmQgaW5wdXQgZXZlbnRzIG9uIGRlbGV0aW9uLCBzbyB3ZSBkaXNjYXJkIGl0LlxuICAgICAgLy9cbiAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuICAgICAgLy8gYWZ0ZXIgZWFjaCBrZXkgZW50cnkuIFRoZSBzZWxlY3Rpb24gY2hhbmdlcyBhZnRlciBrZXlkb3duIGFuZCBiZWZvcmVcbiAgICAgIC8vIGtleXVwLCBidXQgd2UgY2hlY2sgb24ga2V5ZG93biBhcyB3ZWxsIGluIHRoZSBjYXNlIG9mIGhvbGRpbmcgZG93biBhXG4gICAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cbiAgICAgIC8vIFRoaXMgaXMgYWxzbyBvdXIgYXBwcm9hY2ggZm9yIElFIGhhbmRsaW5nLCBmb3IgdGhlIHJlYXNvbiBhYm92ZS5cbiAgICAgIGNhc2UgJ3RvcFNlbGVjdGlvbkNoYW5nZSc6XG4gICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSAndG9wS2V5RG93bic6XG4gICAgICBjYXNlICd0b3BLZXlVcCc6XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEluamVjdCBtb2R1bGVzIGZvciByZXNvbHZpbmcgRE9NIGhpZXJhcmNoeSBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICovXG5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihET01FdmVudFBsdWdpbk9yZGVyKTtcbmluamVjdGlvbiQxLmluamVjdENvbXBvbmVudFRyZWUoUmVhY3RET01Db21wb25lbnRUcmVlKTtcblxuLyoqXG4gKiBTb21lIGltcG9ydGFudCBldmVudCBwbHVnaW5zIGluY2x1ZGVkIGJ5IGRlZmF1bHQgKHdpdGhvdXQgaGF2aW5nIHRvIHJlcXVpcmVcbiAqIHRoZW0pLlxuICovXG5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtcbiAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICBFbnRlckxlYXZlRXZlbnRQbHVnaW46IEVudGVyTGVhdmVFdmVudFBsdWdpbixcbiAgQ2hhbmdlRXZlbnRQbHVnaW46IENoYW5nZUV2ZW50UGx1Z2luLFxuICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gIEJlZm9yZUlucHV0RXZlbnRQbHVnaW46IEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cbn0pO1xuXG4vLyBNYXggMzEgYml0IGludGVnZXIuIFRoZSBtYXggaW50ZWdlciBzaXplIGluIFY4IGZvciAzMi1iaXQgc3lzdGVtcy5cbi8vIE1hdGgucG93KDIsIDMwKSAtIDFcbi8vIDBiMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuLy8gVE9ETzogVXNlIGFuIG9wYXF1ZSB0eXBlIG9uY2UgRVNMaW50IGV0IGFsIHN1cHBvcnQgdGhlIHN5bnRheFxuXG5cbnZhciBOb1dvcmsgPSAwO1xudmFyIFN5bmMgPSAxO1xudmFyIE5ldmVyID0gTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG52YXIgVU5JVF9TSVpFID0gMTA7XG52YXIgTUFHSUNfTlVNQkVSX09GRlNFVCA9IDI7XG5cbi8vIDEgdW5pdCBvZiBleHBpcmF0aW9uIHRpbWUgcmVwcmVzZW50cyAxMG1zLlxuZnVuY3Rpb24gbXNUb0V4cGlyYXRpb25UaW1lKG1zKSB7XG4gIC8vIEFsd2F5cyBhZGQgYW4gb2Zmc2V0IHNvIHRoYXQgd2UgZG9uJ3QgY2xhc2ggd2l0aCB0aGUgbWFnaWMgbnVtYmVyIGZvciBOb1dvcmsuXG4gIHJldHVybiAobXMgLyBVTklUX1NJWkUgfCAwKSArIE1BR0lDX05VTUJFUl9PRkZTRVQ7XG59XG5cbmZ1bmN0aW9uIGV4cGlyYXRpb25UaW1lVG9NcyhleHBpcmF0aW9uVGltZSkge1xuICByZXR1cm4gKGV4cGlyYXRpb25UaW1lIC0gTUFHSUNfTlVNQkVSX09GRlNFVCkgKiBVTklUX1NJWkU7XG59XG5cbmZ1bmN0aW9uIGNlaWxpbmcobnVtLCBwcmVjaXNpb24pIHtcbiAgcmV0dXJuICgobnVtIC8gcHJlY2lzaW9uIHwgMCkgKyAxKSAqIHByZWNpc2lvbjtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUV4cGlyYXRpb25CdWNrZXQoY3VycmVudFRpbWUsIGV4cGlyYXRpb25Jbk1zLCBidWNrZXRTaXplTXMpIHtcbiAgcmV0dXJuIGNlaWxpbmcoY3VycmVudFRpbWUgKyBleHBpcmF0aW9uSW5NcyAvIFVOSVRfU0laRSwgYnVja2V0U2l6ZU1zIC8gVU5JVF9TSVpFKTtcbn1cblxudmFyIE5vQ29udGV4dCA9IDA7XG52YXIgQXN5bmNNb2RlID0gMTtcbnZhciBTdHJpY3RNb2RlID0gMjtcblxudmFyIGhhc0JhZE1hcFBvbHlmaWxsID0gdm9pZCAwO1xuXG57XG4gIGhhc0JhZE1hcFBvbHlmaWxsID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG5vbkV4dGVuc2libGVPYmplY3QgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pO1xuICAgIHZhciB0ZXN0TWFwID0gbmV3IE1hcChbW25vbkV4dGVuc2libGVPYmplY3QsIG51bGxdXSk7XG4gICAgdmFyIHRlc3RTZXQgPSBuZXcgU2V0KFtub25FeHRlbnNpYmxlT2JqZWN0XSk7XG4gICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIFJvbGx1cCB0byBub3QgY29uc2lkZXIgdGhlc2UgdW51c2VkLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNzcxXG4gICAgLy8gVE9ETzogd2UgY2FuIHJlbW92ZSB0aGVzZSBpZiBSb2xsdXAgZml4ZXMgdGhlIGJ1Zy5cbiAgICB0ZXN0TWFwLnNldCgwLCAwKTtcbiAgICB0ZXN0U2V0LmFkZCgwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFRPRE86IENvbnNpZGVyIHdhcm5pbmcgYWJvdXQgYmFkIHBvbHlmaWxsc1xuICAgIGhhc0JhZE1hcFBvbHlmaWxsID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBBIEZpYmVyIGlzIHdvcmsgb24gYSBDb21wb25lbnQgdGhhdCBuZWVkcyB0byBiZSBkb25lIG9yIHdhcyBkb25lLiBUaGVyZSBjYW5cbi8vIGJlIG1vcmUgdGhhbiBvbmUgcGVyIGNvbXBvbmVudC5cblxuXG52YXIgZGVidWdDb3VudGVyID0gdm9pZCAwO1xuXG57XG4gIGRlYnVnQ291bnRlciA9IDE7XG59XG5cbmZ1bmN0aW9uIEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIC8vIEluc3RhbmNlXG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy50eXBlID0gbnVsbDtcbiAgdGhpcy5zdGF0ZU5vZGUgPSBudWxsO1xuXG4gIC8vIEZpYmVyXG4gIHRoaXNbJ3JldHVybiddID0gbnVsbDtcbiAgdGhpcy5jaGlsZCA9IG51bGw7XG4gIHRoaXMuc2libGluZyA9IG51bGw7XG4gIHRoaXMuaW5kZXggPSAwO1xuXG4gIHRoaXMucmVmID0gbnVsbDtcblxuICB0aGlzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcbiAgdGhpcy5tZW1vaXplZFByb3BzID0gbnVsbDtcbiAgdGhpcy51cGRhdGVRdWV1ZSA9IG51bGw7XG4gIHRoaXMubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG5cbiAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAvLyBFZmZlY3RzXG4gIHRoaXMuZWZmZWN0VGFnID0gTm9FZmZlY3Q7XG4gIHRoaXMubmV4dEVmZmVjdCA9IG51bGw7XG5cbiAgdGhpcy5maXJzdEVmZmVjdCA9IG51bGw7XG4gIHRoaXMubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgdGhpcy5leHBpcmF0aW9uVGltZSA9IE5vV29yaztcblxuICB0aGlzLmFsdGVybmF0ZSA9IG51bGw7XG5cbiAge1xuICAgIHRoaXMuX2RlYnVnSUQgPSBkZWJ1Z0NvdW50ZXIrKztcbiAgICB0aGlzLl9kZWJ1Z1NvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdPd25lciA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdJc0N1cnJlbnRseVRpbWluZyA9IGZhbHNlO1xuICAgIGlmICghaGFzQmFkTWFwUG9seWZpbGwgJiYgdHlwZW9mIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHRoaXMpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIGlzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIHJhdGhlciB0aGFuIGEgUE9KTyBjb25zdHJ1Y3Rvciwgc3RpbGxcbi8vIHBsZWFzZSBlbnN1cmUgd2UgZG8gdGhlIGZvbGxvd2luZzpcbi8vIDEpIE5vYm9keSBzaG91bGQgYWRkIGFueSBpbnN0YW5jZSBtZXRob2RzIG9uIHRoaXMuIEluc3RhbmNlIG1ldGhvZHMgY2FuIGJlXG4vLyAgICBtb3JlIGRpZmZpY3VsdCB0byBwcmVkaWN0IHdoZW4gdGhleSBnZXQgb3B0aW1pemVkIGFuZCB0aGV5IGFyZSBhbG1vc3Rcbi8vICAgIG5ldmVyIGlubGluZWQgcHJvcGVybHkgaW4gc3RhdGljIGNvbXBpbGVycy5cbi8vIDIpIE5vYm9keSBzaG91bGQgcmVseSBvbiBgaW5zdGFuY2VvZiBGaWJlcmAgZm9yIHR5cGUgdGVzdGluZy4gV2Ugc2hvdWxkXG4vLyAgICBhbHdheXMga25vdyB3aGVuIGl0IGlzIGEgZmliZXIuXG4vLyAzKSBXZSBtaWdodCB3YW50IHRvIGV4cGVyaW1lbnQgd2l0aCB1c2luZyBudW1lcmljIGtleXMgc2luY2UgdGhleSBhcmUgZWFzaWVyXG4vLyAgICB0byBvcHRpbWl6ZSBpbiBhIG5vbi1KSVQgZW52aXJvbm1lbnQuXG4vLyA0KSBXZSBjYW4gZWFzaWx5IGdvIGZyb20gYSBjb25zdHJ1Y3RvciB0byBhIGNyZWF0ZUZpYmVyIG9iamVjdCBsaXRlcmFsIGlmIHRoYXRcbi8vICAgIGlzIGZhc3Rlci5cbi8vIDUpIEl0IHNob3VsZCBiZSBlYXN5IHRvIHBvcnQgdGhpcyB0byBhIEMgc3RydWN0IGFuZCBrZWVwIGEgQyBpbXBsZW1lbnRhdGlvblxuLy8gICAgY29tcGF0aWJsZS5cbnZhciBjcmVhdGVGaWJlciA9IGZ1bmN0aW9uICh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIC8vICRGbG93Rml4TWU6IHRoZSBzaGFwZXMgYXJlIGV4YWN0IGhlcmUgYnV0IEZsb3cgZG9lc24ndCBsaWtlIGNvbnN0cnVjdG9yc1xuICByZXR1cm4gbmV3IEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbn07XG5cbmZ1bmN0aW9uIHNob3VsZENvbnN0cnVjdChDb21wb25lbnQpIHtcbiAgcmV0dXJuICEhKENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuLy8gVGhpcyBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBhbHRlcm5hdGUgZmliZXIgdG8gZG8gd29yayBvbi5cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIHBlbmRpbmdQcm9wcywgZXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIHdvcmtJblByb2dyZXNzID0gY3VycmVudC5hbHRlcm5hdGU7XG4gIGlmICh3b3JrSW5Qcm9ncmVzcyA9PT0gbnVsbCkge1xuICAgIC8vIFdlIHVzZSBhIGRvdWJsZSBidWZmZXJpbmcgcG9vbGluZyB0ZWNobmlxdWUgYmVjYXVzZSB3ZSBrbm93IHRoYXQgd2UnbGxcbiAgICAvLyBvbmx5IGV2ZXIgbmVlZCBhdCBtb3N0IHR3byB2ZXJzaW9ucyBvZiBhIHRyZWUuIFdlIHBvb2wgdGhlIFwib3RoZXJcIiB1bnVzZWRcbiAgICAvLyBub2RlIHRoYXQgd2UncmUgZnJlZSB0byByZXVzZS4gVGhpcyBpcyBsYXppbHkgY3JlYXRlZCB0byBhdm9pZCBhbGxvY2F0aW5nXG4gICAgLy8gZXh0cmEgb2JqZWN0cyBmb3IgdGhpbmdzIHRoYXQgYXJlIG5ldmVyIHVwZGF0ZWQuIEl0IGFsc28gYWxsb3cgdXMgdG9cbiAgICAvLyByZWNsYWltIHRoZSBleHRyYSBtZW1vcnkgaWYgbmVlZGVkLlxuICAgIHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXIoY3VycmVudC50YWcsIHBlbmRpbmdQcm9wcywgY3VycmVudC5rZXksIGN1cnJlbnQubW9kZSk7XG4gICAgd29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50LnN0YXRlTm9kZTtcblxuICAgIHtcbiAgICAgIC8vIERFVi1vbmx5IGZpZWxkc1xuICAgICAgd29ya0luUHJvZ3Jlc3MuX2RlYnVnSUQgPSBjdXJyZW50Ll9kZWJ1Z0lEO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuX2RlYnVnU291cmNlID0gY3VycmVudC5fZGVidWdTb3VyY2U7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5fZGVidWdPd25lciA9IGN1cnJlbnQuX2RlYnVnT3duZXI7XG4gICAgfVxuXG4gICAgd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gY3VycmVudDtcbiAgICBjdXJyZW50LmFsdGVybmF0ZSA9IHdvcmtJblByb2dyZXNzO1xuICB9IGVsc2Uge1xuICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcblxuICAgIC8vIFdlIGFscmVhZHkgaGF2ZSBhbiBhbHRlcm5hdGUuXG4gICAgLy8gUmVzZXQgdGhlIGVmZmVjdCB0YWcuXG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnID0gTm9FZmZlY3Q7XG5cbiAgICAvLyBUaGUgZWZmZWN0IGxpc3QgaXMgbm8gbG9uZ2VyIHZhbGlkLlxuICAgIHdvcmtJblByb2dyZXNzLm5leHRFZmZlY3QgPSBudWxsO1xuICAgIHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0ID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5sYXN0RWZmZWN0ID0gbnVsbDtcbiAgfVxuXG4gIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG5cbiAgLy8gVGhlc2Ugd2lsbCBiZSBvdmVycmlkZGVuIGR1cmluZyB0aGUgcGFyZW50J3MgcmVjb25jaWxpYXRpb25cbiAgd29ya0luUHJvZ3Jlc3Muc2libGluZyA9IGN1cnJlbnQuc2libGluZztcbiAgd29ya0luUHJvZ3Jlc3MuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZjtcblxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhvc3RSb290RmliZXIoaXNBc3luYykge1xuICB2YXIgbW9kZSA9IGlzQXN5bmMgPyBBc3luY01vZGUgfCBTdHJpY3RNb2RlIDogTm9Db250ZXh0O1xuICByZXR1cm4gY3JlYXRlRmliZXIoSG9zdFJvb3QsIG51bGwsIG51bGwsIG1vZGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21FbGVtZW50KGVsZW1lbnQsIG1vZGUsIGV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBvd25lciA9IG51bGw7XG4gIHtcbiAgICBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICB9XG5cbiAgdmFyIGZpYmVyID0gdm9pZCAwO1xuICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcGVuZGluZ1Byb3BzID0gZWxlbWVudC5wcm9wcztcblxuICB2YXIgZmliZXJUYWcgPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZpYmVyVGFnID0gc2hvdWxkQ29uc3RydWN0KHR5cGUpID8gQ2xhc3NDb21wb25lbnQgOiBJbmRldGVybWluYXRlQ29tcG9uZW50O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGZpYmVyVGFnID0gSG9zdENvbXBvbmVudDtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KHBlbmRpbmdQcm9wcy5jaGlsZHJlbiwgbW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSk7XG4gICAgICBjYXNlIFJFQUNUX0FTWU5DX01PREVfVFlQRTpcbiAgICAgICAgZmliZXJUYWcgPSBNb2RlO1xuICAgICAgICBtb2RlIHw9IEFzeW5jTW9kZSB8IFN0cmljdE1vZGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICBmaWJlclRhZyA9IE1vZGU7XG4gICAgICAgIG1vZGUgfD0gU3RyaWN0TW9kZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJFQUNUX0NBTExfVFlQRTpcbiAgICAgICAgZmliZXJUYWcgPSBDYWxsQ29tcG9uZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUkVBQ1RfUkVUVVJOX1RZUEU6XG4gICAgICAgIGZpYmVyVGFnID0gUmV0dXJuQ29tcG9uZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICAgICAgZmliZXJUYWcgPSBDb250ZXh0UHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjb25zdW1lclxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gQ29udGV4dENvbnN1bWVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgICAgZmliZXJUYWcgPSBGb3J3YXJkUmVmO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZS50YWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAvLyBDdXJyZW50bHkgYXNzdW1lZCB0byBiZSBhIGNvbnRpbnVhdGlvbiBhbmQgdGhlcmVmb3JlIGlzIGFcbiAgICAgICAgICAgICAgICAgIC8vIGZpYmVyIGFscmVhZHkuXG4gICAgICAgICAgICAgICAgICAvLyBUT0RPOiBUaGUgeWllbGQgc3lzdGVtIGlzIGN1cnJlbnRseSBicm9rZW4gZm9yIHVwZGF0ZXMgaW5cbiAgICAgICAgICAgICAgICAgIC8vIHNvbWUgY2FzZXMuIFRoZSByZWlmaWVkIHlpZWxkIHN0b3JlcyBhIGZpYmVyLCBidXQgd2UgZG9uJ3RcbiAgICAgICAgICAgICAgICAgIC8vIGtub3cgd2hpY2ggZmliZXIgdGhhdCBpczsgdGhlIGN1cnJlbnQgb3IgYSB3b3JrSW5Qcm9ncmVzcz9cbiAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIGNvbnRpbnVhdGlvbiBnZXRzIHJlbmRlcmVkIGhlcmUgd2UgZG9uJ3Qga25vdyBpZiB3ZVxuICAgICAgICAgICAgICAgICAgLy8gY2FuIHJldXNlIHRoYXQgZmliZXIgb3IgaWYgd2UgbmVlZCB0byBjbG9uZSBpdC4gVGhlcmUgaXNcbiAgICAgICAgICAgICAgICAgIC8vIHByb2JhYmx5IGEgY2xldmVyIHdheSB0byByZXN0cnVjdHVyZSB0aGlzLlxuICAgICAgICAgICAgICAgICAgZmliZXIgPSB0eXBlO1xuICAgICAgICAgICAgICAgICAgZmliZXIucGVuZGluZ1Byb3BzID0gcGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICAgICAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWJlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhyb3dPbkludmFsaWRFbGVtZW50VHlwZSh0eXBlLCBvd25lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvd09uSW52YWxpZEVsZW1lbnRUeXBlKHR5cGUsIG93bmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmaWJlciA9IGNyZWF0ZUZpYmVyKGZpYmVyVGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG4gIGZpYmVyLnR5cGUgPSB0eXBlO1xuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuXG4gIHtcbiAgICBmaWJlci5fZGVidWdTb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG4gICAgZmliZXIuX2RlYnVnT3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgfVxuXG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkludmFsaWRFbGVtZW50VHlwZSh0eXBlLCBvd25lcikge1xuICB2YXIgaW5mbyA9ICcnO1xuICB7XG4gICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGluZm8gKz0gJyBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSAnICsgXCJpdCdzIGRlZmluZWQgaW4sIG9yIHlvdSBtaWdodCBoYXZlIG1peGVkIHVwIGRlZmF1bHQgYW5kIFwiICsgJ25hbWVkIGltcG9ydHMuJztcbiAgICB9XG4gICAgdmFyIG93bmVyTmFtZSA9IG93bmVyID8gZ2V0Q29tcG9uZW50TmFtZShvd25lcikgOiBudWxsO1xuICAgIGlmIChvd25lck5hbWUpIHtcbiAgICAgIGluZm8gKz0gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXJOYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgaW52YXJpYW50KGZhbHNlLCAnRWxlbWVudCB0eXBlIGlzIGludmFsaWQ6IGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGUgPT0gbnVsbCA/IHR5cGUgOiB0eXBlb2YgdHlwZSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGVsZW1lbnRzLCBtb2RlLCBleHBpcmF0aW9uVGltZSwga2V5KSB7XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEZyYWdtZW50LCBlbGVtZW50cywga2V5LCBtb2RlKTtcbiAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UZXh0KGNvbnRlbnQsIG1vZGUsIGV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEhvc3RUZXh0LCBjb250ZW50LCBudWxsLCBtb2RlKTtcbiAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbigpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoSG9zdENvbXBvbmVudCwgbnVsbCwgbnVsbCwgTm9Db250ZXh0KTtcbiAgZmliZXIudHlwZSA9ICdERUxFVEVEJztcbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCBtb2RlLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgcGVuZGluZ1Byb3BzID0gcG9ydGFsLmNoaWxkcmVuICE9PSBudWxsID8gcG9ydGFsLmNoaWxkcmVuIDogW107XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEhvc3RQb3J0YWwsIHBlbmRpbmdQcm9wcywgcG9ydGFsLmtleSwgbW9kZSk7XG4gIGZpYmVyLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBwb3J0YWwuY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsIC8vIFVzZWQgYnkgcGVyc2lzdGVudCB1cGRhdGVzXG4gICAgaW1wbGVtZW50YXRpb246IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICB9O1xuICByZXR1cm4gZmliZXI7XG59XG5cbi8vIFVzZWQgZm9yIHN0YXNoaW5nIFdJUCBwcm9wZXJ0aWVzIHRvIHJlcGxheSBmYWlsZWQgd29yayBpbiBERVYuXG5mdW5jdGlvbiBhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFVih0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBGaWJlcidzIGluaXRpYWwgcHJvcGVydGllcyB3aWxsIGFsd2F5cyBiZSBvdmVyd3JpdHRlbi5cbiAgICAvLyBXZSBvbmx5IHVzZSBhIEZpYmVyIHRvIGVuc3VyZSB0aGUgc2FtZSBoaWRkZW4gY2xhc3Mgc28gREVWIGlzbid0IHNsb3cuXG4gICAgdGFyZ2V0ID0gY3JlYXRlRmliZXIoSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCwgbnVsbCwgbnVsbCwgTm9Db250ZXh0KTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSB3cml0dGVuIGFzIGEgbGlzdCBvZiBhbGwgcHJvcGVydGllcy5cbiAgLy8gV2UgdHJpZWQgdG8gdXNlIE9iamVjdC5hc3NpZ24oKSBpbnN0ZWFkIGJ1dCB0aGlzIGlzIGNhbGxlZCBpblxuICAvLyB0aGUgaG90dGVzdCBwYXRoLCBhbmQgT2JqZWN0LmFzc2lnbigpIHdhcyB0b28gc2xvdzpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMjUwMlxuICAvLyBUaGlzIGNvZGUgaXMgREVWLW9ubHkgc28gc2l6ZSBpcyBub3QgYSBjb25jZXJuLlxuXG4gIHRhcmdldC50YWcgPSBzb3VyY2UudGFnO1xuICB0YXJnZXQua2V5ID0gc291cmNlLmtleTtcbiAgdGFyZ2V0LnR5cGUgPSBzb3VyY2UudHlwZTtcbiAgdGFyZ2V0LnN0YXRlTm9kZSA9IHNvdXJjZS5zdGF0ZU5vZGU7XG4gIHRhcmdldFsncmV0dXJuJ10gPSBzb3VyY2VbJ3JldHVybiddO1xuICB0YXJnZXQuY2hpbGQgPSBzb3VyY2UuY2hpbGQ7XG4gIHRhcmdldC5zaWJsaW5nID0gc291cmNlLnNpYmxpbmc7XG4gIHRhcmdldC5pbmRleCA9IHNvdXJjZS5pbmRleDtcbiAgdGFyZ2V0LnJlZiA9IHNvdXJjZS5yZWY7XG4gIHRhcmdldC5wZW5kaW5nUHJvcHMgPSBzb3VyY2UucGVuZGluZ1Byb3BzO1xuICB0YXJnZXQubWVtb2l6ZWRQcm9wcyA9IHNvdXJjZS5tZW1vaXplZFByb3BzO1xuICB0YXJnZXQudXBkYXRlUXVldWUgPSBzb3VyY2UudXBkYXRlUXVldWU7XG4gIHRhcmdldC5tZW1vaXplZFN0YXRlID0gc291cmNlLm1lbW9pemVkU3RhdGU7XG4gIHRhcmdldC5tb2RlID0gc291cmNlLm1vZGU7XG4gIHRhcmdldC5lZmZlY3RUYWcgPSBzb3VyY2UuZWZmZWN0VGFnO1xuICB0YXJnZXQubmV4dEVmZmVjdCA9IHNvdXJjZS5uZXh0RWZmZWN0O1xuICB0YXJnZXQuZmlyc3RFZmZlY3QgPSBzb3VyY2UuZmlyc3RFZmZlY3Q7XG4gIHRhcmdldC5sYXN0RWZmZWN0ID0gc291cmNlLmxhc3RFZmZlY3Q7XG4gIHRhcmdldC5leHBpcmF0aW9uVGltZSA9IHNvdXJjZS5leHBpcmF0aW9uVGltZTtcbiAgdGFyZ2V0LmFsdGVybmF0ZSA9IHNvdXJjZS5hbHRlcm5hdGU7XG4gIHRhcmdldC5fZGVidWdJRCA9IHNvdXJjZS5fZGVidWdJRDtcbiAgdGFyZ2V0Ll9kZWJ1Z1NvdXJjZSA9IHNvdXJjZS5fZGVidWdTb3VyY2U7XG4gIHRhcmdldC5fZGVidWdPd25lciA9IHNvdXJjZS5fZGVidWdPd25lcjtcbiAgdGFyZ2V0Ll9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gc291cmNlLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vLyBUT0RPOiBUaGlzIHNob3VsZCBiZSBsaWZ0ZWQgaW50byB0aGUgcmVuZGVyZXIuXG5cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJSb290KGNvbnRhaW5lckluZm8sIGlzQXN5bmMsIGh5ZHJhdGUpIHtcbiAgLy8gQ3ljbGljIGNvbnN0cnVjdGlvbi4gVGhpcyBjaGVhdHMgdGhlIHR5cGUgc3lzdGVtIHJpZ2h0IG5vdyBiZWNhdXNlXG4gIC8vIHN0YXRlTm9kZSBpcyBhbnkuXG4gIHZhciB1bmluaXRpYWxpemVkRmliZXIgPSBjcmVhdGVIb3N0Um9vdEZpYmVyKGlzQXN5bmMpO1xuICB2YXIgcm9vdCA9IHtcbiAgICBjdXJyZW50OiB1bmluaXRpYWxpemVkRmliZXIsXG4gICAgY29udGFpbmVySW5mbzogY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsXG4gICAgcGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOiBOb1dvcmssXG4gICAgZmluaXNoZWRXb3JrOiBudWxsLFxuICAgIGNvbnRleHQ6IG51bGwsXG4gICAgcGVuZGluZ0NvbnRleHQ6IG51bGwsXG4gICAgaHlkcmF0ZTogaHlkcmF0ZSxcbiAgICByZW1haW5pbmdFeHBpcmF0aW9uVGltZTogTm9Xb3JrLFxuICAgIGZpcnN0QmF0Y2g6IG51bGwsXG4gICAgbmV4dFNjaGVkdWxlZFJvb3Q6IG51bGxcbiAgfTtcbiAgdW5pbml0aWFsaXplZEZpYmVyLnN0YXRlTm9kZSA9IHJvb3Q7XG4gIHJldHVybiByb290O1xufVxuXG52YXIgb25Db21taXRGaWJlclJvb3QgPSBudWxsO1xudmFyIG9uQ29tbWl0RmliZXJVbm1vdW50ID0gbnVsbDtcbnZhciBoYXNMb2dnZWRFcnJvciA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjYXRjaEVycm9ycyhmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oYXJnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmICh0cnVlICYmICFoYXNMb2dnZWRFcnJvcikge1xuICAgICAgICBoYXNMb2dnZWRFcnJvciA9IHRydWU7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdSZWFjdCBEZXZUb29scyBlbmNvdW50ZXJlZCBhbiBlcnJvcjogJXMnLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0SW50ZXJuYWxzKGludGVybmFscykge1xuICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBObyBEZXZUb29sc1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaG9vayA9IF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcbiAgaWYgKGhvb2suaXNEaXNhYmxlZCkge1xuICAgIC8vIFRoaXMgaXNuJ3QgYSByZWFsIHByb3BlcnR5IG9uIHRoZSBob29rLCBidXQgaXQgY2FuIGJlIHNldCB0byBvcHQgb3V0XG4gICAgLy8gb2YgRGV2VG9vbHMgaW50ZWdyYXRpb24gYW5kIGFzc29jaWF0ZWQgd2FybmluZ3MgYW5kIGxvZ3MuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zODc3XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFob29rLnN1cHBvcnRzRmliZXIpIHtcbiAgICB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIGluc3RhbGxlZCB2ZXJzaW9uIG9mIFJlYWN0IERldlRvb2xzIGlzIHRvbyBvbGQgYW5kIHdpbGwgbm90IHdvcmsgJyArICd3aXRoIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgUmVhY3QuIFBsZWFzZSB1cGRhdGUgUmVhY3QgRGV2VG9vbHMuICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29scycpO1xuICAgIH1cbiAgICAvLyBEZXZUb29scyBleGlzdHMsIGV2ZW4gdGhvdWdoIGl0IGRvZXNuJ3Qgc3VwcG9ydCBGaWJlci5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB0cnkge1xuICAgIHZhciByZW5kZXJlcklEID0gaG9vay5pbmplY3QoaW50ZXJuYWxzKTtcbiAgICAvLyBXZSBoYXZlIHN1Y2Nlc3NmdWxseSBpbmplY3RlZCwgc28gbm93IGl0IGlzIHNhZmUgdG8gc2V0IHVwIGhvb2tzLlxuICAgIG9uQ29tbWl0RmliZXJSb290ID0gY2F0Y2hFcnJvcnMoZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgIHJldHVybiBob29rLm9uQ29tbWl0RmliZXJSb290KHJlbmRlcmVySUQsIHJvb3QpO1xuICAgIH0pO1xuICAgIG9uQ29tbWl0RmliZXJVbm1vdW50ID0gY2F0Y2hFcnJvcnMoZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICByZXR1cm4gaG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudChyZW5kZXJlcklELCBmaWJlcik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIENhdGNoIGFsbCBlcnJvcnMgYmVjYXVzZSBpdCBpcyB1bnNhZmUgdG8gdGhyb3cgZHVyaW5nIGluaXRpYWxpemF0aW9uLlxuICAgIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdSZWFjdCBEZXZUb29scyBlbmNvdW50ZXJlZCBhbiBlcnJvcjogJXMuJywgZXJyKTtcbiAgICB9XG4gIH1cbiAgLy8gRGV2VG9vbHMgZXhpc3RzXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbW1pdFJvb3Qocm9vdCkge1xuICBpZiAodHlwZW9mIG9uQ29tbWl0RmliZXJSb290ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb25Db21taXRGaWJlclJvb3Qocm9vdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Db21taXRVbm1vdW50KGZpYmVyKSB7XG4gIGlmICh0eXBlb2Ygb25Db21taXRGaWJlclVubW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvbkNvbW1pdEZpYmVyVW5tb3VudChmaWJlcik7XG4gIH1cbn1cblxuLyoqXG4gKiBGb3JrZWQgZnJvbSBmYmpzL3dhcm5pbmc6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2U2NmJhMjBhZDViZTQzM2ViNTQ0MjNmMmIwOTdkODI5MzI0ZDlkZTYvcGFja2FnZXMvZmJqcy9zcmMvX19mb3Jrc19fL3dhcm5pbmcuanNcbiAqXG4gKiBPbmx5IGNoYW5nZSBpcyB3ZSB1c2UgY29uc29sZS53YXJuIGluc3RlYWQgb2YgY29uc29sZS5lcnJvcixcbiAqIGFuZCBkbyBub3RoaW5nIHdoZW4gJ2NvbnNvbGUnIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKiBUaGlzIHJlYWxseSBzaW1wbGlmaWVzIHRoZSBjb2RlLlxuICogLS0tXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIGxvd1ByaW9yaXR5V2FybmluZyA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9O1xuXG4gIGxvd1ByaW9yaXR5V2FybmluZyA9IGZ1bmN0aW9uIChjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmckMSA9IGxvd1ByaW9yaXR5V2FybmluZztcblxudmFyIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzID0ge1xuICBkaXNjYXJkUGVuZGluZ1dhcm5pbmdzOiBmdW5jdGlvbiAoKSB7fSxcbiAgZmx1c2hQZW5kaW5nRGVwcmVjYXRpb25XYXJuaW5nczogZnVuY3Rpb24gKCkge30sXG4gIGZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzOiBmdW5jdGlvbiAoKSB7fSxcbiAgcmVjb3JkRGVwcmVjYXRpb25XYXJuaW5nczogZnVuY3Rpb24gKGZpYmVyLCBpbnN0YW5jZSkge30sXG4gIHJlY29yZFVuc2FmZUxpZmVjeWNsZVdhcm5pbmdzOiBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7fVxufTtcblxue1xuICB2YXIgTElGRUNZQ0xFX1NVR0dFU1RJT05TID0ge1xuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQ6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6ICdzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZTogJ2NvbXBvbmVudERpZFVwZGF0ZSdcbiAgfTtcblxuICB2YXIgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzID0gW107XG4gIHZhciBwZW5kaW5nQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzID0gW107XG4gIHZhciBwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzID0gW107XG4gIHZhciBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MgPSBuZXcgTWFwKCk7XG5cbiAgLy8gVHJhY2tzIGNvbXBvbmVudHMgd2UgaGF2ZSBhbHJlYWR5IHdhcm5lZCBhYm91dC5cbiAgdmFyIGRpZFdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzID0gbmV3IFNldCgpO1xuICB2YXIgZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcyA9IG5ldyBTZXQoKTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5kaXNjYXJkUGVuZGluZ1dhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MgPSBbXTtcbiAgICBwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzID0gW107XG4gICAgcGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gbmV3IE1hcCgpO1xuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIHBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChsaWZlY3ljbGVXYXJuaW5nc01hcCwgc3RyaWN0Um9vdCkge1xuICAgICAgdmFyIGxpZmVjeWNsZXNXYXJuaW5nTWVzYWdlcyA9IFtdO1xuXG4gICAgICBPYmplY3Qua2V5cyhsaWZlY3ljbGVXYXJuaW5nc01hcCkuZm9yRWFjaChmdW5jdGlvbiAobGlmZWN5Y2xlKSB7XG4gICAgICAgIHZhciBsaWZlY3ljbGVXYXJuaW5ncyA9IGxpZmVjeWNsZVdhcm5pbmdzTWFwW2xpZmVjeWNsZV07XG4gICAgICAgIGlmIChsaWZlY3ljbGVXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGNvbXBvbmVudE5hbWVzID0gbmV3IFNldCgpO1xuICAgICAgICAgIGxpZmVjeWNsZVdhcm5pbmdzLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICAgICAgICBjb21wb25lbnROYW1lcy5hZGQoZ2V0Q29tcG9uZW50TmFtZShmaWJlcikgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICAgICAgZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcy5hZGQoZmliZXIudHlwZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgZm9ybWF0dGVkID0gbGlmZWN5Y2xlLnJlcGxhY2UoJ1VOU0FGRV8nLCAnJyk7XG4gICAgICAgICAgdmFyIHN1Z2dlc3Rpb24gPSBMSUZFQ1lDTEVfU1VHR0VTVElPTlNbbGlmZWN5Y2xlXTtcbiAgICAgICAgICB2YXIgc29ydGVkQ29tcG9uZW50TmFtZXMgPSBBcnJheS5mcm9tKGNvbXBvbmVudE5hbWVzKS5zb3J0KCkuam9pbignLCAnKTtcblxuICAgICAgICAgIGxpZmVjeWNsZXNXYXJuaW5nTWVzYWdlcy5wdXNoKGZvcm1hdHRlZCArICc6IFBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzIHRvIHVzZSAnICsgKHN1Z2dlc3Rpb24gKyAnIGluc3RlYWQ6ICcgKyBzb3J0ZWRDb21wb25lbnROYW1lcykpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGxpZmVjeWNsZXNXYXJuaW5nTWVzYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBzdHJpY3RSb290Q29tcG9uZW50U3RhY2sgPSBnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyKHN0cmljdFJvb3QpO1xuXG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdVbnNhZmUgbGlmZWN5Y2xlIG1ldGhvZHMgd2VyZSBmb3VuZCB3aXRoaW4gYSBzdHJpY3QtbW9kZSB0cmVlOiVzJyArICdcXG5cXG4lcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTonICsgJ1xcbmh0dHBzOi8vZmIubWUvcmVhY3Qtc3RyaWN0LW1vZGUtd2FybmluZ3MnLCBzdHJpY3RSb290Q29tcG9uZW50U3RhY2ssIGxpZmVjeWNsZXNXYXJuaW5nTWVzYWdlcy5qb2luKCdcXG5cXG4nKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MgPSBuZXcgTWFwKCk7XG4gIH07XG5cbiAgdmFyIGdldFN0cmljdFJvb3QgPSBmdW5jdGlvbiAoZmliZXIpIHtcbiAgICB2YXIgbWF5YmVTdHJpY3RSb290ID0gbnVsbDtcblxuICAgIHdoaWxlIChmaWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGZpYmVyLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgIG1heWJlU3RyaWN0Um9vdCA9IGZpYmVyO1xuICAgICAgfVxuXG4gICAgICBmaWJlciA9IGZpYmVyWydyZXR1cm4nXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF5YmVTdHJpY3RSb290O1xuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoUGVuZGluZ0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdW5pcXVlTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgdW5pcXVlTmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWUoZmliZXIpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBzb3J0ZWROYW1lcyA9IEFycmF5LmZyb20odW5pcXVlTmFtZXMpLnNvcnQoKS5qb2luKCcsICcpO1xuXG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ2NvbXBvbmVudFdpbGxNb3VudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi4gJyArICdVc2UgY29tcG9uZW50RGlkTW91bnQgaW5zdGVhZC4gQXMgYSB0ZW1wb3Jhcnkgd29ya2Fyb3VuZCwgJyArICd5b3UgY2FuIHJlbmFtZSB0byBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50LicgKyAnXFxuXFxuUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6ICVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOicgKyAnXFxuaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJywgc29ydGVkTmFtZXMpO1xuXG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAocGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgX3VuaXF1ZU5hbWVzID0gbmV3IFNldCgpO1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChmaWJlcikge1xuICAgICAgICBfdW5pcXVlTmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWUoZmliZXIpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBfc29ydGVkTmFtZXMgPSBBcnJheS5mcm9tKF91bmlxdWVOYW1lcykuc29ydCgpLmpvaW4oJywgJyk7XG5cbiAgICAgIGxvd1ByaW9yaXR5V2FybmluZyQxKGZhbHNlLCAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi4gJyArICdVc2Ugc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyBpbnN0ZWFkLicgKyAnXFxuXFxuUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6ICVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOicgKyAnXFxuaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJywgX3NvcnRlZE5hbWVzKTtcblxuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyA9IFtdO1xuICAgIH1cblxuICAgIGlmIChwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBfdW5pcXVlTmFtZXMyID0gbmV3IFNldCgpO1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxVcGRhdGVXYXJuaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChmaWJlcikge1xuICAgICAgICBfdW5pcXVlTmFtZXMyLmFkZChnZXRDb21wb25lbnROYW1lKGZpYmVyKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICAgIGRpZFdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzLmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3NvcnRlZE5hbWVzMiA9IEFycmF5LmZyb20oX3VuaXF1ZU5hbWVzMikuc29ydCgpLmpvaW4oJywgJyk7XG5cbiAgICAgIGxvd1ByaW9yaXR5V2FybmluZyQxKGZhbHNlLCAnY29tcG9uZW50V2lsbFVwZGF0ZSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi4gJyArICdVc2UgY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuIEFzIGEgdGVtcG9yYXJ5IHdvcmthcm91bmQsICcgKyAneW91IGNhbiByZW5hbWUgdG8gVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUuJyArICdcXG5cXG5QbGVhc2UgdXBkYXRlIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czogJXMnICsgJ1xcblxcbkxlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnLCBfc29ydGVkTmFtZXMyKTtcblxuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxVcGRhdGVXYXJuaW5ncyA9IFtdO1xuICAgIH1cbiAgfTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5yZWNvcmREZXByZWNhdGlvbldhcm5pbmdzID0gZnVuY3Rpb24gKGZpYmVyLCBpbnN0YW5jZSkge1xuICAgIC8vIERlZHVwIHN0cmF0ZWd5OiBXYXJuIG9uY2UgcGVyIGNvbXBvbmVudC5cbiAgICBpZiAoZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMuaGFzKGZpYmVyLnR5cGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG9uJ3Qgd2FybiBhYm91dCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicgJiYgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncy5wdXNoKGZpYmVyKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSkge1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncy5wdXNoKGZpYmVyKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSkge1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxVcGRhdGVXYXJuaW5ncy5wdXNoKGZpYmVyKTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MgPSBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7XG4gICAgdmFyIHN0cmljdFJvb3QgPSBnZXRTdHJpY3RSb290KGZpYmVyKTtcblxuICAgIC8vIERlZHVwIHN0cmF0ZWd5OiBXYXJuIG9uY2UgcGVyIGNvbXBvbmVudC5cbiAgICAvLyBUaGlzIGlzIGRpZmZpY3VsdCB0byB0cmFjayBhbnkgb3RoZXIgd2F5IHNpbmNlIGNvbXBvbmVudCBuYW1lc1xuICAgIC8vIGFyZSBvZnRlbiB2YWd1ZSBhbmQgYXJlIGxpa2VseSB0byBjb2xsaWRlIGJldHdlZW4gM3JkIHBhcnR5IGxpYnJhcmllcy5cbiAgICAvLyBBbiBleHBhbmQgcHJvcGVydHkgaXMgcHJvYmFibHkgb2theSB0byB1c2UgaGVyZSBzaW5jZSBpdCdzIERFVi1vbmx5LFxuICAgIC8vIGFuZCB3aWxsIG9ubHkgYmUgc2V0IGluIHRoZSBldmVudCBvZiBzZXJpb3VzIHdhcm5pbmdzLlxuICAgIGlmIChkaWRXYXJuQWJvdXRVbnNhZmVMaWZlY3ljbGVzLmhhcyhmaWJlci50eXBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERvbid0IHdhcm4gYWJvdXQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBjb21wb25lbnRzLlxuICAgIC8vIE5vdGUgdGhhdCBpdCBpcyBzdWZmaWNpZW50IHRvIGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHNpbmdsZSBsaWZlY3ljbGUsIGNvbXBvbmVudFdpbGxNb3VudCwgd2l0aCB0aGUgcG9seWZpbGwgZmxhZy5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB3YXJuaW5nc0ZvclJvb3QgPSB2b2lkIDA7XG4gICAgaWYgKCFwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MuaGFzKHN0cmljdFJvb3QpKSB7XG4gICAgICB3YXJuaW5nc0ZvclJvb3QgPSB7XG4gICAgICAgIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQ6IFtdLFxuICAgICAgICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogW10sXG4gICAgICAgIFVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlOiBbXVxuICAgICAgfTtcblxuICAgICAgcGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzLnNldChzdHJpY3RSb290LCB3YXJuaW5nc0ZvclJvb3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nc0ZvclJvb3QgPSBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MuZ2V0KHN0cmljdFJvb3QpO1xuICAgIH1cblxuICAgIHZhciB1bnNhZmVMaWZlY3ljbGVzID0gW107XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHVuc2FmZUxpZmVjeWNsZXMucHVzaCgnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB1bnNhZmVMaWZlY3ljbGVzLnB1c2goJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHVuc2FmZUxpZmVjeWNsZXMucHVzaCgnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnKTtcbiAgICB9XG5cbiAgICBpZiAodW5zYWZlTGlmZWN5Y2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICB1bnNhZmVMaWZlY3ljbGVzLmZvckVhY2goZnVuY3Rpb24gKGxpZmVjeWNsZSkge1xuICAgICAgICB3YXJuaW5nc0ZvclJvb3RbbGlmZWN5Y2xlXS5wdXNoKGZpYmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gRXhwb3J0cyBSZWFjdERPTS5jcmVhdGVSb290XG52YXIgZW5hYmxlVXNlclRpbWluZ0FQSSA9IHRydWU7XG5cbi8vIE11dGF0aW5nIG1vZGUgKFJlYWN0IERPTSwgUmVhY3QgQVJULCBSZWFjdCBOYXRpdmUpOlxudmFyIGVuYWJsZU11dGF0aW5nUmVjb25jaWxlciA9IHRydWU7XG4vLyBFeHBlcmltZW50YWwgbm9vcCBtb2RlIChjdXJyZW50bHkgdW51c2VkKTpcbnZhciBlbmFibGVOb29wUmVjb25jaWxlciA9IGZhbHNlO1xuLy8gRXhwZXJpbWVudGFsIHBlcnNpc3RlbnQgbW9kZSAoRmFicmljKTpcbnZhciBlbmFibGVQZXJzaXN0ZW50UmVjb25jaWxlciA9IGZhbHNlO1xuLy8gRXhwZXJpbWVudGFsIGVycm9yLWJvdW5kYXJ5IEFQSSB0aGF0IGNhbiByZWNvdmVyIGZyb20gZXJyb3JzIHdpdGhpbiBhIHNpbmdsZVxuLy8gcmVuZGVyIHBoYXNlXG52YXIgZW5hYmxlR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoID0gZmFsc2U7XG4vLyBIZWxwcyBpZGVudGlmeSBzaWRlIGVmZmVjdHMgaW4gYmVnaW4tcGhhc2UgbGlmZWN5Y2xlIGhvb2tzIGFuZCBzZXRTdGF0ZSByZWR1Y2VyczpcbnZhciBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMgPSBmYWxzZTtcblxuLy8gSW4gc29tZSBjYXNlcywgU3RyaWN0TW9kZSBzaG91bGQgYWxzbyBkb3VibGUtcmVuZGVyIGxpZmVjeWNsZXMuXG4vLyBUaGlzIGNhbiBiZSBjb25mdXNpbmcgZm9yIHRlc3RzIHRob3VnaCxcbi8vIEFuZCBpdCBjYW4gYmUgYmFkIGZvciBwZXJmb3JtYW5jZSBpbiBwcm9kdWN0aW9uLlxuLy8gVGhpcyBmZWF0dXJlIGZsYWcgY2FuIGJlIHVzZWQgdG8gY29udHJvbCB0aGUgYmVoYXZpb3I6XG52YXIgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSA9IHRydWU7XG5cbi8vIFRvIHByZXNlcnZlIHRoZSBcIlBhdXNlIG9uIGNhdWdodCBleGNlcHRpb25zXCIgYmVoYXZpb3Igb2YgdGhlIGRlYnVnZ2VyLCB3ZVxuLy8gcmVwbGF5IHRoZSBiZWdpbiBwaGFzZSBvZiBhIGZhaWxlZCBjb21wb25lbnQgaW5zaWRlIGludm9rZUd1YXJkZWRDYWxsYmFjay5cbnZhciByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjayA9IHRydWU7XG5cbi8vIFdhcm4gYWJvdXQgZGVwcmVjYXRlZCwgYXN5bmMtdW5zYWZlIGxpZmVjeWNsZXM7IHJlbGF0ZXMgdG8gUkZDICM2OlxudmFyIHdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzID0gZmFsc2U7XG5cbnZhciBhbHdheXNVc2VSZXF1ZXN0SWRsZUNhbGxiYWNrUG9seWZpbGwgPSBmYWxzZTtcblxuLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG5cbi8vIFByZWZpeCBtZWFzdXJlbWVudHMgc28gdGhhdCBpdCdzIHBvc3NpYmxlIHRvIGZpbHRlciB0aGVtLlxuLy8gTG9uZ2VyIHByZWZpeGVzIGFyZSBoYXJkIHRvIHJlYWQgaW4gRGV2VG9vbHMuXG52YXIgcmVhY3RFbW9qaSA9ICdcXHUyNjlCJztcbnZhciB3YXJuaW5nRW1vamkgPSAnXFx1MjZENCc7XG52YXIgc3VwcG9ydHNVc2VyVGltaW5nID0gdHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2UubWFyayA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2UubWVhc3VyZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNZWFzdXJlcyA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gS2VlcCB0cmFjayBvZiBjdXJyZW50IGZpYmVyIHNvIHRoYXQgd2Uga25vdyB0aGUgcGF0aCB0byB1bndpbmQgb24gcGF1c2UuXG4vLyBUT0RPOiB0aGlzIGxvb2tzIHRoZSBzYW1lIGFzIG5leHRVbml0T2ZXb3JrIGluIHNjaGVkdWxlci4gQ2FuIHdlIHVuaWZ5IHRoZW0/XG52YXIgY3VycmVudEZpYmVyID0gbnVsbDtcbi8vIElmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgdXNlciBjb2RlLCB3aGljaCBmaWJlciBhbmQgbWV0aG9kIGlzIGl0P1xuLy8gUmV1c2luZyBgY3VycmVudEZpYmVyYCB3b3VsZCBiZSBjb25mdXNpbmcgZm9yIHRoaXMgYmVjYXVzZSB1c2VyIGNvZGUgZmliZXJcbi8vIGNhbiBjaGFuZ2UgZHVyaW5nIGNvbW1pdCBwaGFzZSB0b28sIGJ1dCB3ZSBkb24ndCBuZWVkIHRvIHVud2luZCBpdCAoc2luY2Vcbi8vIGxpZmVjeWNsZXMgaW4gdGhlIGNvbW1pdCBwaGFzZSBkb24ndCByZXNlbWJsZSBhIHRyZWUpLlxudmFyIGN1cnJlbnRQaGFzZSA9IG51bGw7XG52YXIgY3VycmVudFBoYXNlRmliZXIgPSBudWxsO1xuLy8gRGlkIGxpZmVjeWNsZSBob29rIHNjaGVkdWxlIGFuIHVwZGF0ZT8gVGhpcyBpcyBvZnRlbiBhIHBlcmZvcm1hbmNlIHByb2JsZW0sXG4vLyBzbyB3ZSB3aWxsIGtlZXAgdHJhY2sgb2YgaXQsIGFuZCBpbmNsdWRlIGl0IGluIHRoZSByZXBvcnQuXG4vLyBUcmFjayBjb21taXRzIGNhdXNlZCBieSBjYXNjYWRpbmcgdXBkYXRlcy5cbnZhciBpc0NvbW1pdHRpbmcgPSBmYWxzZTtcbnZhciBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQgPSBmYWxzZTtcbnZhciBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA9IGZhbHNlO1xudmFyIGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPSAwO1xudmFyIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbnZhciBpc1dhaXRpbmdGb3JDYWxsYmFjayA9IGZhbHNlO1xuLy8gRHVyaW5nIGNvbW1pdHMsIHdlIG9ubHkgc2hvdyBhIG1lYXN1cmVtZW50IG9uY2UgcGVyIG1ldGhvZCBuYW1lXG4vLyB0byBhdm9pZCBzdHJldGNoIHRoZSBjb21taXQgcGhhc2Ugd2l0aCBtZWFzdXJlbWVudCBvdmVyaGVhZC5cbnZhciBsYWJlbHNJbkN1cnJlbnRDb21taXQgPSBuZXcgU2V0KCk7XG5cbnZhciBmb3JtYXRNYXJrTmFtZSA9IGZ1bmN0aW9uIChtYXJrTmFtZSkge1xuICByZXR1cm4gcmVhY3RFbW9qaSArICcgJyArIG1hcmtOYW1lO1xufTtcblxudmFyIGZvcm1hdExhYmVsID0gZnVuY3Rpb24gKGxhYmVsLCB3YXJuaW5nJCQxKSB7XG4gIHZhciBwcmVmaXggPSB3YXJuaW5nJCQxID8gd2FybmluZ0Vtb2ppICsgJyAnIDogcmVhY3RFbW9qaSArICcgJztcbiAgdmFyIHN1ZmZpeCA9IHdhcm5pbmckJDEgPyAnIFdhcm5pbmc6ICcgKyB3YXJuaW5nJCQxIDogJyc7XG4gIHJldHVybiAnJyArIHByZWZpeCArIGxhYmVsICsgc3VmZml4O1xufTtcblxudmFyIGJlZ2luTWFyayA9IGZ1bmN0aW9uIChtYXJrTmFtZSkge1xuICBwZXJmb3JtYW5jZS5tYXJrKGZvcm1hdE1hcmtOYW1lKG1hcmtOYW1lKSk7XG59O1xuXG52YXIgY2xlYXJNYXJrID0gZnVuY3Rpb24gKG1hcmtOYW1lKSB7XG4gIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoZm9ybWF0TWFya05hbWUobWFya05hbWUpKTtcbn07XG5cbnZhciBlbmRNYXJrID0gZnVuY3Rpb24gKGxhYmVsLCBtYXJrTmFtZSwgd2FybmluZyQkMSkge1xuICB2YXIgZm9ybWF0dGVkTWFya05hbWUgPSBmb3JtYXRNYXJrTmFtZShtYXJrTmFtZSk7XG4gIHZhciBmb3JtYXR0ZWRMYWJlbCA9IGZvcm1hdExhYmVsKGxhYmVsLCB3YXJuaW5nJCQxKTtcbiAgdHJ5IHtcbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKGZvcm1hdHRlZExhYmVsLCBmb3JtYXR0ZWRNYXJrTmFtZSk7XG4gIH0gY2F0Y2ggKGVycikge31cbiAgLy8gSWYgcHJldmlvdXMgbWFyayB3YXMgbWlzc2luZyBmb3Igc29tZSByZWFzb24sIHRoaXMgd2lsbCB0aHJvdy5cbiAgLy8gVGhpcyBjb3VsZCBvbmx5IGhhcHBlbiBpZiBSZWFjdCBjcmFzaGVkIGluIGFuIHVuZXhwZWN0ZWQgcGxhY2UgZWFybGllci5cbiAgLy8gRG9uJ3QgcGlsZSBvbiB3aXRoIG1vcmUgZXJyb3JzLlxuXG4gIC8vIENsZWFyIG1hcmtzIGltbWVkaWF0ZWx5IHRvIGF2b2lkIGdyb3dpbmcgYnVmZmVyLlxuICBwZXJmb3JtYW5jZS5jbGVhck1hcmtzKGZvcm1hdHRlZE1hcmtOYW1lKTtcbiAgcGVyZm9ybWFuY2UuY2xlYXJNZWFzdXJlcyhmb3JtYXR0ZWRMYWJlbCk7XG59O1xuXG52YXIgZ2V0RmliZXJNYXJrTmFtZSA9IGZ1bmN0aW9uIChsYWJlbCwgZGVidWdJRCkge1xuICByZXR1cm4gbGFiZWwgKyAnICgjJyArIGRlYnVnSUQgKyAnKSc7XG59O1xuXG52YXIgZ2V0RmliZXJMYWJlbCA9IGZ1bmN0aW9uIChjb21wb25lbnROYW1lLCBpc01vdW50ZWQsIHBoYXNlKSB7XG4gIGlmIChwaGFzZSA9PT0gbnVsbCkge1xuICAgIC8vIFRoZXNlIGFyZSBjb21wb3NpdGUgY29tcG9uZW50IHRvdGFsIHRpbWUgbWVhc3VyZW1lbnRzLlxuICAgIHJldHVybiBjb21wb25lbnROYW1lICsgJyBbJyArIChpc01vdW50ZWQgPyAndXBkYXRlJyA6ICdtb3VudCcpICsgJ10nO1xuICB9IGVsc2Uge1xuICAgIC8vIENvbXBvc2l0ZSBjb21wb25lbnQgbWV0aG9kcy5cbiAgICByZXR1cm4gY29tcG9uZW50TmFtZSArICcuJyArIHBoYXNlO1xuICB9XG59O1xuXG52YXIgYmVnaW5GaWJlck1hcmsgPSBmdW5jdGlvbiAoZmliZXIsIHBoYXNlKSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShmaWJlcikgfHwgJ1Vua25vd24nO1xuICB2YXIgZGVidWdJRCA9IGZpYmVyLl9kZWJ1Z0lEO1xuICB2YXIgaXNNb3VudGVkID0gZmliZXIuYWx0ZXJuYXRlICE9PSBudWxsO1xuICB2YXIgbGFiZWwgPSBnZXRGaWJlckxhYmVsKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpO1xuXG4gIGlmIChpc0NvbW1pdHRpbmcgJiYgbGFiZWxzSW5DdXJyZW50Q29tbWl0LmhhcyhsYWJlbCkpIHtcbiAgICAvLyBEdXJpbmcgdGhlIGNvbW1pdCBwaGFzZSwgd2UgZG9uJ3Qgc2hvdyBkdXBsaWNhdGUgbGFiZWxzIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBhIGZpeGVkIG92ZXJoZWFkIGZvciBldmVyeSBtZWFzdXJlbWVudCwgYW5kIHdlIGRvbid0XG4gICAgLy8gd2FudCB0byBzdHJldGNoIHRoZSBjb21taXQgcGhhc2UgYmV5b25kIG5lY2Vzc2FyeS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGFiZWxzSW5DdXJyZW50Q29tbWl0LmFkZChsYWJlbCk7XG5cbiAgdmFyIG1hcmtOYW1lID0gZ2V0RmliZXJNYXJrTmFtZShsYWJlbCwgZGVidWdJRCk7XG4gIGJlZ2luTWFyayhtYXJrTmFtZSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxudmFyIGNsZWFyRmliZXJNYXJrID0gZnVuY3Rpb24gKGZpYmVyLCBwaGFzZSkge1xuICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIpIHx8ICdVbmtub3duJztcbiAgdmFyIGRlYnVnSUQgPSBmaWJlci5fZGVidWdJRDtcbiAgdmFyIGlzTW91bnRlZCA9IGZpYmVyLmFsdGVybmF0ZSAhPT0gbnVsbDtcbiAgdmFyIGxhYmVsID0gZ2V0RmliZXJMYWJlbChjb21wb25lbnROYW1lLCBpc01vdW50ZWQsIHBoYXNlKTtcbiAgdmFyIG1hcmtOYW1lID0gZ2V0RmliZXJNYXJrTmFtZShsYWJlbCwgZGVidWdJRCk7XG4gIGNsZWFyTWFyayhtYXJrTmFtZSk7XG59O1xuXG52YXIgZW5kRmliZXJNYXJrID0gZnVuY3Rpb24gKGZpYmVyLCBwaGFzZSwgd2FybmluZyQkMSkge1xuICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIpIHx8ICdVbmtub3duJztcbiAgdmFyIGRlYnVnSUQgPSBmaWJlci5fZGVidWdJRDtcbiAgdmFyIGlzTW91bnRlZCA9IGZpYmVyLmFsdGVybmF0ZSAhPT0gbnVsbDtcbiAgdmFyIGxhYmVsID0gZ2V0RmliZXJMYWJlbChjb21wb25lbnROYW1lLCBpc01vdW50ZWQsIHBoYXNlKTtcbiAgdmFyIG1hcmtOYW1lID0gZ2V0RmliZXJNYXJrTmFtZShsYWJlbCwgZGVidWdJRCk7XG4gIGVuZE1hcmsobGFiZWwsIG1hcmtOYW1lLCB3YXJuaW5nJCQxKTtcbn07XG5cbnZhciBzaG91bGRJZ25vcmVGaWJlciA9IGZ1bmN0aW9uIChmaWJlcikge1xuICAvLyBIb3N0IGNvbXBvbmVudHMgc2hvdWxkIGJlIHNraXBwZWQgaW4gdGhlIHRpbWVsaW5lLlxuICAvLyBXZSBjb3VsZCBjaGVjayB0eXBlb2YgZmliZXIudHlwZSwgYnV0IGRvZXMgdGhpcyB3b3JrIHdpdGggUk4/XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgY2FzZSBDYWxsQ29tcG9uZW50OlxuICAgIGNhc2UgUmV0dXJuQ29tcG9uZW50OlxuICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgY2FzZSBDb250ZXh0Q29uc3VtZXI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgY2xlYXJQZW5kaW5nUGhhc2VNZWFzdXJlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGN1cnJlbnRQaGFzZSAhPT0gbnVsbCAmJiBjdXJyZW50UGhhc2VGaWJlciAhPT0gbnVsbCkge1xuICAgIGNsZWFyRmliZXJNYXJrKGN1cnJlbnRQaGFzZUZpYmVyLCBjdXJyZW50UGhhc2UpO1xuICB9XG4gIGN1cnJlbnRQaGFzZUZpYmVyID0gbnVsbDtcbiAgY3VycmVudFBoYXNlID0gbnVsbDtcbiAgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UgPSBmYWxzZTtcbn07XG5cbnZhciBwYXVzZVRpbWVycyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gU3RvcHMgYWxsIGN1cnJlbnRseSBhY3RpdmUgbWVhc3VyZW1lbnRzIHNvIHRoYXQgdGhleSBjYW4gYmUgcmVzdW1lZFxuICAvLyBpZiB3ZSBjb250aW51ZSBpbiBhIGxhdGVyIGRlZmVycmVkIGxvb3AgZnJvbSB0aGUgc2FtZSB1bml0IG9mIHdvcmsuXG4gIHZhciBmaWJlciA9IGN1cnJlbnRGaWJlcjtcbiAgd2hpbGUgKGZpYmVyKSB7XG4gICAgaWYgKGZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nKSB7XG4gICAgICBlbmRGaWJlck1hcmsoZmliZXIsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICBmaWJlciA9IGZpYmVyWydyZXR1cm4nXTtcbiAgfVxufTtcblxudmFyIHJlc3VtZVRpbWVyc1JlY3Vyc2l2ZWx5ID0gZnVuY3Rpb24gKGZpYmVyKSB7XG4gIGlmIChmaWJlclsncmV0dXJuJ10gIT09IG51bGwpIHtcbiAgICByZXN1bWVUaW1lcnNSZWN1cnNpdmVseShmaWJlclsncmV0dXJuJ10pO1xuICB9XG4gIGlmIChmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZykge1xuICAgIGJlZ2luRmliZXJNYXJrKGZpYmVyLCBudWxsKTtcbiAgfVxufTtcblxudmFyIHJlc3VtZVRpbWVycyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gUmVzdW1lcyBhbGwgbWVhc3VyZW1lbnRzIHRoYXQgd2VyZSBhY3RpdmUgZHVyaW5nIHRoZSBsYXN0IGRlZmVycmVkIGxvb3AuXG4gIGlmIChjdXJyZW50RmliZXIgIT09IG51bGwpIHtcbiAgICByZXN1bWVUaW1lcnNSZWN1cnNpdmVseShjdXJyZW50RmliZXIpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWNvcmRFZmZlY3QoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQrKztcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRTY2hlZHVsZVVwZGF0ZSgpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoaXNDb21taXR0aW5nKSB7XG4gICAgICBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFBoYXNlICE9PSBudWxsICYmIGN1cnJlbnRQaGFzZSAhPT0gJ2NvbXBvbmVudFdpbGxNb3VudCcgJiYgY3VycmVudFBoYXNlICE9PSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycpIHtcbiAgICAgIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudFBoYXNlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRSZXF1ZXN0Q2FsbGJhY2tUaW1lcigpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoc3VwcG9ydHNVc2VyVGltaW5nICYmICFpc1dhaXRpbmdGb3JDYWxsYmFjaykge1xuICAgICAgaXNXYWl0aW5nRm9yQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgYmVnaW5NYXJrKCcoV2FpdGluZyBmb3IgYXN5bmMgY2FsbGJhY2suLi4pJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BSZXF1ZXN0Q2FsbGJhY2tUaW1lcihkaWRFeHBpcmUsIGV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKHN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgaXNXYWl0aW5nRm9yQ2FsbGJhY2sgPSBmYWxzZTtcbiAgICAgIHZhciB3YXJuaW5nJCQxID0gZGlkRXhwaXJlID8gJ1JlYWN0IHdhcyBibG9ja2VkIGJ5IG1haW4gdGhyZWFkJyA6IG51bGw7XG4gICAgICBlbmRNYXJrKCcoV2FpdGluZyBmb3IgYXN5bmMgY2FsbGJhY2suLi4gd2lsbCBmb3JjZSBmbHVzaCBpbiAnICsgZXhwaXJhdGlvblRpbWUgKyAnIG1zKScsICcoV2FpdGluZyBmb3IgYXN5bmMgY2FsbGJhY2suLi4pJywgd2FybmluZyQkMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0V29ya1RpbWVyKGZpYmVyKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcgfHwgc2hvdWxkSWdub3JlRmliZXIoZmliZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHdlIHBhdXNlLCB0aGlzIGlzIHRoZSBmaWJlciB0byB1bndpbmQgZnJvbS5cbiAgICBjdXJyZW50RmliZXIgPSBmaWJlcjtcbiAgICBpZiAoIWJlZ2luRmliZXJNYXJrKGZpYmVyLCBudWxsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZyA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FuY2VsV29ya1RpbWVyKGZpYmVyKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcgfHwgc2hvdWxkSWdub3JlRmliZXIoZmliZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJlbWVtYmVyIHdlIHNob3VsZG4ndCBjb21wbGV0ZSBtZWFzdXJlbWVudCBmb3IgdGhpcyBmaWJlci5cbiAgICAvLyBPdGhlcndpc2UgZmxhbWVjaGFydCB3aWxsIGJlIGRlZXAgZXZlbiBmb3Igc21hbGwgdXBkYXRlcy5cbiAgICBmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZyA9IGZhbHNlO1xuICAgIGNsZWFyRmliZXJNYXJrKGZpYmVyLCBudWxsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wV29ya1RpbWVyKGZpYmVyKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcgfHwgc2hvdWxkSWdub3JlRmliZXIoZmliZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHdlIHBhdXNlLCBpdHMgcGFyZW50IGlzIHRoZSBmaWJlciB0byB1bndpbmQgZnJvbS5cbiAgICBjdXJyZW50RmliZXIgPSBmaWJlclsncmV0dXJuJ107XG4gICAgaWYgKCFmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZyA9IGZhbHNlO1xuICAgIGVuZEZpYmVyTWFyayhmaWJlciwgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcEZhaWxlZFdvcmtUaW1lcihmaWJlcikge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nIHx8IHNob3VsZElnbm9yZUZpYmVyKGZpYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBwYXVzZSwgaXRzIHBhcmVudCBpcyB0aGUgZmliZXIgdG8gdW53aW5kIGZyb20uXG4gICAgY3VycmVudEZpYmVyID0gZmliZXJbJ3JldHVybiddO1xuICAgIGlmICghZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSBmYWxzZTtcbiAgICB2YXIgd2FybmluZyQkMSA9ICdBbiBlcnJvciB3YXMgdGhyb3duIGluc2lkZSB0aGlzIGVycm9yIGJvdW5kYXJ5JztcbiAgICBlbmRGaWJlck1hcmsoZmliZXIsIG51bGwsIHdhcm5pbmckJDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0UGhhc2VUaW1lcihmaWJlciwgcGhhc2UpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGVhclBlbmRpbmdQaGFzZU1lYXN1cmVtZW50KCk7XG4gICAgaWYgKCFiZWdpbkZpYmVyTWFyayhmaWJlciwgcGhhc2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN1cnJlbnRQaGFzZUZpYmVyID0gZmliZXI7XG4gICAgY3VycmVudFBoYXNlID0gcGhhc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcFBoYXNlVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQaGFzZSAhPT0gbnVsbCAmJiBjdXJyZW50UGhhc2VGaWJlciAhPT0gbnVsbCkge1xuICAgICAgdmFyIHdhcm5pbmckJDEgPSBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA/ICdTY2hlZHVsZWQgYSBjYXNjYWRpbmcgdXBkYXRlJyA6IG51bGw7XG4gICAgICBlbmRGaWJlck1hcmsoY3VycmVudFBoYXNlRmliZXIsIGN1cnJlbnRQaGFzZSwgd2FybmluZyQkMSk7XG4gICAgfVxuICAgIGN1cnJlbnRQaGFzZSA9IG51bGw7XG4gICAgY3VycmVudFBoYXNlRmliZXIgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0V29ya0xvb3BUaW1lcihuZXh0VW5pdE9mV29yaykge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGN1cnJlbnRGaWJlciA9IG5leHRVbml0T2ZXb3JrO1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPSAwO1xuICAgIC8vIFRoaXMgaXMgdG9wIGxldmVsIGNhbGwuXG4gICAgLy8gQW55IG90aGVyIG1lYXN1cmVtZW50cyBhcmUgcGVyZm9ybWVkIHdpdGhpbi5cbiAgICBiZWdpbk1hcmsoJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uKScpO1xuICAgIC8vIFJlc3VtZSBhbnkgbWVhc3VyZW1lbnRzIHRoYXQgd2VyZSBpbiBwcm9ncmVzcyBkdXJpbmcgdGhlIGxhc3QgbG9vcC5cbiAgICByZXN1bWVUaW1lcnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wV29ya0xvb3BUaW1lcihpbnRlcnJ1cHRlZEJ5LCBkaWRDb21wbGV0ZVJvb3QpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgd2FybmluZyQkMSA9IG51bGw7XG4gICAgaWYgKGludGVycnVwdGVkQnkgIT09IG51bGwpIHtcbiAgICAgIGlmIChpbnRlcnJ1cHRlZEJ5LnRhZyA9PT0gSG9zdFJvb3QpIHtcbiAgICAgICAgd2FybmluZyQkMSA9ICdBIHRvcC1sZXZlbCB1cGRhdGUgaW50ZXJydXB0ZWQgdGhlIHByZXZpb3VzIHJlbmRlcic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoaW50ZXJydXB0ZWRCeSkgfHwgJ1Vua25vd24nO1xuICAgICAgICB3YXJuaW5nJCQxID0gJ0FuIHVwZGF0ZSB0byAnICsgY29tcG9uZW50TmFtZSArICcgaW50ZXJydXB0ZWQgdGhlIHByZXZpb3VzIHJlbmRlcic7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wID4gMSkge1xuICAgICAgd2FybmluZyQkMSA9ICdUaGVyZSB3ZXJlIGNhc2NhZGluZyB1cGRhdGVzJztcbiAgICB9XG4gICAgY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCA9IDA7XG4gICAgdmFyIGxhYmVsID0gZGlkQ29tcGxldGVSb290ID8gJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uOiBDb21wbGV0ZWQgUm9vdCknIDogJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uOiBZaWVsZGVkKSc7XG4gICAgLy8gUGF1c2UgYW55IG1lYXN1cmVtZW50cyB1bnRpbCB0aGUgbmV4dCBsb29wLlxuICAgIHBhdXNlVGltZXJzKCk7XG4gICAgZW5kTWFyayhsYWJlbCwgJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uKScsIHdhcm5pbmckJDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0Q29tbWl0VGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNDb21taXR0aW5nID0gdHJ1ZTtcbiAgICBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQgPSBmYWxzZTtcbiAgICBsYWJlbHNJbkN1cnJlbnRDb21taXQuY2xlYXIoKTtcbiAgICBiZWdpbk1hcmsoJyhDb21taXR0aW5nIENoYW5nZXMpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENvbW1pdFRpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdhcm5pbmckJDEgPSBudWxsO1xuICAgIGlmIChoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQpIHtcbiAgICAgIHdhcm5pbmckJDEgPSAnTGlmZWN5Y2xlIGhvb2sgc2NoZWR1bGVkIGEgY2FzY2FkaW5nIHVwZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wID4gMCkge1xuICAgICAgd2FybmluZyQkMSA9ICdDYXVzZWQgYnkgYSBjYXNjYWRpbmcgdXBkYXRlIGluIGVhcmxpZXIgY29tbWl0JztcbiAgICB9XG4gICAgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50Q29tbWl0ID0gZmFsc2U7XG4gICAgY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCsrO1xuICAgIGlzQ29tbWl0dGluZyA9IGZhbHNlO1xuICAgIGxhYmVsc0luQ3VycmVudENvbW1pdC5jbGVhcigpO1xuXG4gICAgZW5kTWFyaygnKENvbW1pdHRpbmcgQ2hhbmdlcyknLCAnKENvbW1pdHRpbmcgQ2hhbmdlcyknLCB3YXJuaW5nJCQxKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydENvbW1pdFNuYXBzaG90RWZmZWN0c1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbiAgICBiZWdpbk1hcmsoJyhDb21taXR0aW5nIFNuYXBzaG90IEVmZmVjdHMpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENvbW1pdFNuYXBzaG90RWZmZWN0c1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjb3VudCA9IGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0O1xuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbiAgICBlbmRNYXJrKCcoQ29tbWl0dGluZyBTbmFwc2hvdCBFZmZlY3RzOiAnICsgY291bnQgKyAnIFRvdGFsKScsICcoQ29tbWl0dGluZyBTbmFwc2hvdCBFZmZlY3RzKScsIG51bGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0Q29tbWl0SG9zdEVmZmVjdHNUaW1lcigpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCA9IDA7XG4gICAgYmVnaW5NYXJrKCcoQ29tbWl0dGluZyBIb3N0IEVmZmVjdHMpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENvbW1pdEhvc3RFZmZlY3RzVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvdW50ID0gZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQ7XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xuICAgIGVuZE1hcmsoJyhDb21taXR0aW5nIEhvc3QgRWZmZWN0czogJyArIGNvdW50ICsgJyBUb3RhbCknLCAnKENvbW1pdHRpbmcgSG9zdCBFZmZlY3RzKScsIG51bGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0Q29tbWl0TGlmZUN5Y2xlc1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbiAgICBiZWdpbk1hcmsoJyhDYWxsaW5nIExpZmVjeWNsZSBNZXRob2RzKScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BDb21taXRMaWZlQ3ljbGVzVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvdW50ID0gZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQ7XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xuICAgIGVuZE1hcmsoJyhDYWxsaW5nIExpZmVjeWNsZSBNZXRob2RzOiAnICsgY291bnQgKyAnIFRvdGFsKScsICcoQ2FsbGluZyBMaWZlY3ljbGUgTWV0aG9kcyknLCBudWxsKTtcbiAgfVxufVxuXG52YXIgZGlkV2FyblVwZGF0ZUluc2lkZVVwZGF0ZSA9IHZvaWQgMDtcblxue1xuICBkaWRXYXJuVXBkYXRlSW5zaWRlVXBkYXRlID0gZmFsc2U7XG59XG5cbi8vIENhbGxiYWNrcyBhcmUgbm90IHZhbGlkYXRlZCB1bnRpbCBpbnZvY2F0aW9uXG5cblxuLy8gU2luZ2x5IGxpbmtlZC1saXN0IG9mIHVwZGF0ZXMuIFdoZW4gYW4gdXBkYXRlIGlzIHNjaGVkdWxlZCwgaXQgaXMgYWRkZWQgdG9cbi8vIHRoZSBxdWV1ZSBvZiB0aGUgY3VycmVudCBmaWJlciBhbmQgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuIFRoZSB0d28gcXVldWVzXG4vLyBhcmUgc2VwYXJhdGUgYnV0IHRoZXkgc2hhcmUgYSBwZXJzaXN0ZW50IHN0cnVjdHVyZS5cbi8vXG4vLyBEdXJpbmcgcmVjb25jaWxpYXRpb24sIHVwZGF0ZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgd29yay1pbi1wcm9ncmVzcyBmaWJlcixcbi8vIGJ1dCB0aGV5IHJlbWFpbiBvbiB0aGUgY3VycmVudCBmaWJlci4gVGhhdCBlbnN1cmVzIHRoYXQgaWYgYSB3b3JrLWluLXByb2dyZXNzXG4vLyBpcyBhYm9ydGVkLCB0aGUgYWJvcnRlZCB1cGRhdGVzIGFyZSByZWNvdmVyZWQgYnkgY2xvbmluZyBmcm9tIGN1cnJlbnQuXG4vL1xuLy8gVGhlIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUgaXMgYWx3YXlzIGEgc3Vic2V0IG9mIHRoZSBjdXJyZW50IHF1ZXVlLlxuLy9cbi8vIFdoZW4gdGhlIHRyZWUgaXMgY29tbWl0dGVkLCB0aGUgd29yay1pbi1wcm9ncmVzcyBiZWNvbWVzIHRoZSBjdXJyZW50LlxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZVF1ZXVlKGJhc2VTdGF0ZSkge1xuICB2YXIgcXVldWUgPSB7XG4gICAgYmFzZVN0YXRlOiBiYXNlU3RhdGUsXG4gICAgZXhwaXJhdGlvblRpbWU6IE5vV29yayxcbiAgICBmaXJzdDogbnVsbCxcbiAgICBsYXN0OiBudWxsLFxuICAgIGNhbGxiYWNrTGlzdDogbnVsbCxcbiAgICBoYXNGb3JjZVVwZGF0ZTogZmFsc2UsXG4gICAgaXNJbml0aWFsaXplZDogZmFsc2UsXG4gICAgY2FwdHVyZWRWYWx1ZXM6IG51bGxcbiAgfTtcbiAge1xuICAgIHF1ZXVlLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBxdWV1ZTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0VXBkYXRlSW50b1F1ZXVlKHF1ZXVlLCB1cGRhdGUpIHtcbiAgLy8gQXBwZW5kIHRoZSB1cGRhdGUgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdC5cbiAgaWYgKHF1ZXVlLmxhc3QgPT09IG51bGwpIHtcbiAgICAvLyBRdWV1ZSBpcyBlbXB0eVxuICAgIHF1ZXVlLmZpcnN0ID0gcXVldWUubGFzdCA9IHVwZGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZS5sYXN0Lm5leHQgPSB1cGRhdGU7XG4gICAgcXVldWUubGFzdCA9IHVwZGF0ZTtcbiAgfVxuICBpZiAocXVldWUuZXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBxdWV1ZS5leHBpcmF0aW9uVGltZSA+IHVwZGF0ZS5leHBpcmF0aW9uVGltZSkge1xuICAgIHF1ZXVlLmV4cGlyYXRpb25UaW1lID0gdXBkYXRlLmV4cGlyYXRpb25UaW1lO1xuICB9XG59XG5cbnZhciBxMSA9IHZvaWQgMDtcbnZhciBxMiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGVuc3VyZVVwZGF0ZVF1ZXVlcyhmaWJlcikge1xuICBxMSA9IHEyID0gbnVsbDtcbiAgLy8gV2UnbGwgaGF2ZSBhdCBsZWFzdCBvbmUgYW5kIGF0IG1vc3QgdHdvIGRpc3RpbmN0IHVwZGF0ZSBxdWV1ZXMuXG4gIHZhciBhbHRlcm5hdGVGaWJlciA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgdmFyIHF1ZXVlMSA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBpZiAocXVldWUxID09PSBudWxsKSB7XG4gICAgLy8gVE9ETzogV2UgZG9uJ3Qga25vdyB3aGF0IHRoZSBiYXNlIHN0YXRlIHdpbGwgYmUgdW50aWwgd2UgYmVnaW4gd29yay5cbiAgICAvLyBJdCBkZXBlbmRzIG9uIHdoaWNoIGZpYmVyIGlzIHRoZSBuZXh0IGN1cnJlbnQuIEluaXRpYWxpemUgd2l0aCBhbiBlbXB0eVxuICAgIC8vIGJhc2Ugc3RhdGUsIHRoZW4gc2V0IHRvIHRoZSBtZW1vaXplZFN0YXRlIHdoZW4gcmVuZGVyaW5nLiBOb3Qgc3VwZXJcbiAgICAvLyBoYXBweSB3aXRoIHRoaXMgYXBwcm9hY2guXG4gICAgcXVldWUxID0gZmliZXIudXBkYXRlUXVldWUgPSBjcmVhdGVVcGRhdGVRdWV1ZShudWxsKTtcbiAgfVxuXG4gIHZhciBxdWV1ZTIgPSB2b2lkIDA7XG4gIGlmIChhbHRlcm5hdGVGaWJlciAhPT0gbnVsbCkge1xuICAgIHF1ZXVlMiA9IGFsdGVybmF0ZUZpYmVyLnVwZGF0ZVF1ZXVlO1xuICAgIGlmIChxdWV1ZTIgPT09IG51bGwpIHtcbiAgICAgIHF1ZXVlMiA9IGFsdGVybmF0ZUZpYmVyLnVwZGF0ZVF1ZXVlID0gY3JlYXRlVXBkYXRlUXVldWUobnVsbCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHF1ZXVlMiA9IG51bGw7XG4gIH1cbiAgcXVldWUyID0gcXVldWUyICE9PSBxdWV1ZTEgPyBxdWV1ZTIgOiBudWxsO1xuXG4gIC8vIFVzZSBtb2R1bGUgdmFyaWFibGVzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgdHVwbGVcbiAgcTEgPSBxdWV1ZTE7XG4gIHEyID0gcXVldWUyO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRVcGRhdGVJbnRvRmliZXIoZmliZXIsIHVwZGF0ZSkge1xuICBlbnN1cmVVcGRhdGVRdWV1ZXMoZmliZXIpO1xuICB2YXIgcXVldWUxID0gcTE7XG4gIHZhciBxdWV1ZTIgPSBxMjtcblxuICAvLyBXYXJuIGlmIGFuIHVwZGF0ZSBpcyBzY2hlZHVsZWQgZnJvbSBpbnNpZGUgYW4gdXBkYXRlciBmdW5jdGlvbi5cbiAge1xuICAgIGlmICgocXVldWUxLmlzUHJvY2Vzc2luZyB8fCBxdWV1ZTIgIT09IG51bGwgJiYgcXVldWUyLmlzUHJvY2Vzc2luZykgJiYgIWRpZFdhcm5VcGRhdGVJbnNpZGVVcGRhdGUpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdBbiB1cGRhdGUgKHNldFN0YXRlLCByZXBsYWNlU3RhdGUsIG9yIGZvcmNlVXBkYXRlKSB3YXMgc2NoZWR1bGVkICcgKyAnZnJvbSBpbnNpZGUgYW4gdXBkYXRlIGZ1bmN0aW9uLiBVcGRhdGUgZnVuY3Rpb25zIHNob3VsZCBiZSBwdXJlLCAnICsgJ3dpdGggemVybyBzaWRlLWVmZmVjdHMuIENvbnNpZGVyIHVzaW5nIGNvbXBvbmVudERpZFVwZGF0ZSBvciBhICcgKyAnY2FsbGJhY2suJyk7XG4gICAgICBkaWRXYXJuVXBkYXRlSW5zaWRlVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSdzIG9ubHkgb25lIHF1ZXVlLCBhZGQgdGhlIHVwZGF0ZSB0byB0aGF0IHF1ZXVlIGFuZCBleGl0LlxuICBpZiAocXVldWUyID09PSBudWxsKSB7XG4gICAgaW5zZXJ0VXBkYXRlSW50b1F1ZXVlKHF1ZXVlMSwgdXBkYXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBlaXRoZXIgcXVldWUgaXMgZW1wdHksIHdlIG5lZWQgdG8gYWRkIHRvIGJvdGggcXVldWVzLlxuICBpZiAocXVldWUxLmxhc3QgPT09IG51bGwgfHwgcXVldWUyLmxhc3QgPT09IG51bGwpIHtcbiAgICBpbnNlcnRVcGRhdGVJbnRvUXVldWUocXVldWUxLCB1cGRhdGUpO1xuICAgIGluc2VydFVwZGF0ZUludG9RdWV1ZShxdWV1ZTIsIHVwZGF0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgYm90aCBsaXN0cyBhcmUgbm90IGVtcHR5LCB0aGUgbGFzdCB1cGRhdGUgaXMgdGhlIHNhbWUgZm9yIGJvdGggbGlzdHNcbiAgLy8gYmVjYXVzZSBvZiBzdHJ1Y3R1cmFsIHNoYXJpbmcuIFNvLCB3ZSBzaG91bGQgb25seSBhcHBlbmQgdG8gb25lIG9mXG4gIC8vIHRoZSBsaXN0cy5cbiAgaW5zZXJ0VXBkYXRlSW50b1F1ZXVlKHF1ZXVlMSwgdXBkYXRlKTtcbiAgLy8gQnV0IHdlIHN0aWxsIG5lZWQgdG8gdXBkYXRlIHRoZSBgbGFzdGAgcG9pbnRlciBvZiBxdWV1ZTIuXG4gIHF1ZXVlMi5sYXN0ID0gdXBkYXRlO1xufVxuXG5mdW5jdGlvbiBnZXRVcGRhdGVFeHBpcmF0aW9uVGltZShmaWJlcikge1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICAgICAgaWYgKHVwZGF0ZVF1ZXVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBOb1dvcms7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXBkYXRlUXVldWUuZXhwaXJhdGlvblRpbWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBOb1dvcms7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGVGcm9tVXBkYXRlKHVwZGF0ZSwgaW5zdGFuY2UsIHByZXZTdGF0ZSwgcHJvcHMpIHtcbiAgdmFyIHBhcnRpYWxTdGF0ZSA9IHVwZGF0ZS5wYXJ0aWFsU3RhdGU7XG4gIGlmICh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHBhcnRpYWxTdGF0ZS5jYWxsKGluc3RhbmNlLCBwcmV2U3RhdGUsIHByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFydGlhbFN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcXVldWUsIGluc3RhbmNlLCBwcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC51cGRhdGVRdWV1ZSA9PT0gcXVldWUpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGNyZWF0ZSBhIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUsIGJ5IGNsb25pbmcgdGhlIGN1cnJlbnQgcXVldWUuXG4gICAgdmFyIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSB7XG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnRRdWV1ZS5iYXNlU3RhdGUsXG4gICAgICBleHBpcmF0aW9uVGltZTogY3VycmVudFF1ZXVlLmV4cGlyYXRpb25UaW1lLFxuICAgICAgZmlyc3Q6IGN1cnJlbnRRdWV1ZS5maXJzdCxcbiAgICAgIGxhc3Q6IGN1cnJlbnRRdWV1ZS5sYXN0LFxuICAgICAgaXNJbml0aWFsaXplZDogY3VycmVudFF1ZXVlLmlzSW5pdGlhbGl6ZWQsXG4gICAgICBjYXB0dXJlZFZhbHVlczogY3VycmVudFF1ZXVlLmNhcHR1cmVkVmFsdWVzLFxuICAgICAgLy8gVGhlc2UgZmllbGRzIGFyZSBubyBsb25nZXIgdmFsaWQgYmVjYXVzZSB0aGV5IHdlcmUgYWxyZWFkeSBjb21taXR0ZWQuXG4gICAgICAvLyBSZXNldCB0aGVtLlxuICAgICAgY2FsbGJhY2tMaXN0OiBudWxsLFxuICAgICAgaGFzRm9yY2VVcGRhdGU6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHtcbiAgICAvLyBTZXQgdGhpcyBmbGFnIHNvIHdlIGNhbiB3YXJuIGlmIHNldFN0YXRlIGlzIGNhbGxlZCBpbnNpZGUgdGhlIHVwZGF0ZVxuICAgIC8vIGZ1bmN0aW9uIG9mIGFub3RoZXIgc2V0U3RhdGUuXG4gICAgcXVldWUuaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFJlc2V0IHRoZSByZW1haW5pbmcgZXhwaXJhdGlvbiB0aW1lLiBJZiB3ZSBza2lwIG92ZXIgYW55IHVwZGF0ZXMsIHdlJ2xsXG4gIC8vIGluY3JlYXNlIHRoaXMgYWNjb3JkaW5nbHkuXG4gIHF1ZXVlLmV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuXG4gIC8vIFRPRE86IFdlIGRvbid0IGtub3cgd2hhdCB0aGUgYmFzZSBzdGF0ZSB3aWxsIGJlIHVudGlsIHdlIGJlZ2luIHdvcmsuXG4gIC8vIEl0IGRlcGVuZHMgb24gd2hpY2ggZmliZXIgaXMgdGhlIG5leHQgY3VycmVudC4gSW5pdGlhbGl6ZSB3aXRoIGFuIGVtcHR5XG4gIC8vIGJhc2Ugc3RhdGUsIHRoZW4gc2V0IHRvIHRoZSBtZW1vaXplZFN0YXRlIHdoZW4gcmVuZGVyaW5nLiBOb3Qgc3VwZXJcbiAgLy8gaGFwcHkgd2l0aCB0aGlzIGFwcHJvYWNoLlxuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIGlmIChxdWV1ZS5pc0luaXRpYWxpemVkKSB7XG4gICAgc3RhdGUgPSBxdWV1ZS5iYXNlU3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUgPSBxdWV1ZS5iYXNlU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIHF1ZXVlLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG4gIHZhciBkb250TXV0YXRlUHJldlN0YXRlID0gdHJ1ZTtcbiAgdmFyIHVwZGF0ZSA9IHF1ZXVlLmZpcnN0O1xuICB2YXIgZGlkU2tpcCA9IGZhbHNlO1xuICB3aGlsZSAodXBkYXRlICE9PSBudWxsKSB7XG4gICAgdmFyIHVwZGF0ZUV4cGlyYXRpb25UaW1lID0gdXBkYXRlLmV4cGlyYXRpb25UaW1lO1xuICAgIGlmICh1cGRhdGVFeHBpcmF0aW9uVGltZSA+IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAvLyBUaGlzIHVwZGF0ZSBkb2VzIG5vdCBoYXZlIHN1ZmZpY2llbnQgcHJpb3JpdHkuIFNraXAgaXQuXG4gICAgICB2YXIgcmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPSBxdWV1ZS5leHBpcmF0aW9uVGltZTtcbiAgICAgIGlmIChyZW1haW5pbmdFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID4gdXBkYXRlRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSByZW1haW5pbmcgZXhwaXJhdGlvbiB0aW1lLlxuICAgICAgICBxdWV1ZS5leHBpcmF0aW9uVGltZSA9IHVwZGF0ZUV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgICAgaWYgKCFkaWRTa2lwKSB7XG4gICAgICAgIGRpZFNraXAgPSB0cnVlO1xuICAgICAgICBxdWV1ZS5iYXNlU3RhdGUgPSBzdGF0ZTtcbiAgICAgIH1cbiAgICAgIC8vIENvbnRpbnVlIHRvIHRoZSBuZXh0IHVwZGF0ZS5cbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gVGhpcyB1cGRhdGUgZG9lcyBoYXZlIHN1ZmZpY2llbnQgcHJpb3JpdHkuXG5cbiAgICAvLyBJZiBubyBwcmV2aW91cyB1cGRhdGVzIHdlcmUgc2tpcHBlZCwgZHJvcCB0aGlzIHVwZGF0ZSBmcm9tIHRoZSBxdWV1ZSBieVxuICAgIC8vIGFkdmFuY2luZyB0aGUgaGVhZCBvZiB0aGUgbGlzdC5cbiAgICBpZiAoIWRpZFNraXApIHtcbiAgICAgIHF1ZXVlLmZpcnN0ID0gdXBkYXRlLm5leHQ7XG4gICAgICBpZiAocXVldWUuZmlyc3QgPT09IG51bGwpIHtcbiAgICAgICAgcXVldWUubGFzdCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW52b2tlIHNldFN0YXRlIGNhbGxiYWNrIGFuIGV4dHJhIHRpbWUgdG8gaGVscCBkZXRlY3Qgc2lkZS1lZmZlY3RzLlxuICAgIC8vIElnbm9yZSB0aGUgcmV0dXJuIHZhbHVlIGluIHRoaXMgY2FzZS5cbiAgICBpZiAoZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIHx8IGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgIGdldFN0YXRlRnJvbVVwZGF0ZSh1cGRhdGUsIGluc3RhbmNlLCBzdGF0ZSwgcHJvcHMpO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgdGhlIHVwZGF0ZVxuICAgIHZhciBfcGFydGlhbFN0YXRlID0gdm9pZCAwO1xuICAgIGlmICh1cGRhdGUuaXNSZXBsYWNlKSB7XG4gICAgICBzdGF0ZSA9IGdldFN0YXRlRnJvbVVwZGF0ZSh1cGRhdGUsIGluc3RhbmNlLCBzdGF0ZSwgcHJvcHMpO1xuICAgICAgZG9udE11dGF0ZVByZXZTdGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9wYXJ0aWFsU3RhdGUgPSBnZXRTdGF0ZUZyb21VcGRhdGUodXBkYXRlLCBpbnN0YW5jZSwgc3RhdGUsIHByb3BzKTtcbiAgICAgIGlmIChfcGFydGlhbFN0YXRlKSB7XG4gICAgICAgIGlmIChkb250TXV0YXRlUHJldlN0YXRlKSB7XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZTogSWRrIGhvdyB0byB0eXBlIHRoaXMgcHJvcGVybHkuXG4gICAgICAgICAgc3RhdGUgPSBfYXNzaWduKHt9LCBzdGF0ZSwgX3BhcnRpYWxTdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUgPSBfYXNzaWduKHN0YXRlLCBfcGFydGlhbFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBkb250TXV0YXRlUHJldlN0YXRlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh1cGRhdGUuaXNGb3JjZWQpIHtcbiAgICAgIHF1ZXVlLmhhc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHVwZGF0ZS5jYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgLy8gQXBwZW5kIHRvIGxpc3Qgb2YgY2FsbGJhY2tzLlxuICAgICAgdmFyIF9jYWxsYmFja0xpc3QgPSBxdWV1ZS5jYWxsYmFja0xpc3Q7XG4gICAgICBpZiAoX2NhbGxiYWNrTGlzdCA9PT0gbnVsbCkge1xuICAgICAgICBfY2FsbGJhY2tMaXN0ID0gcXVldWUuY2FsbGJhY2tMaXN0ID0gW107XG4gICAgICB9XG4gICAgICBfY2FsbGJhY2tMaXN0LnB1c2godXBkYXRlKTtcbiAgICB9XG4gICAgaWYgKHVwZGF0ZS5jYXB0dXJlZFZhbHVlICE9PSBudWxsKSB7XG4gICAgICB2YXIgX2NhcHR1cmVkVmFsdWVzID0gcXVldWUuY2FwdHVyZWRWYWx1ZXM7XG4gICAgICBpZiAoX2NhcHR1cmVkVmFsdWVzID09PSBudWxsKSB7XG4gICAgICAgIHF1ZXVlLmNhcHR1cmVkVmFsdWVzID0gW3VwZGF0ZS5jYXB0dXJlZFZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9jYXB0dXJlZFZhbHVlcy5wdXNoKHVwZGF0ZS5jYXB0dXJlZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gIH1cblxuICBpZiAocXVldWUuY2FsbGJhY2tMaXN0ICE9PSBudWxsKSB7XG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IENhbGxiYWNrO1xuICB9IGVsc2UgaWYgKHF1ZXVlLmZpcnN0ID09PSBudWxsICYmICFxdWV1ZS5oYXNGb3JjZVVwZGF0ZSAmJiBxdWV1ZS5jYXB0dXJlZFZhbHVlcyA9PT0gbnVsbCkge1xuICAgIC8vIFRoZSBxdWV1ZSBpcyBlbXB0eS4gV2UgY2FuIHJlc2V0IGl0LlxuICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgfVxuXG4gIGlmICghZGlkU2tpcCkge1xuICAgIGRpZFNraXAgPSB0cnVlO1xuICAgIHF1ZXVlLmJhc2VTdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAge1xuICAgIC8vIE5vIGxvbmdlciBwcm9jZXNzaW5nLlxuICAgIHF1ZXVlLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiBjb21taXRDYWxsYmFja3MocXVldWUsIGNvbnRleHQpIHtcbiAgdmFyIGNhbGxiYWNrTGlzdCA9IHF1ZXVlLmNhbGxiYWNrTGlzdDtcbiAgaWYgKGNhbGxiYWNrTGlzdCA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBTZXQgdGhlIGxpc3QgdG8gbnVsbCB0byBtYWtlIHN1cmUgdGhleSBkb24ndCBnZXQgY2FsbGVkIG1vcmUgdGhhbiBvbmNlLlxuICBxdWV1ZS5jYWxsYmFja0xpc3QgPSBudWxsO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrTGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciB1cGRhdGUgPSBjYWxsYmFja0xpc3RbaV07XG4gICAgdmFyIF9jYWxsYmFjayA9IHVwZGF0ZS5jYWxsYmFjaztcbiAgICAvLyBUaGlzIHVwZGF0ZSBtaWdodCBiZSBwcm9jZXNzZWQgYWdhaW4uIENsZWFyIHRoZSBjYWxsYmFjayBzbyBpdCdzIG9ubHlcbiAgICAvLyBjYWxsZWQgb25jZS5cbiAgICB1cGRhdGUuY2FsbGJhY2sgPSBudWxsO1xuICAgICEodHlwZW9mIF9jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCBhcyBjYWxsYmFjay4gRXhwZWN0ZWQgYSBmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBfY2FsbGJhY2spIDogdm9pZCAwO1xuICAgIF9jYWxsYmFjay5jYWxsKGNvbnRleHQpO1xuICB9XG59XG5cbnZhciBmYWtlSW50ZXJuYWxJbnN0YW5jZSA9IHt9O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50ID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZSA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRVbmluaXRpYWxpemVkU3RhdGUgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUgPSB2b2lkIDA7XG52YXIgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEgPSB2b2lkIDA7XG5cbntcbiAgZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50ID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZSA9IG5ldyBTZXQoKTtcbiAgZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRMZWdhY3lMaWZlY3ljbGVzQW5kRGVyaXZlZFN0YXRlID0gbmV3IFNldCgpO1xuXG4gIHZhciBkaWRXYXJuT25JbnZhbGlkQ2FsbGJhY2sgPSBuZXcgU2V0KCk7XG5cbiAgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICBpZiAoY2FsbGJhY2sgPT09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBrZXkgPSBjYWxsZXJOYW1lICsgJ18nICsgY2FsbGJhY2s7XG4gICAgaWYgKCFkaWRXYXJuT25JbnZhbGlkQ2FsbGJhY2suaGFzKGtleSkpIHtcbiAgICAgIGRpZFdhcm5PbkludmFsaWRDYWxsYmFjay5hZGQoa2V5KTtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICclcyguLi4pOiBFeHBlY3RlZCB0aGUgbGFzdCBvcHRpb25hbCBgY2FsbGJhY2tgIGFyZ3VtZW50IHRvIGJlIGEgJyArICdmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMuJywgY2FsbGVyTmFtZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICAvLyBUaGlzIGlzIHNvIGdyb3NzIGJ1dCBpdCdzIGF0IGxlYXN0IG5vbi1jcml0aWNhbCBhbmQgY2FuIGJlIHJlbW92ZWQgaWZcbiAgLy8gaXQgY2F1c2VzIHByb2JsZW1zLiBUaGlzIGlzIG1lYW50IHRvIGdpdmUgYSBuaWNlciBlcnJvciBtZXNzYWdlIGZvclxuICAvLyBSZWFjdERPTTE1LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHJlYWN0RE9NMTZDb21wb25lbnQsXG4gIC8vIC4uLikpIHdoaWNoIG90aGVyd2lzZSB0aHJvd3MgYSBcIl9wcm9jZXNzQ2hpbGRDb250ZXh0IGlzIG5vdCBhIGZ1bmN0aW9uXCJcbiAgLy8gZXhjZXB0aW9uLlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmFrZUludGVybmFsSW5zdGFuY2UsICdfcHJvY2Vzc0NoaWxkQ29udGV4dCcsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgaW52YXJpYW50KGZhbHNlLCAnX3Byb2Nlc3NDaGlsZENvbnRleHQgaXMgbm90IGF2YWlsYWJsZSBpbiBSZWFjdCAxNisuIFRoaXMgbGlrZWx5IG1lYW5zIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBhbmQgYXJlIGF0dGVtcHRpbmcgdG8gbmVzdCBhIFJlYWN0IDE1IHRyZWUgaW5zaWRlIGEgUmVhY3QgMTYgdHJlZSB1c2luZyB1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciwgd2hpY2ggaXNuXFwndCBzdXBwb3J0ZWQuIFRyeSB0byBtYWtlIHN1cmUgeW91IGhhdmUgb25seSBvbmUgY29weSBvZiBSZWFjdCAoYW5kIGlkZWFsbHksIHN3aXRjaCB0byBSZWFjdERPTS5jcmVhdGVQb3J0YWwpLicpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5mcmVlemUoZmFrZUludGVybmFsSW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gY2FsbEdldERlcml2ZWRTdGF0ZUZyb21DYXRjaChjdG9yLCBjYXB0dXJlZFZhbHVlcykge1xuICB2YXIgcmVzdWx0U3RhdGUgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYXB0dXJlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjYXB0dXJlZFZhbHVlID0gY2FwdHVyZWRWYWx1ZXNbaV07XG4gICAgdmFyIGVycm9yID0gY2FwdHVyZWRWYWx1ZS52YWx1ZTtcbiAgICB2YXIgcGFydGlhbFN0YXRlID0gY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2guY2FsbChudWxsLCBlcnJvcik7XG4gICAgaWYgKHBhcnRpYWxTdGF0ZSAhPT0gbnVsbCAmJiBwYXJ0aWFsU3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgX2Fzc2lnbihyZXN1bHRTdGF0ZSwgcGFydGlhbFN0YXRlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFN0YXRlO1xufVxuXG52YXIgUmVhY3RGaWJlckNsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gKGxlZ2FjeUNvbnRleHQsIHNjaGVkdWxlV29yaywgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciwgbWVtb2l6ZVByb3BzLCBtZW1vaXplU3RhdGUpIHtcbiAgdmFyIGNhY2hlQ29udGV4dCA9IGxlZ2FjeUNvbnRleHQuY2FjaGVDb250ZXh0LFxuICAgICAgZ2V0TWFza2VkQ29udGV4dCA9IGxlZ2FjeUNvbnRleHQuZ2V0TWFza2VkQ29udGV4dCxcbiAgICAgIGdldFVubWFza2VkQ29udGV4dCA9IGxlZ2FjeUNvbnRleHQuZ2V0VW5tYXNrZWRDb250ZXh0LFxuICAgICAgaXNDb250ZXh0Q29uc3VtZXIgPSBsZWdhY3lDb250ZXh0LmlzQ29udGV4dENvbnN1bWVyLFxuICAgICAgaGFzQ29udGV4dENoYW5nZWQgPSBsZWdhY3lDb250ZXh0Lmhhc0NvbnRleHRDaGFuZ2VkO1xuXG4gIC8vIENsYXNzIGNvbXBvbmVudCBzdGF0ZSB1cGRhdGVyXG5cbiAgdmFyIHVwZGF0ZXIgPSB7XG4gICAgaXNNb3VudGVkOiBpc01vdW50ZWQsXG4gICAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoaW5zdGFuY2UsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBmaWJlciA9IGdldChpbnN0YW5jZSk7XG4gICAgICBjYWxsYmFjayA9IGNhbGxiYWNrID09PSB1bmRlZmluZWQgPyBudWxsIDogY2FsbGJhY2s7XG4gICAgICB7XG4gICAgICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayQxKGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbiAgICAgIH1cbiAgICAgIHZhciBleHBpcmF0aW9uVGltZSA9IGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIoZmliZXIpO1xuICAgICAgdmFyIHVwZGF0ZSA9IHtcbiAgICAgICAgZXhwaXJhdGlvblRpbWU6IGV4cGlyYXRpb25UaW1lLFxuICAgICAgICBwYXJ0aWFsU3RhdGU6IHBhcnRpYWxTdGF0ZSxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBpc1JlcGxhY2U6IGZhbHNlLFxuICAgICAgICBpc0ZvcmNlZDogZmFsc2UsXG4gICAgICAgIGNhcHR1cmVkVmFsdWU6IG51bGwsXG4gICAgICAgIG5leHQ6IG51bGxcbiAgICAgIH07XG4gICAgICBpbnNlcnRVcGRhdGVJbnRvRmliZXIoZmliZXIsIHVwZGF0ZSk7XG4gICAgICBzY2hlZHVsZVdvcmsoZmliZXIsIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9LFxuICAgIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChpbnN0YW5jZSwgc3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZmliZXIgPSBnZXQoaW5zdGFuY2UpO1xuICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuICAgICAge1xuICAgICAgICB3YXJuT25JbnZhbGlkQ2FsbGJhY2skMShjYWxsYmFjaywgJ3JlcGxhY2VTdGF0ZScpO1xuICAgICAgfVxuICAgICAgdmFyIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcihmaWJlcik7XG4gICAgICB2YXIgdXBkYXRlID0ge1xuICAgICAgICBleHBpcmF0aW9uVGltZTogZXhwaXJhdGlvblRpbWUsXG4gICAgICAgIHBhcnRpYWxTdGF0ZTogc3RhdGUsXG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgaXNSZXBsYWNlOiB0cnVlLFxuICAgICAgICBpc0ZvcmNlZDogZmFsc2UsXG4gICAgICAgIGNhcHR1cmVkVmFsdWU6IG51bGwsXG4gICAgICAgIG5leHQ6IG51bGxcbiAgICAgIH07XG4gICAgICBpbnNlcnRVcGRhdGVJbnRvRmliZXIoZmliZXIsIHVwZGF0ZSk7XG4gICAgICBzY2hlZHVsZVdvcmsoZmliZXIsIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9LFxuICAgIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKGluc3RhbmNlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGZpYmVyID0gZ2V0KGluc3RhbmNlKTtcbiAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjaztcbiAgICAgIHtcbiAgICAgICAgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEoY2FsbGJhY2ssICdmb3JjZVVwZGF0ZScpO1xuICAgICAgfVxuICAgICAgdmFyIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcihmaWJlcik7XG4gICAgICB2YXIgdXBkYXRlID0ge1xuICAgICAgICBleHBpcmF0aW9uVGltZTogZXhwaXJhdGlvblRpbWUsXG4gICAgICAgIHBhcnRpYWxTdGF0ZTogbnVsbCxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBpc1JlcGxhY2U6IGZhbHNlLFxuICAgICAgICBpc0ZvcmNlZDogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZWRWYWx1ZTogbnVsbCxcbiAgICAgICAgbmV4dDogbnVsbFxuICAgICAgfTtcbiAgICAgIGluc2VydFVwZGF0ZUludG9GaWJlcihmaWJlciwgdXBkYXRlKTtcbiAgICAgIHNjaGVkdWxlV29yayhmaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgb2xkUHJvcHMsIG5ld1Byb3BzLCBvbGRTdGF0ZSwgbmV3U3RhdGUsIG5ld0NvbnRleHQpIHtcbiAgICBpZiAob2xkUHJvcHMgPT09IG51bGwgfHwgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgIT09IG51bGwgJiYgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpIHtcbiAgICAgIC8vIElmIHRoZSB3b3JrSW5Qcm9ncmVzcyBhbHJlYWR5IGhhcyBhbiBVcGRhdGUgZWZmZWN0LCByZXR1cm4gdHJ1ZVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHZhciBjdG9yID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhcnRQaGFzZVRpbWVyKHdvcmtJblByb2dyZXNzLCAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyk7XG4gICAgICB2YXIgc2hvdWxkVXBkYXRlID0gaW5zdGFuY2Uuc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV3Q29udGV4dCk7XG4gICAgICBzdG9wUGhhc2VUaW1lcigpO1xuXG4gICAgICB7XG4gICAgICAgIHdhcm5pbmcoc2hvdWxkVXBkYXRlICE9PSB1bmRlZmluZWQsICclcy5zaG91bGRDb21wb25lbnRVcGRhdGUoKTogUmV0dXJuZWQgdW5kZWZpbmVkIGluc3RlYWQgb2YgYSAnICsgJ2Jvb2xlYW4gdmFsdWUuIE1ha2Ugc3VyZSB0byByZXR1cm4gdHJ1ZSBvciBmYWxzZS4nLCBnZXRDb21wb25lbnROYW1lKHdvcmtJblByb2dyZXNzKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaG91bGRVcGRhdGU7XG4gICAgfVxuXG4gICAgaWYgKGN0b3IucHJvdG90eXBlICYmIGN0b3IucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChvbGRQcm9wcywgbmV3UHJvcHMpIHx8ICFzaGFsbG93RXF1YWwob2xkU3RhdGUsIG5ld1N0YXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrQ2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcykge1xuICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICB2YXIgdHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHdvcmtJblByb2dyZXNzKSB8fCAnQ29tcG9uZW50JztcbiAgICAgIHZhciByZW5kZXJQcmVzZW50ID0gaW5zdGFuY2UucmVuZGVyO1xuXG4gICAgICBpZiAoIXJlbmRlclByZXNlbnQpIHtcbiAgICAgICAgaWYgKHR5cGUucHJvdG90eXBlICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgJyArICdpbnN0YW5jZTogZGlkIHlvdSBhY2NpZGVudGFsbHkgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHRoZSBjb25zdHJ1Y3Rvcj8nLCBuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgJyArICdpbnN0YW5jZTogeW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBkZWZpbmUgYHJlbmRlcmAuJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIG5vR2V0SW5pdGlhbFN0YXRlT25FUzYgPSAhaW5zdGFuY2UuZ2V0SW5pdGlhbFN0YXRlIHx8IGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCB8fCBpbnN0YW5jZS5zdGF0ZTtcbiAgICAgIHdhcm5pbmcobm9HZXRJbml0aWFsU3RhdGVPbkVTNiwgJ2dldEluaXRpYWxTdGF0ZSB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICsgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArICdEaWQgeW91IG1lYW4gdG8gZGVmaW5lIGEgc3RhdGUgcHJvcGVydHkgaW5zdGVhZD8nLCBuYW1lKTtcbiAgICAgIHZhciBub0dldERlZmF1bHRQcm9wc09uRVM2ID0gIWluc3RhbmNlLmdldERlZmF1bHRQcm9wcyB8fCBpbnN0YW5jZS5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQ7XG4gICAgICB3YXJuaW5nKG5vR2V0RGVmYXVsdFByb3BzT25FUzYsICdnZXREZWZhdWx0UHJvcHMgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnVXNlIGEgc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBkZWZhdWx0UHJvcHMgaW5zdGVhZC4nLCBuYW1lKTtcbiAgICAgIHZhciBub0luc3RhbmNlUHJvcFR5cGVzID0gIWluc3RhbmNlLnByb3BUeXBlcztcbiAgICAgIHdhcm5pbmcobm9JbnN0YW5jZVByb3BUeXBlcywgJ3Byb3BUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljICcgKyAncHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLicsIG5hbWUpO1xuICAgICAgdmFyIG5vSW5zdGFuY2VDb250ZXh0VHlwZXMgPSAhaW5zdGFuY2UuY29udGV4dFR5cGVzO1xuICAgICAgd2FybmluZyhub0luc3RhbmNlQ29udGV4dFR5cGVzLCAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgJyArICdwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJywgbmFtZSk7XG4gICAgICB2YXIgbm9Db21wb25lbnRTaG91bGRVcGRhdGUgPSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50U2hvdWxkVXBkYXRlICE9PSAnZnVuY3Rpb24nO1xuICAgICAgd2FybmluZyhub0NvbXBvbmVudFNob3VsZFVwZGF0ZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICsgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICsgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsIG5hbWUpO1xuICAgICAgaWYgKHR5cGUucHJvdG90eXBlICYmIHR5cGUucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ICYmIHR5cGVvZiBpbnN0YW5jZS5zaG91bGRDb21wb25lbnRVcGRhdGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpLiAnICsgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZSBzaG91bGQgbm90IGJlIHVzZWQgd2hlbiBleHRlbmRpbmcgUmVhY3QuUHVyZUNvbXBvbmVudC4gJyArICdQbGVhc2UgZXh0ZW5kIFJlYWN0LkNvbXBvbmVudCBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgaXMgdXNlZC4nLCBnZXRDb21wb25lbnROYW1lKHdvcmtJblByb2dyZXNzKSB8fCAnQSBwdXJlIGNvbXBvbmVudCcpO1xuICAgICAgfVxuICAgICAgdmFyIG5vQ29tcG9uZW50RGlkVW5tb3VudCA9IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVbm1vdW50ICE9PSAnZnVuY3Rpb24nO1xuICAgICAgd2FybmluZyhub0NvbXBvbmVudERpZFVubW91bnQsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0RpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsVW5tb3VudCgpPycsIG5hbWUpO1xuICAgICAgdmFyIG5vQ29tcG9uZW50RGlkUmVjZWl2ZVByb3BzID0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFJlY2VpdmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJztcbiAgICAgIHdhcm5pbmcobm9Db21wb25lbnREaWRSZWNlaXZlUHJvcHMsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkUmVjZWl2ZVByb3BzKCkuIEJ1dCB0aGVyZSBpcyBubyBzdWNoIGxpZmVjeWNsZSBtZXRob2QuICcgKyAnSWYgeW91IG1lYW50IHRvIHVwZGF0ZSB0aGUgc3RhdGUgaW4gcmVzcG9uc2UgdG8gY2hhbmdpbmcgcHJvcHMsICcgKyAndXNlIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKS4gSWYgeW91IG1lYW50IHRvIGZldGNoIGRhdGEgb3IgJyArICdydW4gc2lkZS1lZmZlY3RzIG9yIG11dGF0aW9ucyBhZnRlciBSZWFjdCBoYXMgdXBkYXRlZCB0aGUgVUksIHVzZSBjb21wb25lbnREaWRVcGRhdGUoKS4nLCBuYW1lKTtcbiAgICAgIHZhciBub0NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgPSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJztcbiAgICAgIHdhcm5pbmcobm9Db21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCBuYW1lKTtcbiAgICAgIHZhciBub1Vuc2FmZUNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgPSB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgIT09ICdmdW5jdGlvbic7XG4gICAgICB3YXJuaW5nKG5vVW5zYWZlQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCBuYW1lKTtcbiAgICAgIHZhciBoYXNNdXRhdGVkUHJvcHMgPSBpbnN0YW5jZS5wcm9wcyAhPT0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgd2FybmluZyhpbnN0YW5jZS5wcm9wcyA9PT0gdW5kZWZpbmVkIHx8ICFoYXNNdXRhdGVkUHJvcHMsICclcyguLi4pOiBXaGVuIGNhbGxpbmcgc3VwZXIoKSBpbiBgJXNgLCBtYWtlIHN1cmUgdG8gcGFzcyAnICsgXCJ1cCB0aGUgc2FtZSBwcm9wcyB0aGF0IHlvdXIgY29tcG9uZW50J3MgY29uc3RydWN0b3Igd2FzIHBhc3NlZC5cIiwgbmFtZSwgbmFtZSk7XG4gICAgICB2YXIgbm9JbnN0YW5jZURlZmF1bHRQcm9wcyA9ICFpbnN0YW5jZS5kZWZhdWx0UHJvcHM7XG4gICAgICB3YXJuaW5nKG5vSW5zdGFuY2VEZWZhdWx0UHJvcHMsICdTZXR0aW5nIGRlZmF1bHRQcm9wcyBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcyBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIGlnbm9yZWQuJyArICcgSW5zdGVhZCwgZGVmaW5lIGRlZmF1bHRQcm9wcyBhcyBhIHN0YXRpYyBwcm9wZXJ0eSBvbiAlcy4nLCBuYW1lLCBuYW1lKTtcblxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicgJiYgIWRpZFdhcm5BYm91dEdldFNuYXBzaG90QmVmb3JlVXBkYXRlV2l0aG91dERpZFVwZGF0ZS5oYXModHlwZSkpIHtcbiAgICAgICAgZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlLmFkZCh0eXBlKTtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJyVzOiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIHNob3VsZCBiZSB1c2VkIHdpdGggY29tcG9uZW50RGlkVXBkYXRlKCkuICcgKyAnVGhpcyBjb21wb25lbnQgZGVmaW5lcyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIG9ubHkuJywgZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcykpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbm9JbnN0YW5jZUdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IHR5cGVvZiBpbnN0YW5jZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbic7XG4gICAgICB3YXJuaW5nKG5vSW5zdGFuY2VHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsICclczogZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCkgaXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBtZXRob2QgJyArICdhbmQgd2lsbCBiZSBpZ25vcmVkLiBJbnN0ZWFkLCBkZWNsYXJlIGl0IGFzIGEgc3RhdGljIG1ldGhvZC4nLCBuYW1lKTtcbiAgICAgIHZhciBub0luc3RhbmNlR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoID0gdHlwZW9mIGluc3RhbmNlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCAhPT0gJ2Z1bmN0aW9uJztcbiAgICAgIHdhcm5pbmcobm9JbnN0YW5jZUdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCwgJyVzOiBnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2goKSBpcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIG1ldGhvZCAnICsgJ2FuZCB3aWxsIGJlIGlnbm9yZWQuIEluc3RlYWQsIGRlY2xhcmUgaXQgYXMgYSBzdGF0aWMgbWV0aG9kLicsIG5hbWUpO1xuICAgICAgdmFyIG5vU3RhdGljR2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPSB0eXBlb2YgdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJztcbiAgICAgIHdhcm5pbmcobm9TdGF0aWNHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSwgJyVzOiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGlzIGRlZmluZWQgYXMgYSBzdGF0aWMgbWV0aG9kICcgKyAnYW5kIHdpbGwgYmUgaWdub3JlZC4gSW5zdGVhZCwgZGVjbGFyZSBpdCBhcyBhbiBpbnN0YW5jZSBtZXRob2QuJywgbmFtZSk7XG4gICAgICB2YXIgX3N0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG4gICAgICBpZiAoX3N0YXRlICYmICh0eXBlb2YgX3N0YXRlICE9PSAnb2JqZWN0JyB8fCBpc0FycmF5KF9zdGF0ZSkpKSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICclcy5zdGF0ZTogbXVzdCBiZSBzZXQgdG8gYW4gb2JqZWN0IG9yIG51bGwnLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcodHlwZW9mIHR5cGUuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGNoaWxkQ29udGV4dFR5cGVzIG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byAnICsgJ3VzZSBnZXRDaGlsZENvbnRleHQoKS4nLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNldElucHV0UG9pbnRlcnMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UucHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzO1xuICAgIGluc3RhbmNlLnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkb3B0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS51cGRhdGVyID0gdXBkYXRlcjtcbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBpbnN0YW5jZTtcbiAgICAvLyBUaGUgaW5zdGFuY2UgbmVlZHMgYWNjZXNzIHRvIHRoZSBmaWJlciBzbyB0aGF0IGl0IGNhbiBzY2hlZHVsZSB1cGRhdGVzXG4gICAgc2V0KGluc3RhbmNlLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAge1xuICAgICAgaW5zdGFuY2UuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IGZha2VJbnRlcm5hbEluc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHByb3BzKSB7XG4gICAgdmFyIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIHZhciB1bm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgIHZhciBuZWVkc0NvbnRleHQgPSBpc0NvbnRleHRDb25zdW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgdmFyIGNvbnRleHQgPSBuZWVkc0NvbnRleHQgPyBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQpIDogZW1wdHlPYmplY3Q7XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0d2ljZSB0byBoZWxwIGRldGVjdCBzaWRlLWVmZmVjdHMuXG4gICAgaWYgKGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fCBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICBuZXcgY3Rvcihwcm9wcywgY29udGV4dCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gbmV3IGN0b3IocHJvcHMsIGNvbnRleHQpO1xuICAgIHZhciBzdGF0ZSA9IGluc3RhbmNlLnN0YXRlICE9PSBudWxsICYmIGluc3RhbmNlLnN0YXRlICE9PSB1bmRlZmluZWQgPyBpbnN0YW5jZS5zdGF0ZSA6IG51bGw7XG4gICAgYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7XG5cbiAgICB7XG4gICAgICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nICYmIHN0YXRlID09PSBudWxsKSB7XG4gICAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcykgfHwgJ0NvbXBvbmVudCc7XG4gICAgICAgIGlmICghZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlLmhhcyhjb21wb25lbnROYW1lKSkge1xuICAgICAgICAgIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZS5hZGQoY29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgd2FybmluZyhmYWxzZSwgJyVzOiBEaWQgbm90IHByb3Blcmx5IGluaXRpYWxpemUgc3RhdGUgZHVyaW5nIGNvbnN0cnVjdGlvbi4gJyArICdFeHBlY3RlZCBzdGF0ZSB0byBiZSBhbiBvYmplY3QsIGJ1dCBpdCB3YXMgJXMuJywgY29tcG9uZW50TmFtZSwgaW5zdGFuY2Uuc3RhdGUgPT09IG51bGwgPyAnbnVsbCcgOiAndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgbmV3IGNvbXBvbmVudCBBUElzIGFyZSBkZWZpbmVkLCBcInVuc2FmZVwiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLlxuICAgICAgLy8gV2FybiBhYm91dCB0aGVzZSBsaWZlY3ljbGVzIGlmIHRoZXkgYXJlIHByZXNlbnQuXG4gICAgICAvLyBEb24ndCB3YXJuIGFib3V0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgbWV0aG9kcyB0aG91Z2guXG4gICAgICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgICAgICAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICAgICAgICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICAgICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fCBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8IGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgX2NvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKHdvcmtJblByb2dyZXNzKSB8fCAnQ29tcG9uZW50JztcbiAgICAgICAgICB2YXIgbmV3QXBpTmFtZSA9IHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKScgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG4gICAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRMZWdhY3lMaWZlY3ljbGVzQW5kRGVyaXZlZFN0YXRlLmhhcyhfY29tcG9uZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUuYWRkKF9jb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICsgJyVzIHVzZXMgJXMgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczolcyVzJXNcXG5cXG4nICsgJ1RoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJywgX2NvbXBvbmVudE5hbWUsIG5ld0FwaU5hbWUsIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJywgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lIDogJycsIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gc3RhdGU7XG5cbiAgICB2YXIgcGFydGlhbFN0YXRlID0gY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UsIHByb3BzLCBzdGF0ZSk7XG5cbiAgICBpZiAocGFydGlhbFN0YXRlICE9PSBudWxsICYmIHBhcnRpYWxTdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBSZW5kZXItcGhhc2UgdXBkYXRlcyAobGlrZSB0aGlzKSBzaG91bGQgbm90IGJlIGFkZGVkIHRvIHRoZSB1cGRhdGUgcXVldWUsXG4gICAgICAvLyBTbyB0aGF0IG11bHRpcGxlIHJlbmRlciBwYXNzZXMgZG8gbm90IGVucXVldWUgbXVsdGlwbGUgdXBkYXRlcy5cbiAgICAgIC8vIEluc3RlYWQsIGp1c3Qgc3luY2hyb25vdXNseSBtZXJnZSB0aGUgcmV0dXJuZWQgc3RhdGUgaW50byB0aGUgaW5zdGFuY2UuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gX2Fzc2lnbih7fSwgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSwgcGFydGlhbFN0YXRlKTtcbiAgICB9XG5cbiAgICAvLyBDYWNoZSB1bm1hc2tlZCBjb250ZXh0IHNvIHdlIGNhbiBhdm9pZCByZWNyZWF0aW5nIG1hc2tlZCBjb250ZXh0IHVubGVzcyBuZWNlc3NhcnkuXG4gICAgLy8gUmVhY3RGaWJlckNvbnRleHQgdXN1YWxseSB1cGRhdGVzIHRoaXMgY2FjaGUgYnV0IGNhbid0IGZvciBuZXdseS1jcmVhdGVkIGluc3RhbmNlcy5cbiAgICBpZiAobmVlZHNDb250ZXh0KSB7XG4gICAgICBjYWNoZUNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FsbENvbXBvbmVudFdpbGxNb3VudCh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpIHtcbiAgICBzdGFydFBoYXNlVGltZXIod29ya0luUHJvZ3Jlc3MsICdjb21wb25lbnRXaWxsTW91bnQnKTtcbiAgICB2YXIgb2xkU3RhdGUgPSBpbnN0YW5jZS5zdGF0ZTtcblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCk7XG4gICAgfVxuXG4gICAgc3RvcFBoYXNlVGltZXIoKTtcblxuICAgIGlmIChvbGRTdGF0ZSAhPT0gaW5zdGFuY2Uuc3RhdGUpIHtcbiAgICAgIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJyVzLmNvbXBvbmVudFdpbGxNb3VudCgpOiBBc3NpZ25pbmcgZGlyZWN0bHkgdG8gdGhpcy5zdGF0ZSBpcyAnICsgXCJkZXByZWNhdGVkIChleGNlcHQgaW5zaWRlIGEgY29tcG9uZW50J3MgXCIgKyAnY29uc3RydWN0b3IpLiBVc2Ugc2V0U3RhdGUgaW5zdGVhZC4nLCBnZXRDb21wb25lbnROYW1lKHdvcmtJblByb2dyZXNzKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICB9XG4gICAgICB1cGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoaW5zdGFuY2UsIGluc3RhbmNlLnN0YXRlLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UsIG5ld1Byb3BzLCBuZXdDb250ZXh0KSB7XG4gICAgdmFyIG9sZFN0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG4gICAgc3RhcnRQaGFzZVRpbWVyKHdvcmtJblByb2dyZXNzLCAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycpO1xuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV3Q29udGV4dCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXdDb250ZXh0KTtcbiAgICB9XG4gICAgc3RvcFBoYXNlVGltZXIoKTtcblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gb2xkU3RhdGUpIHtcbiAgICAgIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKHdvcmtJblByb2dyZXNzKSB8fCAnQ29tcG9uZW50JztcbiAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdGF0ZUFzc2lnbm1lbnRGb3JDb21wb25lbnQuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgICAgZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50LmFkZChjb21wb25lbnROYW1lKTtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnJXMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpOiBBc3NpZ25pbmcgZGlyZWN0bHkgdG8gJyArIFwidGhpcy5zdGF0ZSBpcyBkZXByZWNhdGVkIChleGNlcHQgaW5zaWRlIGEgY29tcG9uZW50J3MgXCIgKyAnY29uc3RydWN0b3IpLiBVc2Ugc2V0U3RhdGUgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UsIG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuXG5cbiAgICBpZiAodHlwZW9mIHR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIHx8IGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgICAgLy8gSW52b2tlIG1ldGhvZCBhbiBleHRyYSB0aW1lIHRvIGhlbHAgZGV0ZWN0IHNpZGUtZWZmZWN0cy5cbiAgICAgICAgdHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuY2FsbChudWxsLCBuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJ0aWFsU3RhdGUgPSB0eXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5jYWxsKG51bGwsIG5leHRQcm9wcywgcHJldlN0YXRlKTtcblxuICAgICAge1xuICAgICAgICBpZiAocGFydGlhbFN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUod29ya0luUHJvZ3Jlc3MpIHx8ICdDb21wb25lbnQnO1xuICAgICAgICAgIGlmICghZGlkV2FybkFib3V0VW5kZWZpbmVkRGVyaXZlZFN0YXRlLmhhcyhjb21wb25lbnROYW1lKSkge1xuICAgICAgICAgICAgZGlkV2FybkFib3V0VW5kZWZpbmVkRGVyaXZlZFN0YXRlLmFkZChjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICclcy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKTogQSB2YWxpZCBzdGF0ZSBvYmplY3QgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuICcgKyAnWW91IGhhdmUgcmV0dXJuZWQgdW5kZWZpbmVkLicsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFydGlhbFN0YXRlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEludm9rZXMgdGhlIG1vdW50IGxpZmUtY3ljbGVzIG9uIGEgcHJldmlvdXNseSBuZXZlciByZW5kZXJlZCBpbnN0YW5jZS5cbiAgZnVuY3Rpb24gbW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgIHZhciBjdG9yID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcblxuICAgIHtcbiAgICAgIGNoZWNrQ2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHZhciBwcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICB2YXIgdW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcblxuICAgIGluc3RhbmNlLnByb3BzID0gcHJvcHM7XG4gICAgaW5zdGFuY2Uuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGluc3RhbmNlLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICBpbnN0YW5jZS5jb250ZXh0ID0gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KTtcblxuICAgIHtcbiAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5yZWNvcmRVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAod2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMpIHtcbiAgICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkRGVwcmVjYXRpb25XYXJuaW5ncyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluIG9yZGVyIHRvIHN1cHBvcnQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBjb21wb25lbnRzLFxuICAgIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG4gICAgaWYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbicgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICBjYWxsQ29tcG9uZW50V2lsbE1vdW50KHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7XG4gICAgICAvLyBJZiB3ZSBoYWQgYWRkaXRpb25hbCBzdGF0ZSB1cGRhdGVzIGR1cmluZyB0aGlzIGxpZmUtY3ljbGUsIGxldCdzXG4gICAgICAvLyBwcm9jZXNzIHRoZW0gbm93LlxuICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICAgICAgaW5zdGFuY2Uuc3RhdGUgPSBwcm9jZXNzVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSwgcHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXN1bWVNb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgdmFyIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICByZXNldElucHV0UG9pbnRlcnMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcblxuICAgIHZhciBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgdmFyIG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIHZhciBvbGRDb250ZXh0ID0gaW5zdGFuY2UuY29udGV4dDtcbiAgICB2YXIgbmV3VW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICB2YXIgbmV3Q29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIG5ld1VubWFza2VkQ29udGV4dCk7XG5cbiAgICB2YXIgaGFzTmV3TGlmZWN5Y2xlcyA9IHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbic7XG5cbiAgICAvLyBOb3RlOiBEdXJpbmcgdGhlc2UgbGlmZS1jeWNsZXMsIGluc3RhbmNlLnByb3BzL2luc3RhbmNlLnN0YXRlIGFyZSB3aGF0XG4gICAgLy8gZXZlciB0aGUgcHJldmlvdXNseSBhdHRlbXB0ZWQgdG8gcmVuZGVyIC0gbm90IHRoZSBcImN1cnJlbnRcIi4gSG93ZXZlcixcbiAgICAvLyBkdXJpbmcgY29tcG9uZW50RGlkVXBkYXRlIHdlIHBhc3MgdGhlIFwiY3VycmVudFwiIHByb3BzLlxuXG4gICAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gICAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgICBpZiAoIWhhc05ld0xpZmVjeWNsZXMgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gbmV3Q29udGV4dCkge1xuICAgICAgICBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UsIG5ld1Byb3BzLCBuZXdDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIHRoZSBuZXh0IHN0YXRlIHVzaW5nIHRoZSBtZW1vaXplZCBzdGF0ZSBhbmQgdGhlIHVwZGF0ZSBxdWV1ZS5cbiAgICB2YXIgb2xkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIC8vIFRPRE86IFByZXZpb3VzIHN0YXRlIGNhbiBiZSBudWxsLlxuICAgIHZhciBuZXdTdGF0ZSA9IHZvaWQgMDtcbiAgICB2YXIgZGVyaXZlZFN0YXRlRnJvbUNhdGNoID0gdm9pZCAwO1xuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgbmV3U3RhdGUgPSBwcm9jZXNzVXBkYXRlUXVldWUobnVsbCwgd29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSwgbmV3UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcblxuICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwgJiYgdXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXMgIT09IG51bGwgJiYgZW5hYmxlR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoICYmIHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY2FwdHVyZWRWYWx1ZXMgPSB1cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcztcbiAgICAgICAgLy8gRG9uJ3QgcmVtb3ZlIHRoZXNlIGZyb20gdGhlIHVwZGF0ZSBxdWV1ZSB5ZXQuIFdlIG5lZWQgdGhlbSBpblxuICAgICAgICAvLyBmaW5pc2hDbGFzc0NvbXBvbmVudC4gRG8gdGhlIHJlc2V0IHRoZXJlLlxuICAgICAgICAvLyBUT0RPOiBUaGlzIGlzIGF3a3dhcmQuIFJlZmFjdG9yIGNsYXNzIGNvbXBvbmVudHMuXG4gICAgICAgIC8vIHVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzID0gbnVsbDtcbiAgICAgICAgZGVyaXZlZFN0YXRlRnJvbUNhdGNoID0gY2FsbEdldERlcml2ZWRTdGF0ZUZyb21DYXRjaChjdG9yLCBjYXB0dXJlZFZhbHVlcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0YXRlID0gb2xkU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IHZvaWQgMDtcbiAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzKSB7XG4gICAgICAvLyBUaGUgcHJldlN0YXRlIHBhcmFtZXRlciBzaG91bGQgYmUgdGhlIHBhcnRpYWxseSB1cGRhdGVkIHN0YXRlLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBzcHJlYWRpbmcgc3RhdGUgaW4gcmV0dXJuIHZhbHVlcyBjb3VsZCBvdmVycmlkZSB1cGRhdGVzLlxuICAgICAgZGVyaXZlZFN0YXRlRnJvbVByb3BzID0gY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UsIG5ld1Byb3BzLCBuZXdTdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGRlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gbnVsbCAmJiBkZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gUmVuZGVyLXBoYXNlIHVwZGF0ZXMgKGxpa2UgdGhpcykgc2hvdWxkIG5vdCBiZSBhZGRlZCB0byB0aGUgdXBkYXRlIHF1ZXVlLFxuICAgICAgLy8gU28gdGhhdCBtdWx0aXBsZSByZW5kZXIgcGFzc2VzIGRvIG5vdCBlbnF1ZXVlIG11bHRpcGxlIHVwZGF0ZXMuXG4gICAgICAvLyBJbnN0ZWFkLCBqdXN0IHN5bmNocm9ub3VzbHkgbWVyZ2UgdGhlIHJldHVybmVkIHN0YXRlIGludG8gdGhlIGluc3RhbmNlLlxuICAgICAgbmV3U3RhdGUgPSBuZXdTdGF0ZSA9PT0gbnVsbCB8fCBuZXdTdGF0ZSA9PT0gdW5kZWZpbmVkID8gZGVyaXZlZFN0YXRlRnJvbVByb3BzIDogX2Fzc2lnbih7fSwgbmV3U3RhdGUsIGRlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgYmFzZSBzdGF0ZSBvZiB0aGUgdXBkYXRlIHF1ZXVlLlxuICAgICAgLy8gRklYTUU6IFRoaXMgaXMgZ2V0dGluZyByaWRpY3Vsb3VzLiBSZWZhY3RvciBwbHohXG4gICAgICB2YXIgX3VwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICBpZiAoX3VwZGF0ZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgICAgIF91cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBfYXNzaWduKHt9LCBfdXBkYXRlUXVldWUuYmFzZVN0YXRlLCBkZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVyaXZlZFN0YXRlRnJvbUNhdGNoICE9PSBudWxsICYmIGRlcml2ZWRTdGF0ZUZyb21DYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBSZW5kZXItcGhhc2UgdXBkYXRlcyAobGlrZSB0aGlzKSBzaG91bGQgbm90IGJlIGFkZGVkIHRvIHRoZSB1cGRhdGUgcXVldWUsXG4gICAgICAvLyBTbyB0aGF0IG11bHRpcGxlIHJlbmRlciBwYXNzZXMgZG8gbm90IGVucXVldWUgbXVsdGlwbGUgdXBkYXRlcy5cbiAgICAgIC8vIEluc3RlYWQsIGp1c3Qgc3luY2hyb25vdXNseSBtZXJnZSB0aGUgcmV0dXJuZWQgc3RhdGUgaW50byB0aGUgaW5zdGFuY2UuXG4gICAgICBuZXdTdGF0ZSA9IG5ld1N0YXRlID09PSBudWxsIHx8IG5ld1N0YXRlID09PSB1bmRlZmluZWQgPyBkZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggOiBfYXNzaWduKHt9LCBuZXdTdGF0ZSwgZGVyaXZlZFN0YXRlRnJvbUNhdGNoKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBiYXNlIHN0YXRlIG9mIHRoZSB1cGRhdGUgcXVldWUuXG4gICAgICAvLyBGSVhNRTogVGhpcyBpcyBnZXR0aW5nIHJpZGljdWxvdXMuIFJlZmFjdG9yIHBseiFcbiAgICAgIHZhciBfdXBkYXRlUXVldWUyID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICBpZiAoX3VwZGF0ZVF1ZXVlMiAhPT0gbnVsbCkge1xuICAgICAgICBfdXBkYXRlUXVldWUyLmJhc2VTdGF0ZSA9IF9hc3NpZ24oe30sIF91cGRhdGVRdWV1ZTIuYmFzZVN0YXRlLCBkZXJpdmVkU3RhdGVGcm9tQ2F0Y2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbGRQcm9wcyA9PT0gbmV3UHJvcHMgJiYgb2xkU3RhdGUgPT09IG5ld1N0YXRlICYmICFoYXNDb250ZXh0Q2hhbmdlZCgpICYmICEod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgIT09IG51bGwgJiYgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKSB7XG4gICAgICAvLyBJZiBhbiB1cGRhdGUgd2FzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdlIHNob3VsZCBzY2hlZHVsZSBhbiBVcGRhdGVcbiAgICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9IGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKHdvcmtJblByb2dyZXNzLCBvbGRQcm9wcywgbmV3UHJvcHMsIG9sZFN0YXRlLCBuZXdTdGF0ZSwgbmV3Q29udGV4dCk7XG5cbiAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAvLyBJbiBvcmRlciB0byBzdXBwb3J0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgY29tcG9uZW50cyxcbiAgICAgIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG4gICAgICBpZiAoIWhhc05ld0xpZmVjeWNsZXMgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHN0YXJ0UGhhc2VUaW1lcih3b3JrSW5Qcm9ncmVzcywgJ2NvbXBvbmVudFdpbGxNb3VudCcpO1xuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgICAgfVxuICAgICAgICBzdG9wUGhhc2VUaW1lcigpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBhbiB1cGRhdGUgd2FzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdlIHNob3VsZCBzY2hlZHVsZSBhbiBVcGRhdGVcbiAgICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHNob3VsZENvbXBvbmVudFVwZGF0ZSByZXR1cm5lZCBmYWxzZSwgd2Ugc2hvdWxkIHN0aWxsIHVwZGF0ZSB0aGVcbiAgICAgIC8vIG1lbW9pemVkIHByb3BzL3N0YXRlIHRvIGluZGljYXRlIHRoYXQgdGhpcyB3b3JrIGNhbiBiZSByZXVzZWQuXG4gICAgICBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5ld1Byb3BzKTtcbiAgICAgIG1lbW9pemVTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgbmV3U3RhdGUpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UncyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHBvaW50ZXJzIGV2ZW5cbiAgICAvLyBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZS5cbiAgICBpbnN0YW5jZS5wcm9wcyA9IG5ld1Byb3BzO1xuICAgIGluc3RhbmNlLnN0YXRlID0gbmV3U3RhdGU7XG4gICAgaW5zdGFuY2UuY29udGV4dCA9IG5ld0NvbnRleHQ7XG5cbiAgICByZXR1cm4gc2hvdWxkVXBkYXRlO1xuICB9XG5cbiAgLy8gSW52b2tlcyB0aGUgdXBkYXRlIGxpZmUtY3ljbGVzIGFuZCByZXR1cm5zIGZhbHNlIGlmIGl0IHNob3VsZG4ndCByZXJlbmRlci5cbiAgZnVuY3Rpb24gdXBkYXRlQ2xhc3NJbnN0YW5jZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICB2YXIgY3RvciA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHJlc2V0SW5wdXRQb2ludGVycyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpO1xuXG4gICAgdmFyIG9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgdmFyIG9sZENvbnRleHQgPSBpbnN0YW5jZS5jb250ZXh0O1xuICAgIHZhciBuZXdVbm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgIHZhciBuZXdDb250ZXh0ID0gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgbmV3VW5tYXNrZWRDb250ZXh0KTtcblxuICAgIHZhciBoYXNOZXdMaWZlY3ljbGVzID0gdHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIC8vIE5vdGU6IER1cmluZyB0aGVzZSBsaWZlLWN5Y2xlcywgaW5zdGFuY2UucHJvcHMvaW5zdGFuY2Uuc3RhdGUgYXJlIHdoYXRcbiAgICAvLyBldmVyIHRoZSBwcmV2aW91c2x5IGF0dGVtcHRlZCB0byByZW5kZXIgLSBub3QgdGhlIFwiY3VycmVudFwiLiBIb3dldmVyLFxuICAgIC8vIGR1cmluZyBjb21wb25lbnREaWRVcGRhdGUgd2UgcGFzcyB0aGUgXCJjdXJyZW50XCIgcHJvcHMuXG5cbiAgICAvLyBJbiBvcmRlciB0byBzdXBwb3J0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgY29tcG9uZW50cyxcbiAgICAvLyBVbnNhZmUgbGlmZWN5Y2xlcyBzaG91bGQgbm90IGJlIGludm9rZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgdGhlIG5ldyBBUElzLlxuICAgIGlmICghaGFzTmV3TGlmZWN5Y2xlcyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcyB8fCBvbGRDb250ZXh0ICE9PSBuZXdDb250ZXh0KSB7XG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSwgbmV3UHJvcHMsIG5ld0NvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbXB1dGUgdGhlIG5leHQgc3RhdGUgdXNpbmcgdGhlIG1lbW9pemVkIHN0YXRlIGFuZCB0aGUgdXBkYXRlIHF1ZXVlLlxuICAgIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgLy8gVE9ETzogUHJldmlvdXMgc3RhdGUgY2FuIGJlIG51bGwuXG4gICAgdmFyIG5ld1N0YXRlID0gdm9pZCAwO1xuICAgIHZhciBkZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggPSB2b2lkIDA7XG5cbiAgICBpZiAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICAgIG5ld1N0YXRlID0gcHJvY2Vzc1VwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSwgaW5zdGFuY2UsIG5ld1Byb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG5cbiAgICAgIHZhciB1cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsICYmIHVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsICYmIGVuYWJsZUdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCAmJiB0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGNhcHR1cmVkVmFsdWVzID0gdXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM7XG4gICAgICAgIC8vIERvbid0IHJlbW92ZSB0aGVzZSBmcm9tIHRoZSB1cGRhdGUgcXVldWUgeWV0LiBXZSBuZWVkIHRoZW0gaW5cbiAgICAgICAgLy8gZmluaXNoQ2xhc3NDb21wb25lbnQuIERvIHRoZSByZXNldCB0aGVyZS5cbiAgICAgICAgLy8gVE9ETzogVGhpcyBpcyBhd2t3YXJkLiBSZWZhY3RvciBjbGFzcyBjb21wb25lbnRzLlxuICAgICAgICAvLyB1cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcyA9IG51bGw7XG4gICAgICAgIGRlcml2ZWRTdGF0ZUZyb21DYXRjaCA9IGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2goY3RvciwgY2FwdHVyZWRWYWx1ZXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdGF0ZSA9IG9sZFN0YXRlO1xuICAgIH1cblxuICAgIHZhciBkZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSB2b2lkIDA7XG4gICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcykge1xuICAgICAgLy8gVGhlIHByZXZTdGF0ZSBwYXJhbWV0ZXIgc2hvdWxkIGJlIHRoZSBwYXJ0aWFsbHkgdXBkYXRlZCBzdGF0ZS5cbiAgICAgIC8vIE90aGVyd2lzZSwgc3ByZWFkaW5nIHN0YXRlIGluIHJldHVybiB2YWx1ZXMgY291bGQgb3ZlcnJpZGUgdXBkYXRlcy5cbiAgICAgIGRlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlLCBuZXdQcm9wcywgbmV3U3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChkZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09IG51bGwgJiYgZGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFJlbmRlci1waGFzZSB1cGRhdGVzIChsaWtlIHRoaXMpIHNob3VsZCBub3QgYmUgYWRkZWQgdG8gdGhlIHVwZGF0ZSBxdWV1ZSxcbiAgICAgIC8vIFNvIHRoYXQgbXVsdGlwbGUgcmVuZGVyIHBhc3NlcyBkbyBub3QgZW5xdWV1ZSBtdWx0aXBsZSB1cGRhdGVzLlxuICAgICAgLy8gSW5zdGVhZCwganVzdCBzeW5jaHJvbm91c2x5IG1lcmdlIHRoZSByZXR1cm5lZCBzdGF0ZSBpbnRvIHRoZSBpbnN0YW5jZS5cbiAgICAgIG5ld1N0YXRlID0gbmV3U3RhdGUgPT09IG51bGwgfHwgbmV3U3RhdGUgPT09IHVuZGVmaW5lZCA/IGRlcml2ZWRTdGF0ZUZyb21Qcm9wcyA6IF9hc3NpZ24oe30sIG5ld1N0YXRlLCBkZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGJhc2Ugc3RhdGUgb2YgdGhlIHVwZGF0ZSBxdWV1ZS5cbiAgICAgIC8vIEZJWE1FOiBUaGlzIGlzIGdldHRpbmcgcmlkaWN1bG91cy4gUmVmYWN0b3IgcGx6IVxuICAgICAgdmFyIF91cGRhdGVRdWV1ZTMgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICAgIGlmIChfdXBkYXRlUXVldWUzICE9PSBudWxsKSB7XG4gICAgICAgIF91cGRhdGVRdWV1ZTMuYmFzZVN0YXRlID0gX2Fzc2lnbih7fSwgX3VwZGF0ZVF1ZXVlMy5iYXNlU3RhdGUsIGRlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggIT09IG51bGwgJiYgZGVyaXZlZFN0YXRlRnJvbUNhdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFJlbmRlci1waGFzZSB1cGRhdGVzIChsaWtlIHRoaXMpIHNob3VsZCBub3QgYmUgYWRkZWQgdG8gdGhlIHVwZGF0ZSBxdWV1ZSxcbiAgICAgIC8vIFNvIHRoYXQgbXVsdGlwbGUgcmVuZGVyIHBhc3NlcyBkbyBub3QgZW5xdWV1ZSBtdWx0aXBsZSB1cGRhdGVzLlxuICAgICAgLy8gSW5zdGVhZCwganVzdCBzeW5jaHJvbm91c2x5IG1lcmdlIHRoZSByZXR1cm5lZCBzdGF0ZSBpbnRvIHRoZSBpbnN0YW5jZS5cbiAgICAgIG5ld1N0YXRlID0gbmV3U3RhdGUgPT09IG51bGwgfHwgbmV3U3RhdGUgPT09IHVuZGVmaW5lZCA/IGRlcml2ZWRTdGF0ZUZyb21DYXRjaCA6IF9hc3NpZ24oe30sIG5ld1N0YXRlLCBkZXJpdmVkU3RhdGVGcm9tQ2F0Y2gpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGJhc2Ugc3RhdGUgb2YgdGhlIHVwZGF0ZSBxdWV1ZS5cbiAgICAgIC8vIEZJWE1FOiBUaGlzIGlzIGdldHRpbmcgcmlkaWN1bG91cy4gUmVmYWN0b3IgcGx6IVxuICAgICAgdmFyIF91cGRhdGVRdWV1ZTQgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICAgIGlmIChfdXBkYXRlUXVldWU0ICE9PSBudWxsKSB7XG4gICAgICAgIF91cGRhdGVRdWV1ZTQuYmFzZVN0YXRlID0gX2Fzc2lnbih7fSwgX3VwZGF0ZVF1ZXVlNC5iYXNlU3RhdGUsIGRlcml2ZWRTdGF0ZUZyb21DYXRjaCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9sZFByb3BzID09PSBuZXdQcm9wcyAmJiBvbGRTdGF0ZSA9PT0gbmV3U3RhdGUgJiYgIWhhc0NvbnRleHRDaGFuZ2VkKCkgJiYgISh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSAhPT0gbnVsbCAmJiB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpIHtcbiAgICAgIC8vIElmIGFuIHVwZGF0ZSB3YXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgd2Ugc2hvdWxkIHNjaGVkdWxlIGFuIFVwZGF0ZVxuICAgICAgLy8gZWZmZWN0IGV2ZW4gdGhvdWdoIHdlJ3JlIGJhaWxpbmcgb3V0LCBzbyB0aGF0IGNXVS9jRFUgYXJlIGNhbGxlZC5cbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChvbGRQcm9wcyAhPT0gY3VycmVudC5tZW1vaXplZFByb3BzIHx8IG9sZFN0YXRlICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChvbGRQcm9wcyAhPT0gY3VycmVudC5tZW1vaXplZFByb3BzIHx8IG9sZFN0YXRlICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gU25hcHNob3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIG9sZFByb3BzLCBuZXdQcm9wcywgb2xkU3RhdGUsIG5ld1N0YXRlLCBuZXdDb250ZXh0KTtcblxuICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgIC8vIEluIG9yZGVyIHRvIHN1cHBvcnQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBjb21wb25lbnRzLFxuICAgICAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgICAgIGlmICghaGFzTmV3TGlmZWN5Y2xlcyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICBzdGFydFBoYXNlVGltZXIod29ya0luUHJvZ3Jlc3MsICdjb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUobmV3UHJvcHMsIG5ld1N0YXRlLCBuZXdDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUobmV3UHJvcHMsIG5ld1N0YXRlLCBuZXdDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBzdG9wUGhhc2VUaW1lcigpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFNuYXBzaG90O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBhbiB1cGRhdGUgd2FzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdlIHNob3VsZCBzY2hlZHVsZSBhbiBVcGRhdGVcbiAgICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAob2xkUHJvcHMgIT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAob2xkUHJvcHMgIT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFNuYXBzaG90O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHNob3VsZENvbXBvbmVudFVwZGF0ZSByZXR1cm5lZCBmYWxzZSwgd2Ugc2hvdWxkIHN0aWxsIHVwZGF0ZSB0aGVcbiAgICAgIC8vIG1lbW9pemVkIHByb3BzL3N0YXRlIHRvIGluZGljYXRlIHRoYXQgdGhpcyB3b3JrIGNhbiBiZSByZXVzZWQuXG4gICAgICBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5ld1Byb3BzKTtcbiAgICAgIG1lbW9pemVTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgbmV3U3RhdGUpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UncyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHBvaW50ZXJzIGV2ZW5cbiAgICAvLyBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZS5cbiAgICBpbnN0YW5jZS5wcm9wcyA9IG5ld1Byb3BzO1xuICAgIGluc3RhbmNlLnN0YXRlID0gbmV3U3RhdGU7XG4gICAgaW5zdGFuY2UuY29udGV4dCA9IG5ld0NvbnRleHQ7XG5cbiAgICByZXR1cm4gc2hvdWxkVXBkYXRlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZG9wdENsYXNzSW5zdGFuY2U6IGFkb3B0Q2xhc3NJbnN0YW5jZSxcbiAgICBjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiBjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFxuICAgIGNvbnN0cnVjdENsYXNzSW5zdGFuY2U6IGNvbnN0cnVjdENsYXNzSW5zdGFuY2UsXG4gICAgbW91bnRDbGFzc0luc3RhbmNlOiBtb3VudENsYXNzSW5zdGFuY2UsXG4gICAgcmVzdW1lTW91bnRDbGFzc0luc3RhbmNlOiByZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsXG4gICAgdXBkYXRlQ2xhc3NJbnN0YW5jZTogdXBkYXRlQ2xhc3NJbnN0YW5jZVxuICB9O1xufTtcblxudmFyIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMiA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bTtcblxuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRTdHJpbmdSZWZJblN0cmljdE1vZGUgPSB2b2lkIDA7XG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0gdm9pZCAwO1xudmFyIG93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZyA9IHZvaWQgMDtcbnZhciB3YXJuRm9yTWlzc2luZ0tleSA9IGZ1bmN0aW9uIChjaGlsZCkge307XG5cbntcbiAgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xuICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZJblN0cmljdE1vZGUgPSB7fTtcblxuICAvKipcbiAgICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuICAgKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAgICogdXBkYXRlcy5cbiAgICovXG4gIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHt9O1xuICBvd25lckhhc0Z1bmN0aW9uVHlwZVdhcm5pbmcgPSB7fTtcblxuICB3YXJuRm9yTWlzc2luZ0tleSA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCA9PT0gbnVsbCB8fCB0eXBlb2YgY2hpbGQgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghY2hpbGQuX3N0b3JlIHx8IGNoaWxkLl9zdG9yZS52YWxpZGF0ZWQgfHwgY2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgISh0eXBlb2YgY2hpbGQuX3N0b3JlID09PSAnb2JqZWN0JykgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdCBDb21wb25lbnQgaW4gd2FybkZvck1pc3NpbmdLZXkgc2hvdWxkIGhhdmUgYSBfc3RvcmUuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgY2hpbGQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cbiAgICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9ICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlICcgKyAnXCJrZXlcIiBwcm9wLiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yICcgKyAnbW9yZSBpbmZvcm1hdGlvbi4nICsgKGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMigpIHx8ICcnKTtcbiAgICBpZiAob3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7XG5cbiAgICB3YXJuaW5nKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSAnICsgJ1wia2V5XCIgcHJvcC4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciAnICsgJ21vcmUgaW5mb3JtYXRpb24uJXMnLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDIoKSk7XG4gIH07XG59XG5cbnZhciBpc0FycmF5JDEgPSBBcnJheS5pc0FycmF5O1xuXG5mdW5jdGlvbiBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQpIHtcbiAgdmFyIG1peGVkUmVmID0gZWxlbWVudC5yZWY7XG4gIGlmIChtaXhlZFJlZiAhPT0gbnVsbCAmJiB0eXBlb2YgbWl4ZWRSZWYgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG1peGVkUmVmICE9PSAnb2JqZWN0Jykge1xuICAgIHtcbiAgICAgIGlmIChyZXR1cm5GaWJlci5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUocmV0dXJuRmliZXIpIHx8ICdDb21wb25lbnQnO1xuICAgICAgICBpZiAoIWRpZFdhcm5BYm91dFN0cmluZ1JlZkluU3RyaWN0TW9kZVtjb21wb25lbnROYW1lXSkge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdBIHN0cmluZyByZWYsIFwiJXNcIizCoGhhcyBiZWVuIGZvdW5kIHdpdGhpbiBhIHN0cmljdCBtb2RlIHRyZWUuICcgKyAnU3RyaW5nIHJlZnMgYXJlIGEgc291cmNlIG9mIHBvdGVudGlhbCBidWdzIGFuZCBzaG91bGQgYmUgYXZvaWRlZC4gJyArICdXZSByZWNvbW1lbmQgdXNpbmcgY3JlYXRlUmVmKCkgaW5zdGVhZC4nICsgJ1xcbiVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LXN0cmljdC1tb2RlLXN0cmluZy1yZWYnLCBtaXhlZFJlZiwgZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcihyZXR1cm5GaWJlcikpO1xuICAgICAgICAgIGRpZFdhcm5BYm91dFN0cmluZ1JlZkluU3RyaWN0TW9kZVtjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5fb3duZXIpIHtcbiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIGluc3QgPSB2b2lkIDA7XG4gICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgdmFyIG93bmVyRmliZXIgPSBvd25lcjtcbiAgICAgICAgIShvd25lckZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpID8gaW52YXJpYW50KGZhbHNlLCAnU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGhhdmUgcmVmcy4nKSA6IHZvaWQgMDtcbiAgICAgICAgaW5zdCA9IG93bmVyRmliZXIuc3RhdGVOb2RlO1xuICAgICAgfVxuICAgICAgIWluc3QgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNzaW5nIG93bmVyIGZvciBzdHJpbmcgcmVmICVzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicsIG1peGVkUmVmKSA6IHZvaWQgMDtcbiAgICAgIHZhciBzdHJpbmdSZWYgPSAnJyArIG1peGVkUmVmO1xuICAgICAgLy8gQ2hlY2sgaWYgcHJldmlvdXMgc3RyaW5nIHJlZiBtYXRjaGVzIG5ldyBzdHJpbmcgcmVmXG4gICAgICBpZiAoY3VycmVudCAhPT0gbnVsbCAmJiBjdXJyZW50LnJlZiAhPT0gbnVsbCAmJiBjdXJyZW50LnJlZi5fc3RyaW5nUmVmID09PSBzdHJpbmdSZWYpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQucmVmO1xuICAgICAgfVxuICAgICAgdmFyIHJlZiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVmcyA9IGluc3QucmVmcyA9PT0gZW1wdHlPYmplY3QgPyBpbnN0LnJlZnMgPSB7fSA6IGluc3QucmVmcztcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgZGVsZXRlIHJlZnNbc3RyaW5nUmVmXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWZzW3N0cmluZ1JlZl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJlZi5fc3RyaW5nUmVmID0gc3RyaW5nUmVmO1xuICAgICAgcmV0dXJuIHJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgISh0eXBlb2YgbWl4ZWRSZWYgPT09ICdzdHJpbmcnKSA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHJlZiB0byBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nLicpIDogdm9pZCAwO1xuICAgICAgIWVsZW1lbnQuX293bmVyID8gaW52YXJpYW50KGZhbHNlLCAnRWxlbWVudCByZWYgd2FzIHNwZWNpZmllZCBhcyBhIHN0cmluZyAoJXMpIGJ1dCBubyBvd25lciB3YXMgc2V0LiBUaGlzIGNvdWxkIGhhcHBlbiBmb3Igb25lIG9mIHRoZSBmb2xsb3dpbmcgcmVhc29uczpcXG4xLiBZb3UgbWF5IGJlIGFkZGluZyBhIHJlZiB0byBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XFxuMi4gWW91IG1heSBiZSBhZGRpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50XFwncyByZW5kZXIgbWV0aG9kXFxuMy4gWW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZFxcblNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXJlZnMtbXVzdC1oYXZlLW93bmVyIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIG1peGVkUmVmKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1peGVkUmVmO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSB7XG4gIGlmIChyZXR1cm5GaWJlci50eXBlICE9PSAndGV4dGFyZWEnKSB7XG4gICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAge1xuICAgICAgYWRkZW5kdW0gPSAnIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgJyArICdpbnN0ZWFkLicgKyAoZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQyKCkgfHwgJycpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoZmFsc2UsICdPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lcycsIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdDaGlsZCkgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhuZXdDaGlsZCkuam9pbignLCAnKSArICd9JyA6IG5ld0NoaWxkLCBhZGRlbmR1bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2Fybk9uRnVuY3Rpb25UeXBlKCkge1xuICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9ICdGdW5jdGlvbnMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkLiBUaGlzIG1heSBoYXBwZW4gaWYgJyArICd5b3UgcmV0dXJuIGEgQ29tcG9uZW50IGluc3RlYWQgb2YgPENvbXBvbmVudCAvPiBmcm9tIHJlbmRlci4gJyArICdPciBtYXliZSB5b3UgbWVhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHJldHVybiBpdC4nICsgKGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMigpIHx8ICcnKTtcblxuICBpZiAob3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7XG5cbiAgd2FybmluZyhmYWxzZSwgJ0Z1bmN0aW9ucyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQuIFRoaXMgbWF5IGhhcHBlbiBpZiAnICsgJ3lvdSByZXR1cm4gYSBDb21wb25lbnQgaW5zdGVhZCBvZiA8Q29tcG9uZW50IC8+IGZyb20gcmVuZGVyLiAnICsgJ09yIG1heWJlIHlvdSBtZWFudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gcmV0dXJuIGl0LiVzJywgZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQyKCkgfHwgJycpO1xufVxuXG4vLyBUaGlzIHdyYXBwZXIgZnVuY3Rpb24gZXhpc3RzIGJlY2F1c2UgSSBleHBlY3QgdG8gY2xvbmUgdGhlIGNvZGUgaW4gZWFjaCBwYXRoXG4vLyB0byBiZSBhYmxlIHRvIG9wdGltaXplIGVhY2ggcGF0aCBpbmRpdmlkdWFsbHkgYnkgYnJhbmNoaW5nIGVhcmx5LiBUaGlzIG5lZWRzXG4vLyBhIGNvbXBpbGVyIG9yIHdlIGNhbiBkbyBpdCBtYW51YWxseS4gSGVscGVycyB0aGF0IGRvbid0IG5lZWQgdGhpcyBicmFuY2hpbmdcbi8vIGxpdmUgb3V0c2lkZSBvZiB0aGlzIGZ1bmN0aW9uLlxuZnVuY3Rpb24gQ2hpbGRSZWNvbmNpbGVyKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIE5vb3AuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIERlbGV0aW9ucyBhcmUgYWRkZWQgaW4gcmV2ZXJzZWQgb3JkZXIgc28gd2UgYWRkIGl0IHRvIHRoZSBmcm9udC5cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgcmV0dXJuIGZpYmVyJ3MgZWZmZWN0IGxpc3QgaXMgZW1wdHkgZXhjZXB0IGZvclxuICAgIC8vIGRlbGV0aW9ucywgc28gd2UgY2FuIGp1c3QgYXBwZW5kIHRoZSBkZWxldGlvbiB0byB0aGUgbGlzdC4gVGhlIHJlbWFpbmluZ1xuICAgIC8vIGVmZmVjdHMgYXJlbid0IGFkZGVkIHVudGlsIHRoZSBjb21wbGV0ZSBwaGFzZS4gT25jZSB3ZSBpbXBsZW1lbnRcbiAgICAvLyByZXN1bWluZywgdGhpcyBtYXkgbm90IGJlIHRydWUuXG4gICAgdmFyIGxhc3QgPSByZXR1cm5GaWJlci5sYXN0RWZmZWN0O1xuICAgIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgICBsYXN0Lm5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfVxuICAgIGNoaWxkVG9EZWxldGUubmV4dEVmZmVjdCA9IG51bGw7XG4gICAgY2hpbGRUb0RlbGV0ZS5lZmZlY3RUYWcgPSBEZWxldGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCkge1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gTm9vcC5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIFRPRE86IEZvciB0aGUgc2hvdWxkQ2xvbmUgY2FzZSwgdGhpcyBjb3VsZCBiZSBtaWNyby1vcHRpbWl6ZWQgYSBiaXQgYnlcbiAgICAvLyBhc3N1bWluZyB0aGF0IGFmdGVyIHRoZSBmaXJzdCBjaGlsZCB3ZSd2ZSBhbHJlYWR5IGFkZGVkIGV2ZXJ5dGhpbmcuXG4gICAgdmFyIGNoaWxkVG9EZWxldGUgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoY2hpbGRUb0RlbGV0ZSAhPT0gbnVsbCkge1xuICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpO1xuICAgICAgY2hpbGRUb0RlbGV0ZSA9IGNoaWxkVG9EZWxldGUuc2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpIHtcbiAgICAvLyBBZGQgdGhlIHJlbWFpbmluZyBjaGlsZHJlbiB0byBhIHRlbXBvcmFyeSBtYXAgc28gdGhhdCB3ZSBjYW4gZmluZCB0aGVtIGJ5XG4gICAgLy8ga2V5cyBxdWlja2x5LiBJbXBsaWNpdCAobnVsbCkga2V5cyBnZXQgYWRkZWQgdG8gdGhpcyBzZXQgd2l0aCB0aGVpciBpbmRleFxuICAgIHZhciBleGlzdGluZ0NoaWxkcmVuID0gbmV3IE1hcCgpO1xuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoZXhpc3RpbmdDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGV4aXN0aW5nQ2hpbGQua2V5ICE9PSBudWxsKSB7XG4gICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGV4aXN0aW5nQ2hpbGQua2V5LCBleGlzdGluZ0NoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGV4aXN0aW5nQ2hpbGQuaW5kZXgsIGV4aXN0aW5nQ2hpbGQpO1xuICAgICAgfVxuICAgICAgZXhpc3RpbmdDaGlsZCA9IGV4aXN0aW5nQ2hpbGQuc2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cblxuICBmdW5jdGlvbiB1c2VGaWJlcihmaWJlciwgcGVuZGluZ1Byb3BzLCBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFdlIGN1cnJlbnRseSBzZXQgc2libGluZyB0byBudWxsIGFuZCBpbmRleCB0byAwIGhlcmUgYmVjYXVzZSBpdCBpcyBlYXN5XG4gICAgLy8gdG8gZm9yZ2V0IHRvIGRvIGJlZm9yZSByZXR1cm5pbmcgaXQuIEUuZy4gZm9yIHRoZSBzaW5nbGUgY2hpbGQgY2FzZS5cbiAgICB2YXIgY2xvbmUgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhmaWJlciwgcGVuZGluZ1Byb3BzLCBleHBpcmF0aW9uVGltZSk7XG4gICAgY2xvbmUuaW5kZXggPSAwO1xuICAgIGNsb25lLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlQ2hpbGQobmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SW5kZXgpIHtcbiAgICBuZXdGaWJlci5pbmRleCA9IG5ld0luZGV4O1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gTm9vcC5cbiAgICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gICAgfVxuICAgIHZhciBjdXJyZW50ID0gbmV3RmliZXIuYWx0ZXJuYXRlO1xuICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICB2YXIgb2xkSW5kZXggPSBjdXJyZW50LmluZGV4O1xuICAgICAgaWYgKG9sZEluZGV4IDwgbGFzdFBsYWNlZEluZGV4KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBtb3ZlLlxuICAgICAgICBuZXdGaWJlci5lZmZlY3RUYWcgPSBQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIGl0ZW0gY2FuIHN0YXkgaW4gcGxhY2UuXG4gICAgICAgIHJldHVybiBvbGRJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBpcyBhbiBpbnNlcnRpb24uXG4gICAgICBuZXdGaWJlci5lZmZlY3RUYWcgPSBQbGFjZW1lbnQ7XG4gICAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlU2luZ2xlQ2hpbGQobmV3RmliZXIpIHtcbiAgICAvLyBUaGlzIGlzIHNpbXBsZXIgZm9yIHRoZSBzaW5nbGUgY2hpbGQgY2FzZS4gV2Ugb25seSBuZWVkIHRvIGRvIGFcbiAgICAvLyBwbGFjZW1lbnQgZm9yIGluc2VydGluZyBuZXcgY2hpbGRyZW4uXG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiYgbmV3RmliZXIuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICBuZXdGaWJlci5lZmZlY3RUYWcgPSBQbGFjZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBuZXdGaWJlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50LCB0ZXh0Q29udGVudCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCB8fCBjdXJyZW50LnRhZyAhPT0gSG9zdFRleHQpIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBjcmVhdGVkWydyZXR1cm4nXSA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZVxuICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgdGV4dENvbnRlbnQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGV4aXN0aW5nWydyZXR1cm4nXSA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC50eXBlID09PSBlbGVtZW50LnR5cGUpIHtcbiAgICAgIC8vIE1vdmUgYmFzZWQgb24gaW5kZXhcbiAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnQsIGVsZW1lbnQucHJvcHMsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGV4aXN0aW5nLnJlZiA9IGNvZXJjZVJlZihyZXR1cm5GaWJlciwgY3VycmVudCwgZWxlbWVudCk7XG4gICAgICBleGlzdGluZ1sncmV0dXJuJ10gPSByZXR1cm5GaWJlcjtcbiAgICAgIHtcbiAgICAgICAgZXhpc3RpbmcuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgICAgICBleGlzdGluZy5fZGVidWdPd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJbnNlcnRcbiAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tRWxlbWVudChlbGVtZW50LCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBjcmVhdGVkLnJlZiA9IGNvZXJjZVJlZihyZXR1cm5GaWJlciwgY3VycmVudCwgZWxlbWVudCk7XG4gICAgICBjcmVhdGVkWydyZXR1cm4nXSA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBjdXJyZW50LCBwb3J0YWwsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudC50YWcgIT09IEhvc3RQb3J0YWwgfHwgY3VycmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyAhPT0gcG9ydGFsLmNvbnRhaW5lckluZm8gfHwgY3VycmVudC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvbikge1xuICAgICAgLy8gSW5zZXJ0XG4gICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGNyZWF0ZWRbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXBkYXRlXG4gICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50LCBwb3J0YWwuY2hpbGRyZW4gfHwgW10sIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGV4aXN0aW5nWydyZXR1cm4nXSA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBjdXJyZW50LCBmcmFnbWVudCwgZXhwaXJhdGlvblRpbWUsIGtleSkge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQudGFnICE9PSBGcmFnbWVudCkge1xuICAgICAgLy8gSW5zZXJ0XG4gICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGZyYWdtZW50LCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSwga2V5KTtcbiAgICAgIGNyZWF0ZWRbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXBkYXRlXG4gICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50LCBmcmFnbWVudCwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgZXhpc3RpbmdbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSkge1xuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBrZXlzLiBJZiB0aGUgcHJldmlvdXMgbm9kZSBpcyBpbXBsaWNpdGx5IGtleWVkXG4gICAgICAvLyB3ZSBjYW4gY29udGludWUgdG8gcmVwbGFjZSBpdCB3aXRob3V0IGFib3J0aW5nIGV2ZW4gaWYgaXQgaXMgbm90IGEgdGV4dFxuICAgICAgLy8gbm9kZS5cbiAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tVGV4dCgnJyArIG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBjcmVhdGVkWydyZXR1cm4nXSA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9jcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tRWxlbWVudChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgICAgX2NyZWF0ZWQucmVmID0gY29lcmNlUmVmKHJldHVybkZpYmVyLCBudWxsLCBuZXdDaGlsZCk7XG4gICAgICAgICAgICBfY3JlYXRlZFsncmV0dXJuJ10gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIHJldHVybiBfY3JlYXRlZDtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9jcmVhdGVkMiA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgICAgX2NyZWF0ZWQyWydyZXR1cm4nXSA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVkMjtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5JDEobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIHZhciBfY3JlYXRlZDMgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUsIG51bGwpO1xuICAgICAgICBfY3JlYXRlZDNbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICAgIHJldHVybiBfY3JlYXRlZDM7XG4gICAgICB9XG5cbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVXBkYXRlIHRoZSBmaWJlciBpZiB0aGUga2V5cyBtYXRjaCwgb3RoZXJ3aXNlIHJldHVybiBudWxsLlxuXG4gICAgdmFyIGtleSA9IG9sZEZpYmVyICE9PSBudWxsID8gb2xkRmliZXIua2V5IDogbnVsbDtcblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBrZXlzLiBJZiB0aGUgcHJldmlvdXMgbm9kZSBpcyBpbXBsaWNpdGx5IGtleWVkXG4gICAgICAvLyB3ZSBjYW4gY29udGludWUgdG8gcmVwbGFjZSBpdCB3aXRob3V0IGFib3J0aW5nIGV2ZW4gaWYgaXQgaXMgbm90IGEgdGV4dFxuICAgICAgLy8gbm9kZS5cbiAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIG9sZEZpYmVyLCAnJyArIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKG5ld0NoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIGlmIChuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sIGV4cGlyYXRpb25UaW1lLCBrZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5JDEobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSwgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVGcm9tTWFwKGV4aXN0aW5nQ2hpbGRyZW4sIHJldHVybkZpYmVyLCBuZXdJZHgsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSkge1xuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBrZXlzLCBzbyB3ZSBuZWl0aGVyIGhhdmUgdG8gY2hlY2sgdGhlIG9sZCBub3JcbiAgICAgIC8vIG5ldyBub2RlIGZvciB0aGUga2V5LiBJZiBib3RoIGFyZSB0ZXh0IG5vZGVzLCB0aGV5IG1hdGNoLlxuICAgICAgdmFyIG1hdGNoZWRGaWJlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbDtcbiAgICAgIHJldHVybiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgbWF0Y2hlZEZpYmVyLCAnJyArIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9tYXRjaGVkRmliZXIgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdDaGlsZC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXkpIHx8IG51bGw7XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIF9tYXRjaGVkRmliZXIsIG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuLCBleHBpcmF0aW9uVGltZSwgbmV3Q2hpbGQua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX21hdGNoZWRGaWJlcjIgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdDaGlsZC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXkpIHx8IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyMiwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5JDEobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIHZhciBfbWF0Y2hlZEZpYmVyMyA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyMywgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuXG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuT25GdW5jdGlvblR5cGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYXJucyBpZiB0aGVyZSBpcyBhIGR1cGxpY2F0ZSBvciBtaXNzaW5nIGtleVxuICAgKi9cbiAgZnVuY3Rpb24gd2Fybk9uSW52YWxpZEtleShjaGlsZCwga25vd25LZXlzKSB7XG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBjaGlsZCAhPT0gJ29iamVjdCcgfHwgY2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGtub3duS2V5cztcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgd2FybkZvck1pc3NpbmdLZXkoY2hpbGQpO1xuICAgICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtub3duS2V5cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAga25vd25LZXlzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAga25vd25LZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgha25vd25LZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICBrbm93bktleXMuYWRkKGtleSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FybmluZyhmYWxzZSwgJ0VuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgYCVzYC4gJyArICdLZXlzIHNob3VsZCBiZSB1bmlxdWUgc28gdGhhdCBjb21wb25lbnRzIG1haW50YWluIHRoZWlyIGlkZW50aXR5ICcgKyAnYWNyb3NzIHVwZGF0ZXMuIE5vbi11bmlxdWUga2V5cyBtYXkgY2F1c2UgY2hpbGRyZW4gdG8gYmUgJyArICdkdXBsaWNhdGVkIGFuZC9vciBvbWl0dGVkIOKAlCB0aGUgYmVoYXZpb3IgaXMgdW5zdXBwb3J0ZWQgYW5kICcgKyAnY291bGQgY2hhbmdlIGluIGEgZnV0dXJlIHZlcnNpb24uJXMnLCBrZXksIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtub3duS2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZHJlbiwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBUaGlzIGFsZ29yaXRobSBjYW4ndCBvcHRpbWl6ZSBieSBzZWFyY2hpbmcgZnJvbSBib3RocyBlbmRzIHNpbmNlIHdlXG4gICAgLy8gZG9uJ3QgaGF2ZSBiYWNrcG9pbnRlcnMgb24gZmliZXJzLiBJJ20gdHJ5aW5nIHRvIHNlZSBob3cgZmFyIHdlIGNhbiBnZXRcbiAgICAvLyB3aXRoIHRoYXQgbW9kZWwuIElmIGl0IGVuZHMgdXAgbm90IGJlaW5nIHdvcnRoIHRoZSB0cmFkZW9mZnMsIHdlIGNhblxuICAgIC8vIGFkZCBpdCBsYXRlci5cblxuICAgIC8vIEV2ZW4gd2l0aCBhIHR3byBlbmRlZCBvcHRpbWl6YXRpb24sIHdlJ2Qgd2FudCB0byBvcHRpbWl6ZSBmb3IgdGhlIGNhc2VcbiAgICAvLyB3aGVyZSB0aGVyZSBhcmUgZmV3IGNoYW5nZXMgYW5kIGJydXRlIGZvcmNlIHRoZSBjb21wYXJpc29uIGluc3RlYWQgb2ZcbiAgICAvLyBnb2luZyBmb3IgdGhlIE1hcC4gSXQnZCBsaWtlIHRvIGV4cGxvcmUgaGl0dGluZyB0aGF0IHBhdGggZmlyc3QgaW5cbiAgICAvLyBmb3J3YXJkLW9ubHkgbW9kZSBhbmQgb25seSBnbyBmb3IgdGhlIE1hcCBvbmNlIHdlIG5vdGljZSB0aGF0IHdlIG5lZWRcbiAgICAvLyBsb3RzIG9mIGxvb2sgYWhlYWQuIFRoaXMgZG9lc24ndCBoYW5kbGUgcmV2ZXJzYWwgYXMgd2VsbCBhcyB0d28gZW5kZWRcbiAgICAvLyBzZWFyY2ggYnV0IHRoYXQncyB1bnVzdWFsLiBCZXNpZGVzLCBmb3IgdGhlIHR3byBlbmRlZCBvcHRpbWl6YXRpb24gdG9cbiAgICAvLyB3b3JrIG9uIEl0ZXJhYmxlcywgd2UnZCBuZWVkIHRvIGNvcHkgdGhlIHdob2xlIHNldC5cblxuICAgIC8vIEluIHRoaXMgZmlyc3QgaXRlcmF0aW9uLCB3ZSdsbCBqdXN0IGxpdmUgd2l0aCBoaXR0aW5nIHRoZSBiYWQgY2FzZVxuICAgIC8vIChhZGRpbmcgZXZlcnl0aGluZyB0byBhIE1hcCkgaW4gZm9yIGV2ZXJ5IGluc2VydC9tb3ZlLlxuXG4gICAgLy8gSWYgeW91IGNoYW5nZSB0aGlzIGNvZGUsIGFsc28gdXBkYXRlIHJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IoKSB3aGljaFxuICAgIC8vIHVzZXMgdGhlIHNhbWUgYWxnb3JpdGhtLlxuXG4gICAge1xuICAgICAgLy8gRmlyc3QsIHZhbGlkYXRlIGtleXMuXG4gICAgICB2YXIga25vd25LZXlzID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbmV3Q2hpbGRyZW5baV07XG4gICAgICAgIGtub3duS2V5cyA9IHdhcm5PbkludmFsaWRLZXkoY2hpbGQsIGtub3duS2V5cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91c05ld0ZpYmVyID0gbnVsbDtcblxuICAgIHZhciBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgIHZhciBsYXN0UGxhY2VkSW5kZXggPSAwO1xuICAgIHZhciBuZXdJZHggPSAwO1xuICAgIHZhciBuZXh0T2xkRmliZXIgPSBudWxsO1xuICAgIGZvciAoOyBvbGRGaWJlciAhPT0gbnVsbCAmJiBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKSB7XG4gICAgICBpZiAob2xkRmliZXIuaW5kZXggPiBuZXdJZHgpIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXI7XG4gICAgICAgIG9sZEZpYmVyID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgaWYgKG5ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgYnJlYWtzIG9uIGVtcHR5IHNsb3RzIGxpa2UgbnVsbCBjaGlsZHJlbi4gVGhhdCdzXG4gICAgICAgIC8vIHVuZm9ydHVuYXRlIGJlY2F1c2UgaXQgdHJpZ2dlcnMgdGhlIHNsb3cgcGF0aCBhbGwgdGhlIHRpbWUuIFdlIG5lZWRcbiAgICAgICAgLy8gYSBiZXR0ZXIgd2F5IHRvIGNvbW11bmljYXRlIHdoZXRoZXIgdGhpcyB3YXMgYSBtaXNzIG9yIG51bGwsXG4gICAgICAgIC8vIGJvb2xlYW4sIHVuZGVmaW5lZCwgZXRjLlxuICAgICAgICBpZiAob2xkRmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgIGlmIChvbGRGaWJlciAmJiBuZXdGaWJlci5hbHRlcm5hdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBzbG90LCBidXQgd2UgZGlkbid0IHJldXNlIHRoZSBleGlzdGluZyBmaWJlciwgc28gd2VcbiAgICAgICAgICAvLyBuZWVkIHRvIGRlbGV0ZSB0aGUgZXhpc3RpbmcgY2hpbGQuXG4gICAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSBvdXQgb2YgdGhlIGxvb3AuIFRoaXMgb25seSBoYXBwZW5zIGZvciB0aGUgZmlyc3QgcnVuLlxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBEZWZlciBzaWJsaW5ncyBpZiB3ZSdyZSBub3QgYXQgdGhlIHJpZ2h0IGluZGV4IGZvciB0aGlzIHNsb3QuXG4gICAgICAgIC8vIEkuZS4gaWYgd2UgaGFkIG51bGwgdmFsdWVzIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIGRlZmVyIHRoaXNcbiAgICAgICAgLy8gZm9yIGVhY2ggbnVsbCB2YWx1ZS4gSG93ZXZlciwgd2UgYWxzbyBkb24ndCB3YW50IHRvIGNhbGwgdXBkYXRlU2xvdFxuICAgICAgICAvLyB3aXRoIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyO1xuICAgICAgfVxuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuXG4gICAgaWYgKG5ld0lkeCA9PT0gbmV3Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAvLyBXZSd2ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIG5ldyBjaGlsZHJlbi4gV2UgY2FuIGRlbGV0ZSB0aGUgcmVzdC5cbiAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG5cbiAgICBpZiAob2xkRmliZXIgPT09IG51bGwpIHtcbiAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW55IG1vcmUgZXhpc3RpbmcgY2hpbGRyZW4gd2UgY2FuIGNob29zZSBhIGZhc3QgcGF0aFxuICAgICAgLy8gc2luY2UgdGhlIHJlc3Qgd2lsbCBhbGwgYmUgaW5zZXJ0aW9ucy5cbiAgICAgIGZvciAoOyBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKSB7XG4gICAgICAgIHZhciBfbmV3RmliZXIgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBpZiAoIV9uZXdGaWJlcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG4gICAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gVE9ETzogTW92ZSBvdXQgb2YgdGhlIGxvb3AuIFRoaXMgb25seSBoYXBwZW5zIGZvciB0aGUgZmlyc3QgcnVuLlxuICAgICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBfbmV3RmliZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gX25ld0ZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBfbmV3RmliZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG5cbiAgICAvLyBBZGQgYWxsIGNoaWxkcmVuIHRvIGEga2V5IG1hcCBmb3IgcXVpY2sgbG9va3Vwcy5cbiAgICB2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG1hcFJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG5cbiAgICAvLyBLZWVwIHNjYW5uaW5nIGFuZCB1c2UgdGhlIG1hcCB0byByZXN0b3JlIGRlbGV0ZWQgaXRlbXMgYXMgbW92ZXMuXG4gICAgZm9yICg7IG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgIHZhciBfbmV3RmliZXIyID0gdXBkYXRlRnJvbU1hcChleGlzdGluZ0NoaWxkcmVuLCByZXR1cm5GaWJlciwgbmV3SWR4LCBuZXdDaGlsZHJlbltuZXdJZHhdLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBpZiAoX25ld0ZpYmVyMikge1xuICAgICAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgICAgIGlmIChfbmV3RmliZXIyLmFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGhlIG5ldyBmaWJlciBpcyBhIHdvcmsgaW4gcHJvZ3Jlc3MsIGJ1dCBpZiB0aGVyZSBleGlzdHMgYVxuICAgICAgICAgICAgLy8gY3VycmVudCwgdGhhdCBtZWFucyB0aGF0IHdlIHJldXNlZCB0aGUgZmliZXIuIFdlIG5lZWQgdG8gZGVsZXRlXG4gICAgICAgICAgICAvLyBpdCBmcm9tIHRoZSBjaGlsZCBsaXN0IHNvIHRoYXQgd2UgZG9uJ3QgYWRkIGl0IHRvIHRoZSBkZWxldGlvblxuICAgICAgICAgICAgLy8gbGlzdC5cbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW5bJ2RlbGV0ZSddKF9uZXdGaWJlcjIua2V5ID09PSBudWxsID8gbmV3SWR4IDogX25ld0ZpYmVyMi5rZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKF9uZXdGaWJlcjIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcbiAgICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXIyO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBfbmV3RmliZXIyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAvLyBBbnkgZXhpc3RpbmcgY2hpbGRyZW4gdGhhdCB3ZXJlbid0IGNvbnN1bWVkIGFib3ZlIHdlcmUgZGVsZXRlZC4gV2UgbmVlZFxuICAgICAgLy8gdG8gYWRkIHRoZW0gdG8gdGhlIGRlbGV0aW9uIGxpc3QuXG4gICAgICBleGlzdGluZ0NoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGRyZW5JdGVyYWJsZSwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBzYW1lIGltcGxlbWVudGF0aW9uIGFzIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoKSxcbiAgICAvLyBidXQgdXNpbmcgdGhlIGl0ZXJhdG9yIGluc3RlYWQuXG5cbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGRyZW5JdGVyYWJsZSk7XG4gICAgISh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykgPyBpbnZhcmlhbnQoZmFsc2UsICdBbiBvYmplY3QgaXMgbm90IGFuIGl0ZXJhYmxlLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gICAge1xuICAgICAgLy8gV2FybiBhYm91dCB1c2luZyBNYXBzIGFzIGNoaWxkcmVuXG4gICAgICBpZiAodHlwZW9mIG5ld0NoaWxkcmVuSXRlcmFibGUuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcG9zc2libGVNYXAgPSBuZXdDaGlsZHJlbkl0ZXJhYmxlO1xuICAgICAgICBpZiAocG9zc2libGVNYXAuZW50cmllcyA9PT0gaXRlcmF0b3JGbikge1xuICAgICAgICAgIHdhcm5pbmcoZGlkV2FybkFib3V0TWFwcywgJ1VzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgdW5zdXBwb3J0ZWQgYW5kIHdpbGwgbGlrZWx5IHlpZWxkICcgKyAndW5leHBlY3RlZCByZXN1bHRzLiBDb252ZXJ0IGl0IHRvIGEgc2VxdWVuY2UvaXRlcmFibGUgb2Yga2V5ZWQgJyArICdSZWFjdEVsZW1lbnRzIGluc3RlYWQuJXMnLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDIoKSk7XG4gICAgICAgICAgZGlkV2FybkFib3V0TWFwcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmlyc3QsIHZhbGlkYXRlIGtleXMuXG4gICAgICAvLyBXZSdsbCBnZXQgYSBkaWZmZXJlbnQgaXRlcmF0b3IgbGF0ZXIgZm9yIHRoZSBtYWluIHBhc3MuXG4gICAgICB2YXIgX25ld0NoaWxkcmVuID0gaXRlcmF0b3JGbi5jYWxsKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICAgaWYgKF9uZXdDaGlsZHJlbikge1xuICAgICAgICB2YXIga25vd25LZXlzID0gbnVsbDtcbiAgICAgICAgdmFyIF9zdGVwID0gX25ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgICAgZm9yICg7ICFfc3RlcC5kb25lOyBfc3RlcCA9IF9uZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICBrbm93bktleXMgPSB3YXJuT25JbnZhbGlkS2V5KGNoaWxkLCBrbm93bktleXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5ld0NoaWxkcmVuID0gaXRlcmF0b3JGbi5jYWxsKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICEobmV3Q2hpbGRyZW4gIT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdBbiBpdGVyYWJsZSBvYmplY3QgcHJvdmlkZWQgbm8gaXRlcmF0b3IuJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzTmV3RmliZXIgPSBudWxsO1xuXG4gICAgdmFyIG9sZEZpYmVyID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgdmFyIGxhc3RQbGFjZWRJbmRleCA9IDA7XG4gICAgdmFyIG5ld0lkeCA9IDA7XG4gICAgdmFyIG5leHRPbGRGaWJlciA9IG51bGw7XG5cbiAgICB2YXIgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICBmb3IgKDsgb2xkRmliZXIgIT09IG51bGwgJiYgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgIGlmIChvbGRGaWJlci5pbmRleCA+IG5ld0lkeCkge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlcjtcbiAgICAgICAgb2xkRmliZXIgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdGaWJlciA9IHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBzdGVwLnZhbHVlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBpZiAobmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBicmVha3Mgb24gZW1wdHkgc2xvdHMgbGlrZSBudWxsIGNoaWxkcmVuLiBUaGF0J3NcbiAgICAgICAgLy8gdW5mb3J0dW5hdGUgYmVjYXVzZSBpdCB0cmlnZ2VycyB0aGUgc2xvdyBwYXRoIGFsbCB0aGUgdGltZS4gV2UgbmVlZFxuICAgICAgICAvLyBhIGJldHRlciB3YXkgdG8gY29tbXVuaWNhdGUgd2hldGhlciB0aGlzIHdhcyBhIG1pc3Mgb3IgbnVsbCxcbiAgICAgICAgLy8gYm9vbGVhbiwgdW5kZWZpbmVkLCBldGMuXG4gICAgICAgIGlmICghb2xkRmliZXIpIHtcbiAgICAgICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgIGlmIChvbGRGaWJlciAmJiBuZXdGaWJlci5hbHRlcm5hdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBzbG90LCBidXQgd2UgZGlkbid0IHJldXNlIHRoZSBleGlzdGluZyBmaWJlciwgc28gd2VcbiAgICAgICAgICAvLyBuZWVkIHRvIGRlbGV0ZSB0aGUgZXhpc3RpbmcgY2hpbGQuXG4gICAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSBvdXQgb2YgdGhlIGxvb3AuIFRoaXMgb25seSBoYXBwZW5zIGZvciB0aGUgZmlyc3QgcnVuLlxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBEZWZlciBzaWJsaW5ncyBpZiB3ZSdyZSBub3QgYXQgdGhlIHJpZ2h0IGluZGV4IGZvciB0aGlzIHNsb3QuXG4gICAgICAgIC8vIEkuZS4gaWYgd2UgaGFkIG51bGwgdmFsdWVzIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIGRlZmVyIHRoaXNcbiAgICAgICAgLy8gZm9yIGVhY2ggbnVsbCB2YWx1ZS4gSG93ZXZlciwgd2UgYWxzbyBkb24ndCB3YW50IHRvIGNhbGwgdXBkYXRlU2xvdFxuICAgICAgICAvLyB3aXRoIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyO1xuICAgICAgfVxuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBuZXcgY2hpbGRyZW4uIFdlIGNhbiBkZWxldGUgdGhlIHJlc3QuXG4gICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG9sZEZpYmVyID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBtb3JlIGV4aXN0aW5nIGNoaWxkcmVuIHdlIGNhbiBjaG9vc2UgYSBmYXN0IHBhdGhcbiAgICAgIC8vIHNpbmNlIHRoZSByZXN0IHdpbGwgYWxsIGJlIGluc2VydGlvbnMuXG4gICAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgdmFyIF9uZXdGaWJlcjMgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgc3RlcC52YWx1ZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBpZiAoX25ld0ZpYmVyMyA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyMywgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXIzO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBfbmV3RmliZXIzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIGFsbCBjaGlsZHJlbiB0byBhIGtleSBtYXAgZm9yIHF1aWNrIGxvb2t1cHMuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuXG4gICAgLy8gS2VlcCBzY2FubmluZyBhbmQgdXNlIHRoZSBtYXAgdG8gcmVzdG9yZSBkZWxldGVkIGl0ZW1zIGFzIG1vdmVzLlxuICAgIGZvciAoOyAhc3RlcC5kb25lOyBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKSkge1xuICAgICAgdmFyIF9uZXdGaWJlcjQgPSB1cGRhdGVGcm9tTWFwKGV4aXN0aW5nQ2hpbGRyZW4sIHJldHVybkZpYmVyLCBuZXdJZHgsIHN0ZXAudmFsdWUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGlmIChfbmV3RmliZXI0ICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgICAgaWYgKF9uZXdGaWJlcjQuYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV3IGZpYmVyIGlzIGEgd29yayBpbiBwcm9ncmVzcywgYnV0IGlmIHRoZXJlIGV4aXN0cyBhXG4gICAgICAgICAgICAvLyBjdXJyZW50LCB0aGF0IG1lYW5zIHRoYXQgd2UgcmV1c2VkIHRoZSBmaWJlci4gV2UgbmVlZCB0byBkZWxldGVcbiAgICAgICAgICAgIC8vIGl0IGZyb20gdGhlIGNoaWxkIGxpc3Qgc28gdGhhdCB3ZSBkb24ndCBhZGQgaXQgdG8gdGhlIGRlbGV0aW9uXG4gICAgICAgICAgICAvLyBsaXN0LlxuICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlblsnZGVsZXRlJ10oX25ld0ZpYmVyNC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBfbmV3RmliZXI0LmtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyNCwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBfbmV3RmliZXI0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IF9uZXdGaWJlcjQ7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcjQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIEFueSBleGlzdGluZyBjaGlsZHJlbiB0aGF0IHdlcmVuJ3QgY29uc3VtZWQgYWJvdmUgd2VyZSBkZWxldGVkLiBXZSBuZWVkXG4gICAgICAvLyB0byBhZGQgdGhlbSB0byB0aGUgZGVsZXRpb24gbGlzdC5cbiAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZVNpbmdsZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgdGV4dENvbnRlbnQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIGNoZWNrIGZvciBrZXlzIG9uIHRleHQgbm9kZXMgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhXG4gICAgLy8gd2F5IHRvIGRlZmluZSB0aGVtLlxuICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZCAhPT0gbnVsbCAmJiBjdXJyZW50Rmlyc3RDaGlsZC50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAvLyBXZSBhbHJlYWR5IGhhdmUgYW4gZXhpc3Rpbmcgbm9kZSBzbyBsZXQncyBqdXN0IHVwZGF0ZSBpdCBhbmQgZGVsZXRlXG4gICAgICAvLyB0aGUgcmVzdC5cbiAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKTtcbiAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCB0ZXh0Q29udGVudCwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgZXhpc3RpbmdbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuICAgIC8vIFRoZSBleGlzdGluZyBmaXJzdCBjaGlsZCBpcyBub3QgYSB0ZXh0IG5vZGUgc28gd2UgbmVlZCB0byBjcmVhdGUgb25lXG4gICAgLy8gYW5kIGRlbGV0ZSB0aGUgZXhpc3Rpbmcgb25lcy5cbiAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tVGV4dCh0ZXh0Q29udGVudCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgIGNyZWF0ZWRbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGNyZWF0ZWQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVFbGVtZW50KHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgZWxlbWVudCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICB2YXIga2V5ID0gZWxlbWVudC5rZXk7XG4gICAgdmFyIGNoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAvLyBUT0RPOiBJZiBrZXkgPT09IG51bGwgYW5kIGNoaWxkLmtleSA9PT0gbnVsbCwgdGhlbiB0aGlzIG9ubHkgYXBwbGllcyB0b1xuICAgICAgLy8gdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAgICBpZiAoY2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gRnJhZ21lbnQgPyBlbGVtZW50LnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgOiBjaGlsZC50eXBlID09PSBlbGVtZW50LnR5cGUpIHtcbiAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY2hpbGQsIGVsZW1lbnQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSA/IGVsZW1lbnQucHJvcHMuY2hpbGRyZW4gOiBlbGVtZW50LnByb3BzLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgZXhpc3RpbmcucmVmID0gY29lcmNlUmVmKHJldHVybkZpYmVyLCBjaGlsZCwgZWxlbWVudCk7XG4gICAgICAgICAgZXhpc3RpbmdbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAge1xuICAgICAgICAgICAgZXhpc3RpbmcuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgICAgICAgICAgZXhpc3RpbmcuX2RlYnVnT3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChlbGVtZW50LnByb3BzLmNoaWxkcmVuLCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSwgZWxlbWVudC5rZXkpO1xuICAgICAgY3JlYXRlZFsncmV0dXJuJ10gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2NyZWF0ZWQ0ID0gY3JlYXRlRmliZXJGcm9tRWxlbWVudChlbGVtZW50LCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBfY3JlYXRlZDQucmVmID0gY29lcmNlUmVmKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgZWxlbWVudCk7XG4gICAgICBfY3JlYXRlZDRbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gX2NyZWF0ZWQ0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZVNpbmdsZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIHBvcnRhbCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICB2YXIga2V5ID0gcG9ydGFsLmtleTtcbiAgICB2YXIgY2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcbiAgICAgIC8vIFRPRE86IElmIGtleSA9PT0gbnVsbCBhbmQgY2hpbGQua2V5ID09PSBudWxsLCB0aGVuIHRoaXMgb25seSBhcHBsaWVzIHRvXG4gICAgICAvLyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgbGlzdC5cbiAgICAgIGlmIChjaGlsZC5rZXkgPT09IGtleSkge1xuICAgICAgICBpZiAoY2hpbGQudGFnID09PSBIb3N0UG9ydGFsICYmIGNoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvID09PSBwb3J0YWwuY29udGFpbmVySW5mbyAmJiBjaGlsZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gPT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvbikge1xuICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZC5zaWJsaW5nKTtcbiAgICAgICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjaGlsZCwgcG9ydGFsLmNoaWxkcmVuIHx8IFtdLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgZXhpc3RpbmdbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgfVxuXG4gICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgY3JlYXRlZFsncmV0dXJuJ10gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3JlYXRlZDtcbiAgfVxuXG4gIC8vIFRoaXMgQVBJIHdpbGwgdGFnIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSBzaWRlLWVmZmVjdCBvZiB0aGUgcmVjb25jaWxpYXRpb25cbiAgLy8gaXRzZWxmLiBUaGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHNpZGUtZWZmZWN0IGxpc3QgYXMgd2UgcGFzcyB0aHJvdWdoIHRoZVxuICAvLyBjaGlsZHJlbiBhbmQgdGhlIHBhcmVudC5cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRGaWJlcnMocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIG5vdCByZWN1cnNpdmUuXG4gICAgLy8gSWYgdGhlIHRvcCBsZXZlbCBpdGVtIGlzIGFuIGFycmF5LCB3ZSB0cmVhdCBpdCBhcyBhIHNldCBvZiBjaGlsZHJlbixcbiAgICAvLyBub3QgYXMgYSBmcmFnbWVudC4gTmVzdGVkIGFycmF5cyBvbiB0aGUgb3RoZXIgaGFuZCB3aWxsIGJlIHRyZWF0ZWQgYXNcbiAgICAvLyBmcmFnbWVudCBub2Rlcy4gUmVjdXJzaW9uIGhhcHBlbnMgYXQgdGhlIG5vcm1hbCBmbG93LlxuXG4gICAgLy8gSGFuZGxlIHRvcCBsZXZlbCB1bmtleWVkIGZyYWdtZW50cyBhcyBpZiB0aGV5IHdlcmUgYXJyYXlzLlxuICAgIC8vIFRoaXMgbGVhZHMgdG8gYW4gYW1iaWd1aXR5IGJldHdlZW4gPD57Wy4uLl19PC8+IGFuZCA8Pi4uLjwvPi5cbiAgICAvLyBXZSB0cmVhdCB0aGUgYW1iaWd1b3VzIGNhc2VzIGFib3ZlIHRoZSBzYW1lLlxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsICYmIG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgJiYgbmV3Q2hpbGQua2V5ID09PSBudWxsKSB7XG4gICAgICBuZXdDaGlsZCA9IG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBvYmplY3QgdHlwZXNcbiAgICB2YXIgaXNPYmplY3QgPSB0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsO1xuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJlY29uY2lsZVNpbmdsZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZWNvbmNpbGVTaW5nbGVQb3J0YWwocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3Q2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZWNvbmNpbGVTaW5nbGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsICcnICsgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkkMShuZXdDaGlsZCkpIHtcbiAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBpZiAoZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBJZiB0aGUgbmV3IGNoaWxkIGlzIHVuZGVmaW5lZCwgYW5kIHRoZSByZXR1cm4gZmliZXIgaXMgYSBjb21wb3NpdGVcbiAgICAgIC8vIGNvbXBvbmVudCwgdGhyb3cgYW4gZXJyb3IuIElmIEZpYmVyIHJldHVybiB0eXBlcyBhcmUgZGlzYWJsZWQsXG4gICAgICAvLyB3ZSBhbHJlYWR5IHRocmV3IGFib3ZlLlxuICAgICAgc3dpdGNoIChyZXR1cm5GaWJlci50YWcpIHtcbiAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHJldHVybkZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnJlbmRlci5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgLy8gSW50ZW50aW9uYWxseSBmYWxsIHRocm91Z2ggdG8gdGhlIG5leHQgY2FzZSwgd2hpY2ggaGFuZGxlcyBib3RoXG4gICAgICAgIC8vIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVkIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgRnVuY3Rpb25hbENvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgQ29tcG9uZW50ID0gcmV0dXJuRmliZXIudHlwZTtcbiAgICAgICAgICAgIGludmFyaWFudChmYWxzZSwgJyVzKC4uLik6IE5vdGhpbmcgd2FzIHJldHVybmVkIGZyb20gcmVuZGVyLiBUaGlzIHVzdWFsbHkgbWVhbnMgYSByZXR1cm4gc3RhdGVtZW50IGlzIG1pc3NpbmcuIE9yLCB0byByZW5kZXIgbm90aGluZywgcmV0dXJuIG51bGwuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtYWluaW5nIGNhc2VzIGFyZSBhbGwgdHJlYXRlZCBhcyBlbXB0eS5cbiAgICByZXR1cm4gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbmNpbGVDaGlsZEZpYmVycztcbn1cblxudmFyIHJlY29uY2lsZUNoaWxkRmliZXJzID0gQ2hpbGRSZWNvbmNpbGVyKHRydWUpO1xudmFyIG1vdW50Q2hpbGRGaWJlcnMgPSBDaGlsZFJlY29uY2lsZXIoZmFsc2UpO1xuXG5mdW5jdGlvbiBjbG9uZUNoaWxkRmliZXJzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gICEoY3VycmVudCA9PT0gbnVsbCB8fCB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9PT0gY3VycmVudC5jaGlsZCkgPyBpbnZhcmlhbnQoZmFsc2UsICdSZXN1bWluZyB3b3JrIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJykgOiB2b2lkIDA7XG5cbiAgaWYgKHdvcmtJblByb2dyZXNzLmNoaWxkID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRDaGlsZCA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICB2YXIgbmV3Q2hpbGQgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50Q2hpbGQsIGN1cnJlbnRDaGlsZC5wZW5kaW5nUHJvcHMsIGN1cnJlbnRDaGlsZC5leHBpcmF0aW9uVGltZSk7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV3Q2hpbGQ7XG5cbiAgbmV3Q2hpbGRbJ3JldHVybiddID0gd29ya0luUHJvZ3Jlc3M7XG4gIHdoaWxlIChjdXJyZW50Q2hpbGQuc2libGluZyAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRDaGlsZCA9IGN1cnJlbnRDaGlsZC5zaWJsaW5nO1xuICAgIG5ld0NoaWxkID0gbmV3Q2hpbGQuc2libGluZyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRDaGlsZCwgY3VycmVudENoaWxkLnBlbmRpbmdQcm9wcywgY3VycmVudENoaWxkLmV4cGlyYXRpb25UaW1lKTtcbiAgICBuZXdDaGlsZFsncmV0dXJuJ10gPSB3b3JrSW5Qcm9ncmVzcztcbiAgfVxuICBuZXdDaGlsZC5zaWJsaW5nID0gbnVsbDtcbn1cblxudmFyIGRpZFdhcm5BYm91dEJhZENsYXNzID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25hbENvbXBvbmVudCA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRTdGF0ZWxlc3NSZWZzID0gdm9pZCAwO1xuXG57XG4gIGRpZFdhcm5BYm91dEJhZENsYXNzID0ge307XG4gIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25hbENvbXBvbmVudCA9IHt9O1xuICBkaWRXYXJuQWJvdXRTdGF0ZWxlc3NSZWZzID0ge307XG59XG5cbnZhciBSZWFjdEZpYmVyQmVnaW5Xb3JrID0gZnVuY3Rpb24gKGNvbmZpZywgaG9zdENvbnRleHQsIGxlZ2FjeUNvbnRleHQsIG5ld0NvbnRleHQsIGh5ZHJhdGlvbkNvbnRleHQsIHNjaGVkdWxlV29yaywgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcikge1xuICB2YXIgc2hvdWxkU2V0VGV4dENvbnRlbnQgPSBjb25maWcuc2hvdWxkU2V0VGV4dENvbnRlbnQsXG4gICAgICBzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlID0gY29uZmlnLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU7XG4gIHZhciBwdXNoSG9zdENvbnRleHQgPSBob3N0Q29udGV4dC5wdXNoSG9zdENvbnRleHQsXG4gICAgICBwdXNoSG9zdENvbnRhaW5lciA9IGhvc3RDb250ZXh0LnB1c2hIb3N0Q29udGFpbmVyO1xuICB2YXIgcHVzaFByb3ZpZGVyID0gbmV3Q29udGV4dC5wdXNoUHJvdmlkZXI7XG4gIHZhciBnZXRNYXNrZWRDb250ZXh0ID0gbGVnYWN5Q29udGV4dC5nZXRNYXNrZWRDb250ZXh0LFxuICAgICAgZ2V0VW5tYXNrZWRDb250ZXh0ID0gbGVnYWN5Q29udGV4dC5nZXRVbm1hc2tlZENvbnRleHQsXG4gICAgICBoYXNMZWdhY3lDb250ZXh0Q2hhbmdlZCA9IGxlZ2FjeUNvbnRleHQuaGFzQ29udGV4dENoYW5nZWQsXG4gICAgICBwdXNoTGVnYWN5Q29udGV4dFByb3ZpZGVyID0gbGVnYWN5Q29udGV4dC5wdXNoQ29udGV4dFByb3ZpZGVyLFxuICAgICAgcHVzaFRvcExldmVsQ29udGV4dE9iamVjdCA9IGxlZ2FjeUNvbnRleHQucHVzaFRvcExldmVsQ29udGV4dE9iamVjdCxcbiAgICAgIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIgPSBsZWdhY3lDb250ZXh0LmludmFsaWRhdGVDb250ZXh0UHJvdmlkZXI7XG4gIHZhciBlbnRlckh5ZHJhdGlvblN0YXRlID0gaHlkcmF0aW9uQ29udGV4dC5lbnRlckh5ZHJhdGlvblN0YXRlLFxuICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSA9IGh5ZHJhdGlvbkNvbnRleHQucmVzZXRIeWRyYXRpb25TdGF0ZSxcbiAgICAgIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gaHlkcmF0aW9uQ29udGV4dC50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcblxuICB2YXIgX1JlYWN0RmliZXJDbGFzc0NvbXBvID0gUmVhY3RGaWJlckNsYXNzQ29tcG9uZW50KGxlZ2FjeUNvbnRleHQsIHNjaGVkdWxlV29yaywgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciwgbWVtb2l6ZVByb3BzLCBtZW1vaXplU3RhdGUpLFxuICAgICAgYWRvcHRDbGFzc0luc3RhbmNlID0gX1JlYWN0RmliZXJDbGFzc0NvbXBvLmFkb3B0Q2xhc3NJbnN0YW5jZSxcbiAgICAgIGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBfUmVhY3RGaWJlckNsYXNzQ29tcG8uY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgICAgIGNvbnN0cnVjdENsYXNzSW5zdGFuY2UgPSBfUmVhY3RGaWJlckNsYXNzQ29tcG8uY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxcbiAgICAgIG1vdW50Q2xhc3NJbnN0YW5jZSA9IF9SZWFjdEZpYmVyQ2xhc3NDb21wby5tb3VudENsYXNzSW5zdGFuY2UsXG4gICAgICByZXN1bWVNb3VudENsYXNzSW5zdGFuY2UgPSBfUmVhY3RGaWJlckNsYXNzQ29tcG8ucmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLFxuICAgICAgdXBkYXRlQ2xhc3NJbnN0YW5jZSA9IF9SZWFjdEZpYmVyQ2xhc3NDb21wby51cGRhdGVDbGFzc0luc3RhbmNlO1xuXG4gIC8vIFRPRE86IFJlbW92ZSB0aGlzIGFuZCB1c2UgcmVjb25jaWxlQ2hpbGRyZW5BdEV4cGlyYXRpb25UaW1lIGRpcmVjdGx5LlxuXG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbikge1xuICAgIHJlY29uY2lsZUNoaWxkcmVuQXRFeHBpcmF0aW9uVGltZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkF0RXhwaXJhdGlvblRpbWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIGZyZXNoIG5ldyBjb21wb25lbnQgdGhhdCBoYXNuJ3QgYmVlbiByZW5kZXJlZCB5ZXQsIHdlXG4gICAgICAvLyB3b24ndCB1cGRhdGUgaXRzIGNoaWxkIHNldCBieSBhcHBseWluZyBtaW5pbWFsIHNpZGUtZWZmZWN0cy4gSW5zdGVhZCxcbiAgICAgIC8vIHdlIHdpbGwgYWRkIHRoZW0gYWxsIHRvIHRoZSBjaGlsZCBiZWZvcmUgaXQgZ2V0cyByZW5kZXJlZC4gVGhhdCBtZWFuc1xuICAgICAgLy8gd2UgY2FuIG9wdGltaXplIHRoaXMgcmVjb25jaWxpYXRpb24gcGFzcyBieSBub3QgdHJhY2tpbmcgc2lkZS1lZmZlY3RzLlxuICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBtb3VudENoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hpbGQgaXMgdGhlIHNhbWUgYXMgdGhlIHdvcmsgaW4gcHJvZ3Jlc3MsIGl0IG1lYW5zIHRoYXRcbiAgICAgIC8vIHdlIGhhdmVuJ3QgeWV0IHN0YXJ0ZWQgYW55IHdvcmsgb24gdGhlc2UgY2hpbGRyZW4uIFRoZXJlZm9yZSwgd2UgdXNlXG4gICAgICAvLyB0aGUgY2xvbmUgYWxnb3JpdGhtIHRvIGNyZWF0ZSBhIGNvcHkgb2YgYWxsIHRoZSBjdXJyZW50IGNoaWxkcmVuLlxuXG4gICAgICAvLyBJZiB3ZSBoYWQgYW55IHByb2dyZXNzZWQgd29yayBhbHJlYWR5LCB0aGF0IGlzIGludmFsaWQgYXQgdGhpcyBwb2ludCBzb1xuICAgICAgLy8gbGV0J3MgdGhyb3cgaXQgb3V0LlxuICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgY3VycmVudC5jaGlsZCwgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRm9yd2FyZFJlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIHZhciByZW5kZXIgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLnJlbmRlcjtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gcmVuZGVyKHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcywgd29ya0luUHJvZ3Jlc3MucmVmKTtcbiAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbik7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIGlmIChoYXNMZWdhY3lDb250ZXh0Q2hhbmdlZCgpKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSBjYW4gYmFpbCBvdXQgb24gcHJvcHMgZXF1YWxpdHkgYnV0IGlmIGNvbnRleHQgaGFzIGNoYW5nZWRcbiAgICAgIC8vIHdlIGRvbid0IGRvIHRoZSBiYWlsb3V0IGFuZCB3ZSBoYXZlIHRvIHJldXNlIGV4aXN0aW5nIHByb3BzIGluc3RlYWQuXG4gICAgfSBlbHNlIGlmICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID09PSBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbik7XG4gICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1vZGUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuO1xuICAgIGlmIChoYXNMZWdhY3lDb250ZXh0Q2hhbmdlZCgpKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSBjYW4gYmFpbCBvdXQgb24gcHJvcHMgZXF1YWxpdHkgYnV0IGlmIGNvbnRleHQgaGFzIGNoYW5nZWRcbiAgICAgIC8vIHdlIGRvbid0IGRvIHRoZSBiYWlsb3V0IGFuZCB3ZSBoYXZlIHRvIHJldXNlIGV4aXN0aW5nIHByb3BzIGluc3RlYWQuXG4gICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRyZW4gPT09IG51bGwgfHwgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9PT0gbmV4dENoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gICAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCAmJiByZWYgIT09IG51bGwgfHwgY3VycmVudCAhPT0gbnVsbCAmJiBjdXJyZW50LnJlZiAhPT0gcmVmKSB7XG4gICAgICAvLyBTY2hlZHVsZSBhIFJlZiBlZmZlY3RcbiAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBSZWY7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRnVuY3Rpb25hbENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIHZhciBmbiA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcblxuICAgIGlmIChoYXNMZWdhY3lDb250ZXh0Q2hhbmdlZCgpKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSBjYW4gYmFpbCBvdXQgb24gcHJvcHMgZXF1YWxpdHkgYnV0IGlmIGNvbnRleHQgaGFzIGNoYW5nZWRcbiAgICAgIC8vIHdlIGRvbid0IGRvIHRoZSBiYWlsb3V0IGFuZCB3ZSBoYXZlIHRvIHJldXNlIGV4aXN0aW5nIHByb3BzIGluc3RlYWQuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID09PSBuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgLy8gVE9ETzogY29uc2lkZXIgYnJpbmdpbmcgZm4uc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkgYmFjay5cbiAgICAgIC8vIEl0IHVzZWQgdG8gYmUgaGVyZS5cbiAgICB9XG5cbiAgICB2YXIgdW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICB2YXIgY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG5cbiAgICB2YXIgbmV4dENoaWxkcmVuID0gdm9pZCAwO1xuXG4gICAge1xuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5zZXRDdXJyZW50UGhhc2UoJ3JlbmRlcicpO1xuICAgICAgbmV4dENoaWxkcmVuID0gZm4obmV4dFByb3BzLCBjb250ZXh0KTtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICAgIH1cbiAgICAvLyBSZWFjdCBEZXZUb29scyByZWFkcyB0aGlzIGZsYWcuXG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcms7XG4gICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbik7XG4gICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFB1c2ggY29udGV4dCBwcm92aWRlcnMgZWFybHkgdG8gcHJldmVudCBjb250ZXh0IHN0YWNrIG1pc21hdGNoZXMuXG4gICAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAgIC8vIFdlIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2hpbGQgY29udGV4dCBpbiBmaW5pc2hDbGFzc0NvbXBvbmVudCgpIHJpZ2h0IGFmdGVyIHJlbmRlcmluZy5cbiAgICB2YXIgaGFzQ29udGV4dCA9IHB1c2hMZWdhY3lDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSB2b2lkIDA7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gSW4gdGhlIGluaXRpYWwgcGFzcyB3ZSBtaWdodCBuZWVkIHRvIGNvbnN0cnVjdCB0aGUgaW5zdGFuY2UuXG4gICAgICAgIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyk7XG4gICAgICAgIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuXG4gICAgICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbiBhIHJlc3VtZSwgd2UnbGwgYWxyZWFkeSBoYXZlIGFuIGluc3RhbmNlIHdlIGNhbiByZXVzZS5cbiAgICAgICAgc2hvdWxkVXBkYXRlID0gcmVzdW1lTW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3VsZFVwZGF0ZSA9IHVwZGF0ZUNsYXNzSW5zdGFuY2UoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICAvLyBXZSBwcm9jZXNzZWQgdGhlIHVwZGF0ZSBxdWV1ZSBpbnNpZGUgdXBkYXRlQ2xhc3NJbnN0YW5jZS4gSXQgbWF5IGhhdmVcbiAgICAvLyBpbmNsdWRlZCBzb21lIGVycm9ycyB0aGF0IHdlcmUgZGlzcGF0Y2hlZCBkdXJpbmcgdGhlIGNvbW1pdCBwaGFzZS5cbiAgICAvLyBUT0RPOiBSZWZhY3RvciBjbGFzcyBjb21wb25lbnRzIHNvIHRoaXMgaXMgbGVzcyBhd2t3YXJkLlxuICAgIHZhciBkaWRDYXB0dXJlRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgdXBkYXRlUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwgJiYgdXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXMgIT09IG51bGwpIHtcbiAgICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gICAgICBkaWRDYXB0dXJlRXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmluaXNoQ2xhc3NDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHNob3VsZFVwZGF0ZSwgaGFzQ29udGV4dCwgZGlkQ2FwdHVyZUVycm9yLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5pc2hDbGFzc0NvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgc2hvdWxkVXBkYXRlLCBoYXNDb250ZXh0LCBkaWRDYXB0dXJlRXJyb3IsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gUmVmcyBzaG91bGQgdXBkYXRlIGV2ZW4gaWYgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHJldHVybnMgZmFsc2VcbiAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICAgIGlmICghc2hvdWxkVXBkYXRlICYmICFkaWRDYXB0dXJlRXJyb3IpIHtcbiAgICAgIC8vIENvbnRleHQgcHJvdmlkZXJzIHNob3VsZCBkZWZlciB0byBzQ1UgZm9yIHJlbmRlcmluZ1xuICAgICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgICAgaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgdmFyIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcblxuICAgIC8vIFJlcmVuZGVyXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSB2b2lkIDA7XG4gICAgaWYgKGRpZENhcHR1cmVFcnJvciAmJiAoIWVuYWJsZUdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCB8fCB0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggIT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAvLyBJZiB3ZSBjYXB0dXJlZCBhbiBlcnJvciwgYnV0IGdldERlcml2ZWRTdGF0ZUZyb20gY2F0Y2ggaXMgbm90IGRlZmluZWQsXG4gICAgICAvLyB1bm1vdW50IGFsbCB0aGUgY2hpbGRyZW4uIGNvbXBvbmVudERpZENhdGNoIHdpbGwgc2NoZWR1bGUgYW4gdXBkYXRlIHRvXG4gICAgICAvLyByZS1yZW5kZXIgYSBmYWxsYmFjay4gVGhpcyBpcyB0ZW1wb3JhcnkgdW50aWwgd2UgbWlncmF0ZSBldmVyeW9uZSB0b1xuICAgICAgLy8gdGhlIG5ldyBBUEkuXG4gICAgICAvLyBUT0RPOiBXYXJuIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gICAgICBuZXh0Q2hpbGRyZW4gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB7XG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuc2V0Q3VycmVudFBoYXNlKCdyZW5kZXInKTtcbiAgICAgICAgbmV4dENoaWxkcmVuID0gaW5zdGFuY2UucmVuZGVyKCk7XG4gICAgICAgIGlmIChkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMgfHwgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSAmJiB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgICAgIGluc3RhbmNlLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlYWN0IERldlRvb2xzIHJlYWRzIHRoaXMgZmxhZy5cbiAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUGVyZm9ybWVkV29yaztcbiAgICBpZiAoZGlkQ2FwdHVyZUVycm9yKSB7XG4gICAgICAvLyBJZiB3ZSdyZSByZWNvdmVyaW5nIGZyb20gYW4gZXJyb3IsIHJlY29uY2lsZSB0d2ljZTogZmlyc3QgdG8gZGVsZXRlXG4gICAgICAvLyBhbGwgdGhlIGV4aXN0aW5nIGNoaWxkcmVuLlxuICAgICAgcmVjb25jaWxlQ2hpbGRyZW5BdEV4cGlyYXRpb25UaW1lKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBudWxsLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGw7XG4gICAgICAvLyBOb3cgd2UgY2FuIGNvbnRpbnVlIHJlY29uY2lsaW5nIGxpa2Ugbm9ybWFsLiBUaGlzIGhhcyB0aGUgZWZmZWN0IG9mXG4gICAgICAvLyByZW1vdW50aW5nIGFsbCBjaGlsZHJlbiByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlaXIgdGhlaXJcbiAgICAgIC8vIGlkZW50aXR5IG1hdGNoZXMuXG4gICAgfVxuICAgIHJlY29uY2lsZUNoaWxkcmVuQXRFeHBpcmF0aW9uVGltZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgLy8gTWVtb2l6ZSBwcm9wcyBhbmQgc3RhdGUgdXNpbmcgdGhlIHZhbHVlcyB3ZSBqdXN0IHVzZWQgdG8gcmVuZGVyLlxuICAgIC8vIFRPRE86IFJlc3RydWN0dXJlIHNvIHdlIG5ldmVyIHJlYWQgdmFsdWVzIGZyb20gdGhlIGluc3RhbmNlLlxuICAgIG1lbW9pemVTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2Uuc3RhdGUpO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UucHJvcHMpO1xuXG4gICAgLy8gVGhlIGNvbnRleHQgbWlnaHQgaGF2ZSBjaGFuZ2VkIHNvIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgaXQuXG4gICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgICB2YXIgcm9vdCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBpZiAocm9vdC5wZW5kaW5nQ29udGV4dCkge1xuICAgICAgcHVzaFRvcExldmVsQ29udGV4dE9iamVjdCh3b3JrSW5Qcm9ncmVzcywgcm9vdC5wZW5kaW5nQ29udGV4dCwgcm9vdC5wZW5kaW5nQ29udGV4dCAhPT0gcm9vdC5jb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKHJvb3QuY29udGV4dCkge1xuICAgICAgLy8gU2hvdWxkIGFsd2F5cyBiZSBzZXRcbiAgICAgIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Qod29ya0luUHJvZ3Jlc3MsIHJvb3QuY29udGV4dCwgZmFsc2UpO1xuICAgIH1cbiAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgcm9vdC5jb250YWluZXJJbmZvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUhvc3RSb290KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgIHZhciB1cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgIGlmICh1cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgdmFyIHByZXZTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICB2YXIgc3RhdGUgPSBwcm9jZXNzVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBudWxsLCBudWxsLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICBtZW1vaXplU3RhdGUod29ya0luUHJvZ3Jlc3MsIHN0YXRlKTtcbiAgICAgIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsICYmIHVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFRoZXJlJ3MgYW4gdW5jYXVnaHQgZXJyb3IuIFVubW91bnQgdGhlIHdob2xlIHJvb3QuXG4gICAgICAgIGVsZW1lbnQgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChwcmV2U3RhdGUgPT09IHN0YXRlKSB7XG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyB0aGUgc2FtZSBhcyBiZWZvcmUsIHRoYXQncyBhIGJhaWxvdXQgYmVjYXVzZSB3ZSBoYWRcbiAgICAgICAgLy8gbm8gd29yayB0aGF0IGV4cGlyZXMgYXQgdGhpcyB0aW1lLlxuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50O1xuICAgICAgfVxuICAgICAgdmFyIHJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICBpZiAoKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudC5jaGlsZCA9PT0gbnVsbCkgJiYgcm9vdC5oeWRyYXRlICYmIGVudGVySHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW55IGN1cnJlbnQgY2hpbGRyZW4gdGhpcyBtaWdodCBiZSB0aGUgZmlyc3QgcGFzcy5cbiAgICAgICAgLy8gV2UgYWx3YXlzIHRyeSB0byBoeWRyYXRlLiBJZiB0aGlzIGlzbid0IGEgaHlkcmF0aW9uIHBhc3MgdGhlcmUgd29uJ3RcbiAgICAgICAgLy8gYmUgYW55IGNoaWxkcmVuIHRvIGh5ZHJhdGUgd2hpY2ggaXMgZWZmZWN0aXZlbHkgdGhlIHNhbWUgdGhpbmcgYXNcbiAgICAgICAgLy8gbm90IGh5ZHJhdGluZy5cblxuICAgICAgICAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgdHJhY2sgdGhlIGhvc3Qgcm9vdCBhcyBhIHBsYWNlbWVudCB0b1xuICAgICAgICAvLyBrbm93IHRoYXQgd2UncmUgY3VycmVudGx5IGluIGEgbW91bnRpbmcgc3RhdGUuIFRoYXQgd2F5IGlzTW91bnRlZFxuICAgICAgICAvLyB3b3JrcyBhcyBleHBlY3RlZC4gV2UgbXVzdCByZXNldCB0aGlzIGJlZm9yZSBjb21taXR0aW5nLlxuICAgICAgICAvLyBUT0RPOiBEZWxldGUgdGhpcyB3aGVuIHdlIGRlbGV0ZSBpc01vdW50ZWQgYW5kIGZpbmRET01Ob2RlLlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUGxhY2VtZW50O1xuXG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IGNoaWxkcmVuIG1vdW50IGludG8gdGhpcyByb290IHdpdGhvdXQgdHJhY2tpbmdcbiAgICAgICAgLy8gc2lkZS1lZmZlY3RzLiBUaGlzIGVuc3VyZXMgdGhhdCB3ZSBkb24ndCBzdG9yZSBQbGFjZW1lbnQgZWZmZWN0cyBvblxuICAgICAgICAvLyBub2RlcyB0aGF0IHdpbGwgYmUgaHlkcmF0ZWQuXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgZWxlbWVudCwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIHJlc2V0IGh5ZHJhdGlvbiBzdGF0ZSBpbiBjYXNlIHdlIGFib3J0ZWQgYW5kIHJlc3VtZWQgYW5vdGhlclxuICAgICAgICAvLyByb290LlxuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIG1lbW9pemVTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgc3RhdGUpO1xuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIH1cbiAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gdXBkYXRlIHF1ZXVlLCB0aGF0J3MgYSBiYWlsb3V0IGJlY2F1c2UgdGhlIHJvb3QgaGFzIG5vIHByb3BzLlxuICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUhvc3RDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcblxuICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIHZhciBtZW1vaXplZFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogbnVsbDtcblxuICAgIGlmIChoYXNMZWdhY3lDb250ZXh0Q2hhbmdlZCgpKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSBjYW4gYmFpbCBvdXQgb24gcHJvcHMgZXF1YWxpdHkgYnV0IGlmIGNvbnRleHQgaGFzIGNoYW5nZWRcbiAgICAgIC8vIHdlIGRvbid0IGRvIHRoZSBiYWlsb3V0IGFuZCB3ZSBoYXZlIHRvIHJldXNlIGV4aXN0aW5nIHByb3BzIGluc3RlYWQuXG4gICAgfSBlbHNlIGlmIChtZW1vaXplZFByb3BzID09PSBuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBpc0hpZGRlbiA9IHdvcmtJblByb2dyZXNzLm1vZGUgJiBBc3luY01vZGUgJiYgc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSh0eXBlLCBuZXh0UHJvcHMpO1xuICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgIC8vIEJlZm9yZSBiYWlsaW5nIG91dCwgbWFrZSBzdXJlIHdlJ3ZlIGRlcHJpb3JpdGl6ZWQgYSBoaWRkZW4gY29tcG9uZW50LlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IE5ldmVyO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0hpZGRlbiB8fCByZW5kZXJFeHBpcmF0aW9uVGltZSAhPT0gTmV2ZXIpIHtcbiAgICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UncmUgcmVuZGVyaW5nIGEgaGlkZGVuIG5vZGUgYXQgaGlkZGVuIHByaW9yaXR5LCBkb24ndCBiYWlsb3V0LiBUaGVcbiAgICAgIC8vIHBhcmVudCBpcyBjb21wbGV0ZSwgYnV0IHRoZSBjaGlsZHJlbiBtYXkgbm90IGJlLlxuICAgIH1cblxuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIGlzRGlyZWN0VGV4dENoaWxkID0gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgbmV4dFByb3BzKTtcblxuICAgIGlmIChpc0RpcmVjdFRleHRDaGlsZCkge1xuICAgICAgLy8gV2Ugc3BlY2lhbCBjYXNlIGEgZGlyZWN0IHRleHQgY2hpbGQgb2YgYSBob3N0IG5vZGUuIFRoaXMgaXMgYSBjb21tb25cbiAgICAgIC8vIGNhc2UuIFdlIHdvbid0IGhhbmRsZSBpdCBhcyBhIHJlaWZpZWQgY2hpbGQuIFdlIHdpbGwgaW5zdGVhZCBoYW5kbGVcbiAgICAgIC8vIHRoaXMgaW4gdGhlIGhvc3QgZW52aXJvbm1lbnQgdGhhdCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoaXMgcHJvcC4gVGhhdFxuICAgICAgLy8gYXZvaWRzIGFsbG9jYXRpbmcgYW5vdGhlciBIb3N0VGV4dCBmaWJlciBhbmQgdHJhdmVyc2luZyBpdC5cbiAgICAgIG5leHRDaGlsZHJlbiA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChwcmV2UHJvcHMgJiYgc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJldlByb3BzKSkge1xuICAgICAgLy8gSWYgd2UncmUgc3dpdGNoaW5nIGZyb20gYSBkaXJlY3QgdGV4dCBjaGlsZCB0byBhIG5vcm1hbCBjaGlsZCwgb3IgdG9cbiAgICAgIC8vIGVtcHR5LCB3ZSBuZWVkIHRvIHNjaGVkdWxlIHRoZSB0ZXh0IGNvbnRlbnQgdG8gYmUgcmVzZXQuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gQ29udGVudFJlc2V0O1xuICAgIH1cblxuICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgLy8gQ2hlY2sgdGhlIGhvc3QgY29uZmlnIHRvIHNlZSBpZiB0aGUgY2hpbGRyZW4gYXJlIG9mZnNjcmVlbi9oaWRkZW4uXG4gICAgaWYgKHJlbmRlckV4cGlyYXRpb25UaW1lICE9PSBOZXZlciAmJiB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgQXN5bmNNb2RlICYmIHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUodHlwZSwgbmV4dFByb3BzKSkge1xuICAgICAgLy8gRG93bi1wcmlvcml0aXplIHRoZSBjaGlsZHJlbi5cbiAgICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gTmV2ZXI7XG4gICAgICAvLyBCYWlsb3V0IGFuZCBjb21lIGJhY2sgdG8gdGhpcyBmaWJlciBsYXRlci5cbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcyk7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlSG9zdFRleHQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzKTtcbiAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmUuIFRoaXMgaXMgdGVybWluYWwuIFdlJ2xsIGRvIHRoZSBjb21wbGV0aW9uIHN0ZXBcbiAgICAvLyBpbW1lZGlhdGVseSBhZnRlci5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAhKGN1cnJlbnQgPT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnQW4gaW5kZXRlcm1pbmF0ZSBjb21wb25lbnQgc2hvdWxkIG5ldmVyIGhhdmUgbW91bnRlZC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICB2YXIgZm4gPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIHZhciBwcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICB2YXIgdW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICB2YXIgY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG5cbiAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG5cbiAgICB7XG4gICAgICBpZiAoZm4ucHJvdG90eXBlICYmIHR5cGVvZiBmbi5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcykgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgIGlmICghZGlkV2FybkFib3V0QmFkQ2xhc3NbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSA8JXMgLz4gY29tcG9uZW50IGFwcGVhcnMgdG8gaGF2ZSBhIHJlbmRlciBtZXRob2QsIGJ1dCBkb2Vzbid0IGV4dGVuZCBSZWFjdC5Db21wb25lbnQuIFwiICsgJ1RoaXMgaXMgbGlrZWx5IHRvIGNhdXNlIGVycm9ycy4gQ2hhbmdlICVzIHRvIGV4dGVuZCBSZWFjdC5Db21wb25lbnQgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRCYWRDbGFzc1tjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgIHZhbHVlID0gZm4ocHJvcHMsIGNvbnRleHQpO1xuICAgIH1cbiAgICAvLyBSZWFjdCBEZXZUb29scyByZWFkcyB0aGlzIGZsYWcuXG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcms7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUucmVuZGVyID09PSAnZnVuY3Rpb24nICYmIHZhbHVlLiQkdHlwZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuXG4gICAgICAvLyBQcm9jZWVkIHVuZGVyIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhpcyBpcyBhIGNsYXNzIGluc3RhbmNlXG4gICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDbGFzc0NvbXBvbmVudDtcblxuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHZhbHVlLnN0YXRlICE9PSBudWxsICYmIHZhbHVlLnN0YXRlICE9PSB1bmRlZmluZWQgPyB2YWx1ZS5zdGF0ZSA6IG51bGw7XG5cbiAgICAgIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcGFydGlhbFN0YXRlID0gY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgdmFsdWUsIHByb3BzLCB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKTtcblxuICAgICAgICBpZiAocGFydGlhbFN0YXRlICE9PSBudWxsICYmIHBhcnRpYWxTdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IF9hc3NpZ24oe30sIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUsIHBhcnRpYWxTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUHVzaCBjb250ZXh0IHByb3ZpZGVycyBlYXJseSB0byBwcmV2ZW50IGNvbnRleHQgc3RhY2sgbWlzbWF0Y2hlcy5cbiAgICAgIC8vIER1cmluZyBtb3VudGluZyB3ZSBkb24ndCBrbm93IHRoZSBjaGlsZCBjb250ZXh0IHlldCBhcyB0aGUgaW5zdGFuY2UgZG9lc24ndCBleGlzdC5cbiAgICAgIC8vIFdlIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2hpbGQgY29udGV4dCBpbiBmaW5pc2hDbGFzc0NvbXBvbmVudCgpIHJpZ2h0IGFmdGVyIHJlbmRlcmluZy5cbiAgICAgIHZhciBoYXNDb250ZXh0ID0gcHVzaExlZ2FjeUNvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBhZG9wdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHZhbHVlKTtcbiAgICAgIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgcmV0dXJuIGZpbmlzaENsYXNzQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB0cnVlLCBoYXNDb250ZXh0LCBmYWxzZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQcm9jZWVkIHVuZGVyIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhpcyBpcyBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBGdW5jdGlvbmFsQ29tcG9uZW50O1xuICAgICAge1xuICAgICAgICB2YXIgX0NvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG5cbiAgICAgICAgaWYgKF9Db21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuaW5nKCFfQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzLCAnJXMoLi4uKTogY2hpbGRDb250ZXh0VHlwZXMgY2Fubm90IGJlIGRlZmluZWQgb24gYSBmdW5jdGlvbmFsIGNvbXBvbmVudC4nLCBfQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IF9Db21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLnJlZiAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBpbmZvID0gJyc7XG4gICAgICAgICAgdmFyIG93bmVyTmFtZSA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lKCk7XG4gICAgICAgICAgaWYgKG93bmVyTmFtZSkge1xuICAgICAgICAgICAgaW5mbyArPSAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBvd25lck5hbWUgKyAnYC4nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB3YXJuaW5nS2V5ID0gb3duZXJOYW1lIHx8IHdvcmtJblByb2dyZXNzLl9kZWJ1Z0lEIHx8ICcnO1xuICAgICAgICAgIHZhciBkZWJ1Z1NvdXJjZSA9IHdvcmtJblByb2dyZXNzLl9kZWJ1Z1NvdXJjZTtcbiAgICAgICAgICBpZiAoZGVidWdTb3VyY2UpIHtcbiAgICAgICAgICAgIHdhcm5pbmdLZXkgPSBkZWJ1Z1NvdXJjZS5maWxlTmFtZSArICc6JyArIGRlYnVnU291cmNlLmxpbmVOdW1iZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZGlkV2FybkFib3V0U3RhdGVsZXNzUmVmc1t3YXJuaW5nS2V5XSkge1xuICAgICAgICAgICAgZGlkV2FybkFib3V0U3RhdGVsZXNzUmVmc1t3YXJuaW5nS2V5XSA9IHRydWU7XG4gICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGJlIGdpdmVuIHJlZnMuICcgKyAnQXR0ZW1wdHMgdG8gYWNjZXNzIHRoaXMgcmVmIHdpbGwgZmFpbC4lcyVzJywgaW5mbywgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5nZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZm4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIF9jb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcykgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uYWxDb21wb25lbnRbX2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnJXM6IFN0YXRlbGVzcyBmdW5jdGlvbmFsIGNvbXBvbmVudHMgZG8gbm90IHN1cHBvcnQgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLicsIF9jb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25hbENvbXBvbmVudFtfY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHZhbHVlKTtcbiAgICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgcHJvcHMpO1xuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNhbGxDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICBpZiAoaGFzTGVnYWN5Q29udGV4dENoYW5nZWQoKSkge1xuICAgICAgLy8gTm9ybWFsbHkgd2UgY2FuIGJhaWwgb3V0IG9uIHByb3BzIGVxdWFsaXR5IGJ1dCBpZiBjb250ZXh0IGhhcyBjaGFuZ2VkXG4gICAgICAvLyB3ZSBkb24ndCBkbyB0aGUgYmFpbG91dCBhbmQgd2UgaGF2ZSB0byByZXVzZSBleGlzdGluZyBwcm9wcyBpbnN0ZWFkLlxuICAgIH0gZWxzZSBpZiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9PT0gbmV4dFByb3BzKSB7XG4gICAgICBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzO1xuICAgICAgLy8gVE9ETzogV2hlbiBiYWlsaW5nIG91dCwgd2UgbWlnaHQgbmVlZCB0byByZXR1cm4gdGhlIHN0YXRlTm9kZSBpbnN0ZWFkXG4gICAgICAvLyBvZiB0aGUgY2hpbGQuIFRvIGNoZWNrIGl0IGZvciB3b3JrLlxuICAgICAgLy8gcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGlzIGEgZm9yayBvZiByZWNvbmNpbGVDaGlsZHJlbkF0RXhwaXJhdGlvblRpbWUgYnV0IHVzaW5nXG4gICAgLy8gc3RhdGVOb2RlIHRvIHN0b3JlIHRoZSBjaGlsZC5cbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuc3RhdGVOb2RlLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcyk7XG4gICAgLy8gVGhpcyBkb2Vzbid0IHRha2UgYXJiaXRyYXJ5IHRpbWUgc28gd2UgY291bGQgc3luY2hyb25vdXNseSBqdXN0IGJlZ2luXG4gICAgLy8gZWFnZXJseSBkbyB0aGUgd29yayBvZiB3b3JrSW5Qcm9ncmVzcy5jaGlsZCBhcyBhbiBvcHRpbWl6YXRpb24uXG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgaWYgKGhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBiYWlsIG91dCBvbiBwcm9wcyBlcXVhbGl0eSBidXQgaWYgY29udGV4dCBoYXMgY2hhbmdlZFxuICAgICAgLy8gd2UgZG9uJ3QgZG8gdGhlIGJhaWxvdXQgYW5kIHdlIGhhdmUgdG8gcmV1c2UgZXhpc3RpbmcgcHJvcHMgaW5zdGVhZC5cbiAgICB9IGVsc2UgaWYgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPT09IG5leHRDaGlsZHJlbikge1xuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAvLyBQb3J0YWxzIGFyZSBzcGVjaWFsIGJlY2F1c2Ugd2UgZG9uJ3QgYXBwZW5kIHRoZSBjaGlsZHJlbiBkdXJpbmcgbW91bnRcbiAgICAgIC8vIGJ1dCBhdCBjb21taXQuIFRoZXJlZm9yZSB3ZSBuZWVkIHRvIHRyYWNrIGluc2VydGlvbnMgd2hpY2ggdGhlIG5vcm1hbFxuICAgICAgLy8gZmxvdyBkb2Vzbid0IGRvIGR1cmluZyBtb3VudC4gVGhpcyBkb2Vzbid0IGhhcHBlbiBhdCB0aGUgcm9vdCBiZWNhdXNlXG4gICAgICAvLyB0aGUgcm9vdCBhbHdheXMgc3RhcnRzIHdpdGggYSBcImN1cnJlbnRcIiB3aXRoIGEgbnVsbCBjaGlsZC5cbiAgICAgIC8vIFRPRE86IENvbnNpZGVyIHVuaWZ5aW5nIHRoaXMgd2l0aCBob3cgdGhlIHJvb3Qgd29ya3MuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbik7XG4gICAgICBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbik7XG4gICAgfVxuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2Uod29ya0luUHJvZ3Jlc3MsIGNvbnRleHQsIGNoYW5nZWRCaXRzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgIHZhciBmaWJlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIGlmIChmaWJlciAhPT0gbnVsbCkge1xuICAgICAgLy8gU2V0IHRoZSByZXR1cm4gcG9pbnRlciBvZiB0aGUgY2hpbGQgdG8gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG4gICAgICBmaWJlclsncmV0dXJuJ10gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICB9XG4gICAgd2hpbGUgKGZpYmVyICE9PSBudWxsKSB7XG4gICAgICB2YXIgbmV4dEZpYmVyID0gdm9pZCAwO1xuICAgICAgLy8gVmlzaXQgdGhpcyBmaWJlci5cbiAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgQ29udGV4dENvbnN1bWVyOlxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZXh0IG1hdGNoZXMuXG4gICAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IGZpYmVyLnN0YXRlTm9kZSB8IDA7XG4gICAgICAgICAgaWYgKGZpYmVyLnR5cGUgPT09IGNvbnRleHQgJiYgKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBleHBpcmF0aW9uIHRpbWUgb2YgYWxsIHRoZSBhbmNlc3RvcnMsIGluY2x1ZGluZ1xuICAgICAgICAgICAgLy8gdGhlIGFsdGVybmF0ZXMuXG4gICAgICAgICAgICB2YXIgbm9kZSA9IGZpYmVyO1xuICAgICAgICAgICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyIGFsdGVybmF0ZSA9IG5vZGUuYWx0ZXJuYXRlO1xuICAgICAgICAgICAgICBpZiAobm9kZS5leHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IG5vZGUuZXhwaXJhdGlvblRpbWUgPiByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICAgICAgICAgIG5vZGUuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICAgICAgICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIChhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPiByZW5kZXJFeHBpcmF0aW9uVGltZSkpIHtcbiAgICAgICAgICAgICAgICAgIGFsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHRlcm5hdGUgIT09IG51bGwgJiYgKGFsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IGFsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA+IHJlbmRlckV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgICAgICAgICAgIGFsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5laXRoZXIgYWx0ZXJuYXRlIHdhcyB1cGRhdGVkLCB3aGljaCBtZWFucyB0aGUgcmVzdCBvZiB0aGVcbiAgICAgICAgICAgICAgICAvLyBhbmNlc3RvciBwYXRoIGFscmVhZHkgaGFzIHN1ZmZpY2llbnQgcHJpb3JpdHkuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbm9kZSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRG9uJ3Qgc2NhbiBkZWVwZXIgdGhhbiBhIG1hdGNoaW5nIGNvbnN1bWVyLiBXaGVuIHdlIHJlbmRlciB0aGVcbiAgICAgICAgICAgIC8vIGNvbnN1bWVyLCB3ZSdsbCBjb250aW51ZSBzY2FubmluZyBmcm9tIHRoYXQgcG9pbnQuIFRoaXMgd2F5IHRoZVxuICAgICAgICAgICAgLy8gc2Nhbm5pbmcgd29yayBpcyB0aW1lLXNsaWNlZC5cbiAgICAgICAgICAgIG5leHRGaWJlciA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRyYXZlcnNlIGRvd24uXG4gICAgICAgICAgICBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgICAgIC8vIERvbid0IHNjYW4gZGVlcGVyIGlmIHRoaXMgaXMgYSBtYXRjaGluZyBwcm92aWRlclxuICAgICAgICAgIG5leHRGaWJlciA9IGZpYmVyLnR5cGUgPT09IHdvcmtJblByb2dyZXNzLnR5cGUgPyBudWxsIDogZmliZXIuY2hpbGQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gVHJhdmVyc2UgZG93bi5cbiAgICAgICAgICBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChuZXh0RmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgLy8gU2V0IHRoZSByZXR1cm4gcG9pbnRlciBvZiB0aGUgY2hpbGQgdG8gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG4gICAgICAgIG5leHRGaWJlclsncmV0dXJuJ10gPSBmaWJlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vIGNoaWxkLiBUcmF2ZXJzZSB0byBuZXh0IHNpYmxpbmcuXG4gICAgICAgIG5leHRGaWJlciA9IGZpYmVyO1xuICAgICAgICB3aGlsZSAobmV4dEZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGJhY2sgdG8gdGhlIHJvb3Qgb2YgdGhpcyBzdWJ0cmVlLiBFeGl0LlxuICAgICAgICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgc2libGluZyA9IG5leHRGaWJlci5zaWJsaW5nO1xuICAgICAgICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICBuZXh0RmliZXIgPSBzaWJsaW5nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIE5vIG1vcmUgc2libGluZ3MuIFRyYXZlcnNlIHVwLlxuICAgICAgICAgIG5leHRGaWJlciA9IG5leHRGaWJlclsncmV0dXJuJ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZpYmVyID0gbmV4dEZpYmVyO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNvbnRleHRQcm92aWRlcihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICB2YXIgcHJvdmlkZXJUeXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICB2YXIgY29udGV4dCA9IHByb3ZpZGVyVHlwZS5fY29udGV4dDtcblxuICAgIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICB2YXIgb2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzO1xuXG4gICAgaWYgKGhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBiYWlsIG91dCBvbiBwcm9wcyBlcXVhbGl0eSBidXQgaWYgY29udGV4dCBoYXMgY2hhbmdlZFxuICAgICAgLy8gd2UgZG9uJ3QgZG8gdGhlIGJhaWxvdXQgYW5kIHdlIGhhdmUgdG8gcmV1c2UgZXhpc3RpbmcgcHJvcHMgaW5zdGVhZC5cbiAgICB9IGVsc2UgaWYgKG9sZFByb3BzID09PSBuZXdQcm9wcykge1xuICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gMDtcbiAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgdmFyIG5ld1ZhbHVlID0gbmV3UHJvcHMudmFsdWU7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5ld1Byb3BzO1xuXG4gICAgdmFyIGNoYW5nZWRCaXRzID0gdm9pZCAwO1xuICAgIGlmIChvbGRQcm9wcyA9PT0gbnVsbCkge1xuICAgICAgLy8gSW5pdGlhbCByZW5kZXJcbiAgICAgIGNoYW5nZWRCaXRzID0gTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob2xkUHJvcHMudmFsdWUgPT09IG5ld1Byb3BzLnZhbHVlKSB7XG4gICAgICAgIC8vIE5vIGNoYW5nZS4gQmFpbG91dCBlYXJseSBpZiBjaGlsZHJlbiBhcmUgdGhlIHNhbWUuXG4gICAgICAgIGlmIChvbGRQcm9wcy5jaGlsZHJlbiA9PT0gbmV3UHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSAwO1xuICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IG9sZFByb3BzLnZhbHVlO1xuICAgICAgICAvLyBVc2UgT2JqZWN0LmlzIHRvIGNvbXBhcmUgdGhlIG5ldyBjb250ZXh0IHZhbHVlIHRvIHRoZSBvbGQgdmFsdWUuXG4gICAgICAgIC8vIElubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsLlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICAgICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSAmJiAob2xkVmFsdWUgIT09IDAgfHwgMSAvIG9sZFZhbHVlID09PSAxIC8gbmV3VmFsdWUpIHx8IG9sZFZhbHVlICE9PSBvbGRWYWx1ZSAmJiBuZXdWYWx1ZSAhPT0gbmV3VmFsdWUgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBObyBjaGFuZ2UuIEJhaWxvdXQgZWFybHkgaWYgY2hpbGRyZW4gYXJlIHRoZSBzYW1lLlxuICAgICAgICAgICAgaWYgKG9sZFByb3BzLmNoaWxkcmVuID09PSBuZXdQcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSAwO1xuICAgICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjb250ZXh0Ll9jYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRleHQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG4gICAgICAgICAge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgPT09IDApIHtcbiAgICAgICAgICAgIC8vIE5vIGNoYW5nZS4gQmFpbG91dCBlYXJseSBpZiBjaGlsZHJlbiBhcmUgdGhlIHNhbWUuXG4gICAgICAgICAgICBpZiAob2xkUHJvcHMuY2hpbGRyZW4gPT09IG5ld1Byb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IDA7XG4gICAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZSh3b3JrSW5Qcm9ncmVzcywgY29udGV4dCwgY2hhbmdlZEJpdHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjaGFuZ2VkQml0cztcbiAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgdmFyIG5ld0NoaWxkcmVuID0gbmV3UHJvcHMuY2hpbGRyZW47XG4gICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5ld0NoaWxkcmVuKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDb250ZXh0Q29uc3VtZXIoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgdmFyIGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICB2YXIgb2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY29udGV4dC5fY3VycmVudFZhbHVlO1xuICAgIHZhciBjaGFuZ2VkQml0cyA9IGNvbnRleHQuX2NoYW5nZWRCaXRzO1xuXG4gICAgaWYgKGhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBiYWlsIG91dCBvbiBwcm9wcyBlcXVhbGl0eSBidXQgaWYgY29udGV4dCBoYXMgY2hhbmdlZFxuICAgICAgLy8gd2UgZG9uJ3QgZG8gdGhlIGJhaWxvdXQgYW5kIHdlIGhhdmUgdG8gcmV1c2UgZXhpc3RpbmcgcHJvcHMgaW5zdGVhZC5cbiAgICB9IGVsc2UgaWYgKGNoYW5nZWRCaXRzID09PSAwICYmIG9sZFByb3BzID09PSBuZXdQcm9wcykge1xuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV3UHJvcHM7XG5cbiAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV3UHJvcHMudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO1xuICAgIGlmIChvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwpIHtcbiAgICAgIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICBvYnNlcnZlZEJpdHMgPSBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG4gICAgfVxuICAgIC8vIFN0b3JlIHRoZSBvYnNlcnZlZEJpdHMgb24gdGhlIGZpYmVyJ3Mgc3RhdGVOb2RlIGZvciBxdWljayBhY2Nlc3MuXG4gICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gb2JzZXJ2ZWRCaXRzO1xuXG4gICAgaWYgKChjaGFuZ2VkQml0cyAmIG9ic2VydmVkQml0cykgIT09IDApIHtcbiAgICAgIC8vIENvbnRleHQgY2hhbmdlIHByb3BhZ2F0aW9uIHN0b3BzIGF0IG1hdGNoaW5nIGNvbnN1bWVycywgZm9yIHRpbWUtXG4gICAgICAvLyBzbGljaW5nLiBDb250aW51ZSB0aGUgcHJvcGFnYXRpb24gaGVyZS5cbiAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2Uod29ya0luUHJvZ3Jlc3MsIGNvbnRleHQsIGNoYW5nZWRCaXRzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICAgIC8vIFRoZXJlIGlzIG5vIGJhaWxvdXQgb24gYGNoaWxkcmVuYCBlcXVhbGl0eSBiZWNhdXNlIHdlIGV4cGVjdCBwZW9wbGVcbiAgICAvLyB0byBvZnRlbiBwYXNzIGEgYm91bmQgbWV0aG9kIGFzIGEgY2hpbGQsIGJ1dCBpdCBtYXkgcmVmZXJlbmNlXG4gICAgLy8gYHRoaXMuc3RhdGVgIG9yIGB0aGlzLnByb3BzYCAoYW5kIHRodXMgbmVlZHMgdG8gcmUtcmVuZGVyIG9uIGBzZXRTdGF0ZWApLlxuXG4gICAgdmFyIHJlbmRlciA9IG5ld1Byb3BzLmNoaWxkcmVuO1xuXG4gICAge1xuICAgICAgd2FybmluZyh0eXBlb2YgcmVuZGVyID09PSAnZnVuY3Rpb24nLCAnQSBjb250ZXh0IGNvbnN1bWVyIHdhcyByZW5kZXJlZCB3aXRoIG11bHRpcGxlIGNoaWxkcmVuLCBvciBhIGNoaWxkICcgKyBcInRoYXQgaXNuJ3QgYSBmdW5jdGlvbi4gQSBjb250ZXh0IGNvbnN1bWVyIGV4cGVjdHMgYSBzaW5nbGUgY2hpbGQgXCIgKyAndGhhdCBpcyBhIGZ1bmN0aW9uLiBJZiB5b3UgZGlkIHBhc3MgYSBmdW5jdGlvbiwgbWFrZSBzdXJlIHRoZXJlICcgKyAnaXMgbm8gdHJhaWxpbmcgb3IgbGVhZGluZyB3aGl0ZXNwYWNlIGFyb3VuZCBpdC4nKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Q2hpbGRyZW4gPSByZW5kZXIobmV3VmFsdWUpO1xuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXdDaGlsZHJlbik7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICB9XG5cbiAgLypcbiAgZnVuY3Rpb24gcmV1c2VDaGlsZHJlbkVmZmVjdHMocmV0dXJuRmliZXIgOiBGaWJlciwgZmlyc3RDaGlsZCA6IEZpYmVyKSB7XG4gICAgbGV0IGNoaWxkID0gZmlyc3RDaGlsZDtcbiAgICBkbyB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgZmlyc3QgYW5kIGxhc3QgZWZmZWN0IG9mIHRoZSBwYXJlbnQgY29ycmVzcG9uZHNcbiAgICAgIC8vIHRvIHRoZSBjaGlsZHJlbidzIGZpcnN0IGFuZCBsYXN0IGVmZmVjdC5cbiAgICAgIGlmICghcmV0dXJuRmliZXIuZmlyc3RFZmZlY3QpIHtcbiAgICAgICAgcmV0dXJuRmliZXIuZmlyc3RFZmZlY3QgPSBjaGlsZC5maXJzdEVmZmVjdDtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5sYXN0RWZmZWN0KSB7XG4gICAgICAgIGlmIChyZXR1cm5GaWJlci5sYXN0RWZmZWN0KSB7XG4gICAgICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdC5uZXh0RWZmZWN0ID0gY2hpbGQuZmlyc3RFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkLmxhc3RFZmZlY3Q7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoY2hpbGQgPSBjaGlsZC5zaWJsaW5nKTtcbiAgfVxuICAqL1xuXG4gIGZ1bmN0aW9uIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgICBjYW5jZWxXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgLy8gVE9ETzogV2Ugc2hvdWxkIGlkZWFsbHkgYmUgYWJsZSB0byBiYWlsIG91dCBlYXJseSBpZiB0aGUgY2hpbGRyZW4gaGF2ZSBub1xuICAgIC8vIG1vcmUgd29yayB0byBkby4gSG93ZXZlciwgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhIHNlcGFyYXRpb24gb2YgdGhpc1xuICAgIC8vIEZpYmVyJ3MgcHJpb3JpdHkgYW5kIGl0cyBjaGlsZHJlbiB5ZXQgLSB3ZSBkb24ndCBrbm93IHdpdGhvdXQgZG9pbmcgbG90c1xuICAgIC8vIG9mIHRoZSBzYW1lIHdvcmsgd2UgZG8gYW55d2F5LiBPbmNlIHdlIGhhdmUgdGhhdCBzZXBhcmF0aW9uIHdlIGNhbiBqdXN0XG4gICAgLy8gYmFpbCBvdXQgaGVyZSBpZiB0aGUgY2hpbGRyZW4gaGFzIG5vIG1vcmUgd29yayBhdCB0aGlzIHByaW9yaXR5IGxldmVsLlxuICAgIC8vIGlmICh3b3JrSW5Qcm9ncmVzcy5wcmlvcml0eU9mQ2hpbGRyZW4gPD0gcHJpb3JpdHlMZXZlbCkge1xuICAgIC8vICAgLy8gSWYgdGhlcmUgYXJlIHNpZGUtZWZmZWN0cyBpbiB0aGVzZSBjaGlsZHJlbiB0aGF0IGhhdmUgbm90IHlldCBiZWVuXG4gICAgLy8gICAvLyBjb21taXR0ZWQgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB0aGV5IGdldCBwcm9wZXJseSB0cmFuc2ZlcnJlZCB1cC5cbiAgICAvLyAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQuY2hpbGQgIT09IHdvcmtJblByb2dyZXNzLmNoaWxkKSB7XG4gICAgLy8gICAgIHJldXNlQ2hpbGRyZW5FZmZlY3RzKHdvcmtJblByb2dyZXNzLCBjaGlsZCk7XG4gICAgLy8gICB9XG4gICAgLy8gICByZXR1cm4gbnVsbDtcbiAgICAvLyB9XG5cbiAgICBjbG9uZUNoaWxkRmliZXJzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiBiYWlsb3V0T25Mb3dQcmlvcml0eShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIGNhbmNlbFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICAvLyBUT0RPOiBIYW5kbGUgSG9zdENvbXBvbmVudCB0YWdzIGhlcmUgYXMgd2VsbCBhbmQgY2FsbCBwdXNoSG9zdENvbnRleHQoKT9cbiAgICAvLyBTZWUgUFIgODU5MCBkaXNjdXNzaW9uIGZvciBjb250ZXh0XG4gICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIHB1c2hMZWdhY3lDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbnRleHRQcm92aWRlcjpcbiAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFRPRE86IFdoYXQgaWYgdGhpcyBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3M/XG4gICAgLy8gSG93IGNhbiB0aGF0IGhhcHBlbj8gSG93IGlzIHRoaXMgbm90IGJlaW5nIGNsb25lZD9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFRPRE86IERlbGV0ZSBtZW1vaXplUHJvcHMvU3RhdGUgYW5kIG1vdmUgdG8gcmVjb25jaWxlL2JhaWxvdXQgaW5zdGVhZFxuICBmdW5jdGlvbiBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcykge1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBuZXh0UHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBtZW1vaXplU3RhdGUod29ya0luUHJvZ3Jlc3MsIG5leHRTdGF0ZSkge1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgLy8gRG9uJ3QgcmVzZXQgdGhlIHVwZGF0ZVF1ZXVlLCBpbiBjYXNlIHRoZXJlIGFyZSBwZW5kaW5nIHVwZGF0ZXMuIFJlc2V0dGluZ1xuICAgIC8vIGlzIGhhbmRsZWQgYnkgcHJvY2Vzc1VwZGF0ZVF1ZXVlLlxuICB9XG5cbiAgZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIHJldHVybiBiYWlsb3V0T25Mb3dQcmlvcml0eShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgIGNhc2UgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDpcbiAgICAgICAgcmV0dXJuIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgY2FzZSBGdW5jdGlvbmFsQ29tcG9uZW50OlxuICAgICAgICByZXR1cm4gdXBkYXRlRnVuY3Rpb25hbENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICByZXR1cm4gdXBkYXRlQ2xhc3NDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHJldHVybiB1cGRhdGVIb3N0Um9vdChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICByZXR1cm4gdXBkYXRlSG9zdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RUZXh0KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGNhc2UgQ2FsbEhhbmRsZXJQaGFzZTpcbiAgICAgICAgLy8gVGhpcyBpcyBhIHJlc3RhcnQuIFJlc2V0IHRoZSB0YWcgdG8gdGhlIGluaXRpYWwgcGhhc2UuXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IENhbGxDb21wb25lbnQ7XG4gICAgICAvLyBJbnRlbnRpb25hbGx5IGZhbGwgdGhyb3VnaCBzaW5jZSB0aGlzIGlzIG5vdyB0aGUgc2FtZS5cbiAgICAgIGNhc2UgQ2FsbENvbXBvbmVudDpcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNhbGxDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGNhc2UgUmV0dXJuQ29tcG9uZW50OlxuICAgICAgICAvLyBBIHJldHVybiBjb21wb25lbnQgaXMganVzdCBhIHBsYWNlaG9sZGVyLCB3ZSBjYW4ganVzdCBydW4gdGhyb3VnaCB0aGVcbiAgICAgICAgLy8gbmV4dCBvbmUgaW1tZWRpYXRlbHkuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICAgIHJldHVybiB1cGRhdGVGb3J3YXJkUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBjYXNlIE1vZGU6XG4gICAgICAgIHJldHVybiB1cGRhdGVNb2RlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgICByZXR1cm4gdXBkYXRlQ29udGV4dFByb3ZpZGVyKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICBjYXNlIENvbnRleHRDb25zdW1lcjpcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNvbnRleHRDb25zdW1lcihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnVW5rbm93biB1bml0IG9mIHdvcmsgdGFnLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmVnaW5Xb3JrOiBiZWdpbldvcmtcbiAgfTtcbn07XG5cbnZhciBSZWFjdEZpYmVyQ29tcGxldGVXb3JrID0gZnVuY3Rpb24gKGNvbmZpZywgaG9zdENvbnRleHQsIGxlZ2FjeUNvbnRleHQsIG5ld0NvbnRleHQsIGh5ZHJhdGlvbkNvbnRleHQpIHtcbiAgdmFyIGNyZWF0ZUluc3RhbmNlID0gY29uZmlnLmNyZWF0ZUluc3RhbmNlLFxuICAgICAgY3JlYXRlVGV4dEluc3RhbmNlID0gY29uZmlnLmNyZWF0ZVRleHRJbnN0YW5jZSxcbiAgICAgIGFwcGVuZEluaXRpYWxDaGlsZCA9IGNvbmZpZy5hcHBlbmRJbml0aWFsQ2hpbGQsXG4gICAgICBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiA9IGNvbmZpZy5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixcbiAgICAgIHByZXBhcmVVcGRhdGUgPSBjb25maWcucHJlcGFyZVVwZGF0ZSxcbiAgICAgIG11dGF0aW9uID0gY29uZmlnLm11dGF0aW9uLFxuICAgICAgcGVyc2lzdGVuY2UgPSBjb25maWcucGVyc2lzdGVuY2U7XG4gIHZhciBnZXRSb290SG9zdENvbnRhaW5lciA9IGhvc3RDb250ZXh0LmdldFJvb3RIb3N0Q29udGFpbmVyLFxuICAgICAgcG9wSG9zdENvbnRleHQgPSBob3N0Q29udGV4dC5wb3BIb3N0Q29udGV4dCxcbiAgICAgIGdldEhvc3RDb250ZXh0ID0gaG9zdENvbnRleHQuZ2V0SG9zdENvbnRleHQsXG4gICAgICBwb3BIb3N0Q29udGFpbmVyID0gaG9zdENvbnRleHQucG9wSG9zdENvbnRhaW5lcjtcbiAgdmFyIHBvcExlZ2FjeUNvbnRleHRQcm92aWRlciA9IGxlZ2FjeUNvbnRleHQucG9wQ29udGV4dFByb3ZpZGVyLFxuICAgICAgcG9wVG9wTGV2ZWxMZWdhY3lDb250ZXh0T2JqZWN0ID0gbGVnYWN5Q29udGV4dC5wb3BUb3BMZXZlbENvbnRleHRPYmplY3Q7XG4gIHZhciBwb3BQcm92aWRlciA9IG5ld0NvbnRleHQucG9wUHJvdmlkZXI7XG4gIHZhciBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlID0gaHlkcmF0aW9uQ29udGV4dC5wcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlLFxuICAgICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UgPSBoeWRyYXRpb25Db250ZXh0LnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLFxuICAgICAgcG9wSHlkcmF0aW9uU3RhdGUgPSBoeWRyYXRpb25Db250ZXh0LnBvcEh5ZHJhdGlvblN0YXRlO1xuXG5cbiAgZnVuY3Rpb24gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykge1xuICAgIC8vIFRhZyB0aGUgZmliZXIgd2l0aCBhbiB1cGRhdGUgZWZmZWN0LiBUaGlzIHR1cm5zIGEgUGxhY2VtZW50IGludG9cbiAgICAvLyBhbiBVcGRhdGVBbmRQbGFjZW1lbnQuXG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtSZWYod29ya0luUHJvZ3Jlc3MpIHtcbiAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUmVmO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwZW5kQWxsUmV0dXJucyhyZXR1cm5zLCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIHZhciBub2RlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGlmIChub2RlKSB7XG4gICAgICBub2RlWydyZXR1cm4nXSA9IHdvcmtJblByb2dyZXNzO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IG5vZGUudGFnID09PSBIb3N0VGV4dCB8fCBub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdBIGNhbGwgY2Fubm90IGhhdmUgaG9zdCBjb21wb25lbnQgY2hpbGRyZW4uJyk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBSZXR1cm5Db21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJucy5wdXNoKG5vZGUucGVuZGluZ1Byb3BzLnZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkWydyZXR1cm4nXSA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGVbJ3JldHVybiddID09PSBudWxsIHx8IG5vZGVbJ3JldHVybiddID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZVsncmV0dXJuJ107XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmdbJ3JldHVybiddID0gbm9kZVsncmV0dXJuJ107XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmVDYWxsVG9IYW5kbGVyUGhhc2UoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgdmFyIHByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICAhcHJvcHMgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgYmUgcmVzb2x2ZWQgYnkgbm93LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gICAgLy8gRmlyc3Qgc3RlcCBvZiB0aGUgY2FsbCBoYXMgY29tcGxldGVkLiBOb3cgd2UgbmVlZCB0byBkbyB0aGUgc2Vjb25kLlxuICAgIC8vIFRPRE86IEl0IHdvdWxkIGJlIG5pY2UgdG8gaGF2ZSBhIG11bHRpIHN0YWdlIGNhbGwgcmVwcmVzZW50ZWQgYnkgYVxuICAgIC8vIHNpbmdsZSBjb21wb25lbnQsIG9yIGF0IGxlYXN0IHRhaWwgY2FsbCBvcHRpbWl6ZSBuZXN0ZWQgb25lcy4gQ3VycmVudGx5XG4gICAgLy8gdGhhdCByZXF1aXJlcyBhZGRpdGlvbmFsIGZpZWxkcyB0aGF0IHdlIGRvbid0IHdhbnQgdG8gYWRkIHRvIHRoZSBmaWJlci5cbiAgICAvLyBTbyB0aGlzIHJlcXVpcmVzIG5lc3RlZCBoYW5kbGVycy5cbiAgICAvLyBOb3RlOiBUaGlzIGRvZXNuJ3QgbXV0YXRlIHRoZSBhbHRlcm5hdGUgbm9kZS4gSSBkb24ndCB0aGluayBpdCBuZWVkcyB0b1xuICAgIC8vIHNpbmNlIHRoaXMgc3RhZ2UgaXMgcmVzZXQgZm9yIGV2ZXJ5IHBhc3MuXG4gICAgd29ya0luUHJvZ3Jlc3MudGFnID0gQ2FsbEhhbmRsZXJQaGFzZTtcblxuICAgIC8vIEJ1aWxkIHVwIHRoZSByZXR1cm5zLlxuICAgIC8vIFRPRE86IENvbXBhcmUgdGhpcyB0byBhIGdlbmVyYXRvciBvciBvcGFxdWUgaGVscGVycyBsaWtlIENoaWxkcmVuLlxuICAgIHZhciByZXR1cm5zID0gW107XG4gICAgYXBwZW5kQWxsUmV0dXJucyhyZXR1cm5zLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgdmFyIGZuID0gcHJvcHMuaGFuZGxlcjtcbiAgICB2YXIgY2hpbGRQcm9wcyA9IHByb3BzLnByb3BzO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBmbihjaGlsZFByb3BzLCByZXR1cm5zKTtcblxuICAgIHZhciBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnQgIT09IG51bGwgPyBjdXJyZW50LmNoaWxkIDogbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwZW5kQWxsQ2hpbGRyZW4ocGFyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIC8vIFdlIG9ubHkgaGF2ZSB0aGUgdG9wIEZpYmVyIHRoYXQgd2FzIGNyZWF0ZWQgYnV0IHdlIG5lZWQgcmVjdXJzZSBkb3duIGl0c1xuICAgIC8vIGNoaWxkcmVuIHRvIGZpbmQgYWxsIHRoZSB0ZXJtaW5hbCBub2Rlcy5cbiAgICB2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAgIGFwcGVuZEluaXRpYWxDaGlsZChwYXJlbnQsIG5vZGUuc3RhdGVOb2RlKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RQb3J0YWwpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBvcnRhbCBjaGlsZCwgdGhlbiB3ZSBkb24ndCB3YW50IHRvIHRyYXZlcnNlXG4gICAgICAgIC8vIGRvd24gaXRzIGNoaWxkcmVuLiBJbnN0ZWFkLCB3ZSdsbCBnZXQgaW5zZXJ0aW9ucyBmcm9tIGVhY2ggY2hpbGQgaW5cbiAgICAgICAgLy8gdGhlIHBvcnRhbCBkaXJlY3RseS5cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkWydyZXR1cm4nXSA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlWydyZXR1cm4nXSA9PT0gbnVsbCB8fCBub2RlWydyZXR1cm4nXSA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgfVxuICAgICAgbm9kZS5zaWJsaW5nWydyZXR1cm4nXSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICB9XG4gIH1cblxuICB2YXIgdXBkYXRlSG9zdENvbnRhaW5lciA9IHZvaWQgMDtcbiAgdmFyIHVwZGF0ZUhvc3RDb21wb25lbnQgPSB2b2lkIDA7XG4gIHZhciB1cGRhdGVIb3N0VGV4dCA9IHZvaWQgMDtcbiAgaWYgKG11dGF0aW9uKSB7XG4gICAgaWYgKGVuYWJsZU11dGF0aW5nUmVjb25jaWxlcikge1xuICAgICAgLy8gTXV0YXRpb24gbW9kZVxuICAgICAgdXBkYXRlSG9zdENvbnRhaW5lciA9IGZ1bmN0aW9uICh3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAvLyBOb29wXG4gICAgICB9O1xuICAgICAgdXBkYXRlSG9zdENvbXBvbmVudCA9IGZ1bmN0aW9uIChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgdXBkYXRlUGF5bG9hZCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCkge1xuICAgICAgICAvLyBUT0RPOiBUeXBlIHRoaXMgc3BlY2lmaWMgdG8gdGhpcyB0eXBlIG9mIGNvbXBvbmVudC5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSB1cGRhdGVQYXlsb2FkO1xuICAgICAgICAvLyBJZiB0aGUgdXBkYXRlIHBheWxvYWQgaW5kaWNhdGVzIHRoYXQgdGhlcmUgaXMgYSBjaGFuZ2Ugb3IgaWYgdGhlcmVcbiAgICAgICAgLy8gaXMgYSBuZXcgcmVmIHdlIG1hcmsgdGhpcyBhcyBhbiB1cGRhdGUuIEFsbCB0aGUgd29yayBpcyBkb25lIGluIGNvbW1pdFdvcmsuXG4gICAgICAgIGlmICh1cGRhdGVQYXlsb2FkKSB7XG4gICAgICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB1cGRhdGVIb3N0VGV4dCA9IGZ1bmN0aW9uIChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgb2xkVGV4dCwgbmV3VGV4dCkge1xuICAgICAgICAvLyBJZiB0aGUgdGV4dCBkaWZmZXJzLCBtYXJrIGl0IGFzIGFuIHVwZGF0ZS4gQWxsIHRoZSB3b3JrIGluIGRvbmUgaW4gY29tbWl0V29yay5cbiAgICAgICAgaWYgKG9sZFRleHQgIT09IG5ld1RleHQpIHtcbiAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW52YXJpYW50KGZhbHNlLCAnTXV0YXRpbmcgcmVjb25jaWxlciBpcyBkaXNhYmxlZC4nKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGVyc2lzdGVuY2UpIHtcbiAgICBpZiAoZW5hYmxlUGVyc2lzdGVudFJlY29uY2lsZXIpIHtcbiAgICAgIC8vIFBlcnNpc3RlbnQgaG9zdCB0cmVlIG1vZGVcbiAgICAgIHZhciBjbG9uZUluc3RhbmNlID0gcGVyc2lzdGVuY2UuY2xvbmVJbnN0YW5jZSxcbiAgICAgICAgICBjcmVhdGVDb250YWluZXJDaGlsZFNldCA9IHBlcnNpc3RlbmNlLmNyZWF0ZUNvbnRhaW5lckNoaWxkU2V0LFxuICAgICAgICAgIGFwcGVuZENoaWxkVG9Db250YWluZXJDaGlsZFNldCA9IHBlcnNpc3RlbmNlLmFwcGVuZENoaWxkVG9Db250YWluZXJDaGlsZFNldCxcbiAgICAgICAgICBmaW5hbGl6ZUNvbnRhaW5lckNoaWxkcmVuID0gcGVyc2lzdGVuY2UuZmluYWxpemVDb250YWluZXJDaGlsZHJlbjtcblxuICAgICAgLy8gQW4gdW5mb3J0dW5hdGUgZm9yayBvZiBhcHBlbmRBbGxDaGlsZHJlbiBiZWNhdXNlIHdlIGhhdmUgdHdvIGRpZmZlcmVudCBwYXJlbnQgdHlwZXMuXG5cbiAgICAgIHZhciBhcHBlbmRBbGxDaGlsZHJlblRvQ29udGFpbmVyID0gZnVuY3Rpb24gKGNvbnRhaW5lckNoaWxkU2V0LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBjcmVhdGVkIGJ1dCB3ZSBuZWVkIHJlY3Vyc2UgZG93biBpdHNcbiAgICAgICAgLy8gY2hpbGRyZW4gdG8gZmluZCBhbGwgdGhlIHRlcm1pbmFsIG5vZGVzLlxuICAgICAgICB2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgICAgICAgIGFwcGVuZENoaWxkVG9Db250YWluZXJDaGlsZFNldChjb250YWluZXJDaGlsZFNldCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RQb3J0YWwpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBwb3J0YWwgY2hpbGQsIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byB0cmF2ZXJzZVxuICAgICAgICAgICAgLy8gZG93biBpdHMgY2hpbGRyZW4uIEluc3RlYWQsIHdlJ2xsIGdldCBpbnNlcnRpb25zIGZyb20gZWFjaCBjaGlsZCBpblxuICAgICAgICAgICAgLy8gdGhlIHBvcnRhbCBkaXJlY3RseS5cbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG5vZGUuY2hpbGRbJ3JldHVybiddID0gbm9kZTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobm9kZVsncmV0dXJuJ10gPT09IG51bGwgfHwgbm9kZVsncmV0dXJuJ10gPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBub2RlWydyZXR1cm4nXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5zaWJsaW5nWydyZXR1cm4nXSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB1cGRhdGVIb3N0Q29udGFpbmVyID0gZnVuY3Rpb24gKHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHZhciBwb3J0YWxPclJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgIHZhciBjaGlsZHJlblVuY2hhbmdlZCA9IHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0ID09PSBudWxsO1xuICAgICAgICBpZiAoY2hpbGRyZW5VbmNoYW5nZWQpIHtcbiAgICAgICAgICAvLyBObyBjaGFuZ2VzLCBqdXN0IHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZS5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY29udGFpbmVyID0gcG9ydGFsT3JSb290LmNvbnRhaW5lckluZm87XG4gICAgICAgICAgdmFyIG5ld0NoaWxkU2V0ID0gY3JlYXRlQ29udGFpbmVyQ2hpbGRTZXQoY29udGFpbmVyKTtcbiAgICAgICAgICAvLyBJZiBjaGlsZHJlbiBtaWdodCBoYXZlIGNoYW5nZWQsIHdlIGhhdmUgdG8gYWRkIHRoZW0gYWxsIHRvIHRoZSBzZXQuXG4gICAgICAgICAgYXBwZW5kQWxsQ2hpbGRyZW5Ub0NvbnRhaW5lcihuZXdDaGlsZFNldCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHBvcnRhbE9yUm9vdC5wZW5kaW5nQ2hpbGRyZW4gPSBuZXdDaGlsZFNldDtcbiAgICAgICAgICAvLyBTY2hlZHVsZSBhbiB1cGRhdGUgb24gdGhlIGNvbnRhaW5lciB0byBzd2FwIG91dCB0aGUgY29udGFpbmVyLlxuICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIGZpbmFsaXplQ29udGFpbmVyQ2hpbGRyZW4oY29udGFpbmVyLCBuZXdDaGlsZFNldCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB1cGRhdGVIb3N0Q29tcG9uZW50ID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB1cGRhdGVQYXlsb2FkLCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBlZmZlY3RzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG5vZGUsIHRoZW4gbm9uZSBvZiBvdXIgY2hpbGRyZW4gaGFkIGFueSB1cGRhdGVzLlxuICAgICAgICAvLyBUaGlzIGd1YXJhbnRlZXMgdGhhdCB3ZSBjYW4gcmV1c2UgYWxsIG9mIHRoZW0uXG4gICAgICAgIHZhciBjaGlsZHJlblVuY2hhbmdlZCA9IHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0ID09PSBudWxsO1xuICAgICAgICB2YXIgY3VycmVudEluc3RhbmNlID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChjaGlsZHJlblVuY2hhbmdlZCAmJiB1cGRhdGVQYXlsb2FkID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gTm8gY2hhbmdlcywganVzdCByZXVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UuXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgbWlnaHQgcmVsZWFzZSBhIHByZXZpb3VzIGNsb25lLlxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVjeWNsYWJsZUluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgIHZhciBuZXdJbnN0YW5jZSA9IGNsb25lSW5zdGFuY2UoY3VycmVudEluc3RhbmNlLCB1cGRhdGVQYXlsb2FkLCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMsIHdvcmtJblByb2dyZXNzLCBjaGlsZHJlblVuY2hhbmdlZCwgcmVjeWNsYWJsZUluc3RhbmNlKTtcbiAgICAgICAgICBpZiAoZmluYWxpemVJbml0aWFsQ2hpbGRyZW4obmV3SW5zdGFuY2UsIHR5cGUsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCkpIHtcbiAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBuZXdJbnN0YW5jZTtcbiAgICAgICAgICBpZiAoY2hpbGRyZW5VbmNoYW5nZWQpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBvdGhlciBlZmZlY3RzIGluIHRoaXMgdHJlZSwgd2UgbmVlZCB0byBmbGFnIHRoaXMgbm9kZSBhcyBoYXZpbmcgb25lLlxuICAgICAgICAgICAgLy8gRXZlbiB0aG91Z2ggd2UncmUgbm90IGdvaW5nIHRvIHVzZSBpdCBmb3IgYW55dGhpbmcuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgcGFyZW50cyB3b24ndCBrbm93IHRoYXQgdGhlcmUgYXJlIG5ldyBjaGlsZHJlbiB0byBwcm9wYWdhdGUgdXB3YXJkcy5cbiAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBjaGlsZHJlbiBtaWdodCBoYXZlIGNoYW5nZWQsIHdlIGhhdmUgdG8gYWRkIHRoZW0gYWxsIHRvIHRoZSBzZXQuXG4gICAgICAgICAgICBhcHBlbmRBbGxDaGlsZHJlbihuZXdJbnN0YW5jZSwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHVwZGF0ZUhvc3RUZXh0ID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBvbGRUZXh0LCBuZXdUZXh0KSB7XG4gICAgICAgIGlmIChvbGRUZXh0ICE9PSBuZXdUZXh0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHRleHQgY29udGVudCBkaWZmZXJzLCB3ZSdsbCBjcmVhdGUgYSBuZXcgdGV4dCBpbnN0YW5jZSBmb3IgaXQuXG4gICAgICAgICAgdmFyIHJvb3RDb250YWluZXJJbnN0YW5jZSA9IGdldFJvb3RIb3N0Q29udGFpbmVyKCk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3JlYXRlVGV4dEluc3RhbmNlKG5ld1RleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgLy8gV2UnbGwgaGF2ZSB0byBtYXJrIGl0IGFzIGhhdmluZyBhbiBlZmZlY3QsIGV2ZW4gdGhvdWdoIHdlIHdvbid0IHVzZSB0aGUgZWZmZWN0IGZvciBhbnl0aGluZy5cbiAgICAgICAgICAvLyBUaGlzIGxldHMgdGhlIHBhcmVudHMga25vdyB0aGF0IGF0IGxlYXN0IG9uZSBvZiB0aGVpciBjaGlsZHJlbiBoYXMgY2hhbmdlZC5cbiAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW52YXJpYW50KGZhbHNlLCAnUGVyc2lzdGVudCByZWNvbmNpbGVyIGlzIGRpc2FibGVkLicpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZW5hYmxlTm9vcFJlY29uY2lsZXIpIHtcbiAgICAgIC8vIE5vIGhvc3Qgb3BlcmF0aW9uc1xuICAgICAgdXBkYXRlSG9zdENvbnRhaW5lciA9IGZ1bmN0aW9uICh3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAvLyBOb29wXG4gICAgICB9O1xuICAgICAgdXBkYXRlSG9zdENvbXBvbmVudCA9IGZ1bmN0aW9uIChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgdXBkYXRlUGF5bG9hZCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCkge1xuICAgICAgICAvLyBOb29wXG4gICAgICB9O1xuICAgICAgdXBkYXRlSG9zdFRleHQgPSBmdW5jdGlvbiAoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG9sZFRleHQsIG5ld1RleHQpIHtcbiAgICAgICAgLy8gTm9vcFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW52YXJpYW50KGZhbHNlLCAnTm9vcCByZWNvbmNpbGVyIGlzIGRpc2FibGVkLicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgIGNhc2UgRnVuY3Rpb25hbENvbXBvbmVudDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgLy8gV2UgYXJlIGxlYXZpbmcgdGhpcyBzdWJ0cmVlLCBzbyBwb3AgY29udGV4dCBpZiBhbnkuXG4gICAgICAgICAgcG9wTGVnYWN5Q29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGNhdWdodCBhbiBlcnJvciwgc2NoZWR1bGUgYW4gZXJyb3IgbG9nIGVmZmVjdC5cbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICAgICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsICYmIHVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgJj0gfkRpZENhcHR1cmU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZENhdGNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBFcnJMb2c7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSBjbGVhciB0aGlzIGluIHRoZSBjb21taXQgcGhhc2UsIGJ1dCBzaW5jZSB3ZSBkaWQgbm90XG4gICAgICAgICAgICAgIC8vIHNjaGVkdWxlIGFuIGVmZmVjdCwgd2UgbmVlZCB0byByZXNldCBpdCBoZXJlLlxuICAgICAgICAgICAgICB1cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcG9wVG9wTGV2ZWxMZWdhY3lDb250ZXh0T2JqZWN0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB2YXIgZmliZXJSb290ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgIGlmIChmaWJlclJvb3QucGVuZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgIGZpYmVyUm9vdC5jb250ZXh0ID0gZmliZXJSb290LnBlbmRpbmdDb250ZXh0O1xuICAgICAgICAgICAgZmliZXJSb290LnBlbmRpbmdDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudC5jaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWYgd2UgaHlkcmF0ZWQsIHBvcCBzbyB0aGF0IHdlIGNhbiBkZWxldGUgYW55IHJlbWFpbmluZyBjaGlsZHJlblxuICAgICAgICAgICAgLy8gdGhhdCB3ZXJlbid0IGh5ZHJhdGVkLlxuICAgICAgICAgICAgcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgLy8gVGhpcyByZXNldHMgdGhlIGhhY2t5IHN0YXRlIHRvIGZpeCBpc01vdW50ZWQgYmVmb3JlIGNvbW1pdHRpbmcuXG4gICAgICAgICAgICAvLyBUT0RPOiBEZWxldGUgdGhpcyB3aGVuIHdlIGRlbGV0ZSBpc01vdW50ZWQgYW5kIGZpbmRET01Ob2RlLlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICY9IH5QbGFjZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZUhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgdmFyIF91cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgIGlmIChfdXBkYXRlUXVldWUgIT09IG51bGwgJiYgX3VwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gRXJyTG9nO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHZhciByb290Q29udGFpbmVySW5zdGFuY2UgPSBnZXRSb290SG9zdENvbnRhaW5lcigpO1xuICAgICAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgICBpZiAoY3VycmVudCAhPT0gbnVsbCAmJiB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhbiBhbHRlcm5hdGUsIHRoYXQgbWVhbnMgdGhpcyBpcyBhbiB1cGRhdGUgYW5kIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIHNjaGVkdWxlIGEgc2lkZS1lZmZlY3QgdG8gZG8gdGhlIHVwZGF0ZXMuXG4gICAgICAgICAgICB2YXIgb2xkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAvLyBJZiB3ZSBnZXQgdXBkYXRlZCBiZWNhdXNlIG9uZSBvZiBvdXIgY2hpbGRyZW4gdXBkYXRlZCwgd2UgZG9uJ3RcbiAgICAgICAgICAgIC8vIGhhdmUgbmV3UHJvcHMgc28gd2UnbGwgaGF2ZSB0byByZXVzZSB0aGVtLlxuICAgICAgICAgICAgLy8gVE9ETzogU3BsaXQgdGhlIHVwZGF0ZSBBUEkgYXMgc2VwYXJhdGUgZm9yIHRoZSBwcm9wcyB2cy4gY2hpbGRyZW4uXG4gICAgICAgICAgICAvLyBFdmVuIGJldHRlciB3b3VsZCBiZSBpZiBjaGlsZHJlbiB3ZXJlbid0IHNwZWNpYWwgY2FzZWQgYXQgYWxsIHRoby5cbiAgICAgICAgICAgIHZhciBfaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgICAgICB2YXIgY3VycmVudEhvc3RDb250ZXh0ID0gZ2V0SG9zdENvbnRleHQoKTtcbiAgICAgICAgICAgIC8vIFRPRE86IEV4cGVyaWVuY2luZyBhbiBlcnJvciB3aGVyZSBvbGRQcm9wcyBpcyBudWxsLiBTdWdnZXN0cyBhIGhvc3RcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudCBpcyBoaXR0aW5nIHRoZSByZXN1bWUgcGF0aC4gRmlndXJlIG91dCB3aHkuIFBvc3NpYmx5XG4gICAgICAgICAgICAvLyByZWxhdGVkIHRvIGBoaWRkZW5gLlxuICAgICAgICAgICAgdmFyIHVwZGF0ZVBheWxvYWQgPSBwcmVwYXJlVXBkYXRlKF9pbnN0YW5jZSwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCk7XG5cbiAgICAgICAgICAgIHVwZGF0ZUhvc3RDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBjdXJyZW50SG9zdENvbnRleHQpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC5yZWYgIT09IHdvcmtJblByb2dyZXNzLnJlZikge1xuICAgICAgICAgICAgICBtYXJrUmVmKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFuZXdQcm9wcykge1xuICAgICAgICAgICAgICAhKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdXZSBtdXN0IGhhdmUgbmV3IHByb3BzIGZvciBuZXcgbW91bnRzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiB3ZSBhYm9ydCB3b3JrLlxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9jdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgICAgICAgICAgLy8gVE9ETzogTW92ZSBjcmVhdGVJbnN0YW5jZSB0byBiZWdpbldvcmsgYW5kIGtlZXAgaXQgb24gYSBjb250ZXh0XG4gICAgICAgICAgICAvLyBcInN0YWNrXCIgYXMgdGhlIHBhcmVudC4gVGhlbiBhcHBlbmQgY2hpbGRyZW4gYXMgd2UgZ28gaW4gYmVnaW5Xb3JrXG4gICAgICAgICAgICAvLyBvciBjb21wbGV0ZVdvcmsgZGVwZW5kaW5nIG9uIHdlIHdhbnQgdG8gYWRkIHRoZW4gdG9wLT5kb3duIG9yXG4gICAgICAgICAgICAvLyBib3R0b20tPnVwLiBUb3AtPmRvd24gaXMgZmFzdGVyIGluIElFMTEuXG4gICAgICAgICAgICB2YXIgd2FzSHlkcmF0ZWQgPSBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICBpZiAod2FzSHlkcmF0ZWQpIHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIGFuZCBjcmVhdGVJbnN0YW5jZSBzdGVwIGludG8gdGhlIGJlZ2luUGhhc2VcbiAgICAgICAgICAgICAgLy8gdG8gY29uc29saWRhdGUuXG4gICAgICAgICAgICAgIGlmIChwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKHdvcmtJblByb2dyZXNzLCByb290Q29udGFpbmVySW5zdGFuY2UsIF9jdXJyZW50SG9zdENvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgY2hhbmdlcyB0byB0aGUgaHlkcmF0ZWQgbm9kZSBuZWVkcyB0byBiZSBhcHBsaWVkIGF0IHRoZVxuICAgICAgICAgICAgICAgIC8vIGNvbW1pdC1waGFzZSB3ZSBtYXJrIHRoaXMgYXMgc3VjaC5cbiAgICAgICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIF9pbnN0YW5jZTIgPSBjcmVhdGVJbnN0YW5jZSh0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBfY3VycmVudEhvc3RDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICAgICAgICAgICAgYXBwZW5kQWxsQ2hpbGRyZW4oX2luc3RhbmNlMiwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgICAgIC8vIENlcnRhaW4gcmVuZGVyZXJzIHJlcXVpcmUgY29tbWl0LXRpbWUgZWZmZWN0cyBmb3IgaW5pdGlhbCBtb3VudC5cbiAgICAgICAgICAgICAgLy8gKGVnIERPTSByZW5kZXJlciBzdXBwb3J0cyBhdXRvLWZvY3VzIGZvciBjZXJ0YWluIGVsZW1lbnRzKS5cbiAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHN1Y2ggcmVuZGVyZXJzIGdldCBzY2hlZHVsZWQgZm9yIGxhdGVyIHdvcmsuXG4gICAgICAgICAgICAgIGlmIChmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihfaW5zdGFuY2UyLCB0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBfY3VycmVudEhvc3RDb250ZXh0KSkge1xuICAgICAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IF9pbnN0YW5jZTI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5yZWYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSByZWYgb24gYSBob3N0IG5vZGUgd2UgbmVlZCB0byBzY2hlZHVsZSBhIGNhbGxiYWNrXG4gICAgICAgICAgICAgIG1hcmtSZWYod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBuZXdUZXh0ID0gbmV3UHJvcHM7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgJiYgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBvbGRUZXh0ID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhbiBhbHRlcm5hdGUsIHRoYXQgbWVhbnMgdGhpcyBpcyBhbiB1cGRhdGUgYW5kIHdlIG5lZWRcbiAgICAgICAgICAgIC8vIHRvIHNjaGVkdWxlIGEgc2lkZS1lZmZlY3QgdG8gZG8gdGhlIHVwZGF0ZXMuXG4gICAgICAgICAgICB1cGRhdGVIb3N0VGV4dChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgb2xkVGV4dCwgbmV3VGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3VGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgISh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnV2UgbXVzdCBoYXZlIG5ldyBwcm9wcyBmb3IgbmV3IG1vdW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gd2UgYWJvcnQgd29yay5cbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX3Jvb3RDb250YWluZXJJbnN0YW5jZSA9IGdldFJvb3RIb3N0Q29udGFpbmVyKCk7XG4gICAgICAgICAgICB2YXIgX2N1cnJlbnRIb3N0Q29udGV4dDIgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgICAgICAgICAgdmFyIF93YXNIeWRyYXRlZCA9IHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIGlmIChfd2FzSHlkcmF0ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlKHdvcmtJblByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjcmVhdGVUZXh0SW5zdGFuY2UobmV3VGV4dCwgX3Jvb3RDb250YWluZXJJbnN0YW5jZSwgX2N1cnJlbnRIb3N0Q29udGV4dDIsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgQ2FsbENvbXBvbmVudDpcbiAgICAgICAgcmV0dXJuIG1vdmVDYWxsVG9IYW5kbGVyUGhhc2UoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGNhc2UgQ2FsbEhhbmRsZXJQaGFzZTpcbiAgICAgICAgLy8gUmVzZXQgdGhlIHRhZyB0byBub3cgYmUgYSBmaXJzdCBwaGFzZSBjYWxsLlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDYWxsQ29tcG9uZW50O1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgUmV0dXJuQ29tcG9uZW50OlxuICAgICAgICAvLyBEb2VzIG5vdGhpbmcuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSBNb2RlOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHVwZGF0ZUhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgICAvLyBQb3AgcHJvdmlkZXIgZmliZXJcbiAgICAgICAgcG9wUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgQ29udGV4dENvbnN1bWVyOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIC8vIEVycm9yIGNhc2VzXG4gICAgICBjYXNlIEluZGV0ZXJtaW5hdGVDb21wb25lbnQ6XG4gICAgICAgIGludmFyaWFudChmYWxzZSwgJ0FuIGluZGV0ZXJtaW5hdGUgY29tcG9uZW50IHNob3VsZCBoYXZlIGJlY29tZSBkZXRlcm1pbmF0ZSBiZWZvcmUgY29tcGxldGluZy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnVW5rbm93biB1bml0IG9mIHdvcmsgdGFnLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY29tcGxldGVXb3JrOiBjb21wbGV0ZVdvcmtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhcHR1cmVkVmFsdWUodmFsdWUsIHNvdXJjZSkge1xuICAvLyBJZiB0aGUgdmFsdWUgaXMgYW4gZXJyb3IsIGNhbGwgdGhpcyBmdW5jdGlvbiBpbW1lZGlhdGVseSBhZnRlciBpdCBpcyB0aHJvd25cbiAgLy8gc28gdGhlIHN0YWNrIGlzIGFjY3VyYXRlLlxuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICBzdGFjazogZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcihzb3VyY2UpXG4gIH07XG59XG5cbnZhciBSZWFjdEZpYmVyVW53aW5kV29yayA9IGZ1bmN0aW9uIChob3N0Q29udGV4dCwgbGVnYWN5Q29udGV4dCwgbmV3Q29udGV4dCwgc2NoZWR1bGVXb3JrLCBpc0FscmVhZHlGYWlsZWRMZWdhY3lFcnJvckJvdW5kYXJ5KSB7XG4gIHZhciBwb3BIb3N0Q29udGFpbmVyID0gaG9zdENvbnRleHQucG9wSG9zdENvbnRhaW5lcixcbiAgICAgIHBvcEhvc3RDb250ZXh0ID0gaG9zdENvbnRleHQucG9wSG9zdENvbnRleHQ7XG4gIHZhciBwb3BMZWdhY3lDb250ZXh0UHJvdmlkZXIgPSBsZWdhY3lDb250ZXh0LnBvcENvbnRleHRQcm92aWRlcixcbiAgICAgIHBvcFRvcExldmVsTGVnYWN5Q29udGV4dE9iamVjdCA9IGxlZ2FjeUNvbnRleHQucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0O1xuICB2YXIgcG9wUHJvdmlkZXIgPSBuZXdDb250ZXh0LnBvcFByb3ZpZGVyO1xuXG5cbiAgZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24ocmV0dXJuRmliZXIsIHNvdXJjZUZpYmVyLCByYXdWYWx1ZSkge1xuICAgIC8vIFRoZSBzb3VyY2UgZmliZXIgZGlkIG5vdCBjb21wbGV0ZS5cbiAgICBzb3VyY2VGaWJlci5lZmZlY3RUYWcgfD0gSW5jb21wbGV0ZTtcbiAgICAvLyBJdHMgZWZmZWN0IGxpc3QgaXMgbm8gbG9uZ2VyIHZhbGlkLlxuICAgIHNvdXJjZUZpYmVyLmZpcnN0RWZmZWN0ID0gc291cmNlRmliZXIubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgICB2YXIgdmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlKHJhd1ZhbHVlLCBzb3VyY2VGaWJlcik7XG5cbiAgICB2YXIgd29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlcjtcbiAgICBkbyB7XG4gICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIFVuY2F1Z2h0IGVycm9yXG4gICAgICAgICAgICB2YXIgZXJyb3JJbmZvID0gdmFsdWU7XG4gICAgICAgICAgICBlbnN1cmVVcGRhdGVRdWV1ZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICAgICAgICB1cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcyA9IFtlcnJvckluZm9dO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFNob3VsZENhcHR1cmU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICAgIC8vIENhcHR1cmUgYW5kIHJldHJ5XG4gICAgICAgICAgdmFyIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICAgIHZhciBfaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgJiBEaWRDYXB0dXJlKSA9PT0gTm9FZmZlY3QgJiYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiBlbmFibGVHZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggfHwgX2luc3RhbmNlICE9PSBudWxsICYmIHR5cGVvZiBfaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggPT09ICdmdW5jdGlvbicgJiYgIWlzQWxyZWFkeUZhaWxlZExlZ2FjeUVycm9yQm91bmRhcnkoX2luc3RhbmNlKSkpIHtcbiAgICAgICAgICAgIGVuc3VyZVVwZGF0ZVF1ZXVlcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB2YXIgX3VwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICAgICAgICB2YXIgY2FwdHVyZWRWYWx1ZXMgPSBfdXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM7XG4gICAgICAgICAgICBpZiAoY2FwdHVyZWRWYWx1ZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgX3VwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzID0gW3ZhbHVlXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNhcHR1cmVkVmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFNob3VsZENhcHR1cmU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzc1sncmV0dXJuJ107XG4gICAgfSB3aGlsZSAod29ya0luUHJvZ3Jlc3MgIT09IG51bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW53aW5kV29yayh3b3JrSW5Qcm9ncmVzcykge1xuICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgcG9wTGVnYWN5Q29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB2YXIgZWZmZWN0VGFnID0gd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnO1xuICAgICAgICAgIGlmIChlZmZlY3RUYWcgJiBTaG91bGRDYXB0dXJlKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgPSBlZmZlY3RUYWcgJiB+U2hvdWxkQ2FwdHVyZSB8IERpZENhcHR1cmU7XG4gICAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcG9wVG9wTGV2ZWxMZWdhY3lDb250ZXh0T2JqZWN0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB2YXIgX2VmZmVjdFRhZyA9IHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZztcbiAgICAgICAgICBpZiAoX2VmZmVjdFRhZyAmIFNob3VsZENhcHR1cmUpIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA9IF9lZmZlY3RUYWcgJiB+U2hvdWxkQ2FwdHVyZSB8IERpZENhcHR1cmU7XG4gICAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBwb3BIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICAgIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoaW50ZXJydXB0ZWRXb3JrKSB7XG4gICAgc3dpdGNoIChpbnRlcnJ1cHRlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgcG9wTGVnYWN5Q29udGV4dFByb3ZpZGVyKGludGVycnVwdGVkV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHtcbiAgICAgICAgICBwb3BIb3N0Q29udGFpbmVyKGludGVycnVwdGVkV29yayk7XG4gICAgICAgICAgcG9wVG9wTGV2ZWxMZWdhY3lDb250ZXh0T2JqZWN0KGludGVycnVwdGVkV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHBvcEhvc3RDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgICBwb3BQcm92aWRlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGhyb3dFeGNlcHRpb246IHRocm93RXhjZXB0aW9uLFxuICAgIHVud2luZFdvcms6IHVud2luZFdvcmssXG4gICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrOiB1bndpbmRJbnRlcnJ1cHRlZFdvcmtcbiAgfTtcbn07XG5cbi8vIFRoaXMgbW9kdWxlIGlzIGZvcmtlZCBpbiBkaWZmZXJlbnQgZW52aXJvbm1lbnRzLlxuLy8gQnkgZGVmYXVsdCwgcmV0dXJuIGB0cnVlYCB0byBsb2cgZXJyb3JzIHRvIHRoZSBjb25zb2xlLlxuLy8gRm9ya3MgY2FuIHJldHVybiBgZmFsc2VgIGlmIHRoaXMgaXNuJ3QgZGVzaXJhYmxlLlxuZnVuY3Rpb24gc2hvd0Vycm9yRGlhbG9nKGNhcHR1cmVkRXJyb3IpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGxvZ0NhcHR1cmVkRXJyb3IoY2FwdHVyZWRFcnJvcikge1xuICB2YXIgbG9nRXJyb3IgPSBzaG93RXJyb3JEaWFsb2coY2FwdHVyZWRFcnJvcik7XG5cbiAgLy8gQWxsb3cgaW5qZWN0ZWQgc2hvd0Vycm9yRGlhbG9nKCkgdG8gcHJldmVudCBkZWZhdWx0IGNvbnNvbGUuZXJyb3IgbG9nZ2luZy5cbiAgLy8gVGhpcyBlbmFibGVzIHJlbmRlcmVycyBsaWtlIFJlYWN0TmF0aXZlIHRvIGJldHRlciBtYW5hZ2UgcmVkYm94IGJlaGF2aW9yLlxuICBpZiAobG9nRXJyb3IgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVycm9yID0gY2FwdHVyZWRFcnJvci5lcnJvcjtcbiAgdmFyIHN1cHByZXNzTG9nZ2luZyA9IGVycm9yICYmIGVycm9yLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmc7XG4gIGlmIChzdXBwcmVzc0xvZ2dpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjYXB0dXJlZEVycm9yLmNvbXBvbmVudE5hbWUsXG4gICAgICAgIGNvbXBvbmVudFN0YWNrID0gY2FwdHVyZWRFcnJvci5jb21wb25lbnRTdGFjayxcbiAgICAgICAgZXJyb3JCb3VuZGFyeU5hbWUgPSBjYXB0dXJlZEVycm9yLmVycm9yQm91bmRhcnlOYW1lLFxuICAgICAgICBlcnJvckJvdW5kYXJ5Rm91bmQgPSBjYXB0dXJlZEVycm9yLmVycm9yQm91bmRhcnlGb3VuZCxcbiAgICAgICAgd2lsbFJldHJ5ID0gY2FwdHVyZWRFcnJvci53aWxsUmV0cnk7XG5cblxuICAgIHZhciBjb21wb25lbnROYW1lTWVzc2FnZSA9IGNvbXBvbmVudE5hbWUgPyAnVGhlIGFib3ZlIGVycm9yIG9jY3VycmVkIGluIHRoZSA8JyArIGNvbXBvbmVudE5hbWUgKyAnPiBjb21wb25lbnQ6JyA6ICdUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gb25lIG9mIHlvdXIgUmVhY3QgY29tcG9uZW50czonO1xuXG4gICAgdmFyIGVycm9yQm91bmRhcnlNZXNzYWdlID0gdm9pZCAwO1xuICAgIC8vIGVycm9yQm91bmRhcnlGb3VuZCBjaGVjayBpcyBzdWZmaWNpZW50OyBlcnJvckJvdW5kYXJ5TmFtZSBjaGVjayBpcyB0byBzYXRpc2Z5IEZsb3cuXG4gICAgaWYgKGVycm9yQm91bmRhcnlGb3VuZCAmJiBlcnJvckJvdW5kYXJ5TmFtZSkge1xuICAgICAgaWYgKHdpbGxSZXRyeSkge1xuICAgICAgICBlcnJvckJvdW5kYXJ5TWVzc2FnZSA9ICdSZWFjdCB3aWxsIHRyeSB0byByZWNyZWF0ZSB0aGlzIGNvbXBvbmVudCB0cmVlIGZyb20gc2NyYXRjaCAnICsgKCd1c2luZyB0aGUgZXJyb3IgYm91bmRhcnkgeW91IHByb3ZpZGVkLCAnICsgZXJyb3JCb3VuZGFyeU5hbWUgKyAnLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JCb3VuZGFyeU1lc3NhZ2UgPSAnVGhpcyBlcnJvciB3YXMgaW5pdGlhbGx5IGhhbmRsZWQgYnkgdGhlIGVycm9yIGJvdW5kYXJ5ICcgKyBlcnJvckJvdW5kYXJ5TmFtZSArICcuXFxuJyArICdSZWNyZWF0aW5nIHRoZSB0cmVlIGZyb20gc2NyYXRjaCBmYWlsZWQgc28gUmVhY3Qgd2lsbCB1bm1vdW50IHRoZSB0cmVlLic7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yQm91bmRhcnlNZXNzYWdlID0gJ0NvbnNpZGVyIGFkZGluZyBhbiBlcnJvciBib3VuZGFyeSB0byB5b3VyIHRyZWUgdG8gY3VzdG9taXplIGVycm9yIGhhbmRsaW5nIGJlaGF2aW9yLlxcbicgKyAnVmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1lcnJvci1ib3VuZGFyaWVzIHRvIGxlYXJuIG1vcmUgYWJvdXQgZXJyb3IgYm91bmRhcmllcy4nO1xuICAgIH1cbiAgICB2YXIgY29tYmluZWRNZXNzYWdlID0gJycgKyBjb21wb25lbnROYW1lTWVzc2FnZSArIGNvbXBvbmVudFN0YWNrICsgJ1xcblxcbicgKyAoJycgKyBlcnJvckJvdW5kYXJ5TWVzc2FnZSk7XG5cbiAgICAvLyBJbiBkZXZlbG9wbWVudCwgd2UgcHJvdmlkZSBvdXIgb3duIG1lc3NhZ2Ugd2l0aCBqdXN0IHRoZSBjb21wb25lbnQgc3RhY2suXG4gICAgLy8gV2UgZG9uJ3QgaW5jbHVkZSB0aGUgb3JpZ2luYWwgZXJyb3IgbWVzc2FnZSBhbmQgSlMgc3RhY2sgYmVjYXVzZSB0aGUgYnJvd3NlclxuICAgIC8vIGhhcyBhbHJlYWR5IHByaW50ZWQgaXQuIEV2ZW4gaWYgdGhlIGFwcGxpY2F0aW9uIHN3YWxsb3dzIHRoZSBlcnJvciwgaXQgaXMgc3RpbGxcbiAgICAvLyBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgdGhhbmtzIHRvIHRoZSBERVYtb25seSBmYWtlIGV2ZW50IHRyaWNrIGluIFJlYWN0RXJyb3JVdGlscy5cbiAgICBjb25zb2xlLmVycm9yKGNvbWJpbmVkTWVzc2FnZSk7XG4gIH1cbn1cblxudmFyIGludm9rZUd1YXJkZWRDYWxsYmFjayQzID0gUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjaztcbnZhciBoYXNDYXVnaHRFcnJvciQxID0gUmVhY3RFcnJvclV0aWxzLmhhc0NhdWdodEVycm9yO1xudmFyIGNsZWFyQ2F1Z2h0RXJyb3IkMSA9IFJlYWN0RXJyb3JVdGlscy5jbGVhckNhdWdodEVycm9yO1xuXG5cbnZhciBkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IG51bGw7XG57XG4gIGRpZFdhcm5BYm91dFVuZGVmaW5lZFNuYXBzaG90QmVmb3JlVXBkYXRlID0gbmV3IFNldCgpO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvcihib3VuZGFyeSwgZXJyb3JJbmZvKSB7XG4gIHZhciBzb3VyY2UgPSBlcnJvckluZm8uc291cmNlO1xuICB2YXIgc3RhY2sgPSBlcnJvckluZm8uc3RhY2s7XG4gIGlmIChzdGFjayA9PT0gbnVsbCkge1xuICAgIHN0YWNrID0gZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcihzb3VyY2UpO1xuICB9XG5cbiAgdmFyIGNhcHR1cmVkRXJyb3IgPSB7XG4gICAgY29tcG9uZW50TmFtZTogc291cmNlICE9PSBudWxsID8gZ2V0Q29tcG9uZW50TmFtZShzb3VyY2UpIDogbnVsbCxcbiAgICBjb21wb25lbnRTdGFjazogc3RhY2sgIT09IG51bGwgPyBzdGFjayA6ICcnLFxuICAgIGVycm9yOiBlcnJvckluZm8udmFsdWUsXG4gICAgZXJyb3JCb3VuZGFyeTogbnVsbCxcbiAgICBlcnJvckJvdW5kYXJ5TmFtZTogbnVsbCxcbiAgICBlcnJvckJvdW5kYXJ5Rm91bmQ6IGZhbHNlLFxuICAgIHdpbGxSZXRyeTogZmFsc2VcbiAgfTtcblxuICBpZiAoYm91bmRhcnkgIT09IG51bGwgJiYgYm91bmRhcnkudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgIGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeSA9IGJvdW5kYXJ5LnN0YXRlTm9kZTtcbiAgICBjYXB0dXJlZEVycm9yLmVycm9yQm91bmRhcnlOYW1lID0gZ2V0Q29tcG9uZW50TmFtZShib3VuZGFyeSk7XG4gICAgY2FwdHVyZWRFcnJvci5lcnJvckJvdW5kYXJ5Rm91bmQgPSB0cnVlO1xuICAgIGNhcHR1cmVkRXJyb3Iud2lsbFJldHJ5ID0gdHJ1ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9nQ2FwdHVyZWRFcnJvcihjYXB0dXJlZEVycm9yKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFByZXZlbnQgY3ljbGUgaWYgbG9nQ2FwdHVyZWRFcnJvcigpIHRocm93cy5cbiAgICAvLyBBIGN5Y2xlIG1heSBzdGlsbCBvY2N1ciBpZiBsb2dDYXB0dXJlZEVycm9yIHJlbmRlcnMgYSBjb21wb25lbnQgdGhhdCB0aHJvd3MuXG4gICAgdmFyIHN1cHByZXNzTG9nZ2luZyA9IGUgJiYgZS5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nO1xuICAgIGlmICghc3VwcHJlc3NMb2dnaW5nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RGaWJlckNvbW1pdFdvcmsgPSBmdW5jdGlvbiAoY29uZmlnLCBjYXB0dXJlRXJyb3IsIHNjaGVkdWxlV29yaywgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciwgbWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZCwgcmVjYWxjdWxhdGVDdXJyZW50VGltZSkge1xuICB2YXIgZ2V0UHVibGljSW5zdGFuY2UgPSBjb25maWcuZ2V0UHVibGljSW5zdGFuY2UsXG4gICAgICBtdXRhdGlvbiA9IGNvbmZpZy5tdXRhdGlvbixcbiAgICAgIHBlcnNpc3RlbmNlID0gY29uZmlnLnBlcnNpc3RlbmNlO1xuXG5cbiAgdmFyIGNhbGxDb21wb25lbnRXaWxsVW5tb3VudFdpdGhUaW1lciA9IGZ1bmN0aW9uIChjdXJyZW50LCBpbnN0YW5jZSkge1xuICAgIHN0YXJ0UGhhc2VUaW1lcihjdXJyZW50LCAnY29tcG9uZW50V2lsbFVubW91bnQnKTtcbiAgICBpbnN0YW5jZS5wcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICBpbnN0YW5jZS5zdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICAgIHN0b3BQaGFzZVRpbWVyKCk7XG4gIH07XG5cbiAgLy8gQ2FwdHVyZSBlcnJvcnMgc28gdGhleSBkb24ndCBpbnRlcnJ1cHQgdW5tb3VudGluZy5cbiAgZnVuY3Rpb24gc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KGN1cnJlbnQsIGluc3RhbmNlKSB7XG4gICAge1xuICAgICAgaW52b2tlR3VhcmRlZENhbGxiYWNrJDMobnVsbCwgY2FsbENvbXBvbmVudFdpbGxVbm1vdW50V2l0aFRpbWVyLCBudWxsLCBjdXJyZW50LCBpbnN0YW5jZSk7XG4gICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IkMSgpKSB7XG4gICAgICAgIHZhciB1bm1vdW50RXJyb3IgPSBjbGVhckNhdWdodEVycm9yJDEoKTtcbiAgICAgICAgY2FwdHVyZUVycm9yKGN1cnJlbnQsIHVubW91bnRFcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQpIHtcbiAgICB2YXIgcmVmID0gY3VycmVudC5yZWY7XG4gICAgaWYgKHJlZiAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAge1xuICAgICAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayQzKG51bGwsIHJlZiwgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgaWYgKGhhc0NhdWdodEVycm9yJDEoKSkge1xuICAgICAgICAgICAgdmFyIHJlZkVycm9yID0gY2xlYXJDYXVnaHRFcnJvciQxKCk7XG4gICAgICAgICAgICBjYXB0dXJlRXJyb3IoY3VycmVudCwgcmVmRXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyhjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoZmluaXNoZWRXb3JrLmVmZmVjdFRhZyAmIFNuYXBzaG90KSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgcHJldlByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICB2YXIgcHJldlN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgICBzdGFydFBoYXNlVGltZXIoZmluaXNoZWRXb3JrLCAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUnKTtcbiAgICAgICAgICAgICAgdmFyIF9pbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIF9pbnN0YW5jZS5wcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICBfaW5zdGFuY2Uuc3RhdGUgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gX2luc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKTtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBkaWRXYXJuU2V0ID0gZGlkV2FybkFib3V0VW5kZWZpbmVkU25hcHNob3RCZWZvcmVVcGRhdGU7XG4gICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90ID09PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5TZXQuaGFzKGZpbmlzaGVkV29yay50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgZGlkV2FyblNldC5hZGQoZmluaXNoZWRXb3JrLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgd2FybmluZyhmYWxzZSwgJyVzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCk6IEEgc25hcHNob3QgdmFsdWUgKG9yIG51bGwpICcgKyAnbXVzdCBiZSByZXR1cm5lZC4gWW91IGhhdmUgcmV0dXJuZWQgdW5kZWZpbmVkLicsIGdldENvbXBvbmVudE5hbWUoZmluaXNoZWRXb3JrKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF9pbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IHNuYXBzaG90O1xuICAgICAgICAgICAgICBzdG9wUGhhc2VUaW1lcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvIGZvciB0aGVzZSBjb21wb25lbnQgdHlwZXNcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIGludmFyaWFudChmYWxzZSwgJ1RoaXMgdW5pdCBvZiB3b3JrIHRhZyBzaG91bGQgbm90IGhhdmUgc2lkZS1lZmZlY3RzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWl0TGlmZUN5Y2xlcyhmaW5pc2hlZFJvb3QsIGN1cnJlbnQsIGZpbmlzaGVkV29yaywgY3VycmVudFRpbWUsIGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lKSB7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9pbnN0YW5jZTIgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsuZWZmZWN0VGFnICYgVXBkYXRlKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBzdGFydFBoYXNlVGltZXIoZmluaXNoZWRXb3JrLCAnY29tcG9uZW50RGlkTW91bnQnKTtcbiAgICAgICAgICAgICAgX2luc3RhbmNlMi5wcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICBfaW5zdGFuY2UyLnN0YXRlID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIF9pbnN0YW5jZTIuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgICAgICAgc3RvcFBoYXNlVGltZXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIHZhciBwcmV2U3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIHN0YXJ0UGhhc2VUaW1lcihmaW5pc2hlZFdvcmssICdjb21wb25lbnREaWRVcGRhdGUnKTtcbiAgICAgICAgICAgICAgX2luc3RhbmNlMi5wcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICBfaW5zdGFuY2UyLnN0YXRlID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIF9pbnN0YW5jZTIuY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlLCBfaW5zdGFuY2UyLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKTtcbiAgICAgICAgICAgICAgc3RvcFBoYXNlVGltZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgIGlmICh1cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29tbWl0Q2FsbGJhY2tzKHVwZGF0ZVF1ZXVlLCBfaW5zdGFuY2UyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF91cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgICAgICAgICBpZiAoX3VwZGF0ZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgX2luc3RhbmNlMyA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZmluaXNoZWRXb3JrLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLmNoaWxkLnRhZykge1xuICAgICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZTMgPSBnZXRQdWJsaWNJbnN0YW5jZShmaW5pc2hlZFdvcmsuY2hpbGQuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UzID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21taXRDYWxsYmFja3MoX3VwZGF0ZVF1ZXVlLCBfaW5zdGFuY2UzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2luc3RhbmNlNCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG5cbiAgICAgICAgICAvLyBSZW5kZXJlcnMgbWF5IHNjaGVkdWxlIHdvcmsgdG8gYmUgZG9uZSBhZnRlciBob3N0IGNvbXBvbmVudHMgYXJlIG1vdW50ZWRcbiAgICAgICAgICAvLyAoZWcgRE9NIHJlbmRlcmVyIG1heSBzY2hlZHVsZSBhdXRvLWZvY3VzIGZvciBpbnB1dHMgYW5kIGZvcm0gY29udHJvbHMpLlxuICAgICAgICAgIC8vIFRoZXNlIGVmZmVjdHMgc2hvdWxkIG9ubHkgYmUgY29tbWl0dGVkIHdoZW4gY29tcG9uZW50cyBhcmUgZmlyc3QgbW91bnRlZCxcbiAgICAgICAgICAvLyBha2Egd2hlbiB0aGVyZSBpcyBubyBjdXJyZW50L2FsdGVybmF0ZS5cbiAgICAgICAgICBpZiAoY3VycmVudCA9PT0gbnVsbCAmJiBmaW5pc2hlZFdvcmsuZWZmZWN0VGFnICYgVXBkYXRlKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICBjb21taXRNb3VudChfaW5zdGFuY2U0LCB0eXBlLCBwcm9wcywgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBXZSBoYXZlIG5vIGxpZmUtY3ljbGVzIGFzc29jaWF0ZWQgd2l0aCB0ZXh0LlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gV2UgaGF2ZSBubyBsaWZlLWN5Y2xlcyBhc3NvY2lhdGVkIHdpdGggcG9ydGFscy5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdUaGlzIHVuaXQgb2Ygd29yayB0YWcgc2hvdWxkIG5vdCBoYXZlIHNpZGUtZWZmZWN0cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdEVycm9yTG9nZ2luZyhmaW5pc2hlZFdvcmssIG9uVW5jYXVnaHRFcnJvcikge1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBjdG9yID0gZmluaXNoZWRXb3JrLnR5cGU7XG4gICAgICAgICAgdmFyIF9pbnN0YW5jZTUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAhKHVwZGF0ZVF1ZXVlICE9PSBudWxsICYmIHVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0FuIGVycm9yIGxvZ2dpbmcgZWZmZWN0IHNob3VsZCBub3QgaGF2ZSBiZWVuIHNjaGVkdWxlZCBpZiBubyBlcnJvcnMgd2VyZSBjYXB0dXJlZC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgICB2YXIgY2FwdHVyZWRFcnJvcnMgPSB1cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcztcbiAgICAgICAgICB1cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcyA9IG51bGw7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBUbyBwcmVzZXJ2ZSB0aGUgcHJlZXhpc3RpbmcgcmV0cnkgYmVoYXZpb3Igb2YgZXJyb3IgYm91bmRhcmllcyxcbiAgICAgICAgICAgIC8vIHdlIGtlZXAgdHJhY2sgb2Ygd2hpY2ggb25lcyBhbHJlYWR5IGZhaWxlZCBkdXJpbmcgdGhpcyBiYXRjaC5cbiAgICAgICAgICAgIC8vIFRoaXMgZ2V0cyByZXNldCBiZWZvcmUgd2UgeWllbGQgYmFjayB0byB0aGUgYnJvd3Nlci5cbiAgICAgICAgICAgIC8vIFRPRE86IFdhcm4gaW4gc3RyaWN0IG1vZGUgaWYgZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIGlzXG4gICAgICAgICAgICAvLyBub3QgZGVmaW5lZC5cbiAgICAgICAgICAgIG1hcmtMZWdhY3lFcnJvckJvdW5kYXJ5QXNGYWlsZWQoX2luc3RhbmNlNSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX2luc3RhbmNlNS5wcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIF9pbnN0YW5jZTUuc3RhdGUgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhcHR1cmVkRXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JJbmZvID0gY2FwdHVyZWRFcnJvcnNbaV07XG4gICAgICAgICAgICB2YXIgX2Vycm9yID0gZXJyb3JJbmZvLnZhbHVlO1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gZXJyb3JJbmZvLnN0YWNrO1xuICAgICAgICAgICAgbG9nRXJyb3IoZmluaXNoZWRXb3JrLCBlcnJvckluZm8pO1xuICAgICAgICAgICAgX2luc3RhbmNlNS5jb21wb25lbnREaWRDYXRjaChfZXJyb3IsIHtcbiAgICAgICAgICAgICAgY29tcG9uZW50U3RhY2s6IHN0YWNrICE9PSBudWxsID8gc3RhY2sgOiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBfdXBkYXRlUXVldWUyID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgICEoX3VwZGF0ZVF1ZXVlMiAhPT0gbnVsbCAmJiBfdXBkYXRlUXVldWUyLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0FuIGVycm9yIGxvZ2dpbmcgZWZmZWN0IHNob3VsZCBub3QgaGF2ZSBiZWVuIHNjaGVkdWxlZCBpZiBubyBlcnJvcnMgd2VyZSBjYXB0dXJlZC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgICB2YXIgX2NhcHR1cmVkRXJyb3JzID0gX3VwZGF0ZVF1ZXVlMi5jYXB0dXJlZFZhbHVlcztcbiAgICAgICAgICBfdXBkYXRlUXVldWUyLmNhcHR1cmVkVmFsdWVzID0gbnVsbDtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2NhcHR1cmVkRXJyb3JzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIF9lcnJvckluZm8gPSBfY2FwdHVyZWRFcnJvcnNbX2ldO1xuICAgICAgICAgICAgbG9nRXJyb3IoZmluaXNoZWRXb3JrLCBfZXJyb3JJbmZvKTtcbiAgICAgICAgICAgIG9uVW5jYXVnaHRFcnJvcihfZXJyb3JJbmZvLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGludmFyaWFudChmYWxzZSwgJ1RoaXMgdW5pdCBvZiB3b3JrIHRhZyBjYW5ub3QgY2FwdHVyZSBlcnJvcnMuICBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdEF0dGFjaFJlZihmaW5pc2hlZFdvcmspIHtcbiAgICB2YXIgcmVmID0gZmluaXNoZWRXb3JrLnJlZjtcbiAgICBpZiAocmVmICE9PSBudWxsKSB7XG4gICAgICB2YXIgX2luc3RhbmNlNiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICB2YXIgaW5zdGFuY2VUb1VzZSA9IHZvaWQgMDtcbiAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGdldFB1YmxpY0luc3RhbmNlKF9pbnN0YW5jZTYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGluc3RhbmNlVG9Vc2UgPSBfaW5zdGFuY2U2O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVmKGluc3RhbmNlVG9Vc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmICghcmVmLmhhc093blByb3BlcnR5KCdjdXJyZW50JykpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdVbmV4cGVjdGVkIHJlZiBvYmplY3QgcHJvdmlkZWQgZm9yICVzLiAnICsgJ1VzZSBlaXRoZXIgYSByZWYtc2V0dGVyIGZ1bmN0aW9uIG9yIFJlYWN0LmNyZWF0ZVJlZigpLiVzJywgZ2V0Q29tcG9uZW50TmFtZShmaW5pc2hlZFdvcmspLCBnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyKGZpbmlzaGVkV29yaykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlZi5jdXJyZW50ID0gaW5zdGFuY2VUb1VzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21taXREZXRhY2hSZWYoY3VycmVudCkge1xuICAgIHZhciBjdXJyZW50UmVmID0gY3VycmVudC5yZWY7XG4gICAgaWYgKGN1cnJlbnRSZWYgIT09IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY3VycmVudFJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjdXJyZW50UmVmKG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBVc2VyLW9yaWdpbmF0aW5nIGVycm9ycyAobGlmZWN5Y2xlcyBhbmQgcmVmcykgc2hvdWxkIG5vdCBpbnRlcnJ1cHRcbiAgLy8gZGVsZXRpb24sIHNvIGRvbid0IGxldCB0aGVtIHRocm93LiBIb3N0LW9yaWdpbmF0aW5nIGVycm9ycyBzaG91bGRcbiAgLy8gaW50ZXJydXB0IGRlbGV0aW9uLCBzbyBpdCdzIG9rYXlcbiAgZnVuY3Rpb24gY29tbWl0VW5tb3VudChjdXJyZW50KSB7XG4gICAgaWYgKHR5cGVvZiBvbkNvbW1pdFVubW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uQ29tbWl0VW5tb3VudChjdXJyZW50KTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGN1cnJlbnQudGFnKSB7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQpO1xuICAgICAgICAgIHZhciBfaW5zdGFuY2U3ID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBfaW5zdGFuY2U3LmNvbXBvbmVudFdpbGxVbm1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoY3VycmVudCwgX2luc3RhbmNlNyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgY2FzZSBDYWxsQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgY29tbWl0TmVzdGVkVW5tb3VudHMoY3VycmVudC5zdGF0ZU5vZGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gVE9ETzogdGhpcyBpcyByZWN1cnNpdmUuXG4gICAgICAgICAgLy8gV2UgYXJlIGFsc28gbm90IHVzaW5nIHRoaXMgcGFyZW50IGJlY2F1c2VcbiAgICAgICAgICAvLyB0aGUgcG9ydGFsIHdpbGwgZ2V0IHB1c2hlZCBpbW1lZGlhdGVseS5cbiAgICAgICAgICBpZiAoZW5hYmxlTXV0YXRpbmdSZWNvbmNpbGVyICYmIG11dGF0aW9uKSB7XG4gICAgICAgICAgICB1bm1vdW50SG9zdENvbXBvbmVudHMoY3VycmVudCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlbmFibGVQZXJzaXN0ZW50UmVjb25jaWxlciAmJiBwZXJzaXN0ZW5jZSkge1xuICAgICAgICAgICAgZW1wdHlQb3J0YWxDb250YWluZXIoY3VycmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdE5lc3RlZFVubW91bnRzKHJvb3QpIHtcbiAgICAvLyBXaGlsZSB3ZSdyZSBpbnNpZGUgYSByZW1vdmVkIGhvc3Qgbm9kZSB3ZSBkb24ndCB3YW50IHRvIGNhbGxcbiAgICAvLyByZW1vdmVDaGlsZCBvbiB0aGUgaW5uZXIgbm9kZXMgYmVjYXVzZSB0aGV5J3JlIHJlbW92ZWQgYnkgdGhlIHRvcFxuICAgIC8vIGNhbGwgYW55d2F5LiBXZSBhbHNvIHdhbnQgdG8gY2FsbCBjb21wb25lbnRXaWxsVW5tb3VudCBvbiBhbGxcbiAgICAvLyBjb21wb3NpdGVzIGJlZm9yZSB0aGlzIGhvc3Qgbm9kZSBpcyByZW1vdmVkIGZyb20gdGhlIHRyZWUuIFRoZXJlZm9yZVxuICAgIHZhciBub2RlID0gcm9vdDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29tbWl0VW5tb3VudChub2RlKTtcbiAgICAgIC8vIFZpc2l0IGNoaWxkcmVuIGJlY2F1c2UgdGhleSBtYXkgY29udGFpbiBtb3JlIGNvbXBvc2l0ZSBvciBob3N0IG5vZGVzLlxuICAgICAgLy8gU2tpcCBwb3J0YWxzIGJlY2F1c2UgY29tbWl0VW5tb3VudCgpIGN1cnJlbnRseSB2aXNpdHMgdGhlbSByZWN1cnNpdmVseS5cbiAgICAgIGlmIChub2RlLmNoaWxkICE9PSBudWxsICYmIChcbiAgICAgIC8vIElmIHdlIHVzZSBtdXRhdGlvbiB3ZSBkcmlsbCBkb3duIGludG8gcG9ydGFscyB1c2luZyBjb21taXRVbm1vdW50IGFib3ZlLlxuICAgICAgLy8gSWYgd2UgZG9uJ3QgdXNlIG11dGF0aW9uIHdlIGRyaWxsIGRvd24gaW50byBwb3J0YWxzIGhlcmUgaW5zdGVhZC5cbiAgICAgICFtdXRhdGlvbiB8fCBub2RlLnRhZyAhPT0gSG9zdFBvcnRhbCkpIHtcbiAgICAgICAgbm9kZS5jaGlsZFsncmV0dXJuJ10gPSBub2RlO1xuICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZSA9PT0gcm9vdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlWydyZXR1cm4nXSA9PT0gbnVsbCB8fCBub2RlWydyZXR1cm4nXSA9PT0gcm9vdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZVsncmV0dXJuJ107XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmdbJ3JldHVybiddID0gbm9kZVsncmV0dXJuJ107XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRldGFjaEZpYmVyKGN1cnJlbnQpIHtcbiAgICAvLyBDdXQgb2ZmIHRoZSByZXR1cm4gcG9pbnRlcnMgdG8gZGlzY29ubmVjdCBpdCBmcm9tIHRoZSB0cmVlLiBJZGVhbGx5LCB3ZVxuICAgIC8vIHNob3VsZCBjbGVhciB0aGUgY2hpbGQgcG9pbnRlciBvZiB0aGUgcGFyZW50IGFsdGVybmF0ZSB0byBsZXQgdGhpc1xuICAgIC8vIGdldCBHQzplZCBidXQgd2UgZG9uJ3Qga25vdyB3aGljaCBmb3Igc3VyZSB3aGljaCBwYXJlbnQgaXMgdGhlIGN1cnJlbnRcbiAgICAvLyBvbmUgc28gd2UnbGwgc2V0dGxlIGZvciBHQzppbmcgdGhlIHN1YnRyZWUgb2YgdGhpcyBjaGlsZC4gVGhpcyBjaGlsZFxuICAgIC8vIGl0c2VsZiB3aWxsIGJlIEdDOmVkIHdoZW4gdGhlIHBhcmVudCB1cGRhdGVzIHRoZSBuZXh0IHRpbWUuXG4gICAgY3VycmVudFsncmV0dXJuJ10gPSBudWxsO1xuICAgIGN1cnJlbnQuY2hpbGQgPSBudWxsO1xuICAgIGlmIChjdXJyZW50LmFsdGVybmF0ZSkge1xuICAgICAgY3VycmVudC5hbHRlcm5hdGUuY2hpbGQgPSBudWxsO1xuICAgICAgY3VycmVudC5hbHRlcm5hdGVbJ3JldHVybiddID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgZW1wdHlQb3J0YWxDb250YWluZXIgPSB2b2lkIDA7XG5cbiAgaWYgKCFtdXRhdGlvbikge1xuICAgIHZhciBjb21taXRDb250YWluZXIgPSB2b2lkIDA7XG4gICAgaWYgKHBlcnNpc3RlbmNlKSB7XG4gICAgICB2YXIgcmVwbGFjZUNvbnRhaW5lckNoaWxkcmVuID0gcGVyc2lzdGVuY2UucmVwbGFjZUNvbnRhaW5lckNoaWxkcmVuLFxuICAgICAgICAgIGNyZWF0ZUNvbnRhaW5lckNoaWxkU2V0ID0gcGVyc2lzdGVuY2UuY3JlYXRlQ29udGFpbmVyQ2hpbGRTZXQ7XG5cbiAgICAgIGVtcHR5UG9ydGFsQ29udGFpbmVyID0gZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgdmFyIHBvcnRhbCA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICB2YXIgY29udGFpbmVySW5mbyA9IHBvcnRhbC5jb250YWluZXJJbmZvO1xuXG4gICAgICAgIHZhciBlbXB0eUNoaWxkU2V0ID0gY3JlYXRlQ29udGFpbmVyQ2hpbGRTZXQoY29udGFpbmVySW5mbyk7XG4gICAgICAgIHJlcGxhY2VDb250YWluZXJDaGlsZHJlbihjb250YWluZXJJbmZvLCBlbXB0eUNoaWxkU2V0KTtcbiAgICAgIH07XG4gICAgICBjb21taXRDb250YWluZXIgPSBmdW5jdGlvbiAoZmluaXNoZWRXb3JrKSB7XG4gICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBwb3J0YWxPclJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICB2YXIgY29udGFpbmVySW5mbyA9IHBvcnRhbE9yUm9vdC5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgICAgICAgX3BlbmRpbmdDaGlsZHJlbiA9IHBvcnRhbE9yUm9vdC5wZW5kaW5nQ2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgcmVwbGFjZUNvbnRhaW5lckNoaWxkcmVuKGNvbnRhaW5lckluZm8sIF9wZW5kaW5nQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnVGhpcyB1bml0IG9mIHdvcmsgdGFnIHNob3VsZCBub3QgaGF2ZSBzaWRlLWVmZmVjdHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1pdENvbnRhaW5lciA9IGZ1bmN0aW9uIChmaW5pc2hlZFdvcmspIHtcbiAgICAgICAgLy8gTm9vcFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGVuYWJsZVBlcnNpc3RlbnRSZWNvbmNpbGVyIHx8IGVuYWJsZU5vb3BSZWNvbmNpbGVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb21taXRSZXNldFRleHRDb250ZW50OiBmdW5jdGlvbiAoZmluaXNoZWRXb3JrKSB7fSxcbiAgICAgICAgY29tbWl0UGxhY2VtZW50OiBmdW5jdGlvbiAoZmluaXNoZWRXb3JrKSB7fSxcbiAgICAgICAgY29tbWl0RGVsZXRpb246IGZ1bmN0aW9uIChjdXJyZW50KSB7XG4gICAgICAgICAgLy8gRGV0YWNoIHJlZnMgYW5kIGNhbGwgY29tcG9uZW50V2lsbFVubW91bnQoKSBvbiB0aGUgd2hvbGUgc3VidHJlZS5cbiAgICAgICAgICBjb21taXROZXN0ZWRVbm1vdW50cyhjdXJyZW50KTtcbiAgICAgICAgICBkZXRhY2hGaWJlcihjdXJyZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tbWl0V29yazogZnVuY3Rpb24gKGN1cnJlbnQsIGZpbmlzaGVkV29yaykge1xuICAgICAgICAgIGNvbW1pdENvbnRhaW5lcihmaW5pc2hlZFdvcmspO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbW1pdExpZmVDeWNsZXM6IGNvbW1pdExpZmVDeWNsZXMsXG4gICAgICAgIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczogY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLFxuICAgICAgICBjb21taXRFcnJvckxvZ2dpbmc6IGNvbW1pdEVycm9yTG9nZ2luZyxcbiAgICAgICAgY29tbWl0QXR0YWNoUmVmOiBjb21taXRBdHRhY2hSZWYsXG4gICAgICAgIGNvbW1pdERldGFjaFJlZjogY29tbWl0RGV0YWNoUmVmXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAocGVyc2lzdGVuY2UpIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ1BlcnNpc3RlbnQgcmVjb25jaWxlciBpcyBkaXNhYmxlZC4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW52YXJpYW50KGZhbHNlLCAnTm9vcCByZWNvbmNpbGVyIGlzIGRpc2FibGVkLicpO1xuICAgIH1cbiAgfVxuICB2YXIgY29tbWl0TW91bnQgPSBtdXRhdGlvbi5jb21taXRNb3VudCxcbiAgICAgIGNvbW1pdFVwZGF0ZSA9IG11dGF0aW9uLmNvbW1pdFVwZGF0ZSxcbiAgICAgIHJlc2V0VGV4dENvbnRlbnQgPSBtdXRhdGlvbi5yZXNldFRleHRDb250ZW50LFxuICAgICAgY29tbWl0VGV4dFVwZGF0ZSA9IG11dGF0aW9uLmNvbW1pdFRleHRVcGRhdGUsXG4gICAgICBhcHBlbmRDaGlsZCA9IG11dGF0aW9uLmFwcGVuZENoaWxkLFxuICAgICAgYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciA9IG11dGF0aW9uLmFwcGVuZENoaWxkVG9Db250YWluZXIsXG4gICAgICBpbnNlcnRCZWZvcmUgPSBtdXRhdGlvbi5pbnNlcnRCZWZvcmUsXG4gICAgICBpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSA9IG11dGF0aW9uLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFxuICAgICAgcmVtb3ZlQ2hpbGQgPSBtdXRhdGlvbi5yZW1vdmVDaGlsZCxcbiAgICAgIHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciA9IG11dGF0aW9uLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtcblxuXG4gIGZ1bmN0aW9uIGdldEhvc3RQYXJlbnRGaWJlcihmaWJlcikge1xuICAgIHZhciBwYXJlbnQgPSBmaWJlclsncmV0dXJuJ107XG4gICAgd2hpbGUgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGlzSG9zdFBhcmVudChwYXJlbnQpKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnRbJ3JldHVybiddO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCB0byBmaW5kIGEgaG9zdCBwYXJlbnQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0hvc3RQYXJlbnQoZmliZXIpIHtcbiAgICByZXR1cm4gZmliZXIudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGZpYmVyLnRhZyA9PT0gSG9zdFJvb3QgfHwgZmliZXIudGFnID09PSBIb3N0UG9ydGFsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmcoZmliZXIpIHtcbiAgICAvLyBXZSdyZSBnb2luZyB0byBzZWFyY2ggZm9yd2FyZCBpbnRvIHRoZSB0cmVlIHVudGlsIHdlIGZpbmQgYSBzaWJsaW5nIGhvc3RcbiAgICAvLyBub2RlLiBVbmZvcnR1bmF0ZWx5LCBpZiBtdWx0aXBsZSBpbnNlcnRpb25zIGFyZSBkb25lIGluIGEgcm93IHdlIGhhdmUgdG9cbiAgICAvLyBzZWFyY2ggcGFzdCB0aGVtLiBUaGlzIGxlYWRzIHRvIGV4cG9uZW50aWFsIHNlYXJjaCBmb3IgdGhlIG5leHQgc2libGluZy5cbiAgICB2YXIgbm9kZSA9IGZpYmVyO1xuICAgIHNpYmxpbmdzOiB3aGlsZSAodHJ1ZSkge1xuICAgICAgLy8gSWYgd2UgZGlkbid0IGZpbmQgYW55dGhpbmcsIGxldCdzIHRyeSB0aGUgbmV4dCBzaWJsaW5nLlxuICAgICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZVsncmV0dXJuJ10gPT09IG51bGwgfHwgaXNIb3N0UGFyZW50KG5vZGVbJ3JldHVybiddKSkge1xuICAgICAgICAgIC8vIElmIHdlIHBvcCBvdXQgb2YgdGhlIHJvb3Qgb3IgaGl0IHRoZSBwYXJlbnQgdGhlIGZpYmVyIHdlIGFyZSB0aGVcbiAgICAgICAgICAvLyBsYXN0IHNpYmxpbmcuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgfVxuICAgICAgbm9kZS5zaWJsaW5nWydyZXR1cm4nXSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICAgIHdoaWxlIChub2RlLnRhZyAhPT0gSG9zdENvbXBvbmVudCAmJiBub2RlLnRhZyAhPT0gSG9zdFRleHQpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgbm90IGhvc3Qgbm9kZSBhbmQsIHdlIG1pZ2h0IGhhdmUgYSBob3N0IG5vZGUgaW5zaWRlIGl0LlxuICAgICAgICAvLyBUcnkgdG8gc2VhcmNoIGRvd24gdW50aWwgd2UgZmluZCBvbmUuXG4gICAgICAgIGlmIChub2RlLmVmZmVjdFRhZyAmIFBsYWNlbWVudCkge1xuICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBjaGlsZCwgdHJ5IHRoZSBzaWJsaW5ncyBpbnN0ZWFkLlxuICAgICAgICAgIGNvbnRpbnVlIHNpYmxpbmdzO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBjaGlsZCwgdHJ5IHRoZSBzaWJsaW5ncyBpbnN0ZWFkLlxuICAgICAgICAvLyBXZSBhbHNvIHNraXAgcG9ydGFscyBiZWNhdXNlIHRoZXkgYXJlIG5vdCBwYXJ0IG9mIHRoaXMgaG9zdCB0cmVlLlxuICAgICAgICBpZiAobm9kZS5jaGlsZCA9PT0gbnVsbCB8fCBub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgICAgIGNvbnRpbnVlIHNpYmxpbmdzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuY2hpbGRbJ3JldHVybiddID0gbm9kZTtcbiAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBob3N0IG5vZGUgaXMgc3RhYmxlIG9yIGFib3V0IHRvIGJlIHBsYWNlZC5cbiAgICAgIGlmICghKG5vZGUuZWZmZWN0VGFnICYgUGxhY2VtZW50KSkge1xuICAgICAgICAvLyBGb3VuZCBpdCFcbiAgICAgICAgcmV0dXJuIG5vZGUuc3RhdGVOb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdFBsYWNlbWVudChmaW5pc2hlZFdvcmspIHtcbiAgICAvLyBSZWN1cnNpdmVseSBpbnNlcnQgYWxsIGhvc3Qgbm9kZXMgaW50byB0aGUgcGFyZW50LlxuICAgIHZhciBwYXJlbnRGaWJlciA9IGdldEhvc3RQYXJlbnRGaWJlcihmaW5pc2hlZFdvcmspO1xuICAgIHZhciBwYXJlbnQgPSB2b2lkIDA7XG4gICAgdmFyIGlzQ29udGFpbmVyID0gdm9pZCAwO1xuICAgIHN3aXRjaCAocGFyZW50RmliZXIudGFnKSB7XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIHBhcmVudCA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgaXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICBwYXJlbnQgPSBwYXJlbnRGaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgaXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgICAgcGFyZW50ID0gcGFyZW50RmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgIGlzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIGhvc3QgcGFyZW50IGZpYmVyLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgICBpZiAocGFyZW50RmliZXIuZWZmZWN0VGFnICYgQ29udGVudFJlc2V0KSB7XG4gICAgICAvLyBSZXNldCB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBwYXJlbnQgYmVmb3JlIGRvaW5nIGFueSBpbnNlcnRpb25zXG4gICAgICByZXNldFRleHRDb250ZW50KHBhcmVudCk7XG4gICAgICAvLyBDbGVhciBDb250ZW50UmVzZXQgZnJvbSB0aGUgZWZmZWN0IHRhZ1xuICAgICAgcGFyZW50RmliZXIuZWZmZWN0VGFnICY9IH5Db250ZW50UmVzZXQ7XG4gICAgfVxuXG4gICAgdmFyIGJlZm9yZSA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgLy8gV2Ugb25seSBoYXZlIHRoZSB0b3AgRmliZXIgdGhhdCB3YXMgaW5zZXJ0ZWQgYnV0IHdlIG5lZWQgcmVjdXJzZSBkb3duIGl0c1xuICAgIC8vIGNoaWxkcmVuIHRvIGZpbmQgYWxsIHRoZSB0ZXJtaW5hbCBub2Rlcy5cbiAgICB2YXIgbm9kZSA9IGZpbmlzaGVkV29yaztcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IG5vZGUudGFnID09PSBIb3N0VGV4dCkge1xuICAgICAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgICAgaWYgKGlzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBpbnNlcnRJbkNvbnRhaW5lckJlZm9yZShwYXJlbnQsIG5vZGUuc3RhdGVOb2RlLCBiZWZvcmUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnNlcnRCZWZvcmUocGFyZW50LCBub2RlLnN0YXRlTm9kZSwgYmVmb3JlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBhcHBlbmRDaGlsZFRvQ29udGFpbmVyKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcHBlbmRDaGlsZChwYXJlbnQsIG5vZGUuc3RhdGVOb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RQb3J0YWwpIHtcbiAgICAgICAgLy8gSWYgdGhlIGluc2VydGlvbiBpdHNlbGYgaXMgYSBwb3J0YWwsIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byB0cmF2ZXJzZVxuICAgICAgICAvLyBkb3duIGl0cyBjaGlsZHJlbi4gSW5zdGVhZCwgd2UnbGwgZ2V0IGluc2VydGlvbnMgZnJvbSBlYWNoIGNoaWxkIGluXG4gICAgICAgIC8vIHRoZSBwb3J0YWwgZGlyZWN0bHkuXG4gICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZS5jaGlsZFsncmV0dXJuJ10gPSBub2RlO1xuICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZSA9PT0gZmluaXNoZWRXb3JrKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGVbJ3JldHVybiddID09PSBudWxsIHx8IG5vZGVbJ3JldHVybiddID09PSBmaW5pc2hlZFdvcmspIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgfVxuICAgICAgbm9kZS5zaWJsaW5nWydyZXR1cm4nXSA9IG5vZGVbJ3JldHVybiddO1xuICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1bm1vdW50SG9zdENvbXBvbmVudHMoY3VycmVudCkge1xuICAgIC8vIFdlIG9ubHkgaGF2ZSB0aGUgdG9wIEZpYmVyIHRoYXQgd2FzIGluc2VydGVkIGJ1dCB3ZSBuZWVkIHJlY3Vyc2UgZG93biBpdHNcbiAgICB2YXIgbm9kZSA9IGN1cnJlbnQ7XG5cbiAgICAvLyBFYWNoIGl0ZXJhdGlvbiwgY3VycmVudFBhcmVudCBpcyBwb3B1bGF0ZWQgd2l0aCBub2RlJ3MgaG9zdCBwYXJlbnQgaWYgbm90XG4gICAgLy8gY3VycmVudFBhcmVudElzVmFsaWQuXG4gICAgdmFyIGN1cnJlbnRQYXJlbnRJc1ZhbGlkID0gZmFsc2U7XG4gICAgdmFyIGN1cnJlbnRQYXJlbnQgPSB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9IHZvaWQgMDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoIWN1cnJlbnRQYXJlbnRJc1ZhbGlkKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBub2RlWydyZXR1cm4nXTtcbiAgICAgICAgZmluZFBhcmVudDogd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAhKHBhcmVudCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCB0byBmaW5kIGEgaG9zdCBwYXJlbnQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgICAgc3dpdGNoIChwYXJlbnQudGFnKSB7XG4gICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBjdXJyZW50UGFyZW50SXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWsgZmluZFBhcmVudDtcbiAgICAgICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrIGZpbmRQYXJlbnQ7XG4gICAgICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrIGZpbmRQYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudCA9IHBhcmVudFsncmV0dXJuJ107XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFBhcmVudElzVmFsaWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAgIGNvbW1pdE5lc3RlZFVubW91bnRzKG5vZGUpO1xuICAgICAgICAvLyBBZnRlciBhbGwgdGhlIGNoaWxkcmVuIGhhdmUgdW5tb3VudGVkLCBpdCBpcyBub3cgc2FmZSB0byByZW1vdmUgdGhlXG4gICAgICAgIC8vIG5vZGUgZnJvbSB0aGUgdHJlZS5cbiAgICAgICAgaWYgKGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lcikge1xuICAgICAgICAgIHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcihjdXJyZW50UGFyZW50LCBub2RlLnN0YXRlTm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlQ2hpbGQoY3VycmVudFBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvbid0IHZpc2l0IGNoaWxkcmVuIGJlY2F1c2Ugd2UgYWxyZWFkeSB2aXNpdGVkIHRoZW0uXG4gICAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAgIC8vIFdoZW4gd2UgZ28gaW50byBhIHBvcnRhbCwgaXQgYmVjb21lcyB0aGUgcGFyZW50IHRvIHJlbW92ZSBmcm9tLlxuICAgICAgICAvLyBXZSB3aWxsIHJlYXNzaWduIGl0IGJhY2sgd2hlbiB3ZSBwb3AgdGhlIHBvcnRhbCBvbiB0aGUgd2F5IHVwLlxuICAgICAgICBjdXJyZW50UGFyZW50ID0gbm9kZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgLy8gVmlzaXQgY2hpbGRyZW4gYmVjYXVzZSBwb3J0YWxzIG1pZ2h0IGNvbnRhaW4gaG9zdCBjb21wb25lbnRzLlxuICAgICAgICBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIG5vZGUuY2hpbGRbJ3JldHVybiddID0gbm9kZTtcbiAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tbWl0VW5tb3VudChub2RlKTtcbiAgICAgICAgLy8gVmlzaXQgY2hpbGRyZW4gYmVjYXVzZSB3ZSBtYXkgZmluZCBtb3JlIGhvc3QgY29tcG9uZW50cyBiZWxvdy5cbiAgICAgICAgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICBub2RlLmNoaWxkWydyZXR1cm4nXSA9IG5vZGU7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub2RlID09PSBjdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGVbJ3JldHVybiddID09PSBudWxsIHx8IG5vZGVbJ3JldHVybiddID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlWydyZXR1cm4nXTtcbiAgICAgICAgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAgICAgLy8gV2hlbiB3ZSBnbyBvdXQgb2YgdGhlIHBvcnRhbCwgd2UgbmVlZCB0byByZXN0b3JlIHRoZSBwYXJlbnQuXG4gICAgICAgICAgLy8gU2luY2Ugd2UgZG9uJ3Qga2VlcCBhIHN0YWNrIG9mIHRoZW0sIHdlIHdpbGwgc2VhcmNoIGZvciBpdC5cbiAgICAgICAgICBjdXJyZW50UGFyZW50SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmdbJ3JldHVybiddID0gbm9kZVsncmV0dXJuJ107XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdERlbGV0aW9uKGN1cnJlbnQpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBkZWxldGUgYWxsIGhvc3Qgbm9kZXMgZnJvbSB0aGUgcGFyZW50LlxuICAgIC8vIERldGFjaCByZWZzIGFuZCBjYWxsIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgb24gdGhlIHdob2xlIHN1YnRyZWUuXG4gICAgdW5tb3VudEhvc3RDb21wb25lbnRzKGN1cnJlbnQpO1xuICAgIGRldGFjaEZpYmVyKGN1cnJlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tbWl0V29yayhjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBfaW5zdGFuY2U4ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgICBpZiAoX2luc3RhbmNlOCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBDb21taXQgdGhlIHdvcmsgcHJlcGFyZWQgZWFybGllci5cbiAgICAgICAgICAgIHZhciBuZXdQcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgLy8gRm9yIGh5ZHJhdGlvbiB3ZSByZXVzZSB0aGUgdXBkYXRlIHBhdGggYnV0IHdlIHRyZWF0IHRoZSBvbGRQcm9wc1xuICAgICAgICAgICAgLy8gYXMgdGhlIG5ld1Byb3BzLiBUaGUgdXBkYXRlUGF5bG9hZCB3aWxsIGNvbnRhaW4gdGhlIHJlYWwgY2hhbmdlIGluXG4gICAgICAgICAgICAvLyB0aGlzIGNhc2UuXG4gICAgICAgICAgICB2YXIgb2xkUHJvcHMgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogbmV3UHJvcHM7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgICAgLy8gVE9ETzogVHlwZSB0aGUgdXBkYXRlUXVldWUgdG8gYmUgc3BlY2lmaWMgdG8gaG9zdCBjb21wb25lbnRzLlxuICAgICAgICAgICAgdmFyIHVwZGF0ZVBheWxvYWQgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWU7XG4gICAgICAgICAgICBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHVwZGF0ZVBheWxvYWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgY29tbWl0VXBkYXRlKF9pbnN0YW5jZTgsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgICB7XG4gICAgICAgICAgIShmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1RoaXMgc2hvdWxkIGhhdmUgYSB0ZXh0IG5vZGUgaW5pdGlhbGl6ZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgICAgdmFyIHRleHRJbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgICAgdmFyIG5ld1RleHQgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAvLyBGb3IgaHlkcmF0aW9uIHdlIHJldXNlIHRoZSB1cGRhdGUgcGF0aCBidXQgd2UgdHJlYXQgdGhlIG9sZFByb3BzXG4gICAgICAgICAgLy8gYXMgdGhlIG5ld1Byb3BzLiBUaGUgdXBkYXRlUGF5bG9hZCB3aWxsIGNvbnRhaW4gdGhlIHJlYWwgY2hhbmdlIGluXG4gICAgICAgICAgLy8gdGhpcyBjYXNlLlxuICAgICAgICAgIHZhciBvbGRUZXh0ID0gY3VycmVudCAhPT0gbnVsbCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG5ld1RleHQ7XG4gICAgICAgICAgY29tbWl0VGV4dFVwZGF0ZSh0ZXh0SW5zdGFuY2UsIG9sZFRleHQsIG5ld1RleHQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIGludmFyaWFudChmYWxzZSwgJ1RoaXMgdW5pdCBvZiB3b3JrIHRhZyBzaG91bGQgbm90IGhhdmUgc2lkZS1lZmZlY3RzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWl0UmVzZXRUZXh0Q29udGVudChjdXJyZW50KSB7XG4gICAgcmVzZXRUZXh0Q29udGVudChjdXJyZW50LnN0YXRlTm9kZSk7XG4gIH1cblxuICBpZiAoZW5hYmxlTXV0YXRpbmdSZWNvbmNpbGVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczogY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLFxuICAgICAgY29tbWl0UmVzZXRUZXh0Q29udGVudDogY29tbWl0UmVzZXRUZXh0Q29udGVudCxcbiAgICAgIGNvbW1pdFBsYWNlbWVudDogY29tbWl0UGxhY2VtZW50LFxuICAgICAgY29tbWl0RGVsZXRpb246IGNvbW1pdERlbGV0aW9uLFxuICAgICAgY29tbWl0V29yazogY29tbWl0V29yayxcbiAgICAgIGNvbW1pdExpZmVDeWNsZXM6IGNvbW1pdExpZmVDeWNsZXMsXG4gICAgICBjb21taXRFcnJvckxvZ2dpbmc6IGNvbW1pdEVycm9yTG9nZ2luZyxcbiAgICAgIGNvbW1pdEF0dGFjaFJlZjogY29tbWl0QXR0YWNoUmVmLFxuICAgICAgY29tbWl0RGV0YWNoUmVmOiBjb21taXREZXRhY2hSZWZcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludmFyaWFudChmYWxzZSwgJ011dGF0aW5nIHJlY29uY2lsZXIgaXMgZGlzYWJsZWQuJyk7XG4gIH1cbn07XG5cbnZhciBOT19DT05URVhUID0ge307XG5cbnZhciBSZWFjdEZpYmVySG9zdENvbnRleHQgPSBmdW5jdGlvbiAoY29uZmlnLCBzdGFjaykge1xuICB2YXIgZ2V0Q2hpbGRIb3N0Q29udGV4dCA9IGNvbmZpZy5nZXRDaGlsZEhvc3RDb250ZXh0LFxuICAgICAgZ2V0Um9vdEhvc3RDb250ZXh0ID0gY29uZmlnLmdldFJvb3RIb3N0Q29udGV4dDtcbiAgdmFyIGNyZWF0ZUN1cnNvciA9IHN0YWNrLmNyZWF0ZUN1cnNvcixcbiAgICAgIHB1c2ggPSBzdGFjay5wdXNoLFxuICAgICAgcG9wID0gc3RhY2sucG9wO1xuXG5cbiAgdmFyIGNvbnRleHRTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihOT19DT05URVhUKTtcbiAgdmFyIGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKE5PX0NPTlRFWFQpO1xuICB2YXIgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoTk9fQ09OVEVYVCk7XG5cbiAgZnVuY3Rpb24gcmVxdWlyZWRDb250ZXh0KGMpIHtcbiAgICAhKGMgIT09IE5PX0NPTlRFWFQpID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgaG9zdCBjb250ZXh0IHRvIGV4aXN0LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Um9vdEhvc3RDb250YWluZXIoKSB7XG4gICAgdmFyIHJvb3RJbnN0YW5jZSA9IHJlcXVpcmVkQ29udGV4dChyb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgICByZXR1cm4gcm9vdEluc3RhbmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEhvc3RDb250YWluZXIoZmliZXIsIG5leHRSb290SW5zdGFuY2UpIHtcbiAgICAvLyBQdXNoIGN1cnJlbnQgcm9vdCBpbnN0YW5jZSBvbnRvIHRoZSBzdGFjaztcbiAgICAvLyBUaGlzIGFsbG93cyB1cyB0byByZXNldCByb290IHdoZW4gcG9ydGFscyBhcmUgcG9wcGVkLlxuICAgIHB1c2gocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UsIGZpYmVyKTtcbiAgICAvLyBUcmFjayB0aGUgY29udGV4dCBhbmQgdGhlIEZpYmVyIHRoYXQgcHJvdmlkZWQgaXQuXG4gICAgLy8gVGhpcyBlbmFibGVzIHVzIHRvIHBvcCBvbmx5IEZpYmVycyB0aGF0IHByb3ZpZGUgdW5pcXVlIGNvbnRleHRzLlxuICAgIHB1c2goY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyLCBmaWJlcik7XG5cbiAgICAvLyBGaW5hbGx5LCB3ZSBuZWVkIHRvIHB1c2ggdGhlIGhvc3QgY29udGV4dCB0byB0aGUgc3RhY2suXG4gICAgLy8gSG93ZXZlciwgd2UgY2FuJ3QganVzdCBjYWxsIGdldFJvb3RIb3N0Q29udGV4dCgpIGFuZCBwdXNoIGl0IGJlY2F1c2VcbiAgICAvLyB3ZSdkIGhhdmUgYSBkaWZmZXJlbnQgbnVtYmVyIG9mIGVudHJpZXMgb24gdGhlIHN0YWNrIGRlcGVuZGluZyBvblxuICAgIC8vIHdoZXRoZXIgZ2V0Um9vdEhvc3RDb250ZXh0KCkgdGhyb3dzIHNvbWV3aGVyZSBpbiByZW5kZXJlciBjb2RlIG9yIG5vdC5cbiAgICAvLyBTbyB3ZSBwdXNoIGFuIGVtcHR5IHZhbHVlIGZpcnN0LiBUaGlzIGxldHMgdXMgc2FmZWx5IHVud2luZCBvbiBlcnJvcnMuXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIE5PX0NPTlRFWFQsIGZpYmVyKTtcbiAgICB2YXIgbmV4dFJvb3RDb250ZXh0ID0gZ2V0Um9vdEhvc3RDb250ZXh0KG5leHRSb290SW5zdGFuY2UpO1xuICAgIC8vIE5vdyB0aGF0IHdlIGtub3cgdGhpcyBmdW5jdGlvbiBkb2Vzbid0IHRocm93LCByZXBsYWNlIGl0LlxuICAgIHBvcChjb250ZXh0U3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbmV4dFJvb3RDb250ZXh0LCBmaWJlcik7XG4gIH1cblxuICBmdW5jdGlvbiBwb3BIb3N0Q29udGFpbmVyKGZpYmVyKSB7XG4gICAgcG9wKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpO1xuICAgIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpO1xuICAgIHBvcChyb290SW5zdGFuY2VTdGFja0N1cnNvciwgZmliZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SG9zdENvbnRleHQoKSB7XG4gICAgdmFyIGNvbnRleHQgPSByZXF1aXJlZENvbnRleHQoY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEhvc3RDb250ZXh0KGZpYmVyKSB7XG4gICAgdmFyIHJvb3RJbnN0YW5jZSA9IHJlcXVpcmVkQ29udGV4dChyb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgICB2YXIgY29udGV4dCA9IHJlcXVpcmVkQ29udGV4dChjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudCk7XG4gICAgdmFyIG5leHRDb250ZXh0ID0gZ2V0Q2hpbGRIb3N0Q29udGV4dChjb250ZXh0LCBmaWJlci50eXBlLCByb290SW5zdGFuY2UpO1xuXG4gICAgLy8gRG9uJ3QgcHVzaCB0aGlzIEZpYmVyJ3MgY29udGV4dCB1bmxlc3MgaXQncyB1bmlxdWUuXG4gICAgaWYgKGNvbnRleHQgPT09IG5leHRDb250ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhY2sgdGhlIGNvbnRleHQgYW5kIHRoZSBGaWJlciB0aGF0IHByb3ZpZGVkIGl0LlxuICAgIC8vIFRoaXMgZW5hYmxlcyB1cyB0byBwb3Agb25seSBGaWJlcnMgdGhhdCBwcm92aWRlIHVuaXF1ZSBjb250ZXh0cy5cbiAgICBwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciwgZmliZXIpO1xuICAgIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBuZXh0Q29udGV4dCwgZmliZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wSG9zdENvbnRleHQoZmliZXIpIHtcbiAgICAvLyBEbyBub3QgcG9wIHVubGVzcyB0aGlzIEZpYmVyIHByb3ZpZGVkIHRoZSBjdXJyZW50IGNvbnRleHQuXG4gICAgLy8gcHVzaEhvc3RDb250ZXh0KCkgb25seSBwdXNoZXMgRmliZXJzIHRoYXQgcHJvdmlkZSB1bmlxdWUgY29udGV4dHMuXG4gICAgaWYgKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLmN1cnJlbnQgIT09IGZpYmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcG9wKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpO1xuICAgIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRIb3N0Q29udGV4dDogZ2V0SG9zdENvbnRleHQsXG4gICAgZ2V0Um9vdEhvc3RDb250YWluZXI6IGdldFJvb3RIb3N0Q29udGFpbmVyLFxuICAgIHBvcEhvc3RDb250YWluZXI6IHBvcEhvc3RDb250YWluZXIsXG4gICAgcG9wSG9zdENvbnRleHQ6IHBvcEhvc3RDb250ZXh0LFxuICAgIHB1c2hIb3N0Q29udGFpbmVyOiBwdXNoSG9zdENvbnRhaW5lcixcbiAgICBwdXNoSG9zdENvbnRleHQ6IHB1c2hIb3N0Q29udGV4dFxuICB9O1xufTtcblxudmFyIFJlYWN0RmliZXJIeWRyYXRpb25Db250ZXh0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICB2YXIgc2hvdWxkU2V0VGV4dENvbnRlbnQgPSBjb25maWcuc2hvdWxkU2V0VGV4dENvbnRlbnQsXG4gICAgICBoeWRyYXRpb24gPSBjb25maWcuaHlkcmF0aW9uO1xuXG4gIC8vIElmIHRoaXMgZG9lc24ndCBoYXZlIGh5ZHJhdGlvbiBtb2RlLlxuXG4gIGlmICghaHlkcmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudGVySHlkcmF0aW9uU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKCkgdG8gbmV2ZXIgYmUgY2FsbGVkLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgfSxcbiAgICAgIHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlKCkgdG8gbmV2ZXIgYmUgY2FsbGVkLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgfSxcbiAgICAgIHBvcEh5ZHJhdGlvblN0YXRlOiBmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgY2FuSHlkcmF0ZUluc3RhbmNlID0gaHlkcmF0aW9uLmNhbkh5ZHJhdGVJbnN0YW5jZSxcbiAgICAgIGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UgPSBoeWRyYXRpb24uY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSxcbiAgICAgIGdldE5leHRIeWRyYXRhYmxlU2libGluZyA9IGh5ZHJhdGlvbi5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsXG4gICAgICBnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCA9IGh5ZHJhdGlvbi5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCxcbiAgICAgIGh5ZHJhdGVJbnN0YW5jZSA9IGh5ZHJhdGlvbi5oeWRyYXRlSW5zdGFuY2UsXG4gICAgICBoeWRyYXRlVGV4dEluc3RhbmNlID0gaHlkcmF0aW9uLmh5ZHJhdGVUZXh0SW5zdGFuY2UsXG4gICAgICBkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlID0gaHlkcmF0aW9uLmRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UsXG4gICAgICBkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlID0gaHlkcmF0aW9uLmRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UsXG4gICAgICBkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UgPSBoeWRyYXRpb24uZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlLFxuICAgICAgZGlkTm90SHlkcmF0ZUluc3RhbmNlID0gaHlkcmF0aW9uLmRpZE5vdEh5ZHJhdGVJbnN0YW5jZSxcbiAgICAgIGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2UgPSBoeWRyYXRpb24uZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSxcbiAgICAgIGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlID0gaHlkcmF0aW9uLmRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlLFxuICAgICAgZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvbi5kaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlLFxuICAgICAgZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UgPSBoeWRyYXRpb24uZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U7XG5cbiAgLy8gVGhlIGRlZXBlc3QgRmliZXIgb24gdGhlIHN0YWNrIGludm9sdmVkIGluIGEgaHlkcmF0aW9uIGNvbnRleHQuXG4gIC8vIFRoaXMgbWF5IGhhdmUgYmVlbiBhbiBpbnNlcnRpb24gb3IgYSBoeWRyYXRpb24uXG5cbiAgdmFyIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbDtcbiAgdmFyIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICB2YXIgaXNIeWRyYXRpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnRlckh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gICAgdmFyIHBhcmVudEluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKHBhcmVudEluc3RhbmNlKTtcbiAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyO1xuICAgIGlzSHlkcmF0aW5nID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShyZXR1cm5GaWJlciwgaW5zdGFuY2UpIHtcbiAgICB7XG4gICAgICBzd2l0Y2ggKHJldHVybkZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgIGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZShyZXR1cm5GaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbywgaW5zdGFuY2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgZGlkTm90SHlkcmF0ZUluc3RhbmNlKHJldHVybkZpYmVyLnR5cGUsIHJldHVybkZpYmVyLm1lbW9pemVkUHJvcHMsIHJldHVybkZpYmVyLnN0YXRlTm9kZSwgaW5zdGFuY2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGlsZFRvRGVsZXRlID0gY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb24oKTtcbiAgICBjaGlsZFRvRGVsZXRlLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICAgIGNoaWxkVG9EZWxldGVbJ3JldHVybiddID0gcmV0dXJuRmliZXI7XG4gICAgY2hpbGRUb0RlbGV0ZS5lZmZlY3RUYWcgPSBEZWxldGlvbjtcblxuICAgIC8vIFRoaXMgbWlnaHQgc2VlbSBsaWtlIGl0IGJlbG9uZ3Mgb24gcHJvZ3Jlc3NlZEZpcnN0RGVsZXRpb24uIEhvd2V2ZXIsXG4gICAgLy8gdGhlc2UgY2hpbGRyZW4gYXJlIG5vdCBwYXJ0IG9mIHRoZSByZWNvbmNpbGlhdGlvbiBsaXN0IG9mIGNoaWxkcmVuLlxuICAgIC8vIEV2ZW4gaWYgd2UgYWJvcnQgYW5kIHJlcmVjb25jaWxlIHRoZSBjaGlsZHJlbiwgdGhhdCB3aWxsIHRyeSB0byBoeWRyYXRlXG4gICAgLy8gYWdhaW4gYW5kIHRoZSBub2RlcyBhcmUgc3RpbGwgaW4gdGhlIGhvc3QgdHJlZSBzbyB0aGVzZSB3aWxsIGJlXG4gICAgLy8gcmVjcmVhdGVkLlxuICAgIGlmIChyZXR1cm5GaWJlci5sYXN0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShyZXR1cm5GaWJlciwgZmliZXIpIHtcbiAgICBmaWJlci5lZmZlY3RUYWcgfD0gUGxhY2VtZW50O1xuICAgIHtcbiAgICAgIHN3aXRjaCAocmV0dXJuRmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIHBhcmVudENvbnRhaW5lciA9IHJldHVybkZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZmliZXIudHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgICAgICAgZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHR5cGUsIHByb3BzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGZpYmVyLnBlbmRpbmdQcm9wcztcbiAgICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHRleHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIHBhcmVudFR5cGUgPSByZXR1cm5GaWJlci50eXBlO1xuICAgICAgICAgICAgdmFyIHBhcmVudFByb3BzID0gcmV0dXJuRmliZXIubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9IHJldHVybkZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAgICAgICAgICB2YXIgX3R5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICAgICAgICAgIHZhciBfcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgICAgICAgZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIF90eXBlLCBfcHJvcHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgICAgICAgICAgIHZhciBfdGV4dCA9IGZpYmVyLnBlbmRpbmdQcm9wcztcbiAgICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIF90ZXh0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5SHlkcmF0ZShmaWJlciwgbmV4dEluc3RhbmNlKSB7XG4gICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciB0eXBlID0gZmliZXIudHlwZTtcbiAgICAgICAgICB2YXIgcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gY2FuSHlkcmF0ZUluc3RhbmNlKG5leHRJbnN0YW5jZSwgdHlwZSwgcHJvcHMpO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZmliZXIuc3RhdGVOb2RlID0gaW5zdGFuY2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHRleHQgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgdmFyIHRleHRJbnN0YW5jZSA9IGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UobmV4dEluc3RhbmNlLCB0ZXh0KTtcbiAgICAgICAgICBpZiAodGV4dEluc3RhbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBmaWJlci5zdGF0ZU5vZGUgPSB0ZXh0SW5zdGFuY2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UoZmliZXIpIHtcbiAgICBpZiAoIWlzSHlkcmF0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuICAgIGlmICghbmV4dEluc3RhbmNlKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGh5ZHJhdGUuIE1ha2UgaXQgYW4gaW5zZXJ0aW9uLlxuICAgICAgaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShoeWRyYXRpb25QYXJlbnRGaWJlciwgZmliZXIpO1xuICAgICAgaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXI7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdHJ5SHlkcmF0ZShmaWJlciwgbmV4dEluc3RhbmNlKSkge1xuICAgICAgLy8gSWYgd2UgY2FuJ3QgaHlkcmF0ZSB0aGlzIGluc3RhbmNlIGxldCdzIHRyeSB0aGUgbmV4dCBvbmUuXG4gICAgICAvLyBXZSB1c2UgdGhpcyBhcyBhIGhldXJpc3RpYy4gSXQncyBiYXNlZCBvbiBpbnR1aXRpb24gYW5kIG5vdCBkYXRhIHNvIGl0XG4gICAgICAvLyBtaWdodCBiZSBmbGF3ZWQgb3IgdW5uZWNlc3NhcnkuXG4gICAgICBuZXh0SW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcobmV4dEluc3RhbmNlKTtcbiAgICAgIGlmICghbmV4dEluc3RhbmNlIHx8ICF0cnlIeWRyYXRlKGZpYmVyLCBuZXh0SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gaHlkcmF0ZS4gTWFrZSBpdCBhbiBpbnNlcnRpb24uXG4gICAgICAgIGluc2VydE5vbkh5ZHJhdGVkSW5zdGFuY2UoaHlkcmF0aW9uUGFyZW50RmliZXIsIGZpYmVyKTtcbiAgICAgICAgaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcjtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gV2UgbWF0Y2hlZCB0aGUgbmV4dCBvbmUsIHdlJ2xsIG5vdyBhc3N1bWUgdGhhdCB0aGUgZmlyc3Qgb25lIHdhc1xuICAgICAgLy8gc3VwZXJmbHVvdXMgYW5kIHdlJ2xsIGRlbGV0ZSBpdC4gU2luY2Ugd2UgY2FuJ3QgZWFnZXJseSBkZWxldGUgaXRcbiAgICAgIC8vIHdlJ2xsIGhhdmUgdG8gc2NoZWR1bGUgYSBkZWxldGlvbi4gVG8gZG8gdGhhdCwgdGhpcyBub2RlIG5lZWRzIGEgZHVtbXlcbiAgICAgIC8vIGZpYmVyIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICAgIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShoeWRyYXRpb25QYXJlbnRGaWJlciwgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSk7XG4gICAgfVxuICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXI7XG4gICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKG5leHRJbnN0YW5jZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKGZpYmVyLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0KSB7XG4gICAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICAgIHZhciB1cGRhdGVQYXlsb2FkID0gaHlkcmF0ZUluc3RhbmNlKGluc3RhbmNlLCBmaWJlci50eXBlLCBmaWJlci5tZW1vaXplZFByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBmaWJlcik7XG4gICAgLy8gVE9ETzogVHlwZSB0aGlzIHNwZWNpZmljIHRvIHRoaXMgdHlwZSBvZiBjb21wb25lbnQuXG4gICAgZmliZXIudXBkYXRlUXVldWUgPSB1cGRhdGVQYXlsb2FkO1xuICAgIC8vIElmIHRoZSB1cGRhdGUgcGF5bG9hZCBpbmRpY2F0ZXMgdGhhdCB0aGVyZSBpcyBhIGNoYW5nZSBvciBpZiB0aGVyZVxuICAgIC8vIGlzIGEgbmV3IHJlZiB3ZSBtYXJrIHRoaXMgYXMgYW4gdXBkYXRlLlxuICAgIGlmICh1cGRhdGVQYXlsb2FkICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UoZmliZXIpIHtcbiAgICB2YXIgdGV4dEluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICAgIHZhciB0ZXh0Q29udGVudCA9IGZpYmVyLm1lbW9pemVkUHJvcHM7XG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9IGh5ZHJhdGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlLCB0ZXh0Q29udGVudCwgZmliZXIpO1xuICAgIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UgaXMgY2FsbGVkIGluIGEgY29udGV4dCB3aGVyZSB0aGVcbiAgICAgICAgLy8gaHlkcmF0aW9uIHBhcmVudCBpcyB0aGUgcGFyZW50IGhvc3QgY29tcG9uZW50IG9mIHRoaXMgaG9zdCB0ZXh0LlxuICAgICAgICB2YXIgcmV0dXJuRmliZXIgPSBoeWRyYXRpb25QYXJlbnRGaWJlcjtcbiAgICAgICAgaWYgKHJldHVybkZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgc3dpdGNoIChyZXR1cm5GaWJlci50YWcpIHtcbiAgICAgICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50Q29udGFpbmVyID0gcmV0dXJuRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICAgICAgZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHRleHRJbnN0YW5jZSwgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50VHlwZSA9IHJldHVybkZpYmVyLnR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudFByb3BzID0gcmV0dXJuRmliZXIubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2UgPSByZXR1cm5GaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIHRleHRJbnN0YW5jZSwgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaG91bGRVcGRhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKSB7XG4gICAgdmFyIHBhcmVudCA9IGZpYmVyWydyZXR1cm4nXTtcbiAgICB3aGlsZSAocGFyZW50ICE9PSBudWxsICYmIHBhcmVudC50YWcgIT09IEhvc3RDb21wb25lbnQgJiYgcGFyZW50LnRhZyAhPT0gSG9zdFJvb3QpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudFsncmV0dXJuJ107XG4gICAgfVxuICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gcGFyZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wSHlkcmF0aW9uU3RhdGUoZmliZXIpIHtcbiAgICBpZiAoZmliZXIgIT09IGh5ZHJhdGlvblBhcmVudEZpYmVyKSB7XG4gICAgICAvLyBXZSdyZSBkZWVwZXIgdGhhbiB0aGUgY3VycmVudCBoeWRyYXRpb24gY29udGV4dCwgaW5zaWRlIGFuIGluc2VydGVkXG4gICAgICAvLyB0cmVlLlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzSHlkcmF0aW5nKSB7XG4gICAgICAvLyBJZiB3ZSdyZSBub3QgY3VycmVudGx5IGh5ZHJhdGluZyBidXQgd2UncmUgaW4gYSBoeWRyYXRpb24gY29udGV4dCwgdGhlblxuICAgICAgLy8gd2Ugd2VyZSBhbiBpbnNlcnRpb24gYW5kIG5vdyBuZWVkIHRvIHBvcCB1cCByZWVudGVyIGh5ZHJhdGlvbiBvZiBvdXJcbiAgICAgIC8vIHNpYmxpbmdzLlxuICAgICAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gICAgICBpc0h5ZHJhdGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSBmaWJlci50eXBlO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBhbnkgcmVtYWluaW5nIGh5ZHJhdGFibGUgbm9kZXMsIHdlIG5lZWQgdG8gZGVsZXRlIHRoZW0gbm93LlxuICAgIC8vIFdlIG9ubHkgZG8gdGhpcyBkZWVwZXIgdGhhbiBoZWFkIGFuZCBib2R5IHNpbmNlIHRoZXkgdGVuZCB0byBoYXZlIHJhbmRvbVxuICAgIC8vIG90aGVyIG5vZGVzIGluIHRoZW0uIFdlIGFsc28gaWdub3JlIGNvbXBvbmVudHMgd2l0aCBwdXJlIHRleHQgY29udGVudCBpblxuICAgIC8vIHNpZGUgb2YgdGhlbS5cbiAgICAvLyBUT0RPOiBCZXR0ZXIgaGV1cmlzdGljLlxuICAgIGlmIChmaWJlci50YWcgIT09IEhvc3RDb21wb25lbnQgfHwgdHlwZSAhPT0gJ2hlYWQnICYmIHR5cGUgIT09ICdib2R5JyAmJiAhc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcykpIHtcbiAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuICAgICAgd2hpbGUgKG5leHRJbnN0YW5jZSkge1xuICAgICAgICBkZWxldGVIeWRyYXRhYmxlSW5zdGFuY2UoZmliZXIsIG5leHRJbnN0YW5jZSk7XG4gICAgICAgIG5leHRJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlU2libGluZyhuZXh0SW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpO1xuICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlciA/IGdldE5leHRIeWRyYXRhYmxlU2libGluZyhmaWJlci5zdGF0ZU5vZGUpIDogbnVsbDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSB7XG4gICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBudWxsO1xuICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICAgIGlzSHlkcmF0aW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVudGVySHlkcmF0aW9uU3RhdGU6IGVudGVySHlkcmF0aW9uU3RhdGUsXG4gICAgcmVzZXRIeWRyYXRpb25TdGF0ZTogcmVzZXRIeWRyYXRpb25TdGF0ZSxcbiAgICB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTogdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UsXG4gICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTogcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxcbiAgICBwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTogcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsXG4gICAgcG9wSHlkcmF0aW9uU3RhdGU6IHBvcEh5ZHJhdGlvblN0YXRlXG4gIH07XG59O1xuXG4vLyBUaGlzIGxldHMgdXMgaG9vayBpbnRvIEZpYmVyIHRvIGRlYnVnIHdoYXQgaXQncyBkb2luZy5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC84MDMzLlxuLy8gVGhpcyBpcyBub3QgcGFydCBvZiB0aGUgcHVibGljIEFQSSwgbm90IGV2ZW4gZm9yIFJlYWN0IERldlRvb2xzLlxuLy8gWW91IG1heSBvbmx5IGluamVjdCBhIGRlYnVnVG9vbCBpZiB5b3Ugd29yayBvbiBSZWFjdCBGaWJlciBpdHNlbGYuXG52YXIgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbiA9IHtcbiAgZGVidWdUb29sOiBudWxsXG59O1xuXG52YXIgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xID0gUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbjtcblxudmFyIHdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dCA9IHZvaWQgMDtcblxue1xuICB3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHQgPSB7fTtcbn1cblxudmFyIFJlYWN0RmliZXJMZWdhY3lDb250ZXh0ID0gZnVuY3Rpb24gKHN0YWNrKSB7XG4gIHZhciBjcmVhdGVDdXJzb3IgPSBzdGFjay5jcmVhdGVDdXJzb3IsXG4gICAgICBwdXNoID0gc3RhY2sucHVzaCxcbiAgICAgIHBvcCA9IHN0YWNrLnBvcDtcblxuICAvLyBBIGN1cnNvciB0byB0aGUgY3VycmVudCBtZXJnZWQgY29udGV4dCBvYmplY3Qgb24gdGhlIHN0YWNrLlxuXG4gIHZhciBjb250ZXh0U3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoZW1wdHlPYmplY3QpO1xuICAvLyBBIGN1cnNvciB0byBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBjb250ZXh0IGhhcyBjaGFuZ2VkLlxuICB2YXIgZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihmYWxzZSk7XG4gIC8vIEtlZXAgdHJhY2sgb2YgdGhlIHByZXZpb3VzIGNvbnRleHQgb2JqZWN0IHRoYXQgd2FzIG9uIHRoZSBzdGFjay5cbiAgLy8gV2UgdXNlIHRoaXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcGFyZW50IGNvbnRleHQgYWZ0ZXIgd2UgaGF2ZSBhbHJlYWR5XG4gIC8vIHB1c2hlZCB0aGUgbmV4dCBjb250ZXh0IHByb3ZpZGVyLCBhbmQgbm93IG5lZWQgdG8gbWVyZ2UgdGhlaXIgY29udGV4dHMuXG4gIHZhciBwcmV2aW91c0NvbnRleHQgPSBlbXB0eU9iamVjdDtcblxuICBmdW5jdGlvbiBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgICB2YXIgaGFzT3duQ29udGV4dCA9IGlzQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICBpZiAoaGFzT3duQ29udGV4dCkge1xuICAgICAgLy8gSWYgdGhlIGZpYmVyIGlzIGEgY29udGV4dCBwcm92aWRlciBpdHNlbGYsIHdoZW4gd2UgcmVhZCBpdHMgY29udGV4dFxuICAgICAgLy8gd2UgaGF2ZSBhbHJlYWR5IHB1c2hlZCBpdHMgb3duIGNoaWxkIGNvbnRleHQgb24gdGhlIHN0YWNrLiBBIGNvbnRleHRcbiAgICAgIC8vIHByb3ZpZGVyIHNob3VsZCBub3QgXCJzZWVcIiBpdHMgb3duIGNoaWxkIGNvbnRleHQuIFRoZXJlZm9yZSB3ZSByZWFkIHRoZVxuICAgICAgLy8gcHJldmlvdXMgKHBhcmVudCkgY29udGV4dCBpbnN0ZWFkIGZvciBhIGNvbnRleHQgcHJvdmlkZXIuXG4gICAgICByZXR1cm4gcHJldmlvdXNDb250ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYWNoZUNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCwgbWFza2VkQ29udGV4dCkge1xuICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0ID0gdW5tYXNrZWRDb250ZXh0O1xuICAgIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0ID0gbWFza2VkQ29udGV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCkge1xuICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICB2YXIgY29udGV4dFR5cGVzID0gdHlwZS5jb250ZXh0VHlwZXM7XG4gICAgaWYgKCFjb250ZXh0VHlwZXMpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG5cbiAgICAvLyBBdm9pZCByZWNyZWF0aW5nIG1hc2tlZCBjb250ZXh0IHVubGVzcyB1bm1hc2tlZCBjb250ZXh0IGhhcyBjaGFuZ2VkLlxuICAgIC8vIEZhaWxpbmcgdG8gZG8gdGhpcyB3aWxsIHJlc3VsdCBpbiB1bm5lY2Vzc2FyeSBjYWxscyB0byBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLlxuICAgIC8vIFRoaXMgbWF5IHRyaWdnZXIgaW5maW5pdGUgbG9vcHMgaWYgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBjYWxscyBzZXRTdGF0ZS5cbiAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQgPT09IHVubWFza2VkQ29udGV4dCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O1xuICAgIH1cblxuICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGNvbnRleHRUeXBlcykge1xuICAgICAgY29udGV4dFtrZXldID0gdW5tYXNrZWRDb250ZXh0W2tleV07XG4gICAgfVxuXG4gICAge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHdvcmtJblByb2dyZXNzKSB8fCAnVW5rbm93bic7XG4gICAgICBjaGVja1Byb3BUeXBlcyhjb250ZXh0VHlwZXMsIGNvbnRleHQsICdjb250ZXh0JywgbmFtZSwgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5nZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKTtcbiAgICB9XG5cbiAgICAvLyBDYWNoZSB1bm1hc2tlZCBjb250ZXh0IHNvIHdlIGNhbiBhdm9pZCByZWNyZWF0aW5nIG1hc2tlZCBjb250ZXh0IHVubGVzcyBuZWNlc3NhcnkuXG4gICAgLy8gQ29udGV4dCBpcyBjcmVhdGVkIGJlZm9yZSB0aGUgY2xhc3MgY29tcG9uZW50IGlzIGluc3RhbnRpYXRlZCBzbyBjaGVjayBmb3IgaW5zdGFuY2UuXG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICBjYWNoZUNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNDb250ZXh0Q2hhbmdlZCgpIHtcbiAgICByZXR1cm4gZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvci5jdXJyZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIoZmliZXIpIHtcbiAgICByZXR1cm4gZmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCAmJiBmaWJlci50eXBlLmNvbnRleHRUeXBlcyAhPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIoZmliZXIpIHtcbiAgICByZXR1cm4gZmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCAmJiBmaWJlci50eXBlLmNoaWxkQ29udGV4dFR5cGVzICE9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBwb3BDb250ZXh0UHJvdmlkZXIoZmliZXIpIHtcbiAgICBpZiAoIWlzQ29udGV4dFByb3ZpZGVyKGZpYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBvcChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBmaWJlcik7XG4gICAgcG9wKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0KGZpYmVyKSB7XG4gICAgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yLCBmaWJlcik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0KGZpYmVyLCBjb250ZXh0LCBkaWRDaGFuZ2UpIHtcbiAgICAhKGNvbnRleHRTdGFja0N1cnNvci5jdXJzb3IgPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmV4cGVjdGVkIGNvbnRleHQgZm91bmQgb24gc3RhY2suIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG5cbiAgICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgY29udGV4dCwgZmliZXIpO1xuICAgIHB1c2goZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZGlkQ2hhbmdlLCBmaWJlcik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzQ2hpbGRDb250ZXh0KGZpYmVyLCBwYXJlbnRDb250ZXh0KSB7XG4gICAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICAgIHZhciBjaGlsZENvbnRleHRUeXBlcyA9IGZpYmVyLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgICAvLyBUT0RPIChidmF1Z2huKSBSZXBsYWNlIHRoaXMgYmVoYXZpb3Igd2l0aCBhbiBpbnZhcmlhbnQoKSBpbiB0aGUgZnV0dXJlLlxuICAgIC8vIEl0IGhhcyBvbmx5IGJlZW4gYWRkZWQgaW4gRmliZXIgdG8gbWF0Y2ggdGhlICh1bmludGVudGlvbmFsKSBiZWhhdmlvciBpbiBTdGFjay5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmdldENoaWxkQ29udGV4dCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIpIHx8ICdVbmtub3duJztcblxuICAgICAgICBpZiAoIXdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dFtjb21wb25lbnROYW1lXSkge1xuICAgICAgICAgIHdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dFtjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICAgICAgd2FybmluZyhmYWxzZSwgJyVzLmNoaWxkQ29udGV4dFR5cGVzIGlzIHNwZWNpZmllZCBidXQgdGhlcmUgaXMgbm8gZ2V0Q2hpbGRDb250ZXh0KCkgbWV0aG9kICcgKyAnb24gdGhlIGluc3RhbmNlLiBZb3UgY2FuIGVpdGhlciBkZWZpbmUgZ2V0Q2hpbGRDb250ZXh0KCkgb24gJXMgb3IgcmVtb3ZlICcgKyAnY2hpbGRDb250ZXh0VHlwZXMgZnJvbSBpdC4nLCBjb21wb25lbnROYW1lLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmVudENvbnRleHQ7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkQ29udGV4dCA9IHZvaWQgMDtcbiAgICB7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLnNldEN1cnJlbnRQaGFzZSgnZ2V0Q2hpbGRDb250ZXh0Jyk7XG4gICAgfVxuICAgIHN0YXJ0UGhhc2VUaW1lcihmaWJlciwgJ2dldENoaWxkQ29udGV4dCcpO1xuICAgIGNoaWxkQ29udGV4dCA9IGluc3RhbmNlLmdldENoaWxkQ29udGV4dCgpO1xuICAgIHN0b3BQaGFzZVRpbWVyKCk7XG4gICAge1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5zZXRDdXJyZW50UGhhc2UobnVsbCk7XG4gICAgfVxuICAgIGZvciAodmFyIGNvbnRleHRLZXkgaW4gY2hpbGRDb250ZXh0KSB7XG4gICAgICAhKGNvbnRleHRLZXkgaW4gY2hpbGRDb250ZXh0VHlwZXMpID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJywgZ2V0Q29tcG9uZW50TmFtZShmaWJlcikgfHwgJ1Vua25vd24nLCBjb250ZXh0S2V5KSA6IHZvaWQgMDtcbiAgICB9XG4gICAge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGZpYmVyKSB8fCAnVW5rbm93bic7XG4gICAgICBjaGVja1Byb3BUeXBlcyhjaGlsZENvbnRleHRUeXBlcywgY2hpbGRDb250ZXh0LCAnY2hpbGQgY29udGV4dCcsIG5hbWUsXG4gICAgICAvLyBJbiBwcmFjdGljZSwgdGhlcmUgaXMgb25lIGNhc2UgaW4gd2hpY2ggd2Ugd29uJ3QgZ2V0IGEgc3RhY2suIEl0J3Mgd2hlblxuICAgICAgLy8gc29tZWJvZHkgY2FsbHMgdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoKSBhbmQgd2UgcHJvY2Vzc1xuICAgICAgLy8gY29udGV4dCBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50IGluc3RhbmNlLiBUaGUgc3RhY2sgd2lsbCBiZSBtaXNzaW5nXG4gICAgICAvLyBiZWNhdXNlIGl0J3Mgb3V0c2lkZSBvZiB0aGUgcmVjb25jaWxpYXRpb24sIGFuZCBzbyB0aGUgcG9pbnRlciBoYXMgbm90XG4gICAgICAvLyBiZWVuIHNldC4gVGhpcyBpcyByYXJlIGFuZCBkb2Vzbid0IG1hdHRlci4gV2UnbGwgYWxzbyByZW1vdmUgdGhhdCBBUEkuXG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLmdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0pO1xuICAgIH1cblxuICAgIHJldHVybiBfYXNzaWduKHt9LCBwYXJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaENvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcykge1xuICAgIGlmICghaXNDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIC8vIFdlIHB1c2ggdGhlIGNvbnRleHQgYXMgZWFybHkgYXMgcG9zc2libGUgdG8gZW5zdXJlIHN0YWNrIGludGVncml0eS5cbiAgICAvLyBJZiB0aGUgaW5zdGFuY2UgZG9lcyBub3QgZXhpc3QgeWV0LCB3ZSB3aWxsIHB1c2ggbnVsbCBhdCBmaXJzdCxcbiAgICAvLyBhbmQgcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgbGF0ZXIgd2hlbiBpbnZhbGlkYXRpbmcgdGhlIGNvbnRleHQuXG4gICAgdmFyIG1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQgfHwgZW1wdHlPYmplY3Q7XG5cbiAgICAvLyBSZW1lbWJlciB0aGUgcGFyZW50IGNvbnRleHQgc28gd2UgY2FuIG1lcmdlIHdpdGggaXQgbGF0ZXIuXG4gICAgLy8gSW5oZXJpdCB0aGUgcGFyZW50J3MgZGlkLXBlcmZvcm0td29yayB2YWx1ZSB0byBhdm9pZCBpbmFkdmVydGVudGx5IGJsb2NraW5nIHVwZGF0ZXMuXG4gICAgcHJldmlvdXNDb250ZXh0ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIG1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcHVzaChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLmN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgZGlkQ2hhbmdlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICFpbnN0YW5jZSA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHRvIGhhdmUgYW4gaW5zdGFuY2UgYnkgdGhpcyBwb2ludC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcblxuICAgIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAgIC8vIE1lcmdlIHBhcmVudCBhbmQgb3duIGNvbnRleHQuXG4gICAgICAvLyBTa2lwIHRoaXMgaWYgd2UncmUgbm90IHVwZGF0aW5nIGR1ZSB0byBzQ1UuXG4gICAgICAvLyBUaGlzIGF2b2lkcyB1bm5lY2Vzc2FyaWx5IHJlY29tcHV0aW5nIG1lbW9pemVkIHZhbHVlcy5cbiAgICAgIHZhciBtZXJnZWRDb250ZXh0ID0gcHJvY2Vzc0NoaWxkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcHJldmlvdXNDb250ZXh0KTtcbiAgICAgIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0ID0gbWVyZ2VkQ29udGV4dDtcblxuICAgICAgLy8gUmVwbGFjZSB0aGUgb2xkIChvciBlbXB0eSkgY29udGV4dCB3aXRoIHRoZSBuZXcgb25lLlxuICAgICAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIHVud2luZCB0aGUgY29udGV4dCBpbiB0aGUgcmV2ZXJzZSBvcmRlci5cbiAgICAgIHBvcChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAvLyBOb3cgcHVzaCB0aGUgbmV3IGNvbnRleHQgYW5kIG1hcmsgdGhhdCBpdCBoYXMgY2hhbmdlZC5cbiAgICAgIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBtZXJnZWRDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZENoYW5nZSwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3AoZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcHVzaChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBkaWRDaGFuZ2UsIHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dChmaWJlcikge1xuICAgIC8vIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgdXNlZCB3aXRoIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOyBub3Qgc3VyZSBpZiBpdFxuICAgIC8vIG1ha2VzIHNlbnNlIGVsc2V3aGVyZVxuICAgICEoaXNGaWJlck1vdW50ZWQoZmliZXIpICYmIGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgc3VidHJlZSBwYXJlbnQgdG8gYmUgYSBtb3VudGVkIGNsYXNzIGNvbXBvbmVudC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcblxuICAgIHZhciBub2RlID0gZmliZXI7XG4gICAgd2hpbGUgKG5vZGUudGFnICE9PSBIb3N0Um9vdCkge1xuICAgICAgaWYgKGlzQ29udGV4dFByb3ZpZGVyKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBub2RlLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJlbnQgPSBub2RlWydyZXR1cm4nXTtcbiAgICAgICFwYXJlbnQgPyBpbnZhcmlhbnQoZmFsc2UsICdGb3VuZCB1bmV4cGVjdGVkIGRldGFjaGVkIHN1YnRyZWUgcGFyZW50LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUuc3RhdGVOb2RlLmNvbnRleHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldFVubWFza2VkQ29udGV4dDogZ2V0VW5tYXNrZWRDb250ZXh0LFxuICAgIGNhY2hlQ29udGV4dDogY2FjaGVDb250ZXh0LFxuICAgIGdldE1hc2tlZENvbnRleHQ6IGdldE1hc2tlZENvbnRleHQsXG4gICAgaGFzQ29udGV4dENoYW5nZWQ6IGhhc0NvbnRleHRDaGFuZ2VkLFxuICAgIGlzQ29udGV4dENvbnN1bWVyOiBpc0NvbnRleHRDb25zdW1lcixcbiAgICBpc0NvbnRleHRQcm92aWRlcjogaXNDb250ZXh0UHJvdmlkZXIsXG4gICAgcG9wQ29udGV4dFByb3ZpZGVyOiBwb3BDb250ZXh0UHJvdmlkZXIsXG4gICAgcG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OiBwb3BUb3BMZXZlbENvbnRleHRPYmplY3QsXG4gICAgcHVzaFRvcExldmVsQ29udGV4dE9iamVjdDogcHVzaFRvcExldmVsQ29udGV4dE9iamVjdCxcbiAgICBwcm9jZXNzQ2hpbGRDb250ZXh0OiBwcm9jZXNzQ2hpbGRDb250ZXh0LFxuICAgIHB1c2hDb250ZXh0UHJvdmlkZXI6IHB1c2hDb250ZXh0UHJvdmlkZXIsXG4gICAgaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjogaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixcbiAgICBmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDogZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHRcbiAgfTtcbn07XG5cbnZhciBSZWFjdEZpYmVyTmV3Q29udGV4dCA9IGZ1bmN0aW9uIChzdGFjaykge1xuICB2YXIgY3JlYXRlQ3Vyc29yID0gc3RhY2suY3JlYXRlQ3Vyc29yLFxuICAgICAgcHVzaCA9IHN0YWNrLnB1c2gsXG4gICAgICBwb3AgPSBzdGFjay5wb3A7XG5cblxuICB2YXIgcHJvdmlkZXJDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCk7XG4gIHZhciB2YWx1ZUN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbiAgdmFyIGNoYW5nZWRCaXRzQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKDApO1xuXG4gIHZhciByZW5kZXJlclNpZ2lsID0gdm9pZCAwO1xuICB7XG4gICAgLy8gVXNlIHRoaXMgdG8gZGV0ZWN0IG11bHRpcGxlIHJlbmRlcmVycyB1c2luZyB0aGUgc2FtZSBjb250ZXh0XG4gICAgcmVuZGVyZXJTaWdpbCA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaFByb3ZpZGVyKHByb3ZpZGVyRmliZXIpIHtcbiAgICB2YXIgY29udGV4dCA9IHByb3ZpZGVyRmliZXIudHlwZS5fY29udGV4dDtcblxuICAgIHB1c2goY2hhbmdlZEJpdHNDdXJzb3IsIGNvbnRleHQuX2NoYW5nZWRCaXRzLCBwcm92aWRlckZpYmVyKTtcbiAgICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUsIHByb3ZpZGVyRmliZXIpO1xuICAgIHB1c2gocHJvdmlkZXJDdXJzb3IsIHByb3ZpZGVyRmliZXIsIHByb3ZpZGVyRmliZXIpO1xuXG4gICAgY29udGV4dC5fY3VycmVudFZhbHVlID0gcHJvdmlkZXJGaWJlci5wZW5kaW5nUHJvcHMudmFsdWU7XG4gICAgY29udGV4dC5fY2hhbmdlZEJpdHMgPSBwcm92aWRlckZpYmVyLnN0YXRlTm9kZTtcblxuICAgIHtcbiAgICAgIHdhcm5pbmcoY29udGV4dC5fY3VycmVudFJlbmRlcmVyID09PSBudWxsIHx8IGNvbnRleHQuX2N1cnJlbnRSZW5kZXJlciA9PT0gcmVuZGVyZXJTaWdpbCwgJ0RldGVjdGVkIG11bHRpcGxlIHJlbmRlcmVycyBjb25jdXJyZW50bHkgcmVuZGVyaW5nIHRoZSAnICsgJ3NhbWUgY29udGV4dCBwcm92aWRlci4gVGhpcyBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuJyk7XG4gICAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPSByZW5kZXJlclNpZ2lsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcFByb3ZpZGVyKHByb3ZpZGVyRmliZXIpIHtcbiAgICB2YXIgY2hhbmdlZEJpdHMgPSBjaGFuZ2VkQml0c0N1cnNvci5jdXJyZW50O1xuICAgIHZhciBjdXJyZW50VmFsdWUgPSB2YWx1ZUN1cnNvci5jdXJyZW50O1xuXG4gICAgcG9wKHByb3ZpZGVyQ3Vyc29yLCBwcm92aWRlckZpYmVyKTtcbiAgICBwb3AodmFsdWVDdXJzb3IsIHByb3ZpZGVyRmliZXIpO1xuICAgIHBvcChjaGFuZ2VkQml0c0N1cnNvciwgcHJvdmlkZXJGaWJlcik7XG5cbiAgICB2YXIgY29udGV4dCA9IHByb3ZpZGVyRmliZXIudHlwZS5fY29udGV4dDtcbiAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gICAgY29udGV4dC5fY2hhbmdlZEJpdHMgPSBjaGFuZ2VkQml0cztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcHVzaFByb3ZpZGVyOiBwdXNoUHJvdmlkZXIsXG4gICAgcG9wUHJvdmlkZXI6IHBvcFByb3ZpZGVyXG4gIH07XG59O1xuXG52YXIgUmVhY3RGaWJlclN0YWNrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmFsdWVTdGFjayA9IFtdO1xuXG4gIHZhciBmaWJlclN0YWNrID0gdm9pZCAwO1xuXG4gIHtcbiAgICBmaWJlclN0YWNrID0gW107XG4gIH1cblxuICB2YXIgaW5kZXggPSAtMTtcblxuICBmdW5jdGlvbiBjcmVhdGVDdXJzb3IoZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwb3AoY3Vyc29yLCBmaWJlcikge1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ1VuZXhwZWN0ZWQgcG9wLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChmaWJlciAhPT0gZmliZXJTdGFja1tpbmRleF0pIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ1VuZXhwZWN0ZWQgRmliZXIgcG9wcGVkLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGN1cnNvci5jdXJyZW50ID0gdmFsdWVTdGFja1tpbmRleF07XG5cbiAgICB2YWx1ZVN0YWNrW2luZGV4XSA9IG51bGw7XG5cbiAgICB7XG4gICAgICBmaWJlclN0YWNrW2luZGV4XSA9IG51bGw7XG4gICAgfVxuXG4gICAgaW5kZXgtLTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2goY3Vyc29yLCB2YWx1ZSwgZmliZXIpIHtcbiAgICBpbmRleCsrO1xuXG4gICAgdmFsdWVTdGFja1tpbmRleF0gPSBjdXJzb3IuY3VycmVudDtcblxuICAgIHtcbiAgICAgIGZpYmVyU3RhY2tbaW5kZXhdID0gZmliZXI7XG4gICAgfVxuXG4gICAgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrVGhhdFN0YWNrSXNFbXB0eSgpIHtcbiAgICB7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdFeHBlY3RlZCBhbiBlbXB0eSBzdGFjay4gU29tZXRoaW5nIHdhcyBub3QgcmVzZXQgcHJvcGVybHkuJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2KCkge1xuICAgIHtcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgICB2YWx1ZVN0YWNrLmxlbmd0aCA9IDA7XG4gICAgICBmaWJlclN0YWNrLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVDdXJzb3I6IGNyZWF0ZUN1cnNvcixcbiAgICBpc0VtcHR5OiBpc0VtcHR5LFxuICAgIHBvcDogcG9wLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgY2hlY2tUaGF0U3RhY2tJc0VtcHR5OiBjaGVja1RoYXRTdGFja0lzRW1wdHksXG4gICAgcmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2OiByZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXZcbiAgfTtcbn07XG5cbnZhciBpbnZva2VHdWFyZGVkQ2FsbGJhY2skMiA9IFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2s7XG52YXIgaGFzQ2F1Z2h0RXJyb3IgPSBSZWFjdEVycm9yVXRpbHMuaGFzQ2F1Z2h0RXJyb3I7XG52YXIgY2xlYXJDYXVnaHRFcnJvciA9IFJlYWN0RXJyb3JVdGlscy5jbGVhckNhdWdodEVycm9yO1xuXG5cbnZhciBkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24gPSB2b2lkIDA7XG52YXIgZGlkV2FyblNldFN0YXRlQ2hpbGRDb250ZXh0ID0gdm9pZCAwO1xudmFyIHdhcm5BYm91dFVwZGF0ZU9uVW5tb3VudGVkID0gdm9pZCAwO1xudmFyIHdhcm5BYm91dEludmFsaWRVcGRhdGVzID0gdm9pZCAwO1xuXG57XG4gIGRpZFdhcm5BYm91dFN0YXRlVHJhbnNpdGlvbiA9IGZhbHNlO1xuICBkaWRXYXJuU2V0U3RhdGVDaGlsZENvbnRleHQgPSBmYWxzZTtcbiAgdmFyIGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudCA9IHt9O1xuXG4gIHdhcm5BYm91dFVwZGF0ZU9uVW5tb3VudGVkID0gZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgLy8gV2Ugc2hvdyB0aGUgd2hvbGUgc3RhY2sgYnV0IGRlZHVwZSBvbiB0aGUgdG9wIGNvbXBvbmVudCdzIG5hbWUgYmVjYXVzZVxuICAgIC8vIHRoZSBwcm9ibGVtYXRpYyBjb2RlIGFsbW9zdCBhbHdheXMgbGllcyBpbnNpZGUgdGhhdCBjb21wb25lbnQuXG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKGZpYmVyKSB8fCAnUmVhY3RDbGFzcyc7XG4gICAgaWYgKGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudFtjb21wb25lbnROYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3YXJuaW5nKGZhbHNlLCBcIkNhbid0IGNhbGwgc2V0U3RhdGUgKG9yIGZvcmNlVXBkYXRlKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiBUaGlzIFwiICsgJ2lzIGEgbm8tb3AsIGJ1dCBpdCBpbmRpY2F0ZXMgYSBtZW1vcnkgbGVhayBpbiB5b3VyIGFwcGxpY2F0aW9uLiBUbyAnICsgJ2ZpeCwgY2FuY2VsIGFsbCBzdWJzY3JpcHRpb25zIGFuZCBhc3luY2hyb25vdXMgdGFza3MgaW4gdGhlICcgKyAnY29tcG9uZW50V2lsbFVubW91bnQgbWV0aG9kLiVzJywgZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcihmaWJlcikpO1xuICAgIGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudFtjb21wb25lbnROYW1lXSA9IHRydWU7XG4gIH07XG5cbiAgd2FybkFib3V0SW52YWxpZFVwZGF0ZXMgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBzd2l0Y2ggKFJlYWN0RGVidWdDdXJyZW50RmliZXIucGhhc2UpIHtcbiAgICAgIGNhc2UgJ2dldENoaWxkQ29udGV4dCc6XG4gICAgICAgIGlmIChkaWRXYXJuU2V0U3RhdGVDaGlsZENvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ3NldFN0YXRlKC4uLik6IENhbm5vdCBjYWxsIHNldFN0YXRlKCkgaW5zaWRlIGdldENoaWxkQ29udGV4dCgpJyk7XG4gICAgICAgIGRpZFdhcm5TZXRTdGF0ZUNoaWxkQ29udGV4dCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVuZGVyJzpcbiAgICAgICAgaWYgKGRpZFdhcm5BYm91dFN0YXRlVHJhbnNpdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnQ2Fubm90IHVwZGF0ZSBkdXJpbmcgYW4gZXhpc3Rpbmcgc3RhdGUgdHJhbnNpdGlvbiAoc3VjaCBhcyB3aXRoaW4gJyArIFwiYHJlbmRlcmAgb3IgYW5vdGhlciBjb21wb25lbnQncyBjb25zdHJ1Y3RvcikuIFJlbmRlciBtZXRob2RzIHNob3VsZCBcIiArICdiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlOyBjb25zdHJ1Y3RvciBzaWRlLWVmZmVjdHMgYXJlICcgKyAnYW4gYW50aS1wYXR0ZXJuLCBidXQgY2FuIGJlIG1vdmVkIHRvIGBjb21wb25lbnRXaWxsTW91bnRgLicpO1xuICAgICAgICBkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG59XG5cbnZhciBSZWFjdEZpYmVyU2NoZWR1bGVyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICB2YXIgc3RhY2sgPSBSZWFjdEZpYmVyU3RhY2soKTtcbiAgdmFyIGhvc3RDb250ZXh0ID0gUmVhY3RGaWJlckhvc3RDb250ZXh0KGNvbmZpZywgc3RhY2spO1xuICB2YXIgbGVnYWN5Q29udGV4dCA9IFJlYWN0RmliZXJMZWdhY3lDb250ZXh0KHN0YWNrKTtcbiAgdmFyIG5ld0NvbnRleHQgPSBSZWFjdEZpYmVyTmV3Q29udGV4dChzdGFjayk7XG4gIHZhciBwb3BIb3N0Q29udGV4dCA9IGhvc3RDb250ZXh0LnBvcEhvc3RDb250ZXh0LFxuICAgICAgcG9wSG9zdENvbnRhaW5lciA9IGhvc3RDb250ZXh0LnBvcEhvc3RDb250YWluZXI7XG4gIHZhciBwb3BUb3BMZXZlbExlZ2FjeUNvbnRleHRPYmplY3QgPSBsZWdhY3lDb250ZXh0LnBvcFRvcExldmVsQ29udGV4dE9iamVjdCxcbiAgICAgIHBvcExlZ2FjeUNvbnRleHRQcm92aWRlciA9IGxlZ2FjeUNvbnRleHQucG9wQ29udGV4dFByb3ZpZGVyO1xuICB2YXIgcG9wUHJvdmlkZXIgPSBuZXdDb250ZXh0LnBvcFByb3ZpZGVyO1xuXG4gIHZhciBoeWRyYXRpb25Db250ZXh0ID0gUmVhY3RGaWJlckh5ZHJhdGlvbkNvbnRleHQoY29uZmlnKTtcblxuICB2YXIgX1JlYWN0RmliZXJCZWdpbldvcmsgPSBSZWFjdEZpYmVyQmVnaW5Xb3JrKGNvbmZpZywgaG9zdENvbnRleHQsIGxlZ2FjeUNvbnRleHQsIG5ld0NvbnRleHQsIGh5ZHJhdGlvbkNvbnRleHQsIHNjaGVkdWxlV29yaywgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciksXG4gICAgICBiZWdpbldvcmsgPSBfUmVhY3RGaWJlckJlZ2luV29yay5iZWdpbldvcms7XG5cbiAgdmFyIF9SZWFjdEZpYmVyQ29tcGxldGVXbyA9IFJlYWN0RmliZXJDb21wbGV0ZVdvcmsoY29uZmlnLCBob3N0Q29udGV4dCwgbGVnYWN5Q29udGV4dCwgbmV3Q29udGV4dCwgaHlkcmF0aW9uQ29udGV4dCksXG4gICAgICBjb21wbGV0ZVdvcmsgPSBfUmVhY3RGaWJlckNvbXBsZXRlV28uY29tcGxldGVXb3JrO1xuXG4gIHZhciBfUmVhY3RGaWJlclVud2luZFdvcmsgPSBSZWFjdEZpYmVyVW53aW5kV29yayhob3N0Q29udGV4dCwgbGVnYWN5Q29udGV4dCwgbmV3Q29udGV4dCwgc2NoZWR1bGVXb3JrLCBpc0FscmVhZHlGYWlsZWRMZWdhY3lFcnJvckJvdW5kYXJ5KSxcbiAgICAgIHRocm93RXhjZXB0aW9uID0gX1JlYWN0RmliZXJVbndpbmRXb3JrLnRocm93RXhjZXB0aW9uLFxuICAgICAgdW53aW5kV29yayA9IF9SZWFjdEZpYmVyVW53aW5kV29yay51bndpbmRXb3JrLFxuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrID0gX1JlYWN0RmliZXJVbndpbmRXb3JrLnVud2luZEludGVycnVwdGVkV29yaztcblxuICB2YXIgX1JlYWN0RmliZXJDb21taXRXb3JrID0gUmVhY3RGaWJlckNvbW1pdFdvcmsoY29uZmlnLCBvbkNvbW1pdFBoYXNlRXJyb3IsIHNjaGVkdWxlV29yaywgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciwgbWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZCwgcmVjYWxjdWxhdGVDdXJyZW50VGltZSksXG4gICAgICBjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMgPSBfUmVhY3RGaWJlckNvbW1pdFdvcmsuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLFxuICAgICAgY29tbWl0UmVzZXRUZXh0Q29udGVudCA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXRSZXNldFRleHRDb250ZW50LFxuICAgICAgY29tbWl0UGxhY2VtZW50ID0gX1JlYWN0RmliZXJDb21taXRXb3JrLmNvbW1pdFBsYWNlbWVudCxcbiAgICAgIGNvbW1pdERlbGV0aW9uID0gX1JlYWN0RmliZXJDb21taXRXb3JrLmNvbW1pdERlbGV0aW9uLFxuICAgICAgY29tbWl0V29yayA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXRXb3JrLFxuICAgICAgY29tbWl0TGlmZUN5Y2xlcyA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXRMaWZlQ3ljbGVzLFxuICAgICAgY29tbWl0RXJyb3JMb2dnaW5nID0gX1JlYWN0RmliZXJDb21taXRXb3JrLmNvbW1pdEVycm9yTG9nZ2luZyxcbiAgICAgIGNvbW1pdEF0dGFjaFJlZiA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXRBdHRhY2hSZWYsXG4gICAgICBjb21taXREZXRhY2hSZWYgPSBfUmVhY3RGaWJlckNvbW1pdFdvcmsuY29tbWl0RGV0YWNoUmVmO1xuXG4gIHZhciBub3cgPSBjb25maWcubm93LFxuICAgICAgc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrID0gY29uZmlnLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxcbiAgICAgIGNhbmNlbERlZmVycmVkQ2FsbGJhY2sgPSBjb25maWcuY2FuY2VsRGVmZXJyZWRDYWxsYmFjayxcbiAgICAgIHByZXBhcmVGb3JDb21taXQgPSBjb25maWcucHJlcGFyZUZvckNvbW1pdCxcbiAgICAgIHJlc2V0QWZ0ZXJDb21taXQgPSBjb25maWcucmVzZXRBZnRlckNvbW1pdDtcblxuICAvLyBSZXByZXNlbnRzIHRoZSBjdXJyZW50IHRpbWUgaW4gbXMuXG5cbiAgdmFyIG9yaWdpbmFsU3RhcnRUaW1lTXMgPSBub3coKTtcbiAgdmFyIG1vc3RSZWNlbnRDdXJyZW50VGltZSA9IG1zVG9FeHBpcmF0aW9uVGltZSgwKTtcbiAgdmFyIG1vc3RSZWNlbnRDdXJyZW50VGltZU1zID0gb3JpZ2luYWxTdGFydFRpbWVNcztcblxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uIGlzIG1vbm90b25pY2FsbHkgaW5jcmVhc2VzLlxuICB2YXIgbGFzdFVuaXF1ZUFzeW5jRXhwaXJhdGlvbiA9IDA7XG5cbiAgLy8gUmVwcmVzZW50cyB0aGUgZXhwaXJhdGlvbiB0aW1lIHRoYXQgaW5jb21pbmcgdXBkYXRlcyBzaG91bGQgdXNlLiAoSWYgdGhpc1xuICAvLyBpcyBOb1dvcmssIHVzZSB0aGUgZGVmYXVsdCBzdHJhdGVneTogYXN5bmMgdXBkYXRlcyBpbiBhc3luYyBtb2RlLCBzeW5jXG4gIC8vIHVwZGF0ZXMgaW4gc3luYyBtb2RlLilcbiAgdmFyIGV4cGlyYXRpb25Db250ZXh0ID0gTm9Xb3JrO1xuXG4gIHZhciBpc1dvcmtpbmcgPSBmYWxzZTtcblxuICAvLyBUaGUgbmV4dCB3b3JrIGluIHByb2dyZXNzIGZpYmVyIHRoYXQgd2UncmUgY3VycmVudGx5IHdvcmtpbmcgb24uXG4gIHZhciBuZXh0VW5pdE9mV29yayA9IG51bGw7XG4gIHZhciBuZXh0Um9vdCA9IG51bGw7XG4gIC8vIFRoZSB0aW1lIGF0IHdoaWNoIHdlJ3JlIGN1cnJlbnRseSByZW5kZXJpbmcgd29yay5cbiAgdmFyIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcblxuICAvLyBUaGUgbmV4dCBmaWJlciB3aXRoIGFuIGVmZmVjdCB0aGF0IHdlJ3JlIGN1cnJlbnRseSBjb21taXR0aW5nLlxuICB2YXIgbmV4dEVmZmVjdCA9IG51bGw7XG5cbiAgdmFyIGlzQ29tbWl0dGluZyA9IGZhbHNlO1xuXG4gIHZhciBpc1Jvb3RSZWFkeUZvckNvbW1pdCA9IGZhbHNlO1xuXG4gIHZhciBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGw7XG5cbiAgLy8gVXNlZCBmb3IgcGVyZm9ybWFuY2UgdHJhY2tpbmcuXG4gIHZhciBpbnRlcnJ1cHRlZEJ5ID0gbnVsbDtcblxuICB2YXIgc3Rhc2hlZFdvcmtJblByb2dyZXNzUHJvcGVydGllcyA9IHZvaWQgMDtcbiAgdmFyIHJlcGxheVVuaXRPZldvcmsgPSB2b2lkIDA7XG4gIHZhciBpc1JlcGxheWluZ0ZhaWxlZFVuaXRPZldvcmsgPSB2b2lkIDA7XG4gIHZhciBvcmlnaW5hbFJlcGxheUVycm9yID0gdm9pZCAwO1xuICB2YXIgcmV0aHJvd09yaWdpbmFsRXJyb3IgPSB2b2lkIDA7XG4gIGlmICh0cnVlICYmIHJlcGxheUZhaWxlZFVuaXRPZldvcmtXaXRoSW52b2tlR3VhcmRlZENhbGxiYWNrKSB7XG4gICAgc3Rhc2hlZFdvcmtJblByb2dyZXNzUHJvcGVydGllcyA9IG51bGw7XG4gICAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gZmFsc2U7XG4gICAgb3JpZ2luYWxSZXBsYXlFcnJvciA9IG51bGw7XG4gICAgcmVwbGF5VW5pdE9mV29yayA9IGZ1bmN0aW9uIChmYWlsZWRVbml0T2ZXb3JrLCBlcnJvciwgaXNBc3luYykge1xuICAgICAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgc3RhdGUgb2YgdGhlIHdvcmstaW4tcHJvZ3Jlc3NcbiAgICAgIGFzc2lnbkZpYmVyUHJvcGVydGllc0luREVWKGZhaWxlZFVuaXRPZldvcmssIHN0YXNoZWRXb3JrSW5Qcm9ncmVzc1Byb3BlcnRpZXMpO1xuICAgICAgc3dpdGNoIChmYWlsZWRVbml0T2ZXb3JrLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgIHBvcEhvc3RDb250YWluZXIoZmFpbGVkVW5pdE9mV29yayk7XG4gICAgICAgICAgcG9wVG9wTGV2ZWxMZWdhY3lDb250ZXh0T2JqZWN0KGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgcG9wSG9zdENvbnRleHQoZmFpbGVkVW5pdE9mV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAgcG9wTGVnYWN5Q29udGV4dFByb3ZpZGVyKGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAgcG9wSG9zdENvbnRhaW5lcihmYWlsZWRVbml0T2ZXb3JrKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICAgICAgcG9wUHJvdmlkZXIoZmFpbGVkVW5pdE9mV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBSZXBsYXkgdGhlIGJlZ2luIHBoYXNlLlxuICAgICAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gdHJ1ZTtcbiAgICAgIG9yaWdpbmFsUmVwbGF5RXJyb3IgPSBlcnJvcjtcbiAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayQyKG51bGwsIHdvcmtMb29wLCBudWxsLCBpc0FzeW5jKTtcbiAgICAgIGlzUmVwbGF5aW5nRmFpbGVkVW5pdE9mV29yayA9IGZhbHNlO1xuICAgICAgb3JpZ2luYWxSZXBsYXlFcnJvciA9IG51bGw7XG4gICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICBjbGVhckNhdWdodEVycm9yKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgYmVnaW4gcGhhc2UgZGlkIG5vdCBmYWlsIHRoZSBzZWNvbmQgdGltZSwgc2V0IHRoaXMgcG9pbnRlclxuICAgICAgICAvLyBiYWNrIHRvIHRoZSBvcmlnaW5hbCB2YWx1ZS5cbiAgICAgICAgbmV4dFVuaXRPZldvcmsgPSBmYWlsZWRVbml0T2ZXb3JrO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0aHJvd09yaWdpbmFsRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBvcmlnaW5hbFJlcGxheUVycm9yO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFN0YWNrKCkge1xuICAgIGlmIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCkge1xuICAgICAgdmFyIGludGVycnVwdGVkV29yayA9IG5leHRVbml0T2ZXb3JrWydyZXR1cm4nXTtcbiAgICAgIHdoaWxlIChpbnRlcnJ1cHRlZFdvcmsgIT09IG51bGwpIHtcbiAgICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGludGVycnVwdGVkV29yayk7XG4gICAgICAgIGludGVycnVwdGVkV29yayA9IGludGVycnVwdGVkV29ya1sncmV0dXJuJ107XG4gICAgICB9XG4gICAgfVxuXG4gICAge1xuICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MuZGlzY2FyZFBlbmRpbmdXYXJuaW5ncygpO1xuICAgICAgc3RhY2suY2hlY2tUaGF0U3RhY2tJc0VtcHR5KCk7XG4gICAgfVxuXG4gICAgbmV4dFJvb3QgPSBudWxsO1xuICAgIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgICBuZXh0VW5pdE9mV29yayA9IG51bGw7XG5cbiAgICBpc1Jvb3RSZWFkeUZvckNvbW1pdCA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tbWl0QWxsSG9zdEVmZmVjdHMoKSB7XG4gICAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgIHtcbiAgICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5zZXRDdXJyZW50RmliZXIobmV4dEVmZmVjdCk7XG4gICAgICB9XG4gICAgICByZWNvcmRFZmZlY3QoKTtcblxuICAgICAgdmFyIGVmZmVjdFRhZyA9IG5leHRFZmZlY3QuZWZmZWN0VGFnO1xuXG4gICAgICBpZiAoZWZmZWN0VGFnICYgQ29udGVudFJlc2V0KSB7XG4gICAgICAgIGNvbW1pdFJlc2V0VGV4dENvbnRlbnQobmV4dEVmZmVjdCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlZmZlY3RUYWcgJiBSZWYpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBuZXh0RWZmZWN0LmFsdGVybmF0ZTtcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICBjb21taXREZXRhY2hSZWYoY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGZvbGxvd2luZyBzd2l0Y2ggc3RhdGVtZW50IGlzIG9ubHkgY29uY2VybmVkIGFib3V0IHBsYWNlbWVudCxcbiAgICAgIC8vIHVwZGF0ZXMsIGFuZCBkZWxldGlvbnMuIFRvIGF2b2lkIG5lZWRpbmcgdG8gYWRkIGEgY2FzZSBmb3IgZXZlcnlcbiAgICAgIC8vIHBvc3NpYmxlIGJpdG1hcCB2YWx1ZSwgd2UgcmVtb3ZlIHRoZSBzZWNvbmRhcnkgZWZmZWN0cyBmcm9tIHRoZVxuICAgICAgLy8gZWZmZWN0IHRhZyBhbmQgc3dpdGNoIG9uIHRoYXQgdmFsdWUuXG4gICAgICB2YXIgcHJpbWFyeUVmZmVjdFRhZyA9IGVmZmVjdFRhZyAmIChQbGFjZW1lbnQgfCBVcGRhdGUgfCBEZWxldGlvbik7XG4gICAgICBzd2l0Y2ggKHByaW1hcnlFZmZlY3RUYWcpIHtcbiAgICAgICAgY2FzZSBQbGFjZW1lbnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tbWl0UGxhY2VtZW50KG5leHRFZmZlY3QpO1xuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIFwicGxhY2VtZW50XCIgZnJvbSBlZmZlY3QgdGFnIHNvIHRoYXQgd2Uga25vdyB0aGF0IHRoaXMgaXMgaW5zZXJ0ZWQsIGJlZm9yZVxuICAgICAgICAgICAgLy8gYW55IGxpZmUtY3ljbGVzIGxpa2UgY29tcG9uZW50RGlkTW91bnQgZ2V0cyBjYWxsZWQuXG4gICAgICAgICAgICAvLyBUT0RPOiBmaW5kRE9NTm9kZSBkb2Vzbid0IHJlbHkgb24gdGhpcyBhbnkgbW9yZSBidXQgaXNNb3VudGVkXG4gICAgICAgICAgICAvLyBkb2VzIGFuZCBpc01vdW50ZWQgaXMgZGVwcmVjYXRlZCBhbnl3YXkgc28gd2Ugc2hvdWxkIGJlIGFibGVcbiAgICAgICAgICAgIC8vIHRvIGtpbGwgdGhpcy5cbiAgICAgICAgICAgIG5leHRFZmZlY3QuZWZmZWN0VGFnICY9IH5QbGFjZW1lbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgUGxhY2VtZW50QW5kVXBkYXRlOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIFBsYWNlbWVudFxuICAgICAgICAgICAgY29tbWl0UGxhY2VtZW50KG5leHRFZmZlY3QpO1xuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIFwicGxhY2VtZW50XCIgZnJvbSBlZmZlY3QgdGFnIHNvIHRoYXQgd2Uga25vdyB0aGF0IHRoaXMgaXMgaW5zZXJ0ZWQsIGJlZm9yZVxuICAgICAgICAgICAgLy8gYW55IGxpZmUtY3ljbGVzIGxpa2UgY29tcG9uZW50RGlkTW91bnQgZ2V0cyBjYWxsZWQuXG4gICAgICAgICAgICBuZXh0RWZmZWN0LmVmZmVjdFRhZyAmPSB+UGxhY2VtZW50O1xuXG4gICAgICAgICAgICAvLyBVcGRhdGVcbiAgICAgICAgICAgIHZhciBfY3VycmVudCA9IG5leHRFZmZlY3QuYWx0ZXJuYXRlO1xuICAgICAgICAgICAgY29tbWl0V29yayhfY3VycmVudCwgbmV4dEVmZmVjdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgVXBkYXRlOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfY3VycmVudDIgPSBuZXh0RWZmZWN0LmFsdGVybmF0ZTtcbiAgICAgICAgICAgIGNvbW1pdFdvcmsoX2N1cnJlbnQyLCBuZXh0RWZmZWN0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBEZWxldGlvbjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21taXREZWxldGlvbihuZXh0RWZmZWN0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5leHRFZmZlY3QgPSBuZXh0RWZmZWN0Lm5leHRFZmZlY3Q7XG4gICAgfVxuXG4gICAge1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5yZXNldEN1cnJlbnRGaWJlcigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZWN5Y2xlcygpIHtcbiAgICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGVmZmVjdFRhZyA9IG5leHRFZmZlY3QuZWZmZWN0VGFnO1xuXG4gICAgICBpZiAoZWZmZWN0VGFnICYgU25hcHNob3QpIHtcbiAgICAgICAgcmVjb3JkRWZmZWN0KCk7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICAgIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyhjdXJyZW50LCBuZXh0RWZmZWN0KTtcbiAgICAgIH1cblxuICAgICAgLy8gRG9uJ3QgY2xlYW51cCBlZmZlY3RzIHlldDtcbiAgICAgIC8vIFRoaXMgd2lsbCBiZSBkb25lIGJ5IGNvbW1pdEFsbExpZmVDeWNsZXMoKVxuICAgICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21taXRBbGxMaWZlQ3ljbGVzKGZpbmlzaGVkUm9vdCwgY3VycmVudFRpbWUsIGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lKSB7XG4gICAge1xuICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MuZmx1c2hQZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MoKTtcblxuICAgICAgaWYgKHdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzKSB7XG4gICAgICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoUGVuZGluZ0RlcHJlY2F0aW9uV2FybmluZ3MoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgIHZhciBlZmZlY3RUYWcgPSBuZXh0RWZmZWN0LmVmZmVjdFRhZztcblxuICAgICAgaWYgKGVmZmVjdFRhZyAmIChVcGRhdGUgfCBDYWxsYmFjaykpIHtcbiAgICAgICAgcmVjb3JkRWZmZWN0KCk7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICAgIGNvbW1pdExpZmVDeWNsZXMoZmluaXNoZWRSb290LCBjdXJyZW50LCBuZXh0RWZmZWN0LCBjdXJyZW50VGltZSwgY29tbWl0dGVkRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWZmZWN0VGFnICYgRXJyTG9nKSB7XG4gICAgICAgIGNvbW1pdEVycm9yTG9nZ2luZyhuZXh0RWZmZWN0LCBvblVuY2F1Z2h0RXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWZmZWN0VGFnICYgUmVmKSB7XG4gICAgICAgIHJlY29yZEVmZmVjdCgpO1xuICAgICAgICBjb21taXRBdHRhY2hSZWYobmV4dEVmZmVjdCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXh0ID0gbmV4dEVmZmVjdC5uZXh0RWZmZWN0O1xuICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgY2xlYW4gdGhlc2UgdXAgc28gdGhhdCB3ZSBkb24ndCBhY2NpZGVudGFsbHkga2VlcCB0aGVtLlxuICAgICAgLy8gSSdtIG5vdCBhY3R1YWxseSBzdXJlIHRoaXMgbWF0dGVycyBiZWNhdXNlIHdlIGNhbid0IHJlc2V0IGZpcnN0RWZmZWN0XG4gICAgICAvLyBhbmQgbGFzdEVmZmVjdCBzaW5jZSB0aGV5J3JlIG9uIGV2ZXJ5IG5vZGUsIG5vdCBqdXN0IHRoZSBlZmZlY3RmdWxcbiAgICAgIC8vIG9uZXMuIFNvIHdlIGhhdmUgdG8gY2xlYW4gZXZlcnl0aGluZyBhcyB3ZSByZXVzZSBub2RlcyBhbnl3YXkuXG4gICAgICBuZXh0RWZmZWN0Lm5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgcmVzZXQgdGhlIGVmZmVjdFRhZyBoZXJlIHNvIHRoYXQgd2UgY2FuIHJlbHkgb24gZWZmZWN0XG4gICAgICAvLyB0YWdzIHRvIHJlYXNvbiBhYm91dCB0aGUgY3VycmVudCBsaWZlLWN5Y2xlLlxuICAgICAgbmV4dEVmZmVjdCA9IG5leHQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeShpbnN0YW5jZSkge1xuICAgIHJldHVybiBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCAhPT0gbnVsbCAmJiBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5oYXMoaW5zdGFuY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZChpbnN0YW5jZSkge1xuICAgIGlmIChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9PT0gbnVsbCkge1xuICAgICAgbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBuZXcgU2V0KFtpbnN0YW5jZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5hZGQoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1pdFJvb3QoZmluaXNoZWRXb3JrKSB7XG4gICAgaXNXb3JraW5nID0gdHJ1ZTtcbiAgICBpc0NvbW1pdHRpbmcgPSB0cnVlO1xuICAgIHN0YXJ0Q29tbWl0VGltZXIoKTtcblxuICAgIHZhciByb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAhKHJvb3QuY3VycmVudCAhPT0gZmluaXNoZWRXb3JrKSA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBjb21taXQgdGhlIHNhbWUgdHJlZSBhcyBiZWZvcmUuIFRoaXMgaXMgcHJvYmFibHkgYSBidWcgcmVsYXRlZCB0byB0aGUgcmV0dXJuIGZpZWxkLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgIHZhciBjb21taXR0ZWRFeHBpcmF0aW9uVGltZSA9IHJvb3QucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lO1xuICAgICEoY29tbWl0dGVkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yaykgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29tbWl0IGFuIGluY29tcGxldGUgcm9vdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICByb290LnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcblxuICAgIHZhciBjdXJyZW50VGltZSA9IHJlY2FsY3VsYXRlQ3VycmVudFRpbWUoKTtcblxuICAgIC8vIFJlc2V0IHRoaXMgdG8gbnVsbCBiZWZvcmUgY2FsbGluZyBsaWZlY3ljbGVzXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG5cbiAgICB2YXIgZmlyc3RFZmZlY3QgPSB2b2lkIDA7XG4gICAgaWYgKGZpbmlzaGVkV29yay5lZmZlY3RUYWcgPiBQZXJmb3JtZWRXb3JrKSB7XG4gICAgICAvLyBBIGZpYmVyJ3MgZWZmZWN0IGxpc3QgY29uc2lzdHMgb25seSBvZiBpdHMgY2hpbGRyZW4sIG5vdCBpdHNlbGYuIFNvIGlmXG4gICAgICAvLyB0aGUgcm9vdCBoYXMgYW4gZWZmZWN0LCB3ZSBuZWVkIHRvIGFkZCBpdCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LiBUaGVcbiAgICAgIC8vIHJlc3VsdGluZyBsaXN0IGlzIHRoZSBzZXQgdGhhdCB3b3VsZCBiZWxvbmcgdG8gdGhlIHJvb3QncyBwYXJlbnQsIGlmXG4gICAgICAvLyBpdCBoYWQgb25lOyB0aGF0IGlzLCBhbGwgdGhlIGVmZmVjdHMgaW4gdGhlIHRyZWUgaW5jbHVkaW5nIHRoZSByb290LlxuICAgICAgaWYgKGZpbmlzaGVkV29yay5sYXN0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIGZpbmlzaGVkV29yay5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpcnN0RWZmZWN0ID0gZmluaXNoZWRXb3JrLmZpcnN0RWZmZWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3RFZmZlY3QgPSBmaW5pc2hlZFdvcms7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlIGlzIG5vIGVmZmVjdCBvbiB0aGUgcm9vdC5cbiAgICAgIGZpcnN0RWZmZWN0ID0gZmluaXNoZWRXb3JrLmZpcnN0RWZmZWN0O1xuICAgIH1cblxuICAgIHByZXBhcmVGb3JDb21taXQocm9vdC5jb250YWluZXJJbmZvKTtcblxuICAgIC8vIEludm9rZSBpbnN0YW5jZXMgb2YgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgYmVmb3JlIG11dGF0aW9uLlxuICAgIG5leHRFZmZlY3QgPSBmaXJzdEVmZmVjdDtcbiAgICBzdGFydENvbW1pdFNuYXBzaG90RWZmZWN0c1RpbWVyKCk7XG4gICAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgIHZhciBkaWRFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIGVycm9yID0gdm9pZCAwO1xuICAgICAge1xuICAgICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2skMihudWxsLCBjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVjeWNsZXMsIG51bGwpO1xuICAgICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICAgIGRpZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRpZEVycm9yKSB7XG4gICAgICAgICEobmV4dEVmZmVjdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgaGF2ZSBuZXh0IGVmZmVjdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgb25Db21taXRQaGFzZUVycm9yKG5leHRFZmZlY3QsIGVycm9yKTtcbiAgICAgICAgLy8gQ2xlYW4tdXBcbiAgICAgICAgaWYgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgICBuZXh0RWZmZWN0ID0gbmV4dEVmZmVjdC5uZXh0RWZmZWN0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHN0b3BDb21taXRTbmFwc2hvdEVmZmVjdHNUaW1lcigpO1xuXG4gICAgLy8gQ29tbWl0IGFsbCB0aGUgc2lkZS1lZmZlY3RzIHdpdGhpbiBhIHRyZWUuIFdlJ2xsIGRvIHRoaXMgaW4gdHdvIHBhc3Nlcy5cbiAgICAvLyBUaGUgZmlyc3QgcGFzcyBwZXJmb3JtcyBhbGwgdGhlIGhvc3QgaW5zZXJ0aW9ucywgdXBkYXRlcywgZGVsZXRpb25zIGFuZFxuICAgIC8vIHJlZiB1bm1vdW50cy5cbiAgICBuZXh0RWZmZWN0ID0gZmlyc3RFZmZlY3Q7XG4gICAgc3RhcnRDb21taXRIb3N0RWZmZWN0c1RpbWVyKCk7XG4gICAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgIHZhciBfZGlkRXJyb3IgPSBmYWxzZTtcbiAgICAgIHZhciBfZXJyb3IgPSB2b2lkIDA7XG4gICAgICB7XG4gICAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayQyKG51bGwsIGNvbW1pdEFsbEhvc3RFZmZlY3RzLCBudWxsKTtcbiAgICAgICAgaWYgKGhhc0NhdWdodEVycm9yKCkpIHtcbiAgICAgICAgICBfZGlkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIF9lcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKF9kaWRFcnJvcikge1xuICAgICAgICAhKG5leHRFZmZlY3QgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIGhhdmUgbmV4dCBlZmZlY3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgIG9uQ29tbWl0UGhhc2VFcnJvcihuZXh0RWZmZWN0LCBfZXJyb3IpO1xuICAgICAgICAvLyBDbGVhbi11cFxuICAgICAgICBpZiAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBuZXh0RWZmZWN0Lm5leHRFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc3RvcENvbW1pdEhvc3RFZmZlY3RzVGltZXIoKTtcblxuICAgIHJlc2V0QWZ0ZXJDb21taXQocm9vdC5jb250YWluZXJJbmZvKTtcblxuICAgIC8vIFRoZSB3b3JrLWluLXByb2dyZXNzIHRyZWUgaXMgbm93IHRoZSBjdXJyZW50IHRyZWUuIFRoaXMgbXVzdCBjb21lIGFmdGVyXG4gICAgLy8gdGhlIGZpcnN0IHBhc3Mgb2YgdGhlIGNvbW1pdCBwaGFzZSwgc28gdGhhdCB0aGUgcHJldmlvdXMgdHJlZSBpcyBzdGlsbFxuICAgIC8vIGN1cnJlbnQgZHVyaW5nIGNvbXBvbmVudFdpbGxVbm1vdW50LCBidXQgYmVmb3JlIHRoZSBzZWNvbmQgcGFzcywgc28gdGhhdFxuICAgIC8vIHRoZSBmaW5pc2hlZCB3b3JrIGlzIGN1cnJlbnQgZHVyaW5nIGNvbXBvbmVudERpZE1vdW50L1VwZGF0ZS5cbiAgICByb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG5cbiAgICAvLyBJbiB0aGUgc2Vjb25kIHBhc3Mgd2UnbGwgcGVyZm9ybSBhbGwgbGlmZS1jeWNsZXMgYW5kIHJlZiBjYWxsYmFja3MuXG4gICAgLy8gTGlmZS1jeWNsZXMgaGFwcGVuIGFzIGEgc2VwYXJhdGUgcGFzcyBzbyB0aGF0IGFsbCBwbGFjZW1lbnRzLCB1cGRhdGVzLFxuICAgIC8vIGFuZCBkZWxldGlvbnMgaW4gdGhlIGVudGlyZSB0cmVlIGhhdmUgYWxyZWFkeSBiZWVuIGludm9rZWQuXG4gICAgLy8gVGhpcyBwYXNzIGFsc28gdHJpZ2dlcnMgYW55IHJlbmRlcmVyLXNwZWNpZmljIGluaXRpYWwgZWZmZWN0cy5cbiAgICBuZXh0RWZmZWN0ID0gZmlyc3RFZmZlY3Q7XG4gICAgc3RhcnRDb21taXRMaWZlQ3ljbGVzVGltZXIoKTtcbiAgICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIF9kaWRFcnJvcjIgPSBmYWxzZTtcbiAgICAgIHZhciBfZXJyb3IyID0gdm9pZCAwO1xuICAgICAge1xuICAgICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2skMihudWxsLCBjb21taXRBbGxMaWZlQ3ljbGVzLCBudWxsLCByb290LCBjdXJyZW50VGltZSwgY29tbWl0dGVkRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICAgIF9kaWRFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgIF9lcnJvcjIgPSBjbGVhckNhdWdodEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChfZGlkRXJyb3IyKSB7XG4gICAgICAgICEobmV4dEVmZmVjdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgaGF2ZSBuZXh0IGVmZmVjdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgb25Db21taXRQaGFzZUVycm9yKG5leHRFZmZlY3QsIF9lcnJvcjIpO1xuICAgICAgICBpZiAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBuZXh0RWZmZWN0Lm5leHRFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpc0NvbW1pdHRpbmcgPSBmYWxzZTtcbiAgICBpc1dvcmtpbmcgPSBmYWxzZTtcbiAgICBzdG9wQ29tbWl0TGlmZUN5Y2xlc1RpbWVyKCk7XG4gICAgc3RvcENvbW1pdFRpbWVyKCk7XG4gICAgaWYgKHR5cGVvZiBvbkNvbW1pdFJvb3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uQ29tbWl0Um9vdChmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKTtcbiAgICB9XG4gICAgaWYgKHRydWUgJiYgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgICAgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbC5vbkNvbW1pdFdvcmsoZmluaXNoZWRXb3JrKTtcbiAgICB9XG5cbiAgICB2YXIgcmVtYWluaW5nVGltZSA9IHJvb3QuY3VycmVudC5leHBpcmF0aW9uVGltZTtcbiAgICBpZiAocmVtYWluaW5nVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgICAvLyBJZiB0aGVyZSdzIG5vIHJlbWFpbmluZyB3b3JrLCB3ZSBjYW4gY2xlYXIgdGhlIHNldCBvZiBhbHJlYWR5IGZhaWxlZFxuICAgICAgLy8gZXJyb3IgYm91bmRhcmllcy5cbiAgICAgIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHJlbWFpbmluZ1RpbWU7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldEV4cGlyYXRpb25UaW1lKHdvcmtJblByb2dyZXNzLCByZW5kZXJUaW1lKSB7XG4gICAgaWYgKHJlbmRlclRpbWUgIT09IE5ldmVyICYmIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID09PSBOZXZlcikge1xuICAgICAgLy8gVGhlIGNoaWxkcmVuIG9mIHRoaXMgY29tcG9uZW50IGFyZSBoaWRkZW4uIERvbid0IGJ1YmJsZSB0aGVpclxuICAgICAgLy8gZXhwaXJhdGlvbiB0aW1lcy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgcGVuZGluZyB1cGRhdGVzLlxuICAgIHZhciBuZXdFeHBpcmF0aW9uVGltZSA9IGdldFVwZGF0ZUV4cGlyYXRpb25UaW1lKHdvcmtJblByb2dyZXNzKTtcblxuICAgIC8vIFRPRE86IENhbGxzIG5lZWQgdG8gdmlzaXQgc3RhdGVOb2RlXG5cbiAgICAvLyBCdWJibGUgdXAgdGhlIGVhcmxpZXN0IGV4cGlyYXRpb24gdGltZS5cbiAgICB2YXIgY2hpbGQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICB3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5leHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrICYmIChuZXdFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IG5ld0V4cGlyYXRpb25UaW1lID4gY2hpbGQuZXhwaXJhdGlvblRpbWUpKSB7XG4gICAgICAgIG5ld0V4cGlyYXRpb25UaW1lID0gY2hpbGQuZXhwaXJhdGlvblRpbWU7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gbmV3RXhwaXJhdGlvblRpbWU7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wbGV0ZVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpIHtcbiAgICAvLyBBdHRlbXB0IHRvIGNvbXBsZXRlIHRoZSBjdXJyZW50IHVuaXQgb2Ygd29yaywgdGhlbiBtb3ZlIHRvIHRoZVxuICAgIC8vIG5leHQgc2libGluZy4gSWYgdGhlcmUgYXJlIG5vIG1vcmUgc2libGluZ3MsIHJldHVybiB0byB0aGVcbiAgICAvLyBwYXJlbnQgZmliZXIuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIC8vIFRoZSBjdXJyZW50LCBmbHVzaGVkLCBzdGF0ZSBvZiB0aGlzIGZpYmVyIGlzIHRoZSBhbHRlcm5hdGUuXG4gICAgICAvLyBJZGVhbGx5IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhpcywgYnV0IHJlbHlpbmcgb24gaXQgaGVyZVxuICAgICAgLy8gbWVhbnMgdGhhdCB3ZSBkb24ndCBuZWVkIGFuIGFkZGl0aW9uYWwgZmllbGQgb24gdGhlIHdvcmsgaW5cbiAgICAgIC8vIHByb2dyZXNzLlxuICAgICAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gICAgICB7XG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuc2V0Q3VycmVudEZpYmVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldHVybkZpYmVyID0gd29ya0luUHJvZ3Jlc3NbJ3JldHVybiddO1xuICAgICAgdmFyIHNpYmxpbmdGaWJlciA9IHdvcmtJblByb2dyZXNzLnNpYmxpbmc7XG5cbiAgICAgIGlmICgod29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICYgSW5jb21wbGV0ZSkgPT09IE5vRWZmZWN0KSB7XG4gICAgICAgIC8vIFRoaXMgZmliZXIgY29tcGxldGVkLlxuICAgICAgICB2YXIgbmV4dCA9IGNvbXBsZXRlV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgc3RvcFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHJlc2V0RXhwaXJhdGlvblRpbWUod29ya0luUHJvZ3Jlc3MsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgIHtcbiAgICAgICAgICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLnJlc2V0Q3VycmVudEZpYmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0b3BXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIGlmICh0cnVlICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wpIHtcbiAgICAgICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25Db21wbGV0ZVdvcmsod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiBjb21wbGV0aW5nIHRoaXMgd29yayBzcGF3bmVkIG5ldyB3b3JrLCBkbyB0aGF0IG5leHQuIFdlJ2xsIGNvbWVcbiAgICAgICAgICAvLyBiYWNrIGhlcmUgYWdhaW4uXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0dXJuRmliZXIgIT09IG51bGwgJiZcbiAgICAgICAgLy8gRG8gbm90IGFwcGVuZCBlZmZlY3RzIHRvIHBhcmVudHMgaWYgYSBzaWJsaW5nIGZhaWxlZCB0byBjb21wbGV0ZVxuICAgICAgICAocmV0dXJuRmliZXIuZWZmZWN0VGFnICYgSW5jb21wbGV0ZSkgPT09IE5vRWZmZWN0KSB7XG4gICAgICAgICAgLy8gQXBwZW5kIGFsbCB0aGUgZWZmZWN0cyBvZiB0aGUgc3VidHJlZSBhbmQgdGhpcyBmaWJlciBvbnRvIHRoZSBlZmZlY3RcbiAgICAgICAgICAvLyBsaXN0IG9mIHRoZSBwYXJlbnQuIFRoZSBjb21wbGV0aW9uIG9yZGVyIG9mIHRoZSBjaGlsZHJlbiBhZmZlY3RzIHRoZVxuICAgICAgICAgIC8vIHNpZGUtZWZmZWN0IG9yZGVyLlxuICAgICAgICAgIGlmIChyZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuRmliZXIuZmlyc3RFZmZlY3QgPSB3b3JrSW5Qcm9ncmVzcy5maXJzdEVmZmVjdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLmxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXR1cm5GaWJlci5sYXN0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QubmV4dEVmZmVjdCA9IHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IHdvcmtJblByb2dyZXNzLmxhc3RFZmZlY3Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgdGhpcyBmaWJlciBoYWQgc2lkZS1lZmZlY3RzLCB3ZSBhcHBlbmQgaXQgQUZURVIgdGhlIGNoaWxkcmVuJ3NcbiAgICAgICAgICAvLyBzaWRlLWVmZmVjdHMuIFdlIGNhbiBwZXJmb3JtIGNlcnRhaW4gc2lkZS1lZmZlY3RzIGVhcmxpZXIgaWZcbiAgICAgICAgICAvLyBuZWVkZWQsIGJ5IGRvaW5nIG11bHRpcGxlIHBhc3NlcyBvdmVyIHRoZSBlZmZlY3QgbGlzdC4gV2UgZG9uJ3Qgd2FudFxuICAgICAgICAgIC8vIHRvIHNjaGVkdWxlIG91ciBvd24gc2lkZS1lZmZlY3Qgb24gb3VyIG93biBsaXN0IGJlY2F1c2UgaWYgZW5kIHVwXG4gICAgICAgICAgLy8gcmV1c2luZyBjaGlsZHJlbiB3ZSdsbCBzY2hlZHVsZSB0aGlzIGVmZmVjdCBvbnRvIGl0c2VsZiBzaW5jZSB3ZSdyZVxuICAgICAgICAgIC8vIGF0IHRoZSBlbmQuXG4gICAgICAgICAgdmFyIGVmZmVjdFRhZyA9IHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZztcbiAgICAgICAgICAvLyBTa2lwIGJvdGggTm9Xb3JrIGFuZCBQZXJmb3JtZWRXb3JrIHRhZ3Mgd2hlbiBjcmVhdGluZyB0aGUgZWZmZWN0IGxpc3QuXG4gICAgICAgICAgLy8gUGVyZm9ybWVkV29yayBlZmZlY3QgaXMgcmVhZCBieSBSZWFjdCBEZXZUb29scyBidXQgc2hvdWxkbid0IGJlIGNvbW1pdHRlZC5cbiAgICAgICAgICBpZiAoZWZmZWN0VGFnID4gUGVyZm9ybWVkV29yaykge1xuICAgICAgICAgICAgaWYgKHJldHVybkZpYmVyLmxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdC5uZXh0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cnVlICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wpIHtcbiAgICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uQ29tcGxldGVXb3JrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaWJsaW5nRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBtb3JlIHdvcmsgdG8gZG8gaW4gdGhpcyByZXR1cm5GaWJlciwgZG8gdGhhdCBuZXh0LlxuICAgICAgICAgIHJldHVybiBzaWJsaW5nRmliZXI7XG4gICAgICAgIH0gZWxzZSBpZiAocmV0dXJuRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIG1vcmUgd29yayBpbiB0aGlzIHJldHVybkZpYmVyLiBDb21wbGV0ZSB0aGUgcmV0dXJuRmliZXIuXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXZSd2ZSByZWFjaGVkIHRoZSByb290LlxuICAgICAgICAgIGlzUm9vdFJlYWR5Rm9yQ29tbWl0ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBmaWJlciBkaWQgbm90IGNvbXBsZXRlIGJlY2F1c2Ugc29tZXRoaW5nIHRocmV3LiBQb3AgdmFsdWVzIG9mZlxuICAgICAgICAvLyB0aGUgc3RhY2sgd2l0aG91dCBlbnRlcmluZyB0aGUgY29tcGxldGUgcGhhc2UuIElmIHRoaXMgaXMgYSBib3VuZGFyeSxcbiAgICAgICAgLy8gY2FwdHVyZSB2YWx1ZXMgaWYgcG9zc2libGUuXG4gICAgICAgIHZhciBfbmV4dCA9IHVud2luZFdvcmsod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAvLyBCZWNhdXNlIHRoaXMgZmliZXIgZGlkIG5vdCBjb21wbGV0ZSwgZG9uJ3QgcmVzZXQgaXRzIGV4cGlyYXRpb24gdGltZS5cbiAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmIERpZENhcHR1cmUpIHtcbiAgICAgICAgICAvLyBSZXN0YXJ0aW5nIGFuIGVycm9yIGJvdW5kYXJ5XG4gICAgICAgICAgc3RvcEZhaWxlZFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RvcFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cblxuICAgICAgICB7XG4gICAgICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5yZXNldEN1cnJlbnRGaWJlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RvcFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgaWYgKHRydWUgJiYgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgICAgICAgICAgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbC5vbkNvbXBsZXRlV29yayh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIGNvbXBsZXRpbmcgdGhpcyB3b3JrIHNwYXduZWQgbmV3IHdvcmssIGRvIHRoYXQgbmV4dC4gV2UnbGwgY29tZVxuICAgICAgICAgIC8vIGJhY2sgaGVyZSBhZ2Fpbi5cbiAgICAgICAgICAvLyBTaW5jZSB3ZSdyZSByZXN0YXJ0aW5nLCByZW1vdmUgYW55dGhpbmcgdGhhdCBpcyBub3QgYSBob3N0IGVmZmVjdFxuICAgICAgICAgIC8vIGZyb20gdGhlIGVmZmVjdCB0YWcuXG4gICAgICAgICAgX25leHQuZWZmZWN0VGFnICY9IEhvc3RFZmZlY3RNYXNrO1xuICAgICAgICAgIHJldHVybiBfbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXR1cm5GaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIE1hcmsgdGhlIHBhcmVudCBmaWJlciBhcyBpbmNvbXBsZXRlIGFuZCBjbGVhciBpdHMgZWZmZWN0IGxpc3QuXG4gICAgICAgICAgcmV0dXJuRmliZXIuZmlyc3RFZmZlY3QgPSByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gbnVsbDtcbiAgICAgICAgICByZXR1cm5GaWJlci5lZmZlY3RUYWcgfD0gSW5jb21wbGV0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cnVlICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wpIHtcbiAgICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uQ29tcGxldGVXb3JrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaWJsaW5nRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBtb3JlIHdvcmsgdG8gZG8gaW4gdGhpcyByZXR1cm5GaWJlciwgZG8gdGhhdCBuZXh0LlxuICAgICAgICAgIHJldHVybiBzaWJsaW5nRmliZXI7XG4gICAgICAgIH0gZWxzZSBpZiAocmV0dXJuRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIG1vcmUgd29yayBpbiB0aGlzIHJldHVybkZpYmVyLiBDb21wbGV0ZSB0aGUgcmV0dXJuRmliZXIuXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdpdGhvdXQgdGhpcyBleHBsaWNpdCBudWxsIHJldHVybiBGbG93IGNvbXBsYWlucyBvZiBpbnZhbGlkIHJldHVybiB0eXBlXG4gICAgLy8gVE9ETyBSZW1vdmUgdGhlIGFib3ZlIHdoaWxlKHRydWUpIGxvb3BcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5yZWFjaGFibGVcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1Vbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQsIGZsdXNoZWQsIHN0YXRlIG9mIHRoaXMgZmliZXIgaXMgdGhlIGFsdGVybmF0ZS5cbiAgICAvLyBJZGVhbGx5IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhpcywgYnV0IHJlbHlpbmcgb24gaXQgaGVyZVxuICAgIC8vIG1lYW5zIHRoYXQgd2UgZG9uJ3QgbmVlZCBhbiBhZGRpdGlvbmFsIGZpZWxkIG9uIHRoZSB3b3JrIGluXG4gICAgLy8gcHJvZ3Jlc3MuXG4gICAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG5cbiAgICAvLyBTZWUgaWYgYmVnaW5uaW5nIHRoaXMgd29yayBzcGF3bnMgbW9yZSB3b3JrLlxuICAgIHN0YXJ0V29ya1RpbWVyKHdvcmtJblByb2dyZXNzKTtcbiAgICB7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLnNldEN1cnJlbnRGaWJlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKHRydWUgJiYgcmVwbGF5RmFpbGVkVW5pdE9mV29ya1dpdGhJbnZva2VHdWFyZGVkQ2FsbGJhY2spIHtcbiAgICAgIHN0YXNoZWRXb3JrSW5Qcm9ncmVzc1Byb3BlcnRpZXMgPSBhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFVihzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gYmVnaW5Xb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIHtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIucmVzZXRDdXJyZW50RmliZXIoKTtcbiAgICAgIGlmIChpc1JlcGxheWluZ0ZhaWxlZFVuaXRPZldvcmspIHtcbiAgICAgICAgLy8gQ3VycmVudGx5IHJlcGxheWluZyBhIGZhaWxlZCB1bml0IG9mIHdvcmsuIFRoaXMgc2hvdWxkIGJlIHVucmVhY2hhYmxlLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSByZW5kZXIgcGhhc2UgaXMgbWVhbnQgdG8gYmUgaWRlbXBvdGVudCwgYW5kIGl0IHNob3VsZFxuICAgICAgICAvLyBoYXZlIHRocm93biBhZ2Fpbi4gU2luY2UgaXQgZGlkbid0LCByZXRocm93IHRoZSBvcmlnaW5hbCBlcnJvciwgc29cbiAgICAgICAgLy8gUmVhY3QncyBpbnRlcm5hbCBzdGFjayBpcyBub3QgbWlzYWxpZ25lZC5cbiAgICAgICAgcmV0aHJvd09yaWdpbmFsRXJyb3IoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRydWUgJiYgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgICAgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbC5vbkJlZ2luV29yayh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgIC8vIElmIHRoaXMgZG9lc24ndCBzcGF3biBuZXcgd29yaywgY29tcGxldGUgdGhlIGN1cnJlbnQgd29yay5cbiAgICAgIG5leHQgPSBjb21wbGV0ZVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICBmdW5jdGlvbiB3b3JrTG9vcChpc0FzeW5jKSB7XG4gICAgaWYgKCFpc0FzeW5jKSB7XG4gICAgICAvLyBGbHVzaCBhbGwgZXhwaXJlZCB3b3JrLlxuICAgICAgd2hpbGUgKG5leHRVbml0T2ZXb3JrICE9PSBudWxsKSB7XG4gICAgICAgIG5leHRVbml0T2ZXb3JrID0gcGVyZm9ybVVuaXRPZldvcmsobmV4dFVuaXRPZldvcmspO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGbHVzaCBhc3luY2hyb25vdXMgd29yayB1bnRpbCB0aGUgZGVhZGxpbmUgcnVucyBvdXQgb2YgdGltZS5cbiAgICAgIHdoaWxlIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCAmJiAhc2hvdWxkWWllbGQoKSkge1xuICAgICAgICBuZXh0VW5pdE9mV29yayA9IHBlcmZvcm1Vbml0T2ZXb3JrKG5leHRVbml0T2ZXb3JrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJSb290KHJvb3QsIGV4cGlyYXRpb25UaW1lLCBpc0FzeW5jKSB7XG4gICAgISFpc1dvcmtpbmcgPyBpbnZhcmlhbnQoZmFsc2UsICdyZW5kZXJSb290IHdhcyBjYWxsZWQgcmVjdXJzaXZlbHkuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgaXNXb3JraW5nID0gdHJ1ZTtcblxuICAgIC8vIENoZWNrIGlmIHdlJ3JlIHN0YXJ0aW5nIGZyb20gYSBmcmVzaCBzdGFjaywgb3IgaWYgd2UncmUgcmVzdW1pbmcgZnJvbVxuICAgIC8vIHByZXZpb3VzbHkgeWllbGRlZCB3b3JrLlxuICAgIGlmIChleHBpcmF0aW9uVGltZSAhPT0gbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lIHx8IHJvb3QgIT09IG5leHRSb290IHx8IG5leHRVbml0T2ZXb3JrID09PSBudWxsKSB7XG4gICAgICAvLyBSZXNldCB0aGUgc3RhY2sgYW5kIHN0YXJ0IHdvcmtpbmcgZnJvbSB0aGUgcm9vdC5cbiAgICAgIHJlc2V0U3RhY2soKTtcbiAgICAgIG5leHRSb290ID0gcm9vdDtcbiAgICAgIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgICAgbmV4dFVuaXRPZldvcmsgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhuZXh0Um9vdC5jdXJyZW50LCBudWxsLCBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gICAgfVxuXG4gICAgdmFyIGRpZEZhdGFsID0gZmFsc2U7XG5cbiAgICBzdGFydFdvcmtMb29wVGltZXIobmV4dFVuaXRPZldvcmspO1xuXG4gICAgZG8ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgd29ya0xvb3AoaXNBc3luYyk7XG4gICAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSkge1xuICAgICAgICBpZiAobmV4dFVuaXRPZldvcmsgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgZmF0YWwgZXJyb3IuXG4gICAgICAgICAgZGlkRmF0YWwgPSB0cnVlO1xuICAgICAgICAgIG9uVW5jYXVnaHRFcnJvcih0aHJvd25WYWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJ1ZSAmJiByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjaykge1xuICAgICAgICAgIHZhciBmYWlsZWRVbml0T2ZXb3JrID0gbmV4dFVuaXRPZldvcms7XG4gICAgICAgICAgcmVwbGF5VW5pdE9mV29yayhmYWlsZWRVbml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgaXNBc3luYyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc291cmNlRmliZXIgPSBuZXh0VW5pdE9mV29yaztcbiAgICAgICAgdmFyIHJldHVybkZpYmVyID0gc291cmNlRmliZXJbJ3JldHVybiddO1xuICAgICAgICBpZiAocmV0dXJuRmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIHRoZSByb290LiBUaGUgcm9vdCBjb3VsZCBjYXB0dXJlIGl0cyBvd24gZXJyb3JzLiBIb3dldmVyLFxuICAgICAgICAgIC8vIHdlIGRvbid0IGtub3cgaWYgaXQgZXJyb3JzIGJlZm9yZSBvciBhZnRlciB3ZSBwdXNoZWQgdGhlIGhvc3RcbiAgICAgICAgICAvLyBjb250ZXh0LiBUaGlzIGluZm9ybWF0aW9uIGlzIG5lZWRlZCB0byBhdm9pZCBhIHN0YWNrIG1pc21hdGNoLlxuICAgICAgICAgIC8vIEJlY2F1c2Ugd2UncmUgbm90IHN1cmUsIHRyZWF0IHRoaXMgYXMgYSBmYXRhbCBlcnJvci4gV2UgY291bGQgdHJhY2tcbiAgICAgICAgICAvLyB3aGljaCBwaGFzZSBpdCBmYWlscyBpbiwgYnV0IGRvZXNuJ3Qgc2VlbSB3b3J0aCBpdC4gQXQgbGVhc3RcbiAgICAgICAgICAvLyBmb3Igbm93LlxuICAgICAgICAgIGRpZEZhdGFsID0gdHJ1ZTtcbiAgICAgICAgICBvblVuY2F1Z2h0RXJyb3IodGhyb3duVmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRocm93RXhjZXB0aW9uKHJldHVybkZpYmVyLCBzb3VyY2VGaWJlciwgdGhyb3duVmFsdWUpO1xuICAgICAgICBuZXh0VW5pdE9mV29yayA9IGNvbXBsZXRlVW5pdE9mV29yayhzb3VyY2VGaWJlcik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIC8vIFdlJ3JlIGRvbmUgcGVyZm9ybWluZyB3b3JrLiBUaW1lIHRvIGNsZWFuIHVwLlxuICAgIHZhciBkaWRDb21wbGV0ZVJvb3QgPSBmYWxzZTtcbiAgICBpc1dvcmtpbmcgPSBmYWxzZTtcblxuICAgIC8vIFlpZWxkIGJhY2sgdG8gbWFpbiB0aHJlYWQuXG4gICAgaWYgKGRpZEZhdGFsKSB7XG4gICAgICBzdG9wV29ya0xvb3BUaW1lcihpbnRlcnJ1cHRlZEJ5LCBkaWRDb21wbGV0ZVJvb3QpO1xuICAgICAgaW50ZXJydXB0ZWRCeSA9IG51bGw7XG4gICAgICAvLyBUaGVyZSB3YXMgYSBmYXRhbCBlcnJvci5cbiAgICAgIHtcbiAgICAgICAgc3RhY2sucmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKG5leHRVbml0T2ZXb3JrID09PSBudWxsKSB7XG4gICAgICAvLyBXZSByZWFjaGVkIHRoZSByb290LlxuICAgICAgaWYgKGlzUm9vdFJlYWR5Rm9yQ29tbWl0KSB7XG4gICAgICAgIGRpZENvbXBsZXRlUm9vdCA9IHRydWU7XG4gICAgICAgIHN0b3BXb3JrTG9vcFRpbWVyKGludGVycnVwdGVkQnksIGRpZENvbXBsZXRlUm9vdCk7XG4gICAgICAgIGludGVycnVwdGVkQnkgPSBudWxsO1xuICAgICAgICAvLyBUaGUgcm9vdCBzdWNjZXNzZnVsbHkgY29tcGxldGVkLiBJdCdzIHJlYWR5IGZvciBjb21taXQuXG4gICAgICAgIHJvb3QucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICAgIHZhciBmaW5pc2hlZFdvcmsgPSByb290LmN1cnJlbnQuYWx0ZXJuYXRlO1xuICAgICAgICByZXR1cm4gZmluaXNoZWRXb3JrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIHJvb3QgZGlkIG5vdCBjb21wbGV0ZS5cbiAgICAgICAgc3RvcFdvcmtMb29wVGltZXIoaW50ZXJydXB0ZWRCeSwgZGlkQ29tcGxldGVSb290KTtcbiAgICAgICAgaW50ZXJydXB0ZWRCeSA9IG51bGw7XG4gICAgICAgIGludmFyaWFudChmYWxzZSwgJ0V4cGlyZWQgd29yayBzaG91bGQgaGF2ZSBjb21wbGV0ZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3BXb3JrTG9vcFRpbWVyKGludGVycnVwdGVkQnksIGRpZENvbXBsZXRlUm9vdCk7XG4gICAgICBpbnRlcnJ1cHRlZEJ5ID0gbnVsbDtcbiAgICAgIC8vIFRoZXJlJ3MgbW9yZSB3b3JrIHRvIGRvLCBidXQgd2UgcmFuIG91dCBvZiB0aW1lLiBZaWVsZCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcmVuZGVyZXIuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZUNhcHR1cmUoc291cmNlRmliZXIsIGJvdW5kYXJ5RmliZXIsIHZhbHVlLCBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFRPRE86IFdlIG9ubHkgc3VwcG9ydCBkaXNwYXRjaGluZyBlcnJvcnMuXG4gICAgdmFyIGNhcHR1cmVkVmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlKHZhbHVlLCBzb3VyY2VGaWJlcik7XG4gICAgdmFyIHVwZGF0ZSA9IHtcbiAgICAgIGV4cGlyYXRpb25UaW1lOiBleHBpcmF0aW9uVGltZSxcbiAgICAgIHBhcnRpYWxTdGF0ZTogbnVsbCxcbiAgICAgIGNhbGxiYWNrOiBudWxsLFxuICAgICAgaXNSZXBsYWNlOiBmYWxzZSxcbiAgICAgIGlzRm9yY2VkOiBmYWxzZSxcbiAgICAgIGNhcHR1cmVkVmFsdWU6IGNhcHR1cmVkVmFsdWUsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpbnNlcnRVcGRhdGVJbnRvRmliZXIoYm91bmRhcnlGaWJlciwgdXBkYXRlKTtcbiAgICBzY2hlZHVsZVdvcmsoYm91bmRhcnlGaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goc291cmNlRmliZXIsIHZhbHVlLCBleHBpcmF0aW9uVGltZSkge1xuICAgICEoIWlzV29ya2luZyB8fCBpc0NvbW1pdHRpbmcpID8gaW52YXJpYW50KGZhbHNlLCAnZGlzcGF0Y2g6IENhbm5vdCBkaXNwYXRjaCBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZS4nKSA6IHZvaWQgMDtcblxuICAgIC8vIFRPRE86IEhhbmRsZSBhcnJheXNcblxuICAgIHZhciBmaWJlciA9IHNvdXJjZUZpYmVyWydyZXR1cm4nXTtcbiAgICB3aGlsZSAoZmliZXIgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAgdmFyIGN0b3IgPSBmaWJlci50eXBlO1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRDYXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeShpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlQ2FwdHVyZShzb3VyY2VGaWJlciwgZmliZXIsIHZhbHVlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBUT0RPOiBIYW5kbGUgYXN5bmMgYm91bmRhcmllc1xuICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgIHNjaGVkdWxlQ2FwdHVyZShzb3VyY2VGaWJlciwgZmliZXIsIHZhbHVlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZmliZXIgPSBmaWJlclsncmV0dXJuJ107XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZUZpYmVyLnRhZyA9PT0gSG9zdFJvb3QpIHtcbiAgICAgIC8vIEVycm9yIHdhcyB0aHJvd24gYXQgdGhlIHJvb3QuIFRoZXJlIGlzIG5vIHBhcmVudCwgc28gdGhlIHJvb3RcbiAgICAgIC8vIGl0c2VsZiBzaG91bGQgY2FwdHVyZSBpdC5cbiAgICAgIHNjaGVkdWxlQ2FwdHVyZShzb3VyY2VGaWJlciwgc291cmNlRmliZXIsIHZhbHVlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db21taXRQaGFzZUVycm9yKGZpYmVyLCBlcnJvcikge1xuICAgIHJldHVybiBkaXNwYXRjaChmaWJlciwgZXJyb3IsIFN5bmMpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZUFzeW5jRXhwaXJhdGlvbihjdXJyZW50VGltZSkge1xuICAgIC8vIEdpdmVuIHRoZSBjdXJyZW50IGNsb2NrIHRpbWUsIHJldHVybnMgYW4gZXhwaXJhdGlvbiB0aW1lLiBXZSB1c2Ugcm91bmRpbmdcbiAgICAvLyB0byBiYXRjaCBsaWtlIHVwZGF0ZXMgdG9nZXRoZXIuXG4gICAgLy8gU2hvdWxkIGNvbXBsZXRlIHdpdGhpbiB+MTAwMG1zLiAxMjAwbXMgbWF4LlxuICAgIHZhciBleHBpcmF0aW9uTXMgPSA1MDAwO1xuICAgIHZhciBidWNrZXRTaXplTXMgPSAyNTA7XG4gICAgcmV0dXJuIGNvbXB1dGVFeHBpcmF0aW9uQnVja2V0KGN1cnJlbnRUaW1lLCBleHBpcmF0aW9uTXMsIGJ1Y2tldFNpemVNcyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlSW50ZXJhY3RpdmVFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKSB7XG4gICAgLy8gU2hvdWxkIGNvbXBsZXRlIHdpdGhpbiB+NTAwbXMuIDYwMG1zIG1heC5cbiAgICB2YXIgZXhwaXJhdGlvbk1zID0gNTAwO1xuICAgIHZhciBidWNrZXRTaXplTXMgPSAxMDA7XG4gICAgcmV0dXJuIGNvbXB1dGVFeHBpcmF0aW9uQnVja2V0KGN1cnJlbnRUaW1lLCBleHBpcmF0aW9uTXMsIGJ1Y2tldFNpemVNcyk7XG4gIH1cblxuICAvLyBDcmVhdGVzIGEgdW5pcXVlIGFzeW5jIGV4cGlyYXRpb24gdGltZS5cbiAgZnVuY3Rpb24gY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpIHtcbiAgICB2YXIgY3VycmVudFRpbWUgPSByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lKCk7XG4gICAgdmFyIHJlc3VsdCA9IGNvbXB1dGVBc3luY0V4cGlyYXRpb24oY3VycmVudFRpbWUpO1xuICAgIGlmIChyZXN1bHQgPD0gbGFzdFVuaXF1ZUFzeW5jRXhwaXJhdGlvbikge1xuICAgICAgLy8gU2luY2Ugd2UgYXNzdW1lIHRoZSBjdXJyZW50IHRpbWUgbW9ub3RvbmljYWxseSBpbmNyZWFzZXMsIHdlIG9ubHkgaGl0XG4gICAgICAvLyB0aGlzIGJyYW5jaCB3aGVuIGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24gaXMgZmlyZWQgbXVsdGlwbGUgdGltZXNcbiAgICAgIC8vIHdpdGhpbiBhIDIwMG1zIHdpbmRvdyAob3Igd2hhdGV2ZXIgdGhlIGFzeW5jIGJ1Y2tldCBzaXplIGlzKS5cbiAgICAgIHJlc3VsdCA9IGxhc3RVbmlxdWVBc3luY0V4cGlyYXRpb24gKyAxO1xuICAgIH1cbiAgICBsYXN0VW5pcXVlQXN5bmNFeHBpcmF0aW9uID0gcmVzdWx0O1xuICAgIHJldHVybiBsYXN0VW5pcXVlQXN5bmNFeHBpcmF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcihmaWJlcikge1xuICAgIHZhciBleHBpcmF0aW9uVGltZSA9IHZvaWQgMDtcbiAgICBpZiAoZXhwaXJhdGlvbkNvbnRleHQgIT09IE5vV29yaykge1xuICAgICAgLy8gQW4gZXhwbGljaXQgZXhwaXJhdGlvbiBjb250ZXh0IHdhcyBzZXQ7XG4gICAgICBleHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25Db250ZXh0O1xuICAgIH0gZWxzZSBpZiAoaXNXb3JraW5nKSB7XG4gICAgICBpZiAoaXNDb21taXR0aW5nKSB7XG4gICAgICAgIC8vIFVwZGF0ZXMgdGhhdCBvY2N1ciBkdXJpbmcgdGhlIGNvbW1pdCBwaGFzZSBzaG91bGQgaGF2ZSBzeW5jIHByaW9yaXR5XG4gICAgICAgIC8vIGJ5IGRlZmF1bHQuXG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gU3luYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVwZGF0ZXMgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2Ugc2hvdWxkIGV4cGlyZSBhdCB0aGUgc2FtZSB0aW1lIGFzXG4gICAgICAgIC8vIHRoZSB3b3JrIHRoYXQgaXMgYmVpbmcgcmVuZGVyZWQuXG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBleHBsaWNpdCBleHBpcmF0aW9uIGNvbnRleHQgd2FzIHNldCwgYW5kIHdlJ3JlIG5vdCBjdXJyZW50bHlcbiAgICAgIC8vIHBlcmZvcm1pbmcgd29yay4gQ2FsY3VsYXRlIGEgbmV3IGV4cGlyYXRpb24gdGltZS5cbiAgICAgIGlmIChmaWJlci5tb2RlICYgQXN5bmNNb2RlKSB7XG4gICAgICAgIGlmIChpc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBhbiBpbnRlcmFjdGl2ZSB1cGRhdGVcbiAgICAgICAgICB2YXIgY3VycmVudFRpbWUgPSByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lKCk7XG4gICAgICAgICAgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlSW50ZXJhY3RpdmVFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFzeW5jIHVwZGF0ZVxuICAgICAgICAgIHZhciBfY3VycmVudFRpbWUgPSByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lKCk7XG4gICAgICAgICAgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlQXN5bmNFeHBpcmF0aW9uKF9jdXJyZW50VGltZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBzeW5jIHVwZGF0ZVxuICAgICAgICBleHBpcmF0aW9uVGltZSA9IFN5bmM7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzKSB7XG4gICAgICAvLyBUaGlzIGlzIGFuIGludGVyYWN0aXZlIHVwZGF0ZS4gS2VlcCB0cmFjayBvZiB0aGUgbG93ZXN0IHBlbmRpbmdcbiAgICAgIC8vIGludGVyYWN0aXZlIGV4cGlyYXRpb24gdGltZS4gVGhpcyBhbGxvd3MgdXMgdG8gc3luY2hyb25vdXNseSBmbHVzaFxuICAgICAgLy8gYWxsIGludGVyYWN0aXZlIHVwZGF0ZXMgd2hlbiBuZWVkZWQuXG4gICAgICBpZiAobG93ZXN0UGVuZGluZ0ludGVyYWN0aXZlRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBleHBpcmF0aW9uVGltZSA+IGxvd2VzdFBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIGxvd2VzdFBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHBpcmF0aW9uVGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlV29yayhmaWJlciwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVXb3JrSW1wbChmaWJlciwgZXhwaXJhdGlvblRpbWUsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlV29ya0ltcGwoZmliZXIsIGV4cGlyYXRpb25UaW1lLCBpc0Vycm9yUmVjb3ZlcnkpIHtcbiAgICByZWNvcmRTY2hlZHVsZVVwZGF0ZSgpO1xuXG4gICAge1xuICAgICAgaWYgKCFpc0Vycm9yUmVjb3ZlcnkgJiYgZmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgIHdhcm5BYm91dEludmFsaWRVcGRhdGVzKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IGZpYmVyO1xuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICAvLyBXYWxrIHRoZSBwYXJlbnQgcGF0aCB0byB0aGUgcm9vdCBhbmQgdXBkYXRlIGVhY2ggbm9kZSdzXG4gICAgICAvLyBleHBpcmF0aW9uIHRpbWUuXG4gICAgICBpZiAobm9kZS5leHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IG5vZGUuZXhwaXJhdGlvblRpbWUgPiBleHBpcmF0aW9uVGltZSkge1xuICAgICAgICBub2RlLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5hbHRlcm5hdGUgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGUuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgbm9kZS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPiBleHBpcmF0aW9uVGltZSkge1xuICAgICAgICAgIG5vZGUuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub2RlWydyZXR1cm4nXSA9PT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZS50YWcgPT09IEhvc3RSb290KSB7XG4gICAgICAgICAgdmFyIHJvb3QgPSBub2RlLnN0YXRlTm9kZTtcbiAgICAgICAgICBpZiAoIWlzV29ya2luZyAmJiBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUgIT09IE5vV29yayAmJiBleHBpcmF0aW9uVGltZSA8IG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBpbnRlcnJ1cHRpb24uIChVc2VkIGZvciBwZXJmb3JtYW5jZSB0cmFja2luZy4pXG4gICAgICAgICAgICBpbnRlcnJ1cHRlZEJ5ID0gZmliZXI7XG4gICAgICAgICAgICByZXNldFN0YWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAvLyBJZiB3ZSdyZSBpbiB0aGUgcmVuZGVyIHBoYXNlLCB3ZSBkb24ndCBuZWVkIHRvIHNjaGVkdWxlIHRoaXMgcm9vdFxuICAgICAgICAgIC8vIGZvciBhbiB1cGRhdGUsIGJlY2F1c2Ugd2UnbGwgZG8gaXQgYmVmb3JlIHdlIGV4aXQuLi5cbiAgICAgICAgICAhaXNXb3JraW5nIHx8IGlzQ29tbWl0dGluZyB8fFxuICAgICAgICAgIC8vIC4uLnVubGVzcyB0aGlzIGlzIGEgZGlmZmVyZW50IHJvb3QgdGhhbiB0aGUgb25lIHdlJ3JlIHJlbmRlcmluZy5cbiAgICAgICAgICBuZXh0Um9vdCAhPT0gcm9vdCkge1xuICAgICAgICAgICAgLy8gQWRkIHRoaXMgcm9vdCB0byB0aGUgcm9vdCBzY2hlZHVsZS5cbiAgICAgICAgICAgIHJlcXVlc3RXb3JrKHJvb3QsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5lc3RlZFVwZGF0ZUNvdW50ID4gTkVTVEVEX1VQREFURV9MSU1JVCkge1xuICAgICAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnTWF4aW11bSB1cGRhdGUgZGVwdGggZXhjZWVkZWQuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGEgY29tcG9uZW50IHJlcGVhdGVkbHkgY2FsbHMgc2V0U3RhdGUgaW5zaWRlIGNvbXBvbmVudFdpbGxVcGRhdGUgb3IgY29tcG9uZW50RGlkVXBkYXRlLiBSZWFjdCBsaW1pdHMgdGhlIG51bWJlciBvZiBuZXN0ZWQgdXBkYXRlcyB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIWlzRXJyb3JSZWNvdmVyeSAmJiBmaWJlci50YWcgPT09IENsYXNzQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgIHdhcm5BYm91dFVwZGF0ZU9uVW5tb3VudGVkKGZpYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZVsncmV0dXJuJ107XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVjYWxjdWxhdGVDdXJyZW50VGltZSgpIHtcbiAgICAvLyBTdWJ0cmFjdCBpbml0aWFsIHRpbWUgc28gaXQgZml0cyBpbnNpZGUgMzJiaXRzXG4gICAgbW9zdFJlY2VudEN1cnJlbnRUaW1lTXMgPSBub3coKSAtIG9yaWdpbmFsU3RhcnRUaW1lTXM7XG4gICAgbW9zdFJlY2VudEN1cnJlbnRUaW1lID0gbXNUb0V4cGlyYXRpb25UaW1lKG1vc3RSZWNlbnRDdXJyZW50VGltZU1zKTtcbiAgICByZXR1cm4gbW9zdFJlY2VudEN1cnJlbnRUaW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmZXJyZWRVcGRhdGVzKGZuKSB7XG4gICAgdmFyIHByZXZpb3VzRXhwaXJhdGlvbkNvbnRleHQgPSBleHBpcmF0aW9uQ29udGV4dDtcbiAgICB2YXIgY3VycmVudFRpbWUgPSByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lKCk7XG4gICAgZXhwaXJhdGlvbkNvbnRleHQgPSBjb21wdXRlQXN5bmNFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV4cGlyYXRpb25Db250ZXh0ID0gcHJldmlvdXNFeHBpcmF0aW9uQ29udGV4dDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc3luY1VwZGF0ZXMoZm4sIGEsIGIsIGMsIGQpIHtcbiAgICB2YXIgcHJldmlvdXNFeHBpcmF0aW9uQ29udGV4dCA9IGV4cGlyYXRpb25Db250ZXh0O1xuICAgIGV4cGlyYXRpb25Db250ZXh0ID0gU3luYztcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKGEsIGIsIGMsIGQpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBleHBpcmF0aW9uQ29udGV4dCA9IHByZXZpb3VzRXhwaXJhdGlvbkNvbnRleHQ7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETzogRXZlcnl0aGluZyBiZWxvdyB0aGlzIGlzIHdyaXR0ZW4gYXMgaWYgaXQgaGFzIGJlZW4gbGlmdGVkIHRvIHRoZVxuICAvLyByZW5kZXJlcnMuIEknbGwgZG8gdGhpcyBpbiBhIGZvbGxvdy11cC5cblxuICAvLyBMaW5rZWQtbGlzdCBvZiByb290c1xuICB2YXIgZmlyc3RTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgdmFyIGxhc3RTY2hlZHVsZWRSb290ID0gbnVsbDtcblxuICB2YXIgY2FsbGJhY2tFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgdmFyIGNhbGxiYWNrSUQgPSAtMTtcbiAgdmFyIGlzUmVuZGVyaW5nID0gZmFsc2U7XG4gIHZhciBuZXh0Rmx1c2hlZFJvb3QgPSBudWxsO1xuICB2YXIgbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgdmFyIGxvd2VzdFBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuICB2YXIgZGVhZGxpbmVEaWRFeHBpcmUgPSBmYWxzZTtcbiAgdmFyIGhhc1VuaGFuZGxlZEVycm9yID0gZmFsc2U7XG4gIHZhciB1bmhhbmRsZWRFcnJvciA9IG51bGw7XG4gIHZhciBkZWFkbGluZSA9IG51bGw7XG5cbiAgdmFyIGlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIHZhciBpc1VuYmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIHZhciBpc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzID0gZmFsc2U7XG5cbiAgdmFyIGNvbXBsZXRlZEJhdGNoZXMgPSBudWxsO1xuXG4gIC8vIFVzZSB0aGVzZSB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3Agb2YgbmVzdGVkIHVwZGF0ZXNcbiAgdmFyIE5FU1RFRF9VUERBVEVfTElNSVQgPSAxMDAwO1xuICB2YXIgbmVzdGVkVXBkYXRlQ291bnQgPSAwO1xuXG4gIHZhciB0aW1lSGV1cmlzdGljRm9yVW5pdE9mV29yayA9IDE7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVDYWxsYmFja1dpdGhFeHBpcmF0aW9uKGV4cGlyYXRpb25UaW1lKSB7XG4gICAgaWYgKGNhbGxiYWNrRXhwaXJhdGlvblRpbWUgIT09IE5vV29yaykge1xuICAgICAgLy8gQSBjYWxsYmFjayBpcyBhbHJlYWR5IHNjaGVkdWxlZC4gQ2hlY2sgaXRzIGV4cGlyYXRpb24gdGltZSAodGltZW91dCkuXG4gICAgICBpZiAoZXhwaXJhdGlvblRpbWUgPiBjYWxsYmFja0V4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIC8vIEV4aXN0aW5nIGNhbGxiYWNrIGhhcyBzdWZmaWNpZW50IHRpbWVvdXQuIEV4aXQuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEV4aXN0aW5nIGNhbGxiYWNrIGhhcyBpbnN1ZmZpY2llbnQgdGltZW91dC4gQ2FuY2VsIGFuZCBzY2hlZHVsZSBhXG4gICAgICAgIC8vIG5ldyBvbmUuXG4gICAgICAgIGNhbmNlbERlZmVycmVkQ2FsbGJhY2soY2FsbGJhY2tJRCk7XG4gICAgICB9XG4gICAgICAvLyBUaGUgcmVxdWVzdCBjYWxsYmFjayB0aW1lciBpcyBhbHJlYWR5IHJ1bm5pbmcuIERvbid0IHN0YXJ0IGEgbmV3IG9uZS5cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRSZXF1ZXN0Q2FsbGJhY2tUaW1lcigpO1xuICAgIH1cblxuICAgIC8vIENvbXB1dGUgYSB0aW1lb3V0IGZvciB0aGUgZ2l2ZW4gZXhwaXJhdGlvbiB0aW1lLlxuICAgIHZhciBjdXJyZW50TXMgPSBub3coKSAtIG9yaWdpbmFsU3RhcnRUaW1lTXM7XG4gICAgdmFyIGV4cGlyYXRpb25NcyA9IGV4cGlyYXRpb25UaW1lVG9NcyhleHBpcmF0aW9uVGltZSk7XG4gICAgdmFyIHRpbWVvdXQgPSBleHBpcmF0aW9uTXMgLSBjdXJyZW50TXM7XG5cbiAgICBjYWxsYmFja0V4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgY2FsbGJhY2tJRCA9IHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayhwZXJmb3JtQXN5bmNXb3JrLCB7IHRpbWVvdXQ6IHRpbWVvdXQgfSk7XG4gIH1cblxuICAvLyByZXF1ZXN0V29yayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB3aGVuZXZlciBhIHJvb3QgcmVjZWl2ZXMgYW4gdXBkYXRlLlxuICAvLyBJdCdzIHVwIHRvIHRoZSByZW5kZXJlciB0byBjYWxsIHJlbmRlclJvb3QgYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlLlxuICBmdW5jdGlvbiByZXF1ZXN0V29yayhyb290LCBleHBpcmF0aW9uVGltZSkge1xuICAgIGFkZFJvb3RUb1NjaGVkdWxlKHJvb3QsIGV4cGlyYXRpb25UaW1lKTtcblxuICAgIGlmIChpc1JlbmRlcmluZykge1xuICAgICAgLy8gUHJldmVudCByZWVudHJhbmN5LiBSZW1haW5pbmcgd29yayB3aWxsIGJlIHNjaGVkdWxlZCBhdCB0aGUgZW5kIG9mXG4gICAgICAvLyB0aGUgY3VycmVudGx5IHJlbmRlcmluZyBiYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICAgIC8vIEZsdXNoIHdvcmsgYXQgdGhlIGVuZCBvZiB0aGUgYmF0Y2guXG4gICAgICBpZiAoaXNVbmJhdGNoaW5nVXBkYXRlcykge1xuICAgICAgICAvLyAuLi51bmxlc3Mgd2UncmUgaW5zaWRlIHVuYmF0Y2hlZFVwZGF0ZXMsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkXG4gICAgICAgIC8vIGZsdXNoIGl0IG5vdy5cbiAgICAgICAgbmV4dEZsdXNoZWRSb290ID0gcm9vdDtcbiAgICAgICAgbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSA9IFN5bmM7XG4gICAgICAgIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIFN5bmMsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBHZXQgcmlkIG9mIFN5bmMgYW5kIHVzZSBjdXJyZW50IHRpbWU/XG4gICAgaWYgKGV4cGlyYXRpb25UaW1lID09PSBTeW5jKSB7XG4gICAgICBwZXJmb3JtU3luY1dvcmsoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVDYWxsYmFja1dpdGhFeHBpcmF0aW9uKGV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRSb290VG9TY2hlZHVsZShyb290LCBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIEFkZCB0aGUgcm9vdCB0byB0aGUgc2NoZWR1bGUuXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyByb290IGlzIGFscmVhZHkgcGFydCBvZiB0aGUgc2NoZWR1bGUuXG4gICAgaWYgKHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPT09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgcm9vdCBpcyBub3QgYWxyZWFkeSBzY2hlZHVsZWQuIEFkZCBpdC5cbiAgICAgIHJvb3QucmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICAgIGlmIChsYXN0U2NoZWR1bGVkUm9vdCA9PT0gbnVsbCkge1xuICAgICAgICBmaXJzdFNjaGVkdWxlZFJvb3QgPSBsYXN0U2NoZWR1bGVkUm9vdCA9IHJvb3Q7XG4gICAgICAgIHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFzdFNjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290O1xuICAgICAgICBsYXN0U2NoZWR1bGVkUm9vdCA9IHJvb3Q7XG4gICAgICAgIGxhc3RTY2hlZHVsZWRSb290Lm5leHRTY2hlZHVsZWRSb290ID0gZmlyc3RTY2hlZHVsZWRSb290O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIHJvb3QgaXMgYWxyZWFkeSBzY2hlZHVsZWQsIGJ1dCBpdHMgcHJpb3JpdHkgbWF5IGhhdmUgaW5jcmVhc2VkLlxuICAgICAgdmFyIHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID0gcm9vdC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtcbiAgICAgIGlmIChyZW1haW5pbmdFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IGV4cGlyYXRpb25UaW1lIDwgcmVtYWluaW5nRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBwcmlvcml0eS5cbiAgICAgICAgcm9vdC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRIaWdoZXN0UHJpb3JpdHlSb290KCkge1xuICAgIHZhciBoaWdoZXN0UHJpb3JpdHlXb3JrID0gTm9Xb3JrO1xuICAgIHZhciBoaWdoZXN0UHJpb3JpdHlSb290ID0gbnVsbDtcbiAgICBpZiAobGFzdFNjaGVkdWxlZFJvb3QgIT09IG51bGwpIHtcbiAgICAgIHZhciBwcmV2aW91c1NjaGVkdWxlZFJvb3QgPSBsYXN0U2NoZWR1bGVkUm9vdDtcbiAgICAgIHZhciByb290ID0gZmlyc3RTY2hlZHVsZWRSb290O1xuICAgICAgd2hpbGUgKHJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID0gcm9vdC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgaWYgKHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID09PSBOb1dvcmspIHtcbiAgICAgICAgICAvLyBUaGlzIHJvb3Qgbm8gbG9uZ2VyIGhhcyB3b3JrLiBSZW1vdmUgaXQgZnJvbSB0aGUgc2NoZWR1bGVyLlxuXG4gICAgICAgICAgLy8gVE9ETzogVGhpcyBjaGVjayBpcyByZWR1ZGFudCwgYnV0IEZsb3cgaXMgY29uZnVzZWQgYnkgdGhlIGJyYW5jaFxuICAgICAgICAgIC8vIGJlbG93IHdoZXJlIHdlIHNldCBsYXN0U2NoZWR1bGVkUm9vdCB0byBudWxsLCBldmVuIHRob3VnaCB3ZSBicmVha1xuICAgICAgICAgIC8vIGZyb20gdGhlIGxvb3AgcmlnaHQgYWZ0ZXIuXG4gICAgICAgICAgIShwcmV2aW91c1NjaGVkdWxlZFJvb3QgIT09IG51bGwgJiYgbGFzdFNjaGVkdWxlZFJvb3QgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIGhhdmUgYSBwcmV2aW91cyBhbmQgbGFzdCByb290LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgICAgIGlmIChyb290ID09PSByb290Lm5leHRTY2hlZHVsZWRSb290KSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHJvb3QgaW4gdGhlIGxpc3QuXG4gICAgICAgICAgICByb290Lm5leHRTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgICAgIGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSBpZiAocm9vdCA9PT0gZmlyc3RTY2hlZHVsZWRSb290KSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCByb290IGluIHRoZSBsaXN0LlxuICAgICAgICAgICAgdmFyIG5leHQgPSByb290Lm5leHRTY2hlZHVsZWRSb290O1xuICAgICAgICAgICAgZmlyc3RTY2hlZHVsZWRSb290ID0gbmV4dDtcbiAgICAgICAgICAgIGxhc3RTY2hlZHVsZWRSb290Lm5leHRTY2hlZHVsZWRSb290ID0gbmV4dDtcbiAgICAgICAgICAgIHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAocm9vdCA9PT0gbGFzdFNjaGVkdWxlZFJvb3QpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGxhc3Qgcm9vdCBpbiB0aGUgbGlzdC5cbiAgICAgICAgICAgIGxhc3RTY2hlZHVsZWRSb290ID0gcHJldmlvdXNTY2hlZHVsZWRSb290O1xuICAgICAgICAgICAgbGFzdFNjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgICAgICAgICByb290Lm5leHRTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmV2aW91c1NjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290Lm5leHRTY2hlZHVsZWRSb290O1xuICAgICAgICAgICAgcm9vdC5uZXh0U2NoZWR1bGVkUm9vdCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJvb3QgPSBwcmV2aW91c1NjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGhpZ2hlc3RQcmlvcml0eVdvcmsgPT09IE5vV29yayB8fCByZW1haW5pbmdFeHBpcmF0aW9uVGltZSA8IGhpZ2hlc3RQcmlvcml0eVdvcmspIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcHJpb3JpdHksIGlmIGl0J3MgaGlnaGVyXG4gICAgICAgICAgICBoaWdoZXN0UHJpb3JpdHlXb3JrID0gcmVtYWluaW5nRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgICBoaWdoZXN0UHJpb3JpdHlSb290ID0gcm9vdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJvb3QgPT09IGxhc3RTY2hlZHVsZWRSb290KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJldmlvdXNTY2hlZHVsZWRSb290ID0gcm9vdDtcbiAgICAgICAgICByb290ID0gcm9vdC5uZXh0U2NoZWR1bGVkUm9vdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHRoZSBuZXh0IHJvb3QgaXMgdGhlIHNhbWUgYXMgdGhlIHByZXZpb3VzIHJvb3QsIHRoaXMgaXMgYSBuZXN0ZWRcbiAgICAvLyB1cGRhdGUuIFRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcCwgaW5jcmVtZW50IHRoZSBuZXN0ZWQgdXBkYXRlIGNvdW50LlxuICAgIHZhciBwcmV2aW91c0ZsdXNoZWRSb290ID0gbmV4dEZsdXNoZWRSb290O1xuICAgIGlmIChwcmV2aW91c0ZsdXNoZWRSb290ICE9PSBudWxsICYmIHByZXZpb3VzRmx1c2hlZFJvb3QgPT09IGhpZ2hlc3RQcmlvcml0eVJvb3QgJiYgaGlnaGVzdFByaW9yaXR5V29yayA9PT0gU3luYykge1xuICAgICAgbmVzdGVkVXBkYXRlQ291bnQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgd2hlbmV2ZXIgd2Ugc3dpdGNoIHJvb3RzLlxuICAgICAgbmVzdGVkVXBkYXRlQ291bnQgPSAwO1xuICAgIH1cbiAgICBuZXh0Rmx1c2hlZFJvb3QgPSBoaWdoZXN0UHJpb3JpdHlSb290O1xuICAgIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgPSBoaWdoZXN0UHJpb3JpdHlXb3JrO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUFzeW5jV29yayhkbCkge1xuICAgIHBlcmZvcm1Xb3JrKE5vV29yaywgdHJ1ZSwgZGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybVN5bmNXb3JrKCkge1xuICAgIHBlcmZvcm1Xb3JrKFN5bmMsIGZhbHNlLCBudWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1Xb3JrKG1pbkV4cGlyYXRpb25UaW1lLCBpc0FzeW5jLCBkbCkge1xuICAgIGRlYWRsaW5lID0gZGw7XG5cbiAgICAvLyBLZWVwIHdvcmtpbmcgb24gcm9vdHMgdW50aWwgdGhlcmUncyBubyBtb3JlIHdvcmssIG9yIHVudGlsIHRoZSB3ZSByZWFjaFxuICAgIC8vIHRoZSBkZWFkbGluZS5cbiAgICBmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCgpO1xuXG4gICAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkgJiYgZGVhZGxpbmUgIT09IG51bGwpIHtcbiAgICAgIHZhciBkaWRFeHBpcmUgPSBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lIDwgcmVjYWxjdWxhdGVDdXJyZW50VGltZSgpO1xuICAgICAgdmFyIHRpbWVvdXQgPSBleHBpcmF0aW9uVGltZVRvTXMobmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSk7XG4gICAgICBzdG9wUmVxdWVzdENhbGxiYWNrVGltZXIoZGlkRXhwaXJlLCB0aW1lb3V0KTtcbiAgICB9XG5cbiAgICBpZiAoaXNBc3luYykge1xuICAgICAgd2hpbGUgKG5leHRGbHVzaGVkUm9vdCAhPT0gbnVsbCAmJiBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgKG1pbkV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgbWluRXhwaXJhdGlvblRpbWUgPj0gbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSkgJiYgKCFkZWFkbGluZURpZEV4cGlyZSB8fCByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lKCkgPj0gbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSkpIHtcbiAgICAgICAgcGVyZm9ybVdvcmtPblJvb3QobmV4dEZsdXNoZWRSb290LCBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lLCAhZGVhZGxpbmVEaWRFeHBpcmUpO1xuICAgICAgICBmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAobmV4dEZsdXNoZWRSb290ICE9PSBudWxsICYmIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yayAmJiAobWluRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBtaW5FeHBpcmF0aW9uVGltZSA+PSBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgICBwZXJmb3JtV29ya09uUm9vdChuZXh0Rmx1c2hlZFJvb3QsIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUsIGZhbHNlKTtcbiAgICAgICAgZmluZEhpZ2hlc3RQcmlvcml0eVJvb3QoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSdyZSBkb25lIGZsdXNoaW5nIHdvcmsuIEVpdGhlciB3ZSByYW4gb3V0IG9mIHRpbWUgaW4gdGhpcyBjYWxsYmFjayxcbiAgICAvLyBvciB0aGVyZSdzIG5vIG1vcmUgd29yayBsZWZ0IHdpdGggc3VmZmljaWVudCBwcmlvcml0eS5cblxuICAgIC8vIElmIHdlJ3JlIGluc2lkZSBhIGNhbGxiYWNrLCBzZXQgdGhpcyB0byBmYWxzZSBzaW5jZSB3ZSBqdXN0IGNvbXBsZXRlZCBpdC5cbiAgICBpZiAoZGVhZGxpbmUgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gICAgICBjYWxsYmFja0lEID0gLTE7XG4gICAgfVxuICAgIC8vIElmIHRoZXJlJ3Mgd29yayBsZWZ0IG92ZXIsIHNjaGVkdWxlIGEgbmV3IGNhbGxiYWNrLlxuICAgIGlmIChuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmspIHtcbiAgICAgIHNjaGVkdWxlQ2FsbGJhY2tXaXRoRXhwaXJhdGlvbihuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhbi11cC5cbiAgICBkZWFkbGluZSA9IG51bGw7XG4gICAgZGVhZGxpbmVEaWRFeHBpcmUgPSBmYWxzZTtcblxuICAgIGZpbmlzaFJlbmRlcmluZygpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hSb290KHJvb3QsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgISFpc1JlbmRlcmluZyA/IGludmFyaWFudChmYWxzZSwgJ3dvcmsuY29tbWl0KCk6IENhbm5vdCBjb21taXQgd2hpbGUgYWxyZWFkeSByZW5kZXJpbmcuIFRoaXMgbGlrZWx5IG1lYW5zIHlvdSBhdHRlbXB0ZWQgdG8gY29tbWl0IGZyb20gaW5zaWRlIGEgbGlmZWN5Y2xlIG1ldGhvZC4nKSA6IHZvaWQgMDtcbiAgICAvLyBQZXJmb3JtIHdvcmsgb24gcm9vdCBhcyBpZiB0aGUgZ2l2ZW4gZXhwaXJhdGlvbiB0aW1lIGlzIHRoZSBjdXJyZW50IHRpbWUuXG4gICAgLy8gVGhpcyBoYXMgdGhlIGVmZmVjdCBvZiBzeW5jaHJvbm91c2x5IGZsdXNoaW5nIGFsbCB3b3JrIHVwIHRvIGFuZFxuICAgIC8vIGluY2x1ZGluZyB0aGUgZ2l2ZW4gdGltZS5cbiAgICBuZXh0Rmx1c2hlZFJvb3QgPSByb290O1xuICAgIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICBwZXJmb3JtV29ya09uUm9vdChyb290LCBleHBpcmF0aW9uVGltZSwgZmFsc2UpO1xuICAgIC8vIEZsdXNoIGFueSBzeW5jIHdvcmsgdGhhdCB3YXMgc2NoZWR1bGVkIGJ5IGxpZmVjeWNsZXNcbiAgICBwZXJmb3JtU3luY1dvcmsoKTtcbiAgICBmaW5pc2hSZW5kZXJpbmcoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmlzaFJlbmRlcmluZygpIHtcbiAgICBuZXN0ZWRVcGRhdGVDb3VudCA9IDA7XG5cbiAgICBpZiAoY29tcGxldGVkQmF0Y2hlcyAhPT0gbnVsbCkge1xuICAgICAgdmFyIGJhdGNoZXMgPSBjb21wbGV0ZWRCYXRjaGVzO1xuICAgICAgY29tcGxldGVkQmF0Y2hlcyA9IG51bGw7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGJhdGNoID0gYmF0Y2hlc1tpXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBiYXRjaC5fb25Db21wbGV0ZSgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGlmICghaGFzVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIGhhc1VuaGFuZGxlZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHVuaGFuZGxlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc1VuaGFuZGxlZEVycm9yKSB7XG4gICAgICB2YXIgZXJyb3IgPSB1bmhhbmRsZWRFcnJvcjtcbiAgICAgIHVuaGFuZGxlZEVycm9yID0gbnVsbDtcbiAgICAgIGhhc1VuaGFuZGxlZEVycm9yID0gZmFsc2U7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtV29ya09uUm9vdChyb290LCBleHBpcmF0aW9uVGltZSwgaXNBc3luYykge1xuICAgICEhaXNSZW5kZXJpbmcgPyBpbnZhcmlhbnQoZmFsc2UsICdwZXJmb3JtV29ya09uUm9vdCB3YXMgY2FsbGVkIHJlY3Vyc2l2ZWx5LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gICAgaXNSZW5kZXJpbmcgPSB0cnVlO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhc3luYyB3b3JrIG9yIHN5bmMvZXhwaXJlZCB3b3JrLlxuICAgIGlmICghaXNBc3luYykge1xuICAgICAgLy8gRmx1c2ggc3luYyB3b3JrLlxuICAgICAgdmFyIGZpbmlzaGVkV29yayA9IHJvb3QuZmluaXNoZWRXb3JrO1xuICAgICAgaWYgKGZpbmlzaGVkV29yayAhPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIHJvb3QgaXMgYWxyZWFkeSBjb21wbGV0ZS4gV2UgY2FuIGNvbW1pdCBpdC5cbiAgICAgICAgY29tcGxldGVSb290KHJvb3QsIGZpbmlzaGVkV29yaywgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuICAgICAgICBmaW5pc2hlZFdvcmsgPSByZW5kZXJSb290KHJvb3QsIGV4cGlyYXRpb25UaW1lLCBmYWxzZSk7XG4gICAgICAgIGlmIChmaW5pc2hlZFdvcmsgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSd2ZSBjb21wbGV0ZWQgdGhlIHJvb3QuIENvbW1pdCBpdC5cbiAgICAgICAgICBjb21wbGV0ZVJvb3Qocm9vdCwgZmluaXNoZWRXb3JrLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmx1c2ggYXN5bmMgd29yay5cbiAgICAgIHZhciBfZmluaXNoZWRXb3JrID0gcm9vdC5maW5pc2hlZFdvcms7XG4gICAgICBpZiAoX2ZpbmlzaGVkV29yayAhPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIHJvb3QgaXMgYWxyZWFkeSBjb21wbGV0ZS4gV2UgY2FuIGNvbW1pdCBpdC5cbiAgICAgICAgY29tcGxldGVSb290KHJvb3QsIF9maW5pc2hlZFdvcmssIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgICAgICAgX2ZpbmlzaGVkV29yayA9IHJlbmRlclJvb3Qocm9vdCwgZXhwaXJhdGlvblRpbWUsIHRydWUpO1xuICAgICAgICBpZiAoX2ZpbmlzaGVkV29yayAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFdlJ3ZlIGNvbXBsZXRlZCB0aGUgcm9vdC4gQ2hlY2sgdGhlIGRlYWRsaW5lIG9uZSBtb3JlIHRpbWVcbiAgICAgICAgICAvLyBiZWZvcmUgY29tbWl0dGluZy5cbiAgICAgICAgICBpZiAoIXNob3VsZFlpZWxkKCkpIHtcbiAgICAgICAgICAgIC8vIFN0aWxsIHRpbWUgbGVmdC4gQ29tbWl0IHRoZSByb290LlxuICAgICAgICAgICAgY29tcGxldGVSb290KHJvb3QsIF9maW5pc2hlZFdvcmssIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlcmUncyBubyB0aW1lIGxlZnQuIE1hcmsgdGhpcyByb290IGFzIGNvbXBsZXRlLiBXZSdsbCBjb21lXG4gICAgICAgICAgICAvLyBiYWNrIGFuZCBjb21taXQgaXQgbGF0ZXIuXG4gICAgICAgICAgICByb290LmZpbmlzaGVkV29yayA9IF9maW5pc2hlZFdvcms7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaXNSZW5kZXJpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlUm9vdChyb290LCBmaW5pc2hlZFdvcmssIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBhIGJhdGNoIHRoYXQgbWF0Y2hlcyB0aGlzIGV4cGlyYXRpb24gdGltZS5cbiAgICB2YXIgZmlyc3RCYXRjaCA9IHJvb3QuZmlyc3RCYXRjaDtcbiAgICBpZiAoZmlyc3RCYXRjaCAhPT0gbnVsbCAmJiBmaXJzdEJhdGNoLl9leHBpcmF0aW9uVGltZSA8PSBleHBpcmF0aW9uVGltZSkge1xuICAgICAgaWYgKGNvbXBsZXRlZEJhdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgY29tcGxldGVkQmF0Y2hlcyA9IFtmaXJzdEJhdGNoXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlZEJhdGNoZXMucHVzaChmaXJzdEJhdGNoKTtcbiAgICAgIH1cbiAgICAgIGlmIChmaXJzdEJhdGNoLl9kZWZlcikge1xuICAgICAgICAvLyBUaGlzIHJvb3QgaXMgYmxvY2tlZCBmcm9tIGNvbW1pdHRpbmcgYnkgYSBiYXRjaC4gVW5zY2hlZHVsZSBpdCB1bnRpbFxuICAgICAgICAvLyB3ZSByZWNlaXZlIGFub3RoZXIgdXBkYXRlLlxuICAgICAgICByb290LmZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgcm9vdC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbW1pdCB0aGUgcm9vdC5cbiAgICByb290LmZpbmlzaGVkV29yayA9IG51bGw7XG4gICAgcm9vdC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZSA9IGNvbW1pdFJvb3QoZmluaXNoZWRXb3JrKTtcbiAgfVxuXG4gIC8vIFdoZW4gd29ya2luZyBvbiBhc3luYyB3b3JrLCB0aGUgcmVjb25jaWxlciBhc2tzIHRoZSByZW5kZXJlciBpZiBpdCBzaG91bGRcbiAgLy8geWllbGQgZXhlY3V0aW9uLiBGb3IgRE9NLCB3ZSBpbXBsZW1lbnQgdGhpcyB3aXRoIHJlcXVlc3RJZGxlQ2FsbGJhY2suXG4gIGZ1bmN0aW9uIHNob3VsZFlpZWxkKCkge1xuICAgIGlmIChkZWFkbGluZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGVhZGxpbmUudGltZVJlbWFpbmluZygpID4gdGltZUhldXJpc3RpY0ZvclVuaXRPZldvcmspIHtcbiAgICAgIC8vIERpc3JlZ2FyZCBkZWFkbGluZS5kaWRUaW1lb3V0LiBPbmx5IGV4cGlyZWQgd29yayBzaG91bGQgYmUgZmx1c2hlZFxuICAgICAgLy8gZHVyaW5nIGEgdGltZW91dC4gVGhpcyBwYXRoIGlzIG9ubHkgaGl0IGZvciBub24tZXhwaXJlZCB3b3JrLlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBkZWFkbGluZURpZEV4cGlyZSA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBvblVuY2F1Z2h0RXJyb3IoZXJyb3IpIHtcbiAgICAhKG5leHRGbHVzaGVkUm9vdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgYmUgd29ya2luZyBvbiBhIHJvb3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgLy8gVW5zY2hlZHVsZSB0aGlzIHJvb3Qgc28gd2UgZG9uJ3Qgd29yayBvbiBpdCBhZ2FpbiB1bnRpbCB0aGVyZSdzXG4gICAgLy8gYW5vdGhlciB1cGRhdGUuXG4gICAgbmV4dEZsdXNoZWRSb290LnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuICAgIGlmICghaGFzVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgIGhhc1VuaGFuZGxlZEVycm9yID0gdHJ1ZTtcbiAgICAgIHVuaGFuZGxlZEVycm9yID0gZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETzogQmF0Y2hpbmcgc2hvdWxkIGJlIGltcGxlbWVudGVkIGF0IHRoZSByZW5kZXJlciBsZXZlbCwgbm90IGluc2lkZVxuICAvLyB0aGUgcmVjb25jaWxlci5cbiAgZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoZm4sIGEpIHtcbiAgICB2YXIgcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcyA9IGlzQmF0Y2hpbmdVcGRhdGVzO1xuICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKGEpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0JhdGNoaW5nVXBkYXRlcyA9IHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXM7XG4gICAgICBpZiAoIWlzQmF0Y2hpbmdVcGRhdGVzICYmICFpc1JlbmRlcmluZykge1xuICAgICAgICBwZXJmb3JtU3luY1dvcmsoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBUT0RPOiBCYXRjaGluZyBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYXQgdGhlIHJlbmRlcmVyIGxldmVsLCBub3QgaW5zaWRlXG4gIC8vIHRoZSByZWNvbmNpbGVyLlxuICBmdW5jdGlvbiB1bmJhdGNoZWRVcGRhdGVzKGZuLCBhKSB7XG4gICAgaWYgKGlzQmF0Y2hpbmdVcGRhdGVzICYmICFpc1VuYmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICBpc1VuYmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbihhKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlzVW5iYXRjaGluZ1VwZGF0ZXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZuKGEpO1xuICB9XG5cbiAgLy8gVE9ETzogQmF0Y2hpbmcgc2hvdWxkIGJlIGltcGxlbWVudGVkIGF0IHRoZSByZW5kZXJlciBsZXZlbCwgbm90IHdpdGhpblxuICAvLyB0aGUgcmVjb25jaWxlci5cbiAgZnVuY3Rpb24gZmx1c2hTeW5jKGZuLCBhKSB7XG4gICAgISFpc1JlbmRlcmluZyA/IGludmFyaWFudChmYWxzZSwgJ2ZsdXNoU3luYyB3YXMgY2FsbGVkIGZyb20gaW5zaWRlIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgY2Fubm90IGJlIGNhbGxlZCB3aGVuIFJlYWN0IGlzIGFscmVhZHkgcmVuZGVyaW5nLicpIDogdm9pZCAwO1xuICAgIHZhciBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzID0gaXNCYXRjaGluZ1VwZGF0ZXM7XG4gICAgaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gc3luY1VwZGF0ZXMoZm4sIGEpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0JhdGNoaW5nVXBkYXRlcyA9IHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXM7XG4gICAgICBwZXJmb3JtU3luY1dvcmsoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcmFjdGl2ZVVwZGF0ZXMoZm4sIGEsIGIpIHtcbiAgICBpZiAoaXNCYXRjaGluZ0ludGVyYWN0aXZlVXBkYXRlcykge1xuICAgICAgcmV0dXJuIGZuKGEsIGIpO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBhcmUgYW55IHBlbmRpbmcgaW50ZXJhY3RpdmUgdXBkYXRlcywgc3luY2hyb25vdXNseSBmbHVzaCB0aGVtLlxuICAgIC8vIFRoaXMgbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSB3ZSByZWFkIGFueSBoYW5kbGVycywgYmVjYXVzZSB0aGUgZWZmZWN0IG9mXG4gICAgLy8gdGhlIHByZXZpb3VzIGV2ZW50IG1heSBpbmZsdWVuY2Ugd2hpY2ggaGFuZGxlcnMgYXJlIGNhbGxlZCBkdXJpbmdcbiAgICAvLyB0aGlzIGV2ZW50LlxuICAgIGlmICghaXNCYXRjaGluZ1VwZGF0ZXMgJiYgIWlzUmVuZGVyaW5nICYmIGxvd2VzdFBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmspIHtcbiAgICAgIC8vIFN5bmNocm9ub3VzbHkgZmx1c2ggcGVuZGluZyBpbnRlcmFjdGl2ZSB1cGRhdGVzLlxuICAgICAgcGVyZm9ybVdvcmsobG93ZXN0UGVuZGluZ0ludGVyYWN0aXZlRXhwaXJhdGlvblRpbWUsIGZhbHNlLCBudWxsKTtcbiAgICAgIGxvd2VzdFBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuICAgIH1cbiAgICB2YXIgcHJldmlvdXNJc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzID0gaXNCYXRjaGluZ0ludGVyYWN0aXZlVXBkYXRlcztcbiAgICB2YXIgcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcyA9IGlzQmF0Y2hpbmdVcGRhdGVzO1xuICAgIGlzQmF0Y2hpbmdJbnRlcmFjdGl2ZVVwZGF0ZXMgPSB0cnVlO1xuICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKGEsIGIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzID0gcHJldmlvdXNJc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzO1xuICAgICAgaXNCYXRjaGluZ1VwZGF0ZXMgPSBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzO1xuICAgICAgaWYgKCFpc0JhdGNoaW5nVXBkYXRlcyAmJiAhaXNSZW5kZXJpbmcpIHtcbiAgICAgICAgcGVyZm9ybVN5bmNXb3JrKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMoKSB7XG4gICAgaWYgKCFpc1JlbmRlcmluZyAmJiBsb3dlc3RQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrKSB7XG4gICAgICAvLyBTeW5jaHJvbm91c2x5IGZsdXNoIHBlbmRpbmcgaW50ZXJhY3RpdmUgdXBkYXRlcy5cbiAgICAgIHBlcmZvcm1Xb3JrKGxvd2VzdFBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lLCBmYWxzZSwgbnVsbCk7XG4gICAgICBsb3dlc3RQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaENvbnRyb2xsZWQoZm4pIHtcbiAgICB2YXIgcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcyA9IGlzQmF0Y2hpbmdVcGRhdGVzO1xuICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgc3luY1VwZGF0ZXMoZm4pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0JhdGNoaW5nVXBkYXRlcyA9IHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXM7XG4gICAgICBpZiAoIWlzQmF0Y2hpbmdVcGRhdGVzICYmICFpc1JlbmRlcmluZykge1xuICAgICAgICBwZXJmb3JtV29yayhTeW5jLCBmYWxzZSwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lOiByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lLFxuICAgIGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6IGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsXG4gICAgc2NoZWR1bGVXb3JrOiBzY2hlZHVsZVdvcmssXG4gICAgcmVxdWVzdFdvcms6IHJlcXVlc3RXb3JrLFxuICAgIGZsdXNoUm9vdDogZmx1c2hSb290LFxuICAgIGJhdGNoZWRVcGRhdGVzOiBiYXRjaGVkVXBkYXRlcyxcbiAgICB1bmJhdGNoZWRVcGRhdGVzOiB1bmJhdGNoZWRVcGRhdGVzLFxuICAgIGZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgIGZsdXNoQ29udHJvbGxlZDogZmx1c2hDb250cm9sbGVkLFxuICAgIGRlZmVycmVkVXBkYXRlczogZGVmZXJyZWRVcGRhdGVzLFxuICAgIHN5bmNVcGRhdGVzOiBzeW5jVXBkYXRlcyxcbiAgICBpbnRlcmFjdGl2ZVVwZGF0ZXM6IGludGVyYWN0aXZlVXBkYXRlcyxcbiAgICBmbHVzaEludGVyYWN0aXZlVXBkYXRlczogZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsXG4gICAgY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjogY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixcbiAgICBsZWdhY3lDb250ZXh0OiBsZWdhY3lDb250ZXh0XG4gIH07XG59O1xuXG52YXIgZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcyA9IHZvaWQgMDtcblxue1xuICBkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzID0gZmFsc2U7XG59XG5cbi8vIDAgaXMgUFJPRCwgMSBpcyBERVYuXG4vLyBNaWdodCBhZGQgUFJPRklMRSBsYXRlci5cblxuXG52YXIgUmVhY3RGaWJlclJlY29uY2lsZXIkMSA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgdmFyIGdldFB1YmxpY0luc3RhbmNlID0gY29uZmlnLmdldFB1YmxpY0luc3RhbmNlO1xuXG4gIHZhciBfUmVhY3RGaWJlclNjaGVkdWxlciA9IFJlYWN0RmliZXJTY2hlZHVsZXIoY29uZmlnKSxcbiAgICAgIGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24gPSBfUmVhY3RGaWJlclNjaGVkdWxlci5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLFxuICAgICAgcmVjYWxjdWxhdGVDdXJyZW50VGltZSA9IF9SZWFjdEZpYmVyU2NoZWR1bGVyLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsXG4gICAgICBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyID0gX1JlYWN0RmliZXJTY2hlZHVsZXIuY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixcbiAgICAgIHNjaGVkdWxlV29yayA9IF9SZWFjdEZpYmVyU2NoZWR1bGVyLnNjaGVkdWxlV29yayxcbiAgICAgIHJlcXVlc3RXb3JrID0gX1JlYWN0RmliZXJTY2hlZHVsZXIucmVxdWVzdFdvcmssXG4gICAgICBmbHVzaFJvb3QgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5mbHVzaFJvb3QsXG4gICAgICBiYXRjaGVkVXBkYXRlcyA9IF9SZWFjdEZpYmVyU2NoZWR1bGVyLmJhdGNoZWRVcGRhdGVzLFxuICAgICAgdW5iYXRjaGVkVXBkYXRlcyA9IF9SZWFjdEZpYmVyU2NoZWR1bGVyLnVuYmF0Y2hlZFVwZGF0ZXMsXG4gICAgICBmbHVzaFN5bmMgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5mbHVzaFN5bmMsXG4gICAgICBmbHVzaENvbnRyb2xsZWQgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5mbHVzaENvbnRyb2xsZWQsXG4gICAgICBkZWZlcnJlZFVwZGF0ZXMgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5kZWZlcnJlZFVwZGF0ZXMsXG4gICAgICBzeW5jVXBkYXRlcyA9IF9SZWFjdEZpYmVyU2NoZWR1bGVyLnN5bmNVcGRhdGVzLFxuICAgICAgaW50ZXJhY3RpdmVVcGRhdGVzID0gX1JlYWN0RmliZXJTY2hlZHVsZXIuaW50ZXJhY3RpdmVVcGRhdGVzLFxuICAgICAgZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5mbHVzaEludGVyYWN0aXZlVXBkYXRlcyxcbiAgICAgIGxlZ2FjeUNvbnRleHQgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5sZWdhY3lDb250ZXh0O1xuXG4gIHZhciBmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCA9IGxlZ2FjeUNvbnRleHQuZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQsXG4gICAgICBpc0NvbnRleHRQcm92aWRlciA9IGxlZ2FjeUNvbnRleHQuaXNDb250ZXh0UHJvdmlkZXIsXG4gICAgICBwcm9jZXNzQ2hpbGRDb250ZXh0ID0gbGVnYWN5Q29udGV4dC5wcm9jZXNzQ2hpbGRDb250ZXh0O1xuXG5cbiAgZnVuY3Rpb24gZ2V0Q29udGV4dEZvclN1YnRyZWUocGFyZW50Q29tcG9uZW50KSB7XG4gICAgaWYgKCFwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG5cbiAgICB2YXIgZmliZXIgPSBnZXQocGFyZW50Q29tcG9uZW50KTtcbiAgICB2YXIgcGFyZW50Q29udGV4dCA9IGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0KGZpYmVyKTtcbiAgICByZXR1cm4gaXNDb250ZXh0UHJvdmlkZXIoZmliZXIpID8gcHJvY2Vzc0NoaWxkQ29udGV4dChmaWJlciwgcGFyZW50Q29udGV4dCkgOiBwYXJlbnRDb250ZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVSb290VXBkYXRlKGN1cnJlbnQsIGVsZW1lbnQsIGN1cnJlbnRUaW1lLCBleHBpcmF0aW9uVGltZSwgY2FsbGJhY2spIHtcbiAgICB7XG4gICAgICBpZiAoUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5waGFzZSA9PT0gJ3JlbmRlcicgJiYgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5jdXJyZW50ICE9PSBudWxsICYmICFkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMgPSB0cnVlO1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGU7ICcgKyAndHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90IGFsbG93ZWQuICcgKyAnSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluIGNvbXBvbmVudERpZFVwZGF0ZS5cXG5cXG4nICsgJ0NoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLicsIGdldENvbXBvbmVudE5hbWUoUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5jdXJyZW50KSB8fCAnVW5rbm93bicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjaztcbiAgICB7XG4gICAgICB3YXJuaW5nKGNhbGxiYWNrID09PSBudWxsIHx8IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJywgJ3JlbmRlciguLi4pOiBFeHBlY3RlZCB0aGUgbGFzdCBvcHRpb25hbCBgY2FsbGJhY2tgIGFyZ3VtZW50IHRvIGJlIGEgJyArICdmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMuJywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGUgPSB7XG4gICAgICBleHBpcmF0aW9uVGltZTogZXhwaXJhdGlvblRpbWUsXG4gICAgICBwYXJ0aWFsU3RhdGU6IHsgZWxlbWVudDogZWxlbWVudCB9LFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgaXNSZXBsYWNlOiBmYWxzZSxcbiAgICAgIGlzRm9yY2VkOiBmYWxzZSxcbiAgICAgIGNhcHR1cmVkVmFsdWU6IG51bGwsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpbnNlcnRVcGRhdGVJbnRvRmliZXIoY3VycmVudCwgdXBkYXRlKTtcbiAgICBzY2hlZHVsZVdvcmsoY3VycmVudCwgZXhwaXJhdGlvblRpbWUpO1xuXG4gICAgcmV0dXJuIGV4cGlyYXRpb25UaW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShlbGVtZW50LCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgY3VycmVudFRpbWUsIGV4cGlyYXRpb25UaW1lLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIHRoaXMgaXMgYSBuZXN0ZWQgY29udGFpbmVyLCB0aGlzIHdvbid0IGJlIHRoZSByb290LlxuICAgIHZhciBjdXJyZW50ID0gY29udGFpbmVyLmN1cnJlbnQ7XG5cbiAgICB7XG4gICAgICBpZiAoUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgICAgICBpZiAoY3VycmVudC5hbHRlcm5hdGUgPT09IG51bGwpIHtcbiAgICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uTW91bnRDb250YWluZXIoY29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbC5vblVubW91bnRDb250YWluZXIoY29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uVXBkYXRlQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29udGV4dCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCk7XG4gICAgaWYgKGNvbnRhaW5lci5jb250ZXh0ID09PSBudWxsKSB7XG4gICAgICBjb250YWluZXIuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5wZW5kaW5nQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjaGVkdWxlUm9vdFVwZGF0ZShjdXJyZW50LCBlbGVtZW50LCBjdXJyZW50VGltZSwgZXhwaXJhdGlvblRpbWUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRIb3N0SW5zdGFuY2UoZmliZXIpIHtcbiAgICB2YXIgaG9zdEZpYmVyID0gZmluZEN1cnJlbnRIb3N0RmliZXIoZmliZXIpO1xuICAgIGlmIChob3N0RmliZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaG9zdEZpYmVyLnN0YXRlTm9kZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlQ29udGFpbmVyOiBmdW5jdGlvbiAoY29udGFpbmVySW5mbywgaXNBc3luYywgaHlkcmF0ZSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyUm9vdChjb250YWluZXJJbmZvLCBpc0FzeW5jLCBoeWRyYXRlKTtcbiAgICB9LFxuICAgIHVwZGF0ZUNvbnRhaW5lcjogZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBjYWxsYmFjaykge1xuICAgICAgdmFyIGN1cnJlbnQgPSBjb250YWluZXIuY3VycmVudDtcbiAgICAgIHZhciBjdXJyZW50VGltZSA9IHJlY2FsY3VsYXRlQ3VycmVudFRpbWUoKTtcbiAgICAgIHZhciBleHBpcmF0aW9uVGltZSA9IGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIoY3VycmVudCk7XG4gICAgICByZXR1cm4gdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShlbGVtZW50LCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgY3VycmVudFRpbWUsIGV4cGlyYXRpb25UaW1lLCBjYWxsYmFjayk7XG4gICAgfSxcbiAgICB1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOiBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIGV4cGlyYXRpb25UaW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gcmVjYWxjdWxhdGVDdXJyZW50VGltZSgpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoZWxlbWVudCwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIGN1cnJlbnRUaW1lLCBleHBpcmF0aW9uVGltZSwgY2FsbGJhY2spO1xuICAgIH0sXG5cblxuICAgIGZsdXNoUm9vdDogZmx1c2hSb290LFxuXG4gICAgcmVxdWVzdFdvcms6IHJlcXVlc3RXb3JrLFxuXG4gICAgY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjogY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixcblxuICAgIGJhdGNoZWRVcGRhdGVzOiBiYXRjaGVkVXBkYXRlcyxcblxuICAgIHVuYmF0Y2hlZFVwZGF0ZXM6IHVuYmF0Y2hlZFVwZGF0ZXMsXG5cbiAgICBkZWZlcnJlZFVwZGF0ZXM6IGRlZmVycmVkVXBkYXRlcyxcblxuICAgIHN5bmNVcGRhdGVzOiBzeW5jVXBkYXRlcyxcblxuICAgIGludGVyYWN0aXZlVXBkYXRlczogaW50ZXJhY3RpdmVVcGRhdGVzLFxuXG4gICAgZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6IGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzLFxuXG4gICAgZmx1c2hDb250cm9sbGVkOiBmbHVzaENvbnRyb2xsZWQsXG5cbiAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyxcblxuICAgIGdldFB1YmxpY1Jvb3RJbnN0YW5jZTogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgdmFyIGNvbnRhaW5lckZpYmVyID0gY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgICBpZiAoIWNvbnRhaW5lckZpYmVyLmNoaWxkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjb250YWluZXJGaWJlci5jaGlsZC50YWcpIHtcbiAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgIHJldHVybiBnZXRQdWJsaWNJbnN0YW5jZShjb250YWluZXJGaWJlci5jaGlsZC5zdGF0ZU5vZGUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBjb250YWluZXJGaWJlci5jaGlsZC5zdGF0ZU5vZGU7XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgZmluZEhvc3RJbnN0YW5jZTogZmluZEhvc3RJbnN0YW5jZSxcblxuICAgIGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOiBmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgIHZhciBob3N0RmliZXIgPSBmaW5kQ3VycmVudEhvc3RGaWJlcldpdGhOb1BvcnRhbHMoZmliZXIpO1xuICAgICAgaWYgKGhvc3RGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBob3N0RmliZXIuc3RhdGVOb2RlO1xuICAgIH0sXG4gICAgaW5qZWN0SW50b0RldlRvb2xzOiBmdW5jdGlvbiAoZGV2VG9vbHNDb25maWcpIHtcbiAgICAgIHZhciBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSA9IGRldlRvb2xzQ29uZmlnLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO1xuXG4gICAgICByZXR1cm4gaW5qZWN0SW50ZXJuYWxzKF9hc3NpZ24oe30sIGRldlRvb2xzQ29uZmlnLCB7XG4gICAgICAgIGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOiBmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgICByZXR1cm4gZmluZEhvc3RJbnN0YW5jZShmaWJlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICBpZiAoIWZpbmRGaWJlckJ5SG9zdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBNaWdodCBub3QgYmUgaW1wbGVtZW50ZWQgYnkgdGhlIHJlbmRlcmVyLlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgUmVhY3RGaWJlclJlY29uY2lsZXIkMiA9IE9iamVjdC5mcmVlemUoe1xuXHRkZWZhdWx0OiBSZWFjdEZpYmVyUmVjb25jaWxlciQxXG59KTtcblxudmFyIFJlYWN0RmliZXJSZWNvbmNpbGVyJDMgPSAoIFJlYWN0RmliZXJSZWNvbmNpbGVyJDIgJiYgUmVhY3RGaWJlclJlY29uY2lsZXIkMSApIHx8IFJlYWN0RmliZXJSZWNvbmNpbGVyJDI7XG5cbi8vIFRPRE86IGJ1bmRsZSBGbG93IHR5cGVzIHdpdGggdGhlIHBhY2thZ2UuXG5cblxuXG4vLyBUT0RPOiBkZWNpZGUgb24gdGhlIHRvcC1sZXZlbCBleHBvcnQgZm9ybS5cbi8vIFRoaXMgaXMgaGFja3kgYnV0IG1ha2VzIGl0IHdvcmsgd2l0aCBib3RoIFJvbGx1cCBhbmQgSmVzdC5cbnZhciByZWFjdFJlY29uY2lsZXIgPSBSZWFjdEZpYmVyUmVjb25jaWxlciQzWydkZWZhdWx0J10gPyBSZWFjdEZpYmVyUmVjb25jaWxlciQzWydkZWZhdWx0J10gOiBSZWFjdEZpYmVyUmVjb25jaWxlciQzO1xuXG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVySW5mbyxcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIEFQSSBmb3IgY3Jvc3MtcmVuZGVyZXIgaW1wbGVtZW50YXRpb24uXG5pbXBsZW1lbnRhdGlvbikge1xuICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3cgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IFBvcnRhbFxuICAgICQkdHlwZW9mOiBSRUFDVF9QT1JUQUxfVFlQRSxcbiAgICBrZXk6IGtleSA9PSBudWxsID8gbnVsbCA6ICcnICsga2V5LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgIGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvblxuICB9O1xufVxuXG4vLyBUT0RPOiB0aGlzIGlzIHNwZWNpYWwgYmVjYXVzZSBpdCBnZXRzIGltcG9ydGVkIGR1cmluZyBidWlsZC5cblxudmFyIFJlYWN0VmVyc2lvbiA9ICcxNi4zLjEnO1xuXG4vLyBhIHJlcXVlc3RBbmltYXRpb25GcmFtZSwgc3RvcmluZyB0aGUgdGltZSBmb3IgdGhlIHN0YXJ0IG9mIHRoZSBmcmFtZSwgdGhlblxuLy8gc2NoZWR1bGluZyBhIHBvc3RNZXNzYWdlIHdoaWNoIGdldHMgc2NoZWR1bGVkIGFmdGVyIHBhaW50LiBXaXRoaW4gdGhlXG4vLyBwb3N0TWVzc2FnZSBoYW5kbGVyIGRvIGFzIG11Y2ggd29yayBhcyBwb3NzaWJsZSB1bnRpbCB0aW1lICsgZnJhbWUgcmF0ZS5cbi8vIEJ5IHNlcGFyYXRpbmcgdGhlIGlkbGUgY2FsbCBpbnRvIGEgc2VwYXJhdGUgZXZlbnQgdGljayB3ZSBlbnN1cmUgdGhhdFxuLy8gbGF5b3V0LCBwYWludCBhbmQgb3RoZXIgYnJvd3NlciB3b3JrIGlzIGNvdW50ZWQgYWdhaW5zdCB0aGUgYXZhaWxhYmxlIHRpbWUuXG4vLyBUaGUgZnJhbWUgcmF0ZSBpcyBkeW5hbWljYWxseSBhZGp1c3RlZC5cblxue1xuICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCAnUmVhY3QgZGVwZW5kcyBvbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgJyArICdwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHMnKTtcbiAgfVxufVxuXG52YXIgaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbic7XG5cbnZhciBub3cgPSB2b2lkIDA7XG5pZiAoaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cpIHtcbiAgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfTtcbn0gZWxzZSB7XG4gIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogVGhlcmUncyBubyB3YXkgdG8gY2FuY2VsLCBiZWNhdXNlIEZpYmVyIGRvZXNuJ3QgYXRtLlxudmFyIHJJQyA9IHZvaWQgMDtcbnZhciBjSUMgPSB2b2lkIDA7XG5cbmlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHJJQyA9IGZ1bmN0aW9uIChmcmFtZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZnJhbWVDYWxsYmFjayh7XG4gICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlkVGltZW91dDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBjSUMgPSBmdW5jdGlvbiAodGltZW91dElEKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG4gIH07XG59IGVsc2UgaWYgKGFsd2F5c1VzZVJlcXVlc3RJZGxlQ2FsbGJhY2tQb2x5ZmlsbCB8fCB0eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gIC8vIFBvbHlmaWxsIHJlcXVlc3RJZGxlQ2FsbGJhY2sgYW5kIGNhbmNlbElkbGVDYWxsYmFja1xuXG4gIHZhciBzY2hlZHVsZWRSSUNDYWxsYmFjayA9IG51bGw7XG4gIHZhciBpc0lkbGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgdmFyIHRpbWVvdXRUaW1lID0gLTE7XG5cbiAgdmFyIGlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICB2YXIgZnJhbWVEZWFkbGluZSA9IDA7XG4gIC8vIFdlIHN0YXJ0IG91dCBhc3N1bWluZyB0aGF0IHdlIHJ1biBhdCAzMGZwcyBidXQgdGhlbiB0aGUgaGV1cmlzdGljIHRyYWNraW5nXG4gIC8vIHdpbGwgYWRqdXN0IHRoaXMgdmFsdWUgdG8gYSBmYXN0ZXIgZnBzIGlmIHdlIGdldCBtb3JlIGZyZXF1ZW50IGFuaW1hdGlvblxuICAvLyBmcmFtZXMuXG4gIHZhciBwcmV2aW91c0ZyYW1lVGltZSA9IDMzO1xuICB2YXIgYWN0aXZlRnJhbWVUaW1lID0gMzM7XG5cbiAgdmFyIGZyYW1lRGVhZGxpbmVPYmplY3QgPSB2b2lkIDA7XG4gIGlmIChoYXNOYXRpdmVQZXJmb3JtYW5jZU5vdykge1xuICAgIGZyYW1lRGVhZGxpbmVPYmplY3QgPSB7XG4gICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgaWYgd2UgaGF2ZSBhIHBlcmZvcm1hbmNlIHRpbWVyIHRoYXQgdGhlIHJBRiBjYWxsYmFja1xuICAgICAgICAvLyBnZXRzIGEgcGVyZm9ybWFuY2UgdGltZXIgdmFsdWUuIE5vdCBzdXJlIGlmIHRoaXMgaXMgYWx3YXlzIHRydWUuXG4gICAgICAgIHZhciByZW1haW5pbmcgPSBmcmFtZURlYWRsaW5lIC0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIHJldHVybiByZW1haW5pbmcgPiAwID8gcmVtYWluaW5nIDogMDtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZyYW1lRGVhZGxpbmVPYmplY3QgPSB7XG4gICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gRGF0ZS5ub3coKVxuICAgICAgICB2YXIgcmVtYWluaW5nID0gZnJhbWVEZWFkbGluZSAtIERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiByZW1haW5pbmcgPiAwID8gcmVtYWluaW5nIDogMDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gV2UgdXNlIHRoZSBwb3N0TWVzc2FnZSB0cmljayB0byBkZWZlciBpZGxlIHdvcmsgdW50aWwgYWZ0ZXIgdGhlIHJlcGFpbnQuXG4gIHZhciBtZXNzYWdlS2V5ID0gJ19fcmVhY3RJZGxlQ2FsbGJhY2skJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuICB2YXIgaWRsZVRpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuc291cmNlICE9PSB3aW5kb3cgfHwgZXZlbnQuZGF0YSAhPT0gbWVzc2FnZUtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlzSWRsZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbm93KCk7XG4gICAgaWYgKGZyYW1lRGVhZGxpbmUgLSBjdXJyZW50VGltZSA8PSAwKSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIHRpbWUgbGVmdCBpbiB0aGlzIGlkbGUgcGVyaW9kLiBDaGVjayBpZiB0aGUgY2FsbGJhY2sgaGFzXG4gICAgICAvLyBhIHRpbWVvdXQgYW5kIHdoZXRoZXIgaXQncyBiZWVuIGV4Y2VlZGVkLlxuICAgICAgaWYgKHRpbWVvdXRUaW1lICE9PSAtMSAmJiB0aW1lb3V0VGltZSA8PSBjdXJyZW50VGltZSkge1xuICAgICAgICAvLyBFeGNlZWRlZCB0aGUgdGltZW91dC4gSW52b2tlIHRoZSBjYWxsYmFjayBldmVuIHRob3VnaCB0aGVyZSdzIG5vXG4gICAgICAgIC8vIHRpbWUgbGVmdC5cbiAgICAgICAgZnJhbWVEZWFkbGluZU9iamVjdC5kaWRUaW1lb3V0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vIHRpbWVvdXQuXG4gICAgICAgIGlmICghaXNBbmltYXRpb25GcmFtZVNjaGVkdWxlZCkge1xuICAgICAgICAgIC8vIFNjaGVkdWxlIGFub3RoZXIgYW5pbWF0aW9uIGNhbGxiYWNrIHNvIHdlIHJldHJ5IGxhdGVyLlxuICAgICAgICAgIGlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb25UaWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFeGl0IHdpdGhvdXQgaW52b2tpbmcgdGhlIGNhbGxiYWNrLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlJ3Mgc3RpbGwgdGltZSBsZWZ0IGluIHRoaXMgaWRsZSBwZXJpb2QuXG4gICAgICBmcmFtZURlYWRsaW5lT2JqZWN0LmRpZFRpbWVvdXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aW1lb3V0VGltZSA9IC0xO1xuICAgIHZhciBjYWxsYmFjayA9IHNjaGVkdWxlZFJJQ0NhbGxiYWNrO1xuICAgIHNjaGVkdWxlZFJJQ0NhbGxiYWNrID0gbnVsbDtcbiAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKGZyYW1lRGVhZGxpbmVPYmplY3QpO1xuICAgIH1cbiAgfTtcbiAgLy8gQXNzdW1lcyB0aGF0IHdlIGhhdmUgYWRkRXZlbnRMaXN0ZW5lciBpbiB0aGlzIGVudmlyb25tZW50LiBNaWdodCBuZWVkXG4gIC8vIHNvbWV0aGluZyBiZXR0ZXIgZm9yIG9sZCBJRS5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBpZGxlVGljaywgZmFsc2UpO1xuXG4gIHZhciBhbmltYXRpb25UaWNrID0gZnVuY3Rpb24gKHJhZlRpbWUpIHtcbiAgICBpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgdmFyIG5leHRGcmFtZVRpbWUgPSByYWZUaW1lIC0gZnJhbWVEZWFkbGluZSArIGFjdGl2ZUZyYW1lVGltZTtcbiAgICBpZiAobmV4dEZyYW1lVGltZSA8IGFjdGl2ZUZyYW1lVGltZSAmJiBwcmV2aW91c0ZyYW1lVGltZSA8IGFjdGl2ZUZyYW1lVGltZSkge1xuICAgICAgaWYgKG5leHRGcmFtZVRpbWUgPCA4KSB7XG4gICAgICAgIC8vIERlZmVuc2l2ZSBjb2RpbmcuIFdlIGRvbid0IHN1cHBvcnQgaGlnaGVyIGZyYW1lIHJhdGVzIHRoYW4gMTIwaHouXG4gICAgICAgIC8vIElmIHdlIGdldCBsb3dlciB0aGFuIHRoYXQsIGl0IGlzIHByb2JhYmx5IGEgYnVnLlxuICAgICAgICBuZXh0RnJhbWVUaW1lID0gODtcbiAgICAgIH1cbiAgICAgIC8vIElmIG9uZSBmcmFtZSBnb2VzIGxvbmcsIHRoZW4gdGhlIG5leHQgb25lIGNhbiBiZSBzaG9ydCB0byBjYXRjaCB1cC5cbiAgICAgIC8vIElmIHR3byBmcmFtZXMgYXJlIHNob3J0IGluIGEgcm93LCB0aGVuIHRoYXQncyBhbiBpbmRpY2F0aW9uIHRoYXQgd2VcbiAgICAgIC8vIGFjdHVhbGx5IGhhdmUgYSBoaWdoZXIgZnJhbWUgcmF0ZSB0aGFuIHdoYXQgd2UncmUgY3VycmVudGx5IG9wdGltaXppbmcuXG4gICAgICAvLyBXZSBhZGp1c3Qgb3VyIGhldXJpc3RpYyBkeW5hbWljYWxseSBhY2NvcmRpbmdseS4gRm9yIGV4YW1wbGUsIGlmIHdlJ3JlXG4gICAgICAvLyBydW5uaW5nIG9uIDEyMGh6IGRpc3BsYXkgb3IgOTBoeiBWUiBkaXNwbGF5LlxuICAgICAgLy8gVGFrZSB0aGUgbWF4IG9mIHRoZSB0d28gaW4gY2FzZSBvbmUgb2YgdGhlbSB3YXMgYW4gYW5vbWFseSBkdWUgdG9cbiAgICAgIC8vIG1pc3NlZCBmcmFtZSBkZWFkbGluZXMuXG4gICAgICBhY3RpdmVGcmFtZVRpbWUgPSBuZXh0RnJhbWVUaW1lIDwgcHJldmlvdXNGcmFtZVRpbWUgPyBwcmV2aW91c0ZyYW1lVGltZSA6IG5leHRGcmFtZVRpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzRnJhbWVUaW1lID0gbmV4dEZyYW1lVGltZTtcbiAgICB9XG4gICAgZnJhbWVEZWFkbGluZSA9IHJhZlRpbWUgKyBhY3RpdmVGcmFtZVRpbWU7XG4gICAgaWYgKCFpc0lkbGVTY2hlZHVsZWQpIHtcbiAgICAgIGlzSWRsZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgICB3aW5kb3cucG9zdE1lc3NhZ2UobWVzc2FnZUtleSwgJyonKTtcbiAgICB9XG4gIH07XG5cbiAgcklDID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgLy8gVGhpcyBhc3N1bWVzIHRoYXQgd2Ugb25seSBzY2hlZHVsZSBvbmUgY2FsbGJhY2sgYXQgYSB0aW1lIGJlY2F1c2UgdGhhdCdzXG4gICAgLy8gaG93IEZpYmVyIHVzZXMgaXQuXG4gICAgc2NoZWR1bGVkUklDQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICBpZiAob3B0aW9ucyAhPSBudWxsICYmIHR5cGVvZiBvcHRpb25zLnRpbWVvdXQgPT09ICdudW1iZXInKSB7XG4gICAgICB0aW1lb3V0VGltZSA9IG5vdygpICsgb3B0aW9ucy50aW1lb3V0O1xuICAgIH1cbiAgICBpZiAoIWlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQpIHtcbiAgICAgIC8vIElmIHJBRiBkaWRuJ3QgYWxyZWFkeSBzY2hlZHVsZSBvbmUsIHdlIG5lZWQgdG8gc2NoZWR1bGUgYSBmcmFtZS5cbiAgICAgIC8vIFRPRE86IElmIHRoaXMgckFGIGRvZXNuJ3QgbWF0ZXJpYWxpemUgYmVjYXVzZSB0aGUgYnJvd3NlciB0aHJvdHRsZXMsIHdlXG4gICAgICAvLyBtaWdodCB3YW50IHRvIHN0aWxsIGhhdmUgc2V0VGltZW91dCB0cmlnZ2VyIHJJQyBhcyBhIGJhY2t1cCB0byBlbnN1cmVcbiAgICAgIC8vIHRoYXQgd2Uga2VlcCBwZXJmb3JtaW5nIHdvcmsuXG4gICAgICBpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb25UaWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgY0lDID0gZnVuY3Rpb24gKCkge1xuICAgIHNjaGVkdWxlZFJJQ0NhbGxiYWNrID0gbnVsbDtcbiAgICBpc0lkbGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICB0aW1lb3V0VGltZSA9IC0xO1xuICB9O1xufSBlbHNlIHtcbiAgcklDID0gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2s7XG4gIGNJQyA9IHdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7XG59XG5cbnZhciBkaWRXYXJuU2VsZWN0ZWRTZXRPbk9wdGlvbiA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgdmFyIGNvbnRlbnQgPSAnJztcblxuICAvLyBGbGF0dGVuIGNoaWxkcmVuIGFuZCB3YXJuIGlmIHRoZXkgYXJlbid0IHN0cmluZ3Mgb3IgbnVtYmVycztcbiAgLy8gaW52YWxpZCB0eXBlcyBhcmUgaWdub3JlZC5cbiAgLy8gV2UgY2FuIHNpbGVudGx5IHNraXAgdGhlbSBiZWNhdXNlIGludmFsaWQgRE9NIG5lc3Rpbmcgd2FybmluZ1xuICAvLyBjYXRjaGVzIHRoZXNlIGNhc2VzIGluIEZpYmVyLlxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBob3N0IGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhlbGVtZW50LCBwcm9wcykge1xuICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cbiAge1xuICAgIGlmIChwcm9wcy5zZWxlY3RlZCAhPSBudWxsICYmICFkaWRXYXJuU2VsZWN0ZWRTZXRPbk9wdGlvbikge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBvbiA8c2VsZWN0PiBpbnN0ZWFkIG9mICcgKyAnc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LicpO1xuICAgICAgZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24gPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwb3N0TW91bnRXcmFwcGVyJDEoZWxlbWVudCwgcHJvcHMpIHtcbiAgLy8gdmFsdWU9XCJcIiBzaG91bGQgbWFrZSBhIHZhbHVlIGF0dHJpYnV0ZSAoIzYyMTkpXG4gIGlmIChwcm9wcy52YWx1ZSAhPSBudWxsKSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcHJvcHMudmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyQxKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBob3N0UHJvcHMgPSBfYXNzaWduKHsgY2hpbGRyZW46IHVuZGVmaW5lZCB9LCBwcm9wcyk7XG4gIHZhciBjb250ZW50ID0gZmxhdHRlbkNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcblxuICBpZiAoY29udGVudCkge1xuICAgIGhvc3RQcm9wcy5jaGlsZHJlbiA9IGNvbnRlbnQ7XG4gIH1cblxuICByZXR1cm4gaG9zdFByb3BzO1xufVxuXG4vLyBUT0RPOiBkaXJlY3QgaW1wb3J0cyBsaWtlIHNvbWUtcGFja2FnZS9zcmMvKiBhcmUgYmFkLiBGaXggbWUuXG52YXIgZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lJDMgPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyLmdldEN1cnJlbnRGaWJlck93bmVyTmFtZTtcbnZhciBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDQgPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyLmdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW07XG5cblxudmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSQxID0gdm9pZCAwO1xuXG57XG4gIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSQxID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAgdmFyIG93bmVyTmFtZSA9IGdldEN1cnJlbnRGaWJlck93bmVyTmFtZSQzKCk7XG4gIGlmIChvd25lck5hbWUpIHtcbiAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXJOYW1lICsgJ2AuJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbnZhciB2YWx1ZVByb3BOYW1lcyA9IFsndmFsdWUnLCAnZGVmYXVsdFZhbHVlJ107XG5cbi8qKlxuICogVmFsaWRhdGlvbiBmdW5jdGlvbiBmb3IgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrU2VsZWN0UHJvcFR5cGVzKHByb3BzKSB7XG4gIFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCdzZWxlY3QnLCBwcm9wcywgZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQ0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlUHJvcE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3BOYW1lID0gdmFsdWVQcm9wTmFtZXNbaV07XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSk7XG4gICAgaWYgKHByb3BzLm11bHRpcGxlICYmICFpc0FycmF5KSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIGAlc2AgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGFuIGFycmF5IGlmICcgKyAnYG11bHRpcGxlYCBpcyB0cnVlLiVzJywgcHJvcE5hbWUsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpKTtcbiAgICB9IGVsc2UgaWYgKCFwcm9wcy5tdWx0aXBsZSAmJiBpc0FycmF5KSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIGAlc2AgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGEgc2NhbGFyICcgKyAndmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMobm9kZSwgbXVsdGlwbGUsIHByb3BWYWx1ZSwgc2V0RGVmYXVsdFNlbGVjdGVkKSB7XG4gIHZhciBvcHRpb25zID0gbm9kZS5vcHRpb25zO1xuXG4gIGlmIChtdWx0aXBsZSkge1xuICAgIHZhciBzZWxlY3RlZFZhbHVlcyA9IHByb3BWYWx1ZTtcbiAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIFByZWZpeCB0byBhdm9pZCBjaGFvcyB3aXRoIHNwZWNpYWwga2V5cy5cbiAgICAgIHNlbGVjdGVkVmFsdWVbJyQnICsgc2VsZWN0ZWRWYWx1ZXNbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG9wdGlvbnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RlZFZhbHVlLmhhc093blByb3BlcnR5KCckJyArIG9wdGlvbnNbX2ldLnZhbHVlKTtcbiAgICAgIGlmIChvcHRpb25zW19pXS5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tfaV0uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBzZXREZWZhdWx0U2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tfaV0uZGVmYXVsdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRG8gbm90IHNldCBgc2VsZWN0LnZhbHVlYCBhcyBleGFjdCBiZWhhdmlvciBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyBhbGxcbiAgICAvLyBicm93c2VycyBmb3IgYWxsIGNhc2VzLlxuICAgIHZhciBfc2VsZWN0ZWRWYWx1ZSA9ICcnICsgcHJvcFZhbHVlO1xuICAgIHZhciBkZWZhdWx0U2VsZWN0ZWQgPSBudWxsO1xuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IG9wdGlvbnMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgaWYgKG9wdGlvbnNbX2kyXS52YWx1ZSA9PT0gX3NlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgb3B0aW9uc1tfaTJdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHNldERlZmF1bHRTZWxlY3RlZCkge1xuICAgICAgICAgIG9wdGlvbnNbX2kyXS5kZWZhdWx0U2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0U2VsZWN0ZWQgPT09IG51bGwgJiYgIW9wdGlvbnNbX2kyXS5kaXNhYmxlZCkge1xuICAgICAgICBkZWZhdWx0U2VsZWN0ZWQgPSBvcHRpb25zW19pMl07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkZWZhdWx0U2VsZWN0ZWQgIT09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRTZWxlY3RlZC5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxzZWxlY3Q+IGhvc3QgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG5cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyQyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHJldHVybiBfYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGluaXRXcmFwcGVyU3RhdGUkMShlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHtcbiAgICBjaGVja1NlbGVjdFByb3BUeXBlcyhwcm9wcyk7XG4gIH1cblxuICB2YXIgdmFsdWUgPSBwcm9wcy52YWx1ZTtcbiAgbm9kZS5fd3JhcHBlclN0YXRlID0ge1xuICAgIGluaXRpYWxWYWx1ZTogdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgIHdhc011bHRpcGxlOiAhIXByb3BzLm11bHRpcGxlXG4gIH07XG5cbiAge1xuICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1NlbGVjdCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgc2VsZWN0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJyk7XG4gICAgICBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvc3RNb3VudFdyYXBwZXIkMihlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIG5vZGUubXVsdGlwbGUgPSAhIXByb3BzLm11bHRpcGxlO1xuICB2YXIgdmFsdWUgPSBwcm9wcy52YWx1ZTtcbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHZhbHVlLCBmYWxzZSk7XG4gIH0gZWxzZSBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHByb3BzLmRlZmF1bHRWYWx1ZSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9zdFVwZGF0ZVdyYXBwZXIoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICAvLyBBZnRlciB0aGUgaW5pdGlhbCBtb3VudCwgd2UgY29udHJvbCBzZWxlY3RlZC1uZXNzIG1hbnVhbGx5IHNvIGRvbid0IHBhc3NcbiAgLy8gdGhpcyB2YWx1ZSBkb3duXG4gIG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIHdhc011bHRpcGxlID0gbm9kZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO1xuICBub2RlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUgPSAhIXByb3BzLm11bHRpcGxlO1xuXG4gIHZhciB2YWx1ZSA9IHByb3BzLnZhbHVlO1xuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZU9wdGlvbnMobm9kZSwgISFwcm9wcy5tdWx0aXBsZSwgdmFsdWUsIGZhbHNlKTtcbiAgfSBlbHNlIGlmICh3YXNNdWx0aXBsZSAhPT0gISFwcm9wcy5tdWx0aXBsZSkge1xuICAgIC8vIEZvciBzaW1wbGljaXR5LCByZWFwcGx5IGBkZWZhdWx0VmFsdWVgIGlmIGBtdWx0aXBsZWAgaXMgdG9nZ2xlZC5cbiAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnMobm9kZSwgISFwcm9wcy5tdWx0aXBsZSwgcHJvcHMuZGVmYXVsdFZhbHVlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmV2ZXJ0IHRoZSBzZWxlY3QgYmFjayB0byBpdHMgZGVmYXVsdCB1bnNlbGVjdGVkIHN0YXRlLlxuICAgICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCBwcm9wcy5tdWx0aXBsZSA/IFtdIDogJycsIGZhbHNlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIHZhbHVlID0gcHJvcHMudmFsdWU7XG5cbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHZhbHVlLCBmYWxzZSk7XG4gIH1cbn1cblxuLy8gVE9ETzogZGlyZWN0IGltcG9ydHMgbGlrZSBzb21lLXBhY2thZ2Uvc3JjLyogYXJlIGJhZC4gRml4IG1lLlxudmFyIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kNSA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bTtcblxudmFyIGRpZFdhcm5WYWxEZWZhdWx0VmFsID0gZmFsc2U7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDx0ZXh0YXJlYT4gaG9zdCBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyBgdmFsdWVgLCBhbmRcbiAqIGBkZWZhdWx0VmFsdWVgLiBUaGlzIGRpZmZlcnMgZnJvbSB0aGUgdHJhZGl0aW9uYWwgRE9NIEFQSSBiZWNhdXNlIHZhbHVlIGlzXG4gKiB1c3VhbGx5IHNldCBhcyBQQ0RBVEEgY2hpbGRyZW4uXG4gKlxuICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgYWZmZWN0IHRoZVxuICogdmFsdWUgd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogSWYgYHZhbHVlYCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGxcbiAqIG5vdCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cbiAqIG9yZGVyIGZvciB0aGUgcmVuZGVyZWQgZWxlbWVudCB0byBiZSB1cGRhdGVkLlxuICpcbiAqIFRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhbiBlbXB0eSB2YWx1ZSwgdGhlIHByb3BcbiAqIGBkZWZhdWx0VmFsdWVgIGlmIHNwZWNpZmllZCwgb3IgdGhlIGNoaWxkcmVuIGNvbnRlbnQgKGRlcHJlY2F0ZWQpLlxuICovXG5cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyQzKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgIShwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LicpIDogdm9pZCAwO1xuXG4gIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gIC8vIGdldCByZXNldCBpZiBgdGV4dENvbnRlbnRgIGlzIG11dGF0ZWQuICBXZSBjb3VsZCBhZGQgYSBjaGVjayBpbiBzZXRUZXh0Q29udGVudFxuICAvLyB0byBvbmx5IHNldCB0aGUgdmFsdWUgaWYvd2hlbiB0aGUgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBub2RlIHZhbHVlICh3aGljaCB3b3VsZFxuICAvLyBjb21wbGV0ZWx5IHNvbHZlIHRoaXMgSUU5IGJ1ZyksIGJ1dCBTZWJhc3RpYW4rU29waGllIHNlZW1lZCB0byBsaWtlIHRoaXNcbiAgLy8gc29sdXRpb24uIFRoZSB2YWx1ZSBjYW4gYmUgYSBib29sZWFuIG9yIG9iamVjdCBzbyB0aGF0J3Mgd2h5IGl0J3MgZm9yY2VkXG4gIC8vIHRvIGJlIGEgc3RyaW5nLlxuICB2YXIgaG9zdFByb3BzID0gX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgIGNoaWxkcmVuOiAnJyArIG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWVcbiAgfSk7XG5cbiAgcmV0dXJuIGhvc3RQcm9wcztcbn1cblxuZnVuY3Rpb24gaW5pdFdyYXBwZXJTdGF0ZSQyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAge1xuICAgIFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCd0ZXh0YXJlYScsIHByb3BzLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDUpO1xuICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsRGVmYXVsdFZhbCkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1RleHRhcmVhIGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSB2YWx1ZSBwcm9wLCBvciB0aGUgZGVmYXVsdFZhbHVlIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCB0ZXh0YXJlYSAnICsgJ2FuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnKTtcbiAgICAgIGRpZFdhcm5WYWxEZWZhdWx0VmFsID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbFZhbHVlID0gcHJvcHMudmFsdWU7XG5cbiAgLy8gT25seSBib3RoZXIgZmV0Y2hpbmcgZGVmYXVsdCB2YWx1ZSBpZiB3ZSdyZSBnb2luZyB0byB1c2UgaXRcbiAgaWYgKGluaXRpYWxWYWx1ZSA9PSBudWxsKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgY2hpbGRyZW4gY29udGVudCBpbiA8dGV4dGFyZWE+LlxuICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgKyAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nKTtcbiAgICAgIH1cbiAgICAgICEoZGVmYXVsdFZhbHVlID09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnSWYgeW91IHN1cHBseSBgZGVmYXVsdFZhbHVlYCBvbiBhIDx0ZXh0YXJlYT4sIGRvIG5vdCBwYXNzIGNoaWxkcmVuLicpIDogdm9pZCAwO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICEoY2hpbGRyZW4ubGVuZ3RoIDw9IDEpID8gaW52YXJpYW50KGZhbHNlLCAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLicpIDogdm9pZCAwO1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0VmFsdWUgPSAnJyArIGNoaWxkcmVuO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuICAgIH1cbiAgICBpbml0aWFsVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBub2RlLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgaW5pdGlhbFZhbHVlOiAnJyArIGluaXRpYWxWYWx1ZVxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVXcmFwcGVyJDEoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgdmFsdWUgPSBwcm9wcy52YWx1ZTtcbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICB2YXIgbmV3VmFsdWUgPSAnJyArIHZhbHVlO1xuXG4gICAgLy8gVG8gYXZvaWQgc2lkZSBlZmZlY3RzIChzdWNoIGFzIGxvc2luZyB0ZXh0IHNlbGVjdGlvbiksIG9ubHkgc2V0IHZhbHVlIGlmIGNoYW5nZWRcbiAgICBpZiAobmV3VmFsdWUgIT09IG5vZGUudmFsdWUpIHtcbiAgICAgIG5vZGUudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfVxuICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb3N0TW91bnRXcmFwcGVyJDMoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICAvLyBUaGlzIGlzIGluIHBvc3RNb3VudCBiZWNhdXNlIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBET00gbm9kZSwgd2hpY2ggaXMgbm90XG4gIC8vIGF2YWlsYWJsZSB1bnRpbCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBtb3VudGVkLlxuICB2YXIgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50O1xuXG4gIC8vIE9ubHkgc2V0IG5vZGUudmFsdWUgaWYgdGV4dENvbnRlbnQgaXMgZXF1YWwgdG8gdGhlIGV4cGVjdGVkXG4gIC8vIGluaXRpYWwgdmFsdWUuIEluIElFMTAvSUUxMSB0aGVyZSBpcyBhIGJ1ZyB3aGVyZSB0aGUgcGxhY2Vob2xkZXIgYXR0cmlidXRlXG4gIC8vIHdpbGwgcG9wdWxhdGUgdGV4dENvbnRlbnQgYXMgd2VsbC5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTAxNTI1L1xuICBpZiAodGV4dENvbnRlbnQgPT09IG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpIHtcbiAgICBub2RlLnZhbHVlID0gdGV4dENvbnRlbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQzKGVsZW1lbnQsIHByb3BzKSB7XG4gIC8vIERPTSBjb21wb25lbnQgaXMgc3RpbGwgbW91bnRlZDsgdXBkYXRlXG4gIHVwZGF0ZVdyYXBwZXIkMShlbGVtZW50LCBwcm9wcyk7XG59XG5cbnZhciBIVE1MX05BTUVTUEFDRSQxID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xudmFyIE1BVEhfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnO1xudmFyIFNWR19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG52YXIgTmFtZXNwYWNlcyA9IHtcbiAgaHRtbDogSFRNTF9OQU1FU1BBQ0UkMSxcbiAgbWF0aG1sOiBNQVRIX05BTUVTUEFDRSxcbiAgc3ZnOiBTVkdfTkFNRVNQQUNFXG59O1xuXG4vLyBBc3N1bWVzIHRoZXJlIGlzIG5vIHBhcmVudCBuYW1lc3BhY2UuXG5mdW5jdGlvbiBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodHlwZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzdmcnOlxuICAgICAgcmV0dXJuIFNWR19OQU1FU1BBQ0U7XG4gICAgY2FzZSAnbWF0aCc6XG4gICAgICByZXR1cm4gTUFUSF9OQU1FU1BBQ0U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBIVE1MX05BTUVTUEFDRSQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENoaWxkTmFtZXNwYWNlKHBhcmVudE5hbWVzcGFjZSwgdHlwZSkge1xuICBpZiAocGFyZW50TmFtZXNwYWNlID09IG51bGwgfHwgcGFyZW50TmFtZXNwYWNlID09PSBIVE1MX05BTUVTUEFDRSQxKSB7XG4gICAgLy8gTm8gKG9yIGRlZmF1bHQpIHBhcmVudCBuYW1lc3BhY2U6IHBvdGVudGlhbCBlbnRyeSBwb2ludC5cbiAgICByZXR1cm4gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHR5cGUpO1xuICB9XG4gIGlmIChwYXJlbnROYW1lc3BhY2UgPT09IFNWR19OQU1FU1BBQ0UgJiYgdHlwZSA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gV2UncmUgbGVhdmluZyBTVkcuXG4gICAgcmV0dXJuIEhUTUxfTkFNRVNQQUNFJDE7XG4gIH1cbiAgLy8gQnkgZGVmYXVsdCwgcGFzcyBuYW1lc3BhY2UgYmVsb3cuXG4gIHJldHVybiBwYXJlbnROYW1lc3BhY2U7XG59XG5cbi8qIGdsb2JhbHMgTVNBcHAgKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB3aGljaCBoYXMgJ3Vuc2FmZScgcHJpdmlsZWdlcyAocmVxdWlyZWQgYnkgd2luZG93czggYXBwcylcbiAqL1xudmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSBmdW5jdGlvbiAoZnVuYykge1xuICBpZiAodHlwZW9mIE1TQXBwICE9PSAndW5kZWZpbmVkJyAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnMCwgYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuYyhhcmcwLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbi8vIFNWRyB0ZW1wIGNvbnRhaW5lciBmb3IgSUUgbGFja2luZyBpbm5lckhUTUxcbnZhciByZXVzYWJsZVNWR0NvbnRhaW5lciA9IHZvaWQgMDtcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGVcbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldElubmVySFRNTCA9IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKG5vZGUsIGh0bWwpIHtcbiAgLy8gSUUgZG9lcyBub3QgaGF2ZSBpbm5lckhUTUwgZm9yIFNWRyBub2Rlcywgc28gaW5zdGVhZCB3ZSBpbmplY3QgdGhlXG4gIC8vIG5ldyBtYXJrdXAgaW4gYSB0ZW1wIG5vZGUgYW5kIHRoZW4gbW92ZSB0aGUgY2hpbGQgbm9kZXMgYWNyb3NzIGludG9cbiAgLy8gdGhlIHRhcmdldCBub2RlXG5cbiAgaWYgKG5vZGUubmFtZXNwYWNlVVJJID09PSBOYW1lc3BhY2VzLnN2ZyAmJiAhKCdpbm5lckhUTUwnIGluIG5vZGUpKSB7XG4gICAgcmV1c2FibGVTVkdDb250YWluZXIgPSByZXVzYWJsZVNWR0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByZXVzYWJsZVNWR0NvbnRhaW5lci5pbm5lckhUTUwgPSAnPHN2Zz4nICsgaHRtbCArICc8L3N2Zz4nO1xuICAgIHZhciBzdmdOb2RlID0gcmV1c2FibGVTVkdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHdoaWxlIChzdmdOb2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoc3ZnTm9kZS5maXJzdENoaWxkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG59KTtcblxuLyoqXG4gKiBTZXQgdGhlIHRleHRDb250ZW50IHByb3BlcnR5IG9mIGEgbm9kZS4gRm9yIHRleHQgdXBkYXRlcywgaXQncyBmYXN0ZXJcbiAqIHRvIHNldCB0aGUgYG5vZGVWYWx1ZWAgb2YgdGhlIFRleHQgbm9kZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHVzaW5nXG4gKiBgLnRleHRDb250ZW50YCB3aGljaCB3aWxsIHJlbW92ZSB0aGUgZXhpc3Rpbmcgbm9kZSBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgaWYgKHRleHQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblxuICAgIGlmIChmaXJzdENoaWxkICYmIGZpcnN0Q2hpbGQgPT09IG5vZGUubGFzdENoaWxkICYmIGZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0ZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn07XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG4gIGJvcmRlckltYWdlT3V0c2V0OiB0cnVlLFxuICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICBib3JkZXJJbWFnZVdpZHRoOiB0cnVlLFxuICBib3hGbGV4OiB0cnVlLFxuICBib3hGbGV4R3JvdXA6IHRydWUsXG4gIGJveE9yZGluYWxHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGNvbHVtbnM6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZmxleE9yZGVyOiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkUm93RW5kOiB0cnVlLFxuICBncmlkUm93U3BhbjogdHJ1ZSxcbiAgZ3JpZFJvd1N0YXJ0OiB0cnVlLFxuICBncmlkQ29sdW1uOiB0cnVlLFxuICBncmlkQ29sdW1uRW5kOiB0cnVlLFxuICBncmlkQ29sdW1uU3BhbjogdHJ1ZSxcbiAgZ3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB0YWJTaXplOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcblxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBmbG9vZE9wYWNpdHk6IHRydWUsXG4gIHN0b3BPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNoYXJyYXk6IHRydWUsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IHRydWUsXG4gIHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZVdpZHRoOiB0cnVlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggdmVuZG9yLXNwZWNpZmljIHByZWZpeCwgZWc6IFdlYmtpdFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBzdHlsZSBuYW1lLCBlZzogdHJhbnNpdGlvbkR1cmF0aW9uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHN0eWxlIG5hbWUgcHJlZml4ZWQgd2l0aCBgcHJlZml4YCwgcHJvcGVybHkgY2FtZWxDYXNlZCwgZWc6XG4gKiBXZWJraXRUcmFuc2l0aW9uRHVyYXRpb25cbiAqL1xuZnVuY3Rpb24gcHJlZml4S2V5KHByZWZpeCwga2V5KSB7XG4gIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgc3R5bGUgbmFtZXMgdGhhdCBtYXkgY29tZSBwYXNzZWQgaW4gcHJlZml4ZWQgYnkgYWRkaW5nIHBlcm11dGF0aW9uc1xuICogb2YgdmVuZG9yIHByZWZpeGVzLlxuICovXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdtcycsICdNb3onLCAnTyddO1xuXG4vLyBVc2luZyBPYmplY3Qua2V5cyBoZXJlLCBvciBlbHNlIHRoZSB2YW5pbGxhIGZvci1pbiBsb29wIG1ha2VzIElFOCBnbyBpbnRvIGFuXG4vLyBpbmZpbml0ZSBsb29wLCBiZWNhdXNlIGl0IGl0ZXJhdGVzIG92ZXIgdGhlIG5ld2x5IGFkZGVkIHByb3BzIHRvby5cbk9iamVjdC5rZXlzKGlzVW5pdGxlc3NOdW1iZXIpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlLCBpc0N1c3RvbVByb3BlcnR5KSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoIWlzQ3VzdG9tUHJvcGVydHkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCAmJiAhKGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkpIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnOyAvLyBQcmVzdW1lcyBpbXBsaWNpdCAncHgnIHN1ZmZpeCBmb3IgdW5pdGxlc3MgbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuICgnJyArIHZhbHVlKS50cmltKCk7XG59XG5cbnZhciB3YXJuVmFsaWRTdHlsZSA9IGVtcHR5RnVuY3Rpb247XG5cbntcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuXG4gIC8vIHN0eWxlIHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvblxuICB2YXIgYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuID0gLztcXHMqJC87XG5cbiAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgdmFyIHdhcm5lZFN0eWxlVmFsdWVzID0ge307XG4gIHZhciB3YXJuZWRGb3JOYU5WYWx1ZSA9IGZhbHNlO1xuICB2YXIgd2FybmVkRm9ySW5maW5pdHlWYWx1ZSA9IGZhbHNlO1xuXG4gIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uIChuYW1lLCBnZXRTdGFjaykge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICB3YXJuaW5nKGZhbHNlLCAnVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lcycsIG5hbWUsIGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpLCBnZXRTdGFjaygpKTtcbiAgfTtcblxuICB2YXIgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUsIGdldFN0YWNrKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgIHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lcycsIG5hbWUsIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLCBnZXRTdGFjaygpKTtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBnZXRTdGFjaykge1xuICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlN0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvbi4gXCIgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4lcycsIG5hbWUsIHZhbHVlLnJlcGxhY2UoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLCAnJyksIGdldFN0YWNrKCkpO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZUlzTmFOID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBnZXRTdGFjaykge1xuICAgIGlmICh3YXJuZWRGb3JOYU5WYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZEZvck5hTlZhbHVlID0gdHJ1ZTtcbiAgICB3YXJuaW5nKGZhbHNlLCAnYE5hTmAgaXMgYW4gaW52YWxpZCB2YWx1ZSBmb3IgdGhlIGAlc2AgY3NzIHN0eWxlIHByb3BlcnR5LiVzJywgbmFtZSwgZ2V0U3RhY2soKSk7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlSXNJbmZpbml0eSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgZ2V0U3RhY2spIHtcbiAgICBpZiAod2FybmVkRm9ySW5maW5pdHlWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZEZvckluZmluaXR5VmFsdWUgPSB0cnVlO1xuICAgIHdhcm5pbmcoZmFsc2UsICdgSW5maW5pdHlgIGlzIGFuIGludmFsaWQgdmFsdWUgZm9yIHRoZSBgJXNgIGNzcyBzdHlsZSBwcm9wZXJ0eS4lcycsIG5hbWUsIGdldFN0YWNrKCkpO1xuICB9O1xuXG4gIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBnZXRTdGFjaykge1xuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lLCBnZXRTdGFjayk7XG4gICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUsIGdldFN0YWNrKTtcbiAgICB9IGVsc2UgaWYgKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlLCBnZXRTdGFjayk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgd2FyblN0eWxlVmFsdWVJc05hTihuYW1lLCB2YWx1ZSwgZ2V0U3RhY2spO1xuICAgICAgfSBlbHNlIGlmICghaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHdhcm5TdHlsZVZhbHVlSXNJbmZpbml0eShuYW1lLCB2YWx1ZSwgZ2V0U3RhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIHdhcm5WYWxpZFN0eWxlJDEgPSB3YXJuVmFsaWRTdHlsZTtcblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciBkZWFsaW5nIHdpdGggQ1NTIHByb3BlcnRpZXMuXG4gKi9cblxuLyoqXG4gKiBUaGlzIGNyZWF0ZXMgYSBzdHJpbmcgdGhhdCBpcyBleHBlY3RlZCB0byBiZSBlcXVpdmFsZW50IHRvIHRoZSBzdHlsZVxuICogYXR0cmlidXRlIGdlbmVyYXRlZCBieSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIEl0IGJ5LXBhc3NlcyB3YXJuaW5ncyBhbmRcbiAqIHNlY3VyaXR5IGNoZWNrcyBzbyBpdCdzIG5vdCBzYWZlIHRvIHVzZSB0aGlzIHZhbHVlIGZvciBhbnl0aGluZyBvdGhlciB0aGFuXG4gKiBjb21wYXJpc29uLiBJdCBpcyBvbmx5IHVzZWQgaW4gREVWIGZvciBTU1IgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGFuZ2Vyb3VzU3RyaW5nRm9yU3R5bGVzKHN0eWxlcykge1xuICB7XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSAnJztcbiAgICB2YXIgZGVsaW1pdGVyID0gJyc7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gc3R5bGVOYW1lLmluZGV4T2YoJy0tJykgPT09IDA7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGVsaW1pdGVyICsgaHlwaGVuYXRlU3R5bGVOYW1lKHN0eWxlTmFtZSkgKyAnOic7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUsIGlzQ3VzdG9tUHJvcGVydHkpO1xuXG4gICAgICAgIGRlbGltaXRlciA9ICc7JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGZvciBtdWx0aXBsZSBzdHlsZXMgb24gYSBub2RlLiAgSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQgYXNcbiAqICcnIChlbXB0eSBzdHJpbmcpLCB0aGUgY29ycmVzcG9uZGluZyBzdHlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVuc2V0LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IHN0eWxlc1xuICovXG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMsIGdldFN0YWNrKSB7XG4gIHZhciBzdHlsZSA9IG5vZGUuc3R5bGU7XG4gIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBzdHlsZU5hbWUuaW5kZXhPZignLS0nKSA9PT0gMDtcbiAgICB7XG4gICAgICBpZiAoIWlzQ3VzdG9tUHJvcGVydHkpIHtcbiAgICAgICAgd2FyblZhbGlkU3R5bGUkMShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBnZXRTdGFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBpc0N1c3RvbVByb3BlcnR5KTtcbiAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnKSB7XG4gICAgICBzdHlsZU5hbWUgPSAnY3NzRmxvYXQnO1xuICAgIH1cbiAgICBpZiAoaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgfVxuICB9XG59XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3Mgc2hvdWxkIG9taXQgdGhlaXIgY2xvc2UgdGFnLiBXZSBrZWVwIGEgd2hpdGVsaXN0IGZvclxuLy8gdGhvc2Ugc3BlY2lhbC1jYXNlIHRhZ3MuXG5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBicjogdHJ1ZSxcbiAgY29sOiB0cnVlLFxuICBlbWJlZDogdHJ1ZSxcbiAgaHI6IHRydWUsXG4gIGltZzogdHJ1ZSxcbiAgaW5wdXQ6IHRydWUsXG4gIGtleWdlbjogdHJ1ZSxcbiAgbGluazogdHJ1ZSxcbiAgbWV0YTogdHJ1ZSxcbiAgcGFyYW06IHRydWUsXG4gIHNvdXJjZTogdHJ1ZSxcbiAgdHJhY2s6IHRydWUsXG4gIHdicjogdHJ1ZVxufTtcblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBjYW5ub3QgaGF2ZSBjaGlsZHJlbi4gVGhpcyBoYXMgdGhlIHNhbWUgcHVycG9zZSBhc1xuLy8gYG9taXR0ZWRDbG9zZVRhZ3NgIGV4Y2VwdCB0aGF0IGBtZW51aXRlbWAgc2hvdWxkIHN0aWxsIGhhdmUgaXRzIGNsb3NpbmcgdGFnLlxuXG52YXIgdm9pZEVsZW1lbnRUYWdzID0gX2Fzc2lnbih7XG4gIG1lbnVpdGVtOiB0cnVlXG59LCBvbWl0dGVkQ2xvc2VUYWdzKTtcblxudmFyIEhUTUwkMSA9ICdfX2h0bWwnO1xuXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFByb3BzKHRhZywgcHJvcHMsIGdldFN0YWNrKSB7XG4gIGlmICghcHJvcHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gTm90ZSB0aGUgdXNlIG9mIGA9PWAgd2hpY2ggY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZC5cbiAgaWYgKHZvaWRFbGVtZW50VGFnc1t0YWddKSB7XG4gICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnJXMgaXMgYSB2b2lkIGVsZW1lbnQgdGFnIGFuZCBtdXN0IG5laXRoZXIgaGF2ZSBgY2hpbGRyZW5gIG5vciB1c2UgYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4lcycsIHRhZywgZ2V0U3RhY2soKSkgOiB2b2lkIDA7XG4gIH1cbiAgaWYgKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAhKHByb3BzLmNoaWxkcmVuID09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgc2V0IG9uZSBvZiBgY2hpbGRyZW5gIG9yIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJykgOiB2b2lkIDA7XG4gICAgISh0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmIEhUTUwkMSBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkgPyBpbnZhcmlhbnQoZmFsc2UsICdgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgaW4gdGhlIGZvcm0gYHtfX2h0bWw6IC4uLn1gLiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiB2b2lkIDA7XG4gIH1cbiAge1xuICAgIHdhcm5pbmcocHJvcHMuc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHx8ICFwcm9wcy5jb250ZW50RWRpdGFibGUgfHwgcHJvcHMuY2hpbGRyZW4gPT0gbnVsbCwgJ0EgY29tcG9uZW50IGlzIGBjb250ZW50RWRpdGFibGVgIGFuZCBjb250YWlucyBgY2hpbGRyZW5gIG1hbmFnZWQgYnkgJyArICdSZWFjdC4gSXQgaXMgbm93IHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gZ3VhcmFudGVlIHRoYXQgbm9uZSBvZiAnICsgJ3Rob3NlIG5vZGVzIGFyZSB1bmV4cGVjdGVkbHkgbW9kaWZpZWQgb3IgZHVwbGljYXRlZC4gVGhpcyBpcyAnICsgJ3Byb2JhYmx5IG5vdCBpbnRlbnRpb25hbC4lcycsIGdldFN0YWNrKCkpO1xuICB9XG4gICEocHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnKSA/IGludmFyaWFudChmYWxzZSwgJ1RoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArIFxcJ2VtXFwnfX0gd2hlbiB1c2luZyBKU1guJXMnLCBnZXRTdGFjaygpKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQodGFnTmFtZSwgcHJvcHMpIHtcbiAgaWYgKHRhZ05hbWUuaW5kZXhPZignLScpID09PSAtMSkge1xuICAgIHJldHVybiB0eXBlb2YgcHJvcHMuaXMgPT09ICdzdHJpbmcnO1xuICB9XG4gIHN3aXRjaCAodGFnTmFtZSkge1xuICAgIC8vIFRoZXNlIGFyZSByZXNlcnZlZCBTVkcgYW5kIE1hdGhNTCBlbGVtZW50cy5cbiAgICAvLyBXZSBkb24ndCBtaW5kIHRoaXMgd2hpdGVsaXN0IHRvbyBtdWNoIGJlY2F1c2Ugd2UgZXhwZWN0IGl0IHRvIG5ldmVyIGdyb3cuXG4gICAgLy8gVGhlIGFsdGVybmF0aXZlIGlzIHRvIHRyYWNrIHRoZSBuYW1lc3BhY2UgaW4gYSBmZXcgcGxhY2VzIHdoaWNoIGlzIGNvbnZvbHV0ZWQuXG4gICAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9jdXN0b20vI2N1c3RvbS1lbGVtZW50cy1jb3JlLWNvbmNlcHRzXG4gICAgY2FzZSAnYW5ub3RhdGlvbi14bWwnOlxuICAgIGNhc2UgJ2NvbG9yLXByb2ZpbGUnOlxuICAgIGNhc2UgJ2ZvbnQtZmFjZSc6XG4gICAgY2FzZSAnZm9udC1mYWNlLXNyYyc6XG4gICAgY2FzZSAnZm9udC1mYWNlLXVyaSc6XG4gICAgY2FzZSAnZm9udC1mYWNlLWZvcm1hdCc6XG4gICAgY2FzZSAnZm9udC1mYWNlLW5hbWUnOlxuICAgIGNhc2UgJ21pc3NpbmctZ2x5cGgnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vLyBXaGVuIGFkZGluZyBhdHRyaWJ1dGVzIHRvIHRoZSBIVE1MIG9yIFNWRyB3aGl0ZWxpc3QsIGJlIHN1cmUgdG9cbi8vIGFsc28gYWRkIHRoZW0gdG8gdGhpcyBtb2R1bGUgdG8gZW5zdXJlIGNhc2luZyBhbmQgaW5jb3JyZWN0IG5hbWVcbi8vIHdhcm5pbmdzLlxudmFyIHBvc3NpYmxlU3RhbmRhcmROYW1lcyA9IHtcbiAgLy8gSFRNTFxuICBhY2NlcHQ6ICdhY2NlcHQnLFxuICBhY2NlcHRjaGFyc2V0OiAnYWNjZXB0Q2hhcnNldCcsXG4gICdhY2NlcHQtY2hhcnNldCc6ICdhY2NlcHRDaGFyc2V0JyxcbiAgYWNjZXNza2V5OiAnYWNjZXNzS2V5JyxcbiAgYWN0aW9uOiAnYWN0aW9uJyxcbiAgYWxsb3dmdWxsc2NyZWVuOiAnYWxsb3dGdWxsU2NyZWVuJyxcbiAgYWx0OiAnYWx0JyxcbiAgYXM6ICdhcycsXG4gIGFzeW5jOiAnYXN5bmMnLFxuICBhdXRvY2FwaXRhbGl6ZTogJ2F1dG9DYXBpdGFsaXplJyxcbiAgYXV0b2NvbXBsZXRlOiAnYXV0b0NvbXBsZXRlJyxcbiAgYXV0b2NvcnJlY3Q6ICdhdXRvQ29ycmVjdCcsXG4gIGF1dG9mb2N1czogJ2F1dG9Gb2N1cycsXG4gIGF1dG9wbGF5OiAnYXV0b1BsYXknLFxuICBhdXRvc2F2ZTogJ2F1dG9TYXZlJyxcbiAgY2FwdHVyZTogJ2NhcHR1cmUnLFxuICBjZWxscGFkZGluZzogJ2NlbGxQYWRkaW5nJyxcbiAgY2VsbHNwYWNpbmc6ICdjZWxsU3BhY2luZycsXG4gIGNoYWxsZW5nZTogJ2NoYWxsZW5nZScsXG4gIGNoYXJzZXQ6ICdjaGFyU2V0JyxcbiAgY2hlY2tlZDogJ2NoZWNrZWQnLFxuICBjaGlsZHJlbjogJ2NoaWxkcmVuJyxcbiAgY2l0ZTogJ2NpdGUnLFxuICAnY2xhc3MnOiAnY2xhc3NOYW1lJyxcbiAgY2xhc3NpZDogJ2NsYXNzSUQnLFxuICBjbGFzc25hbWU6ICdjbGFzc05hbWUnLFxuICBjb2xzOiAnY29scycsXG4gIGNvbHNwYW46ICdjb2xTcGFuJyxcbiAgY29udGVudDogJ2NvbnRlbnQnLFxuICBjb250ZW50ZWRpdGFibGU6ICdjb250ZW50RWRpdGFibGUnLFxuICBjb250ZXh0bWVudTogJ2NvbnRleHRNZW51JyxcbiAgY29udHJvbHM6ICdjb250cm9scycsXG4gIGNvbnRyb2xzbGlzdDogJ2NvbnRyb2xzTGlzdCcsXG4gIGNvb3JkczogJ2Nvb3JkcycsXG4gIGNyb3Nzb3JpZ2luOiAnY3Jvc3NPcmlnaW4nLFxuICBkYW5nZXJvdXNseXNldGlubmVyaHRtbDogJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJyxcbiAgZGF0YTogJ2RhdGEnLFxuICBkYXRldGltZTogJ2RhdGVUaW1lJyxcbiAgJ2RlZmF1bHQnOiAnZGVmYXVsdCcsXG4gIGRlZmF1bHRjaGVja2VkOiAnZGVmYXVsdENoZWNrZWQnLFxuICBkZWZhdWx0dmFsdWU6ICdkZWZhdWx0VmFsdWUnLFxuICBkZWZlcjogJ2RlZmVyJyxcbiAgZGlyOiAnZGlyJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGRvd25sb2FkOiAnZG93bmxvYWQnLFxuICBkcmFnZ2FibGU6ICdkcmFnZ2FibGUnLFxuICBlbmN0eXBlOiAnZW5jVHlwZScsXG4gICdmb3InOiAnaHRtbEZvcicsXG4gIGZvcm06ICdmb3JtJyxcbiAgZm9ybW1ldGhvZDogJ2Zvcm1NZXRob2QnLFxuICBmb3JtYWN0aW9uOiAnZm9ybUFjdGlvbicsXG4gIGZvcm1lbmN0eXBlOiAnZm9ybUVuY1R5cGUnLFxuICBmb3Jtbm92YWxpZGF0ZTogJ2Zvcm1Ob1ZhbGlkYXRlJyxcbiAgZm9ybXRhcmdldDogJ2Zvcm1UYXJnZXQnLFxuICBmcmFtZWJvcmRlcjogJ2ZyYW1lQm9yZGVyJyxcbiAgaGVhZGVyczogJ2hlYWRlcnMnLFxuICBoZWlnaHQ6ICdoZWlnaHQnLFxuICBoaWRkZW46ICdoaWRkZW4nLFxuICBoaWdoOiAnaGlnaCcsXG4gIGhyZWY6ICdocmVmJyxcbiAgaHJlZmxhbmc6ICdocmVmTGFuZycsXG4gIGh0bWxmb3I6ICdodG1sRm9yJyxcbiAgaHR0cGVxdWl2OiAnaHR0cEVxdWl2JyxcbiAgJ2h0dHAtZXF1aXYnOiAnaHR0cEVxdWl2JyxcbiAgaWNvbjogJ2ljb24nLFxuICBpZDogJ2lkJyxcbiAgaW5uZXJodG1sOiAnaW5uZXJIVE1MJyxcbiAgaW5wdXRtb2RlOiAnaW5wdXRNb2RlJyxcbiAgaW50ZWdyaXR5OiAnaW50ZWdyaXR5JyxcbiAgaXM6ICdpcycsXG4gIGl0ZW1pZDogJ2l0ZW1JRCcsXG4gIGl0ZW1wcm9wOiAnaXRlbVByb3AnLFxuICBpdGVtcmVmOiAnaXRlbVJlZicsXG4gIGl0ZW1zY29wZTogJ2l0ZW1TY29wZScsXG4gIGl0ZW10eXBlOiAnaXRlbVR5cGUnLFxuICBrZXlwYXJhbXM6ICdrZXlQYXJhbXMnLFxuICBrZXl0eXBlOiAna2V5VHlwZScsXG4gIGtpbmQ6ICdraW5kJyxcbiAgbGFiZWw6ICdsYWJlbCcsXG4gIGxhbmc6ICdsYW5nJyxcbiAgbGlzdDogJ2xpc3QnLFxuICBsb29wOiAnbG9vcCcsXG4gIGxvdzogJ2xvdycsXG4gIG1hbmlmZXN0OiAnbWFuaWZlc3QnLFxuICBtYXJnaW53aWR0aDogJ21hcmdpbldpZHRoJyxcbiAgbWFyZ2luaGVpZ2h0OiAnbWFyZ2luSGVpZ2h0JyxcbiAgbWF4OiAnbWF4JyxcbiAgbWF4bGVuZ3RoOiAnbWF4TGVuZ3RoJyxcbiAgbWVkaWE6ICdtZWRpYScsXG4gIG1lZGlhZ3JvdXA6ICdtZWRpYUdyb3VwJyxcbiAgbWV0aG9kOiAnbWV0aG9kJyxcbiAgbWluOiAnbWluJyxcbiAgbWlubGVuZ3RoOiAnbWluTGVuZ3RoJyxcbiAgbXVsdGlwbGU6ICdtdWx0aXBsZScsXG4gIG11dGVkOiAnbXV0ZWQnLFxuICBuYW1lOiAnbmFtZScsXG4gIG5vbW9kdWxlOiAnbm9Nb2R1bGUnLFxuICBub25jZTogJ25vbmNlJyxcbiAgbm92YWxpZGF0ZTogJ25vVmFsaWRhdGUnLFxuICBvcGVuOiAnb3BlbicsXG4gIG9wdGltdW06ICdvcHRpbXVtJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwbGFjZWhvbGRlcjogJ3BsYWNlaG9sZGVyJyxcbiAgcGxheXNpbmxpbmU6ICdwbGF5c0lubGluZScsXG4gIHBvc3RlcjogJ3Bvc3RlcicsXG4gIHByZWxvYWQ6ICdwcmVsb2FkJyxcbiAgcHJvZmlsZTogJ3Byb2ZpbGUnLFxuICByYWRpb2dyb3VwOiAncmFkaW9Hcm91cCcsXG4gIHJlYWRvbmx5OiAncmVhZE9ubHknLFxuICByZWZlcnJlcnBvbGljeTogJ3JlZmVycmVyUG9saWN5JyxcbiAgcmVsOiAncmVsJyxcbiAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gIHJldmVyc2VkOiAncmV2ZXJzZWQnLFxuICByb2xlOiAncm9sZScsXG4gIHJvd3M6ICdyb3dzJyxcbiAgcm93c3BhbjogJ3Jvd1NwYW4nLFxuICBzYW5kYm94OiAnc2FuZGJveCcsXG4gIHNjb3BlOiAnc2NvcGUnLFxuICBzY29wZWQ6ICdzY29wZWQnLFxuICBzY3JvbGxpbmc6ICdzY3JvbGxpbmcnLFxuICBzZWFtbGVzczogJ3NlYW1sZXNzJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCcsXG4gIHNoYXBlOiAnc2hhcGUnLFxuICBzaXplOiAnc2l6ZScsXG4gIHNpemVzOiAnc2l6ZXMnLFxuICBzcGFuOiAnc3BhbicsXG4gIHNwZWxsY2hlY2s6ICdzcGVsbENoZWNrJyxcbiAgc3JjOiAnc3JjJyxcbiAgc3JjZG9jOiAnc3JjRG9jJyxcbiAgc3JjbGFuZzogJ3NyY0xhbmcnLFxuICBzcmNzZXQ6ICdzcmNTZXQnLFxuICBzdGFydDogJ3N0YXJ0JyxcbiAgc3RlcDogJ3N0ZXAnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICB0YWJpbmRleDogJ3RhYkluZGV4JyxcbiAgdGFyZ2V0OiAndGFyZ2V0JyxcbiAgdGl0bGU6ICd0aXRsZScsXG4gIHR5cGU6ICd0eXBlJyxcbiAgdXNlbWFwOiAndXNlTWFwJyxcbiAgdmFsdWU6ICd2YWx1ZScsXG4gIHdpZHRoOiAnd2lkdGgnLFxuICB3bW9kZTogJ3dtb2RlJyxcbiAgd3JhcDogJ3dyYXAnLFxuXG4gIC8vIFNWR1xuICBhYm91dDogJ2Fib3V0JyxcbiAgYWNjZW50aGVpZ2h0OiAnYWNjZW50SGVpZ2h0JyxcbiAgJ2FjY2VudC1oZWlnaHQnOiAnYWNjZW50SGVpZ2h0JyxcbiAgYWNjdW11bGF0ZTogJ2FjY3VtdWxhdGUnLFxuICBhZGRpdGl2ZTogJ2FkZGl0aXZlJyxcbiAgYWxpZ25tZW50YmFzZWxpbmU6ICdhbGlnbm1lbnRCYXNlbGluZScsXG4gICdhbGlnbm1lbnQtYmFzZWxpbmUnOiAnYWxpZ25tZW50QmFzZWxpbmUnLFxuICBhbGxvd3Jlb3JkZXI6ICdhbGxvd1Jlb3JkZXInLFxuICBhbHBoYWJldGljOiAnYWxwaGFiZXRpYycsXG4gIGFtcGxpdHVkZTogJ2FtcGxpdHVkZScsXG4gIGFyYWJpY2Zvcm06ICdhcmFiaWNGb3JtJyxcbiAgJ2FyYWJpYy1mb3JtJzogJ2FyYWJpY0Zvcm0nLFxuICBhc2NlbnQ6ICdhc2NlbnQnLFxuICBhdHRyaWJ1dGVuYW1lOiAnYXR0cmlidXRlTmFtZScsXG4gIGF0dHJpYnV0ZXR5cGU6ICdhdHRyaWJ1dGVUeXBlJyxcbiAgYXV0b3JldmVyc2U6ICdhdXRvUmV2ZXJzZScsXG4gIGF6aW11dGg6ICdhemltdXRoJyxcbiAgYmFzZWZyZXF1ZW5jeTogJ2Jhc2VGcmVxdWVuY3knLFxuICBiYXNlbGluZXNoaWZ0OiAnYmFzZWxpbmVTaGlmdCcsXG4gICdiYXNlbGluZS1zaGlmdCc6ICdiYXNlbGluZVNoaWZ0JyxcbiAgYmFzZXByb2ZpbGU6ICdiYXNlUHJvZmlsZScsXG4gIGJib3g6ICdiYm94JyxcbiAgYmVnaW46ICdiZWdpbicsXG4gIGJpYXM6ICdiaWFzJyxcbiAgYnk6ICdieScsXG4gIGNhbGNtb2RlOiAnY2FsY01vZGUnLFxuICBjYXBoZWlnaHQ6ICdjYXBIZWlnaHQnLFxuICAnY2FwLWhlaWdodCc6ICdjYXBIZWlnaHQnLFxuICBjbGlwOiAnY2xpcCcsXG4gIGNsaXBwYXRoOiAnY2xpcFBhdGgnLFxuICAnY2xpcC1wYXRoJzogJ2NsaXBQYXRoJyxcbiAgY2xpcHBhdGh1bml0czogJ2NsaXBQYXRoVW5pdHMnLFxuICBjbGlwcnVsZTogJ2NsaXBSdWxlJyxcbiAgJ2NsaXAtcnVsZSc6ICdjbGlwUnVsZScsXG4gIGNvbG9yOiAnY29sb3InLFxuICBjb2xvcmludGVycG9sYXRpb246ICdjb2xvckludGVycG9sYXRpb24nLFxuICAnY29sb3ItaW50ZXJwb2xhdGlvbic6ICdjb2xvckludGVycG9sYXRpb24nLFxuICBjb2xvcmludGVycG9sYXRpb25maWx0ZXJzOiAnY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycycsXG4gICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnOiAnY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycycsXG4gIGNvbG9ycHJvZmlsZTogJ2NvbG9yUHJvZmlsZScsXG4gICdjb2xvci1wcm9maWxlJzogJ2NvbG9yUHJvZmlsZScsXG4gIGNvbG9ycmVuZGVyaW5nOiAnY29sb3JSZW5kZXJpbmcnLFxuICAnY29sb3ItcmVuZGVyaW5nJzogJ2NvbG9yUmVuZGVyaW5nJyxcbiAgY29udGVudHNjcmlwdHR5cGU6ICdjb250ZW50U2NyaXB0VHlwZScsXG4gIGNvbnRlbnRzdHlsZXR5cGU6ICdjb250ZW50U3R5bGVUeXBlJyxcbiAgY3Vyc29yOiAnY3Vyc29yJyxcbiAgY3g6ICdjeCcsXG4gIGN5OiAnY3knLFxuICBkOiAnZCcsXG4gIGRhdGF0eXBlOiAnZGF0YXR5cGUnLFxuICBkZWNlbGVyYXRlOiAnZGVjZWxlcmF0ZScsXG4gIGRlc2NlbnQ6ICdkZXNjZW50JyxcbiAgZGlmZnVzZWNvbnN0YW50OiAnZGlmZnVzZUNvbnN0YW50JyxcbiAgZGlyZWN0aW9uOiAnZGlyZWN0aW9uJyxcbiAgZGlzcGxheTogJ2Rpc3BsYXknLFxuICBkaXZpc29yOiAnZGl2aXNvcicsXG4gIGRvbWluYW50YmFzZWxpbmU6ICdkb21pbmFudEJhc2VsaW5lJyxcbiAgJ2RvbWluYW50LWJhc2VsaW5lJzogJ2RvbWluYW50QmFzZWxpbmUnLFxuICBkdXI6ICdkdXInLFxuICBkeDogJ2R4JyxcbiAgZHk6ICdkeScsXG4gIGVkZ2Vtb2RlOiAnZWRnZU1vZGUnLFxuICBlbGV2YXRpb246ICdlbGV2YXRpb24nLFxuICBlbmFibGViYWNrZ3JvdW5kOiAnZW5hYmxlQmFja2dyb3VuZCcsXG4gICdlbmFibGUtYmFja2dyb3VuZCc6ICdlbmFibGVCYWNrZ3JvdW5kJyxcbiAgZW5kOiAnZW5kJyxcbiAgZXhwb25lbnQ6ICdleHBvbmVudCcsXG4gIGV4dGVybmFscmVzb3VyY2VzcmVxdWlyZWQ6ICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJyxcbiAgZmlsbDogJ2ZpbGwnLFxuICBmaWxsb3BhY2l0eTogJ2ZpbGxPcGFjaXR5JyxcbiAgJ2ZpbGwtb3BhY2l0eSc6ICdmaWxsT3BhY2l0eScsXG4gIGZpbGxydWxlOiAnZmlsbFJ1bGUnLFxuICAnZmlsbC1ydWxlJzogJ2ZpbGxSdWxlJyxcbiAgZmlsdGVyOiAnZmlsdGVyJyxcbiAgZmlsdGVycmVzOiAnZmlsdGVyUmVzJyxcbiAgZmlsdGVydW5pdHM6ICdmaWx0ZXJVbml0cycsXG4gIGZsb29kb3BhY2l0eTogJ2Zsb29kT3BhY2l0eScsXG4gICdmbG9vZC1vcGFjaXR5JzogJ2Zsb29kT3BhY2l0eScsXG4gIGZsb29kY29sb3I6ICdmbG9vZENvbG9yJyxcbiAgJ2Zsb29kLWNvbG9yJzogJ2Zsb29kQ29sb3InLFxuICBmb2N1c2FibGU6ICdmb2N1c2FibGUnLFxuICBmb250ZmFtaWx5OiAnZm9udEZhbWlseScsXG4gICdmb250LWZhbWlseSc6ICdmb250RmFtaWx5JyxcbiAgZm9udHNpemU6ICdmb250U2l6ZScsXG4gICdmb250LXNpemUnOiAnZm9udFNpemUnLFxuICBmb250c2l6ZWFkanVzdDogJ2ZvbnRTaXplQWRqdXN0JyxcbiAgJ2ZvbnQtc2l6ZS1hZGp1c3QnOiAnZm9udFNpemVBZGp1c3QnLFxuICBmb250c3RyZXRjaDogJ2ZvbnRTdHJldGNoJyxcbiAgJ2ZvbnQtc3RyZXRjaCc6ICdmb250U3RyZXRjaCcsXG4gIGZvbnRzdHlsZTogJ2ZvbnRTdHlsZScsXG4gICdmb250LXN0eWxlJzogJ2ZvbnRTdHlsZScsXG4gIGZvbnR2YXJpYW50OiAnZm9udFZhcmlhbnQnLFxuICAnZm9udC12YXJpYW50JzogJ2ZvbnRWYXJpYW50JyxcbiAgZm9udHdlaWdodDogJ2ZvbnRXZWlnaHQnLFxuICAnZm9udC13ZWlnaHQnOiAnZm9udFdlaWdodCcsXG4gIGZvcm1hdDogJ2Zvcm1hdCcsXG4gIGZyb206ICdmcm9tJyxcbiAgZng6ICdmeCcsXG4gIGZ5OiAnZnknLFxuICBnMTogJ2cxJyxcbiAgZzI6ICdnMicsXG4gIGdseXBobmFtZTogJ2dseXBoTmFtZScsXG4gICdnbHlwaC1uYW1lJzogJ2dseXBoTmFtZScsXG4gIGdseXBob3JpZW50YXRpb25ob3Jpem9udGFsOiAnZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwnLFxuICAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCc6ICdnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbCcsXG4gIGdseXBob3JpZW50YXRpb252ZXJ0aWNhbDogJ2dseXBoT3JpZW50YXRpb25WZXJ0aWNhbCcsXG4gICdnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCc6ICdnbHlwaE9yaWVudGF0aW9uVmVydGljYWwnLFxuICBnbHlwaHJlZjogJ2dseXBoUmVmJyxcbiAgZ3JhZGllbnR0cmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG4gIGdyYWRpZW50dW5pdHM6ICdncmFkaWVudFVuaXRzJyxcbiAgaGFuZ2luZzogJ2hhbmdpbmcnLFxuICBob3JpemFkdng6ICdob3JpekFkdlgnLFxuICAnaG9yaXotYWR2LXgnOiAnaG9yaXpBZHZYJyxcbiAgaG9yaXpvcmlnaW54OiAnaG9yaXpPcmlnaW5YJyxcbiAgJ2hvcml6LW9yaWdpbi14JzogJ2hvcml6T3JpZ2luWCcsXG4gIGlkZW9ncmFwaGljOiAnaWRlb2dyYXBoaWMnLFxuICBpbWFnZXJlbmRlcmluZzogJ2ltYWdlUmVuZGVyaW5nJyxcbiAgJ2ltYWdlLXJlbmRlcmluZyc6ICdpbWFnZVJlbmRlcmluZycsXG4gIGluMjogJ2luMicsXG4gICdpbic6ICdpbicsXG4gIGlubGlzdDogJ2lubGlzdCcsXG4gIGludGVyY2VwdDogJ2ludGVyY2VwdCcsXG4gIGsxOiAnazEnLFxuICBrMjogJ2syJyxcbiAgazM6ICdrMycsXG4gIGs0OiAnazQnLFxuICBrOiAnaycsXG4gIGtlcm5lbG1hdHJpeDogJ2tlcm5lbE1hdHJpeCcsXG4gIGtlcm5lbHVuaXRsZW5ndGg6ICdrZXJuZWxVbml0TGVuZ3RoJyxcbiAga2VybmluZzogJ2tlcm5pbmcnLFxuICBrZXlwb2ludHM6ICdrZXlQb2ludHMnLFxuICBrZXlzcGxpbmVzOiAna2V5U3BsaW5lcycsXG4gIGtleXRpbWVzOiAna2V5VGltZXMnLFxuICBsZW5ndGhhZGp1c3Q6ICdsZW5ndGhBZGp1c3QnLFxuICBsZXR0ZXJzcGFjaW5nOiAnbGV0dGVyU3BhY2luZycsXG4gICdsZXR0ZXItc3BhY2luZyc6ICdsZXR0ZXJTcGFjaW5nJyxcbiAgbGlnaHRpbmdjb2xvcjogJ2xpZ2h0aW5nQ29sb3InLFxuICAnbGlnaHRpbmctY29sb3InOiAnbGlnaHRpbmdDb2xvcicsXG4gIGxpbWl0aW5nY29uZWFuZ2xlOiAnbGltaXRpbmdDb25lQW5nbGUnLFxuICBsb2NhbDogJ2xvY2FsJyxcbiAgbWFya2VyZW5kOiAnbWFya2VyRW5kJyxcbiAgJ21hcmtlci1lbmQnOiAnbWFya2VyRW5kJyxcbiAgbWFya2VyaGVpZ2h0OiAnbWFya2VySGVpZ2h0JyxcbiAgbWFya2VybWlkOiAnbWFya2VyTWlkJyxcbiAgJ21hcmtlci1taWQnOiAnbWFya2VyTWlkJyxcbiAgbWFya2Vyc3RhcnQ6ICdtYXJrZXJTdGFydCcsXG4gICdtYXJrZXItc3RhcnQnOiAnbWFya2VyU3RhcnQnLFxuICBtYXJrZXJ1bml0czogJ21hcmtlclVuaXRzJyxcbiAgbWFya2Vyd2lkdGg6ICdtYXJrZXJXaWR0aCcsXG4gIG1hc2s6ICdtYXNrJyxcbiAgbWFza2NvbnRlbnR1bml0czogJ21hc2tDb250ZW50VW5pdHMnLFxuICBtYXNrdW5pdHM6ICdtYXNrVW5pdHMnLFxuICBtYXRoZW1hdGljYWw6ICdtYXRoZW1hdGljYWwnLFxuICBtb2RlOiAnbW9kZScsXG4gIG51bW9jdGF2ZXM6ICdudW1PY3RhdmVzJyxcbiAgb2Zmc2V0OiAnb2Zmc2V0JyxcbiAgb3BhY2l0eTogJ29wYWNpdHknLFxuICBvcGVyYXRvcjogJ29wZXJhdG9yJyxcbiAgb3JkZXI6ICdvcmRlcicsXG4gIG9yaWVudDogJ29yaWVudCcsXG4gIG9yaWVudGF0aW9uOiAnb3JpZW50YXRpb24nLFxuICBvcmlnaW46ICdvcmlnaW4nLFxuICBvdmVyZmxvdzogJ292ZXJmbG93JyxcbiAgb3ZlcmxpbmVwb3NpdGlvbjogJ292ZXJsaW5lUG9zaXRpb24nLFxuICAnb3ZlcmxpbmUtcG9zaXRpb24nOiAnb3ZlcmxpbmVQb3NpdGlvbicsXG4gIG92ZXJsaW5ldGhpY2tuZXNzOiAnb3ZlcmxpbmVUaGlja25lc3MnLFxuICAnb3ZlcmxpbmUtdGhpY2tuZXNzJzogJ292ZXJsaW5lVGhpY2tuZXNzJyxcbiAgcGFpbnRvcmRlcjogJ3BhaW50T3JkZXInLFxuICAncGFpbnQtb3JkZXInOiAncGFpbnRPcmRlcicsXG4gIHBhbm9zZTE6ICdwYW5vc2UxJyxcbiAgJ3Bhbm9zZS0xJzogJ3Bhbm9zZTEnLFxuICBwYXRobGVuZ3RoOiAncGF0aExlbmd0aCcsXG4gIHBhdHRlcm5jb250ZW50dW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgcGF0dGVybnRyYW5zZm9ybTogJ3BhdHRlcm5UcmFuc2Zvcm0nLFxuICBwYXR0ZXJudW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICBwb2ludGVyZXZlbnRzOiAncG9pbnRlckV2ZW50cycsXG4gICdwb2ludGVyLWV2ZW50cyc6ICdwb2ludGVyRXZlbnRzJyxcbiAgcG9pbnRzOiAncG9pbnRzJyxcbiAgcG9pbnRzYXR4OiAncG9pbnRzQXRYJyxcbiAgcG9pbnRzYXR5OiAncG9pbnRzQXRZJyxcbiAgcG9pbnRzYXR6OiAncG9pbnRzQXRaJyxcbiAgcHJlZml4OiAncHJlZml4JyxcbiAgcHJlc2VydmVhbHBoYTogJ3ByZXNlcnZlQWxwaGEnLFxuICBwcmVzZXJ2ZWFzcGVjdHJhdGlvOiAncHJlc2VydmVBc3BlY3RSYXRpbycsXG4gIHByaW1pdGl2ZXVuaXRzOiAncHJpbWl0aXZlVW5pdHMnLFxuICBwcm9wZXJ0eTogJ3Byb3BlcnR5JyxcbiAgcjogJ3InLFxuICByYWRpdXM6ICdyYWRpdXMnLFxuICByZWZ4OiAncmVmWCcsXG4gIHJlZnk6ICdyZWZZJyxcbiAgcmVuZGVyaW5naW50ZW50OiAncmVuZGVyaW5nSW50ZW50JyxcbiAgJ3JlbmRlcmluZy1pbnRlbnQnOiAncmVuZGVyaW5nSW50ZW50JyxcbiAgcmVwZWF0Y291bnQ6ICdyZXBlYXRDb3VudCcsXG4gIHJlcGVhdGR1cjogJ3JlcGVhdER1cicsXG4gIHJlcXVpcmVkZXh0ZW5zaW9uczogJ3JlcXVpcmVkRXh0ZW5zaW9ucycsXG4gIHJlcXVpcmVkZmVhdHVyZXM6ICdyZXF1aXJlZEZlYXR1cmVzJyxcbiAgcmVzb3VyY2U6ICdyZXNvdXJjZScsXG4gIHJlc3RhcnQ6ICdyZXN0YXJ0JyxcbiAgcmVzdWx0OiAncmVzdWx0JyxcbiAgcmVzdWx0czogJ3Jlc3VsdHMnLFxuICByb3RhdGU6ICdyb3RhdGUnLFxuICByeDogJ3J4JyxcbiAgcnk6ICdyeScsXG4gIHNjYWxlOiAnc2NhbGUnLFxuICBzZWN1cml0eTogJ3NlY3VyaXR5JyxcbiAgc2VlZDogJ3NlZWQnLFxuICBzaGFwZXJlbmRlcmluZzogJ3NoYXBlUmVuZGVyaW5nJyxcbiAgJ3NoYXBlLXJlbmRlcmluZyc6ICdzaGFwZVJlbmRlcmluZycsXG4gIHNsb3BlOiAnc2xvcGUnLFxuICBzcGFjaW5nOiAnc3BhY2luZycsXG4gIHNwZWN1bGFyY29uc3RhbnQ6ICdzcGVjdWxhckNvbnN0YW50JyxcbiAgc3BlY3VsYXJleHBvbmVudDogJ3NwZWN1bGFyRXhwb25lbnQnLFxuICBzcGVlZDogJ3NwZWVkJyxcbiAgc3ByZWFkbWV0aG9kOiAnc3ByZWFkTWV0aG9kJyxcbiAgc3RhcnRvZmZzZXQ6ICdzdGFydE9mZnNldCcsXG4gIHN0ZGRldmlhdGlvbjogJ3N0ZERldmlhdGlvbicsXG4gIHN0ZW1oOiAnc3RlbWgnLFxuICBzdGVtdjogJ3N0ZW12JyxcbiAgc3RpdGNodGlsZXM6ICdzdGl0Y2hUaWxlcycsXG4gIHN0b3Bjb2xvcjogJ3N0b3BDb2xvcicsXG4gICdzdG9wLWNvbG9yJzogJ3N0b3BDb2xvcicsXG4gIHN0b3BvcGFjaXR5OiAnc3RvcE9wYWNpdHknLFxuICAnc3RvcC1vcGFjaXR5JzogJ3N0b3BPcGFjaXR5JyxcbiAgc3RyaWtldGhyb3VnaHBvc2l0aW9uOiAnc3RyaWtldGhyb3VnaFBvc2l0aW9uJyxcbiAgJ3N0cmlrZXRocm91Z2gtcG9zaXRpb24nOiAnc3RyaWtldGhyb3VnaFBvc2l0aW9uJyxcbiAgc3RyaWtldGhyb3VnaHRoaWNrbmVzczogJ3N0cmlrZXRocm91Z2hUaGlja25lc3MnLFxuICAnc3RyaWtldGhyb3VnaC10aGlja25lc3MnOiAnc3RyaWtldGhyb3VnaFRoaWNrbmVzcycsXG4gIHN0cmluZzogJ3N0cmluZycsXG4gIHN0cm9rZTogJ3N0cm9rZScsXG4gIHN0cm9rZWRhc2hhcnJheTogJ3N0cm9rZURhc2hhcnJheScsXG4gICdzdHJva2UtZGFzaGFycmF5JzogJ3N0cm9rZURhc2hhcnJheScsXG4gIHN0cm9rZWRhc2hvZmZzZXQ6ICdzdHJva2VEYXNob2Zmc2V0JyxcbiAgJ3N0cm9rZS1kYXNob2Zmc2V0JzogJ3N0cm9rZURhc2hvZmZzZXQnLFxuICBzdHJva2VsaW5lY2FwOiAnc3Ryb2tlTGluZWNhcCcsXG4gICdzdHJva2UtbGluZWNhcCc6ICdzdHJva2VMaW5lY2FwJyxcbiAgc3Ryb2tlbGluZWpvaW46ICdzdHJva2VMaW5lam9pbicsXG4gICdzdHJva2UtbGluZWpvaW4nOiAnc3Ryb2tlTGluZWpvaW4nLFxuICBzdHJva2VtaXRlcmxpbWl0OiAnc3Ryb2tlTWl0ZXJsaW1pdCcsXG4gICdzdHJva2UtbWl0ZXJsaW1pdCc6ICdzdHJva2VNaXRlcmxpbWl0JyxcbiAgc3Ryb2tld2lkdGg6ICdzdHJva2VXaWR0aCcsXG4gICdzdHJva2Utd2lkdGgnOiAnc3Ryb2tlV2lkdGgnLFxuICBzdHJva2VvcGFjaXR5OiAnc3Ryb2tlT3BhY2l0eScsXG4gICdzdHJva2Utb3BhY2l0eSc6ICdzdHJva2VPcGFjaXR5JyxcbiAgc3VwcHJlc3Njb250ZW50ZWRpdGFibGV3YXJuaW5nOiAnc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nJyxcbiAgc3VwcHJlc3NoeWRyYXRpb253YXJuaW5nOiAnc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJyxcbiAgc3VyZmFjZXNjYWxlOiAnc3VyZmFjZVNjYWxlJyxcbiAgc3lzdGVtbGFuZ3VhZ2U6ICdzeXN0ZW1MYW5ndWFnZScsXG4gIHRhYmxldmFsdWVzOiAndGFibGVWYWx1ZXMnLFxuICB0YXJnZXR4OiAndGFyZ2V0WCcsXG4gIHRhcmdldHk6ICd0YXJnZXRZJyxcbiAgdGV4dGFuY2hvcjogJ3RleHRBbmNob3InLFxuICAndGV4dC1hbmNob3InOiAndGV4dEFuY2hvcicsXG4gIHRleHRkZWNvcmF0aW9uOiAndGV4dERlY29yYXRpb24nLFxuICAndGV4dC1kZWNvcmF0aW9uJzogJ3RleHREZWNvcmF0aW9uJyxcbiAgdGV4dGxlbmd0aDogJ3RleHRMZW5ndGgnLFxuICB0ZXh0cmVuZGVyaW5nOiAndGV4dFJlbmRlcmluZycsXG4gICd0ZXh0LXJlbmRlcmluZyc6ICd0ZXh0UmVuZGVyaW5nJyxcbiAgdG86ICd0bycsXG4gIHRyYW5zZm9ybTogJ3RyYW5zZm9ybScsXG4gICd0eXBlb2YnOiAndHlwZW9mJyxcbiAgdTE6ICd1MScsXG4gIHUyOiAndTInLFxuICB1bmRlcmxpbmVwb3NpdGlvbjogJ3VuZGVybGluZVBvc2l0aW9uJyxcbiAgJ3VuZGVybGluZS1wb3NpdGlvbic6ICd1bmRlcmxpbmVQb3NpdGlvbicsXG4gIHVuZGVybGluZXRoaWNrbmVzczogJ3VuZGVybGluZVRoaWNrbmVzcycsXG4gICd1bmRlcmxpbmUtdGhpY2tuZXNzJzogJ3VuZGVybGluZVRoaWNrbmVzcycsXG4gIHVuaWNvZGU6ICd1bmljb2RlJyxcbiAgdW5pY29kZWJpZGk6ICd1bmljb2RlQmlkaScsXG4gICd1bmljb2RlLWJpZGknOiAndW5pY29kZUJpZGknLFxuICB1bmljb2RlcmFuZ2U6ICd1bmljb2RlUmFuZ2UnLFxuICAndW5pY29kZS1yYW5nZSc6ICd1bmljb2RlUmFuZ2UnLFxuICB1bml0c3BlcmVtOiAndW5pdHNQZXJFbScsXG4gICd1bml0cy1wZXItZW0nOiAndW5pdHNQZXJFbScsXG4gIHVuc2VsZWN0YWJsZTogJ3Vuc2VsZWN0YWJsZScsXG4gIHZhbHBoYWJldGljOiAndkFscGhhYmV0aWMnLFxuICAndi1hbHBoYWJldGljJzogJ3ZBbHBoYWJldGljJyxcbiAgdmFsdWVzOiAndmFsdWVzJyxcbiAgdmVjdG9yZWZmZWN0OiAndmVjdG9yRWZmZWN0JyxcbiAgJ3ZlY3Rvci1lZmZlY3QnOiAndmVjdG9yRWZmZWN0JyxcbiAgdmVyc2lvbjogJ3ZlcnNpb24nLFxuICB2ZXJ0YWR2eTogJ3ZlcnRBZHZZJyxcbiAgJ3ZlcnQtYWR2LXknOiAndmVydEFkdlknLFxuICB2ZXJ0b3JpZ2lueDogJ3ZlcnRPcmlnaW5YJyxcbiAgJ3ZlcnQtb3JpZ2luLXgnOiAndmVydE9yaWdpblgnLFxuICB2ZXJ0b3JpZ2lueTogJ3ZlcnRPcmlnaW5ZJyxcbiAgJ3ZlcnQtb3JpZ2luLXknOiAndmVydE9yaWdpblknLFxuICB2aGFuZ2luZzogJ3ZIYW5naW5nJyxcbiAgJ3YtaGFuZ2luZyc6ICd2SGFuZ2luZycsXG4gIHZpZGVvZ3JhcGhpYzogJ3ZJZGVvZ3JhcGhpYycsXG4gICd2LWlkZW9ncmFwaGljJzogJ3ZJZGVvZ3JhcGhpYycsXG4gIHZpZXdib3g6ICd2aWV3Qm94JyxcbiAgdmlld3RhcmdldDogJ3ZpZXdUYXJnZXQnLFxuICB2aXNpYmlsaXR5OiAndmlzaWJpbGl0eScsXG4gIHZtYXRoZW1hdGljYWw6ICd2TWF0aGVtYXRpY2FsJyxcbiAgJ3YtbWF0aGVtYXRpY2FsJzogJ3ZNYXRoZW1hdGljYWwnLFxuICB2b2NhYjogJ3ZvY2FiJyxcbiAgd2lkdGhzOiAnd2lkdGhzJyxcbiAgd29yZHNwYWNpbmc6ICd3b3JkU3BhY2luZycsXG4gICd3b3JkLXNwYWNpbmcnOiAnd29yZFNwYWNpbmcnLFxuICB3cml0aW5nbW9kZTogJ3dyaXRpbmdNb2RlJyxcbiAgJ3dyaXRpbmctbW9kZSc6ICd3cml0aW5nTW9kZScsXG4gIHgxOiAneDEnLFxuICB4MjogJ3gyJyxcbiAgeDogJ3gnLFxuICB4Y2hhbm5lbHNlbGVjdG9yOiAneENoYW5uZWxTZWxlY3RvcicsXG4gIHhoZWlnaHQ6ICd4SGVpZ2h0JyxcbiAgJ3gtaGVpZ2h0JzogJ3hIZWlnaHQnLFxuICB4bGlua2FjdHVhdGU6ICd4bGlua0FjdHVhdGUnLFxuICAneGxpbms6YWN0dWF0ZSc6ICd4bGlua0FjdHVhdGUnLFxuICB4bGlua2FyY3JvbGU6ICd4bGlua0FyY3JvbGUnLFxuICAneGxpbms6YXJjcm9sZSc6ICd4bGlua0FyY3JvbGUnLFxuICB4bGlua2hyZWY6ICd4bGlua0hyZWYnLFxuICAneGxpbms6aHJlZic6ICd4bGlua0hyZWYnLFxuICB4bGlua3JvbGU6ICd4bGlua1JvbGUnLFxuICAneGxpbms6cm9sZSc6ICd4bGlua1JvbGUnLFxuICB4bGlua3Nob3c6ICd4bGlua1Nob3cnLFxuICAneGxpbms6c2hvdyc6ICd4bGlua1Nob3cnLFxuICB4bGlua3RpdGxlOiAneGxpbmtUaXRsZScsXG4gICd4bGluazp0aXRsZSc6ICd4bGlua1RpdGxlJyxcbiAgeGxpbmt0eXBlOiAneGxpbmtUeXBlJyxcbiAgJ3hsaW5rOnR5cGUnOiAneGxpbmtUeXBlJyxcbiAgeG1sYmFzZTogJ3htbEJhc2UnLFxuICAneG1sOmJhc2UnOiAneG1sQmFzZScsXG4gIHhtbGxhbmc6ICd4bWxMYW5nJyxcbiAgJ3htbDpsYW5nJzogJ3htbExhbmcnLFxuICB4bWxuczogJ3htbG5zJyxcbiAgJ3htbDpzcGFjZSc6ICd4bWxTcGFjZScsXG4gIHhtbG5zeGxpbms6ICd4bWxuc1hsaW5rJyxcbiAgJ3htbG5zOnhsaW5rJzogJ3htbG5zWGxpbmsnLFxuICB4bWxzcGFjZTogJ3htbFNwYWNlJyxcbiAgeTE6ICd5MScsXG4gIHkyOiAneTInLFxuICB5OiAneScsXG4gIHljaGFubmVsc2VsZWN0b3I6ICd5Q2hhbm5lbFNlbGVjdG9yJyxcbiAgejogJ3onLFxuICB6b29tYW5kcGFuOiAnem9vbUFuZFBhbidcbn07XG5cbnZhciBhcmlhUHJvcGVydGllcyA9IHtcbiAgJ2FyaWEtY3VycmVudCc6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWRldGFpbHMnOiAwLFxuICAnYXJpYS1kaXNhYmxlZCc6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWhpZGRlbic6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWludmFsaWQnOiAwLCAvLyBzdGF0ZVxuICAnYXJpYS1rZXlzaG9ydGN1dHMnOiAwLFxuICAnYXJpYS1sYWJlbCc6IDAsXG4gICdhcmlhLXJvbGVkZXNjcmlwdGlvbic6IDAsXG4gIC8vIFdpZGdldCBBdHRyaWJ1dGVzXG4gICdhcmlhLWF1dG9jb21wbGV0ZSc6IDAsXG4gICdhcmlhLWNoZWNrZWQnOiAwLFxuICAnYXJpYS1leHBhbmRlZCc6IDAsXG4gICdhcmlhLWhhc3BvcHVwJzogMCxcbiAgJ2FyaWEtbGV2ZWwnOiAwLFxuICAnYXJpYS1tb2RhbCc6IDAsXG4gICdhcmlhLW11bHRpbGluZSc6IDAsXG4gICdhcmlhLW11bHRpc2VsZWN0YWJsZSc6IDAsXG4gICdhcmlhLW9yaWVudGF0aW9uJzogMCxcbiAgJ2FyaWEtcGxhY2Vob2xkZXInOiAwLFxuICAnYXJpYS1wcmVzc2VkJzogMCxcbiAgJ2FyaWEtcmVhZG9ubHknOiAwLFxuICAnYXJpYS1yZXF1aXJlZCc6IDAsXG4gICdhcmlhLXNlbGVjdGVkJzogMCxcbiAgJ2FyaWEtc29ydCc6IDAsXG4gICdhcmlhLXZhbHVlbWF4JzogMCxcbiAgJ2FyaWEtdmFsdWVtaW4nOiAwLFxuICAnYXJpYS12YWx1ZW5vdyc6IDAsXG4gICdhcmlhLXZhbHVldGV4dCc6IDAsXG4gIC8vIExpdmUgUmVnaW9uIEF0dHJpYnV0ZXNcbiAgJ2FyaWEtYXRvbWljJzogMCxcbiAgJ2FyaWEtYnVzeSc6IDAsXG4gICdhcmlhLWxpdmUnOiAwLFxuICAnYXJpYS1yZWxldmFudCc6IDAsXG4gIC8vIERyYWctYW5kLURyb3AgQXR0cmlidXRlc1xuICAnYXJpYS1kcm9wZWZmZWN0JzogMCxcbiAgJ2FyaWEtZ3JhYmJlZCc6IDAsXG4gIC8vIFJlbGF0aW9uc2hpcCBBdHRyaWJ1dGVzXG4gICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnOiAwLFxuICAnYXJpYS1jb2xjb3VudCc6IDAsXG4gICdhcmlhLWNvbGluZGV4JzogMCxcbiAgJ2FyaWEtY29sc3Bhbic6IDAsXG4gICdhcmlhLWNvbnRyb2xzJzogMCxcbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiAwLFxuICAnYXJpYS1lcnJvcm1lc3NhZ2UnOiAwLFxuICAnYXJpYS1mbG93dG8nOiAwLFxuICAnYXJpYS1sYWJlbGxlZGJ5JzogMCxcbiAgJ2FyaWEtb3ducyc6IDAsXG4gICdhcmlhLXBvc2luc2V0JzogMCxcbiAgJ2FyaWEtcm93Y291bnQnOiAwLFxuICAnYXJpYS1yb3dpbmRleCc6IDAsXG4gICdhcmlhLXJvd3NwYW4nOiAwLFxuICAnYXJpYS1zZXRzaXplJzogMFxufTtcblxudmFyIHdhcm5lZFByb3BlcnRpZXMgPSB7fTtcbnZhciByQVJJQSA9IG5ldyBSZWdFeHAoJ14oYXJpYSktWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xudmFyIHJBUklBQ2FtZWwgPSBuZXcgUmVnRXhwKCdeKGFyaWEpW0EtWl1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGdldFN0YWNrQWRkZW5kdW0oKSB7XG4gIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuICByZXR1cm4gc3RhY2sgIT0gbnVsbCA/IHN0YWNrIDogJyc7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHkodGFnTmFtZSwgbmFtZSkge1xuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh3YXJuZWRQcm9wZXJ0aWVzLCBuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAockFSSUFDYW1lbC50ZXN0KG5hbWUpKSB7XG4gICAgdmFyIGFyaWFOYW1lID0gJ2FyaWEtJyArIG5hbWUuc2xpY2UoNCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgY29ycmVjdE5hbWUgPSBhcmlhUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShhcmlhTmFtZSkgPyBhcmlhTmFtZSA6IG51bGw7XG5cbiAgICAvLyBJZiB0aGlzIGlzIGFuIGFyaWEtKiBhdHRyaWJ1dGUsIGJ1dCBpcyBub3QgbGlzdGVkIGluIHRoZSBrbm93biBET01cbiAgICAvLyBET00gcHJvcGVydGllcywgdGhlbiBpdCBpcyBhbiBpbnZhbGlkIGFyaWEtKiBhdHRyaWJ1dGUuXG4gICAgaWYgKGNvcnJlY3ROYW1lID09IG51bGwpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIGAlc2AuIEFSSUEgYXR0cmlidXRlcyBmb2xsb3cgdGhlIHBhdHRlcm4gYXJpYS0qIGFuZCBtdXN0IGJlIGxvd2VyY2FzZS4lcycsIG5hbWUsIGdldFN0YWNrQWRkZW5kdW0oKSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBhcmlhLSogYXR0cmlidXRlcyBzaG91bGQgYmUgbG93ZXJjYXNlOyBzdWdnZXN0IHRoZSBsb3dlcmNhc2UgdmVyc2lvbi5cbiAgICBpZiAobmFtZSAhPT0gY29ycmVjdE5hbWUpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPyVzJywgbmFtZSwgY29ycmVjdE5hbWUsIGdldFN0YWNrQWRkZW5kdW0oKSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyQVJJQS50ZXN0KG5hbWUpKSB7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBzdGFuZGFyZE5hbWUgPSBhcmlhUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBsb3dlckNhc2VkTmFtZSA6IG51bGw7XG5cbiAgICAvLyBJZiB0aGlzIGlzIGFuIGFyaWEtKiBhdHRyaWJ1dGUsIGJ1dCBpcyBub3QgbGlzdGVkIGluIHRoZSBrbm93biBET01cbiAgICAvLyBET00gcHJvcGVydGllcywgdGhlbiBpdCBpcyBhbiBpbnZhbGlkIGFyaWEtKiBhdHRyaWJ1dGUuXG4gICAgaWYgKHN0YW5kYXJkTmFtZSA9PSBudWxsKSB7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXJpYS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb24uXG4gICAgaWYgKG5hbWUgIT09IHN0YW5kYXJkTmFtZSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1Vua25vd24gQVJJQSBhdHRyaWJ1dGUgYCVzYC4gRGlkIHlvdSBtZWFuIGAlc2A/JXMnLCBuYW1lLCBzdGFuZGFyZE5hbWUsIGdldFN0YWNrQWRkZW5kdW0oKSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB3YXJuSW52YWxpZEFSSUFQcm9wcyh0eXBlLCBwcm9wcykge1xuICB2YXIgaW52YWxpZFByb3BzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgdmFyIGlzVmFsaWQgPSB2YWxpZGF0ZVByb3BlcnR5KHR5cGUsIGtleSk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICBpbnZhbGlkUHJvcHMucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB1bmtub3duUHJvcFN0cmluZyA9IGludmFsaWRQcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICByZXR1cm4gJ2AnICsgcHJvcCArICdgJztcbiAgfSkuam9pbignLCAnKTtcblxuICBpZiAoaW52YWxpZFByb3BzLmxlbmd0aCA9PT0gMSkge1xuICAgIHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGFyaWEgcHJvcCAlcyBvbiA8JXM+IHRhZy4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvaW52YWxpZC1hcmlhLXByb3AlcycsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlLCBnZXRTdGFja0FkZGVuZHVtKCkpO1xuICB9IGVsc2UgaWYgKGludmFsaWRQcm9wcy5sZW5ndGggPiAxKSB7XG4gICAgd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXJpYSBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvaW52YWxpZC1hcmlhLXByb3AlcycsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlLCBnZXRTdGFja0FkZGVuZHVtKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydGllcyh0eXBlLCBwcm9wcykge1xuICBpZiAoaXNDdXN0b21Db21wb25lbnQodHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdhcm5JbnZhbGlkQVJJQVByb3BzKHR5cGUsIHByb3BzKTtcbn1cblxudmFyIGRpZFdhcm5WYWx1ZU51bGwgPSBmYWxzZTtcblxuZnVuY3Rpb24gZ2V0U3RhY2tBZGRlbmR1bSQxKCkge1xuICB2YXIgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcbiAgcmV0dXJuIHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnRpZXMkMSh0eXBlLCBwcm9wcykge1xuICBpZiAodHlwZSAhPT0gJ2lucHV0JyAmJiB0eXBlICE9PSAndGV4dGFyZWEnICYmIHR5cGUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHByb3BzICE9IG51bGwgJiYgcHJvcHMudmFsdWUgPT09IG51bGwgJiYgIWRpZFdhcm5WYWx1ZU51bGwpIHtcbiAgICBkaWRXYXJuVmFsdWVOdWxsID0gdHJ1ZTtcbiAgICBpZiAodHlwZSA9PT0gJ3NlbGVjdCcgJiYgcHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdgdmFsdWVgIHByb3Agb24gYCVzYCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgYW4gZW1wdHkgYXJyYXkgd2hlbiBgbXVsdGlwbGVgIGlzIHNldCB0byBgdHJ1ZWAgJyArICd0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgIGZvciB1bmNvbnRyb2xsZWQgY29tcG9uZW50cy4lcycsIHR5cGUsIGdldFN0YWNrQWRkZW5kdW0kMSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ2B2YWx1ZWAgcHJvcCBvbiBgJXNgIHNob3VsZCBub3QgYmUgbnVsbC4gJyArICdDb25zaWRlciB1c2luZyBhbiBlbXB0eSBzdHJpbmcgdG8gY2xlYXIgdGhlIGNvbXBvbmVudCBvciBgdW5kZWZpbmVkYCAnICsgJ2ZvciB1bmNvbnRyb2xsZWQgY29tcG9uZW50cy4lcycsIHR5cGUsIGdldFN0YWNrQWRkZW5kdW0kMSgpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U3RhY2tBZGRlbmR1bSQyKCkge1xuICB2YXIgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcbiAgcmV0dXJuIHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnO1xufVxuXG52YXIgdmFsaWRhdGVQcm9wZXJ0eSQxID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgdmFyIHdhcm5lZFByb3BlcnRpZXMkMSA9IHt9O1xuICB2YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIEVWRU5UX05BTUVfUkVHRVggPSAvXm9uLi87XG4gIHZhciBJTlZBTElEX0VWRU5UX05BTUVfUkVHRVggPSAvXm9uW15BLVpdLztcbiAgdmFyIHJBUklBJDEgPSBuZXcgUmVnRXhwKCdeKGFyaWEpLVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbiAgdmFyIHJBUklBQ2FtZWwkMSA9IG5ldyBSZWdFeHAoJ14oYXJpYSlbQS1aXVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcblxuICB2YWxpZGF0ZVByb3BlcnR5JDEgPSBmdW5jdGlvbiAodGFnTmFtZSwgbmFtZSwgdmFsdWUsIGNhblVzZUV2ZW50U3lzdGVtKSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHdhcm5lZFByb3BlcnRpZXMkMSwgbmFtZSkgJiYgd2FybmVkUHJvcGVydGllcyQxW25hbWVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxvd2VyQ2FzZWROYW1lID09PSAnb25mb2N1c2luJyB8fCBsb3dlckNhc2VkTmFtZSA9PT0gJ29uZm9jdXNvdXQnKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnUmVhY3QgdXNlcyBvbkZvY3VzIGFuZCBvbkJsdXIgaW5zdGVhZCBvZiBvbkZvY3VzSW4gYW5kIG9uRm9jdXNPdXQuICcgKyAnQWxsIFJlYWN0IGV2ZW50cyBhcmUgbm9ybWFsaXplZCB0byBidWJibGUsIHNvIG9uRm9jdXNJbiBhbmQgb25Gb2N1c091dCAnICsgJ2FyZSBub3QgbmVlZGVkL3N1cHBvcnRlZCBieSBSZWFjdC4nKTtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBXZSBjYW4ndCByZWx5IG9uIHRoZSBldmVudCBzeXN0ZW0gYmVpbmcgaW5qZWN0ZWQgb24gdGhlIHNlcnZlci5cbiAgICBpZiAoY2FuVXNlRXZlbnRTeXN0ZW0pIHtcbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW2xvd2VyQ2FzZWROYW1lXSA6IG51bGw7XG4gICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYCVzYC4gRGlkIHlvdSBtZWFuIGAlc2A/JXMnLCBuYW1lLCByZWdpc3RyYXRpb25OYW1lLCBnZXRTdGFja0FkZGVuZHVtJDIoKSk7XG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKEVWRU5UX05BTUVfUkVHRVgudGVzdChuYW1lKSkge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnVW5rbm93biBldmVudCBoYW5kbGVyIHByb3BlcnR5IGAlc2AuIEl0IHdpbGwgYmUgaWdub3JlZC4lcycsIG5hbWUsIGdldFN0YWNrQWRkZW5kdW0kMigpKTtcbiAgICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChFVkVOVF9OQU1FX1JFR0VYLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIElmIG5vIGV2ZW50IHBsdWdpbnMgaGF2ZSBiZWVuIGluamVjdGVkLCB3ZSBhcmUgaW4gYSBzZXJ2ZXIgZW52aXJvbm1lbnQuXG4gICAgICAvLyBTbyB3ZSBjYW4ndCB0ZWxsIGlmIHRoZSBldmVudCBuYW1lIGlzIGNvcnJlY3QgZm9yIHN1cmUsIGJ1dCB3ZSBjYW4gZmlsdGVyXG4gICAgICAvLyBvdXQga25vd24gYmFkIG9uZXMgbGlrZSBgb25jbGlja2AuIFdlIGNhbid0IHN1Z2dlc3QgYSBzcGVjaWZpYyByZXBsYWNlbWVudCB0aG91Z2guXG4gICAgICBpZiAoSU5WQUxJRF9FVkVOVF9OQU1FX1JFR0VYLnRlc3QobmFtZSkpIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgZXZlbnQgaGFuZGxlciBwcm9wZXJ0eSBgJXNgLiAnICsgJ1JlYWN0IGV2ZW50cyB1c2UgdGhlIGNhbWVsQ2FzZSBuYW1pbmcgY29udmVudGlvbiwgZm9yIGV4YW1wbGUgYG9uQ2xpY2tgLiVzJywgbmFtZSwgZ2V0U3RhY2tBZGRlbmR1bSQyKCkpO1xuICAgICAgfVxuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIExldCB0aGUgQVJJQSBhdHRyaWJ1dGUgaG9vayB2YWxpZGF0ZSBBUklBIGF0dHJpYnV0ZXNcbiAgICBpZiAockFSSUEkMS50ZXN0KG5hbWUpIHx8IHJBUklBQ2FtZWwkMS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobG93ZXJDYXNlZE5hbWUgPT09ICdpbm5lcmh0bWwnKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnRGlyZWN0bHkgc2V0dGluZyBwcm9wZXJ0eSBgaW5uZXJIVE1MYCBpcyBub3QgcGVybWl0dGVkLiAnICsgJ0ZvciBtb3JlIGluZm9ybWF0aW9uLCBsb29rdXAgZG9jdW1lbnRhdGlvbiBvbiBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChsb3dlckNhc2VkTmFtZSA9PT0gJ2FyaWEnKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIGBhcmlhYCBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2UgaW4gUmVhY3QuICcgKyAnUGFzcyBpbmRpdmlkdWFsIGBhcmlhLWAgYXR0cmlidXRlcyBpbnN0ZWFkLicpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChsb3dlckNhc2VkTmFtZSA9PT0gJ2lzJyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdSZWNlaXZlZCBhIGAlc2AgZm9yIGEgc3RyaW5nIGF0dHJpYnV0ZSBgaXNgLiBJZiB0aGlzIGlzIGV4cGVjdGVkLCBjYXN0ICcgKyAndGhlIHZhbHVlIHRvIGEgc3RyaW5nLiVzJywgdHlwZW9mIHZhbHVlLCBnZXRTdGFja0FkZGVuZHVtJDIoKSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnUmVjZWl2ZWQgTmFOIGZvciB0aGUgYCVzYCBhdHRyaWJ1dGUuIElmIHRoaXMgaXMgZXhwZWN0ZWQsIGNhc3QgJyArICd0aGUgdmFsdWUgdG8gYSBzdHJpbmcuJXMnLCBuYW1lLCBnZXRTdGFja0FkZGVuZHVtJDIoKSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IGdldFByb3BlcnR5SW5mbyhuYW1lKTtcbiAgICB2YXIgaXNSZXNlcnZlZCA9IHByb3BlcnR5SW5mbyAhPT0gbnVsbCAmJiBwcm9wZXJ0eUluZm8udHlwZSA9PT0gUkVTRVJWRUQ7XG5cbiAgICAvLyBLbm93biBhdHRyaWJ1dGVzIHNob3VsZCBtYXRjaCB0aGUgY2FzaW5nIHNwZWNpZmllZCBpbiB0aGUgcHJvcGVydHkgY29uZmlnLlxuICAgIGlmIChwb3NzaWJsZVN0YW5kYXJkTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpKSB7XG4gICAgICB2YXIgc3RhbmRhcmROYW1lID0gcG9zc2libGVTdGFuZGFyZE5hbWVzW2xvd2VyQ2FzZWROYW1lXTtcbiAgICAgIGlmIChzdGFuZGFyZE5hbWUgIT09IG5hbWUpIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgRE9NIHByb3BlcnR5IGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPyVzJywgbmFtZSwgc3RhbmRhcmROYW1lLCBnZXRTdGFja0FkZGVuZHVtJDIoKSk7XG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQgJiYgbmFtZSAhPT0gbG93ZXJDYXNlZE5hbWUpIHtcbiAgICAgIC8vIFVua25vd24gYXR0cmlidXRlcyBzaG91bGQgaGF2ZSBsb3dlcmNhc2UgY2FzaW5nIHNpbmNlIHRoYXQncyBob3cgdGhleVxuICAgICAgLy8gd2lsbCBiZSBjYXNlZCBhbnl3YXkgd2l0aCBzZXJ2ZXIgcmVuZGVyaW5nLlxuICAgICAgd2FybmluZyhmYWxzZSwgJ1JlYWN0IGRvZXMgbm90IHJlY29nbml6ZSB0aGUgYCVzYCBwcm9wIG9uIGEgRE9NIGVsZW1lbnQuIElmIHlvdSAnICsgJ2ludGVudGlvbmFsbHkgd2FudCBpdCB0byBhcHBlYXIgaW4gdGhlIERPTSBhcyBhIGN1c3RvbSAnICsgJ2F0dHJpYnV0ZSwgc3BlbGwgaXQgYXMgbG93ZXJjYXNlIGAlc2AgaW5zdGVhZC4gJyArICdJZiB5b3UgYWNjaWRlbnRhbGx5IHBhc3NlZCBpdCBmcm9tIGEgcGFyZW50IGNvbXBvbmVudCwgcmVtb3ZlICcgKyAnaXQgZnJvbSB0aGUgRE9NIGVsZW1lbnQuJXMnLCBuYW1lLCBsb3dlckNhc2VkTmFtZSwgZ2V0U3RhY2tBZGRlbmR1bSQyKCkpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiBzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnUmVjZWl2ZWQgYCVzYCBmb3IgYSBub24tYm9vbGVhbiBhdHRyaWJ1dGUgYCVzYC5cXG5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIHdyaXRlIGl0IHRvIHRoZSBET00sIHBhc3MgYSBzdHJpbmcgaW5zdGVhZDogJyArICclcz1cIiVzXCIgb3IgJXM9e3ZhbHVlLnRvU3RyaW5nKCl9LiVzJywgdmFsdWUsIG5hbWUsIG5hbWUsIHZhbHVlLCBuYW1lLCBnZXRTdGFja0FkZGVuZHVtJDIoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnUmVjZWl2ZWQgYCVzYCBmb3IgYSBub24tYm9vbGVhbiBhdHRyaWJ1dGUgYCVzYC5cXG5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIHdyaXRlIGl0IHRvIHRoZSBET00sIHBhc3MgYSBzdHJpbmcgaW5zdGVhZDogJyArICclcz1cIiVzXCIgb3IgJXM9e3ZhbHVlLnRvU3RyaW5nKCl9LlxcblxcbicgKyAnSWYgeW91IHVzZWQgdG8gY29uZGl0aW9uYWxseSBvbWl0IGl0IHdpdGggJXM9e2NvbmRpdGlvbiAmJiB2YWx1ZX0sICcgKyAncGFzcyAlcz17Y29uZGl0aW9uID8gdmFsdWUgOiB1bmRlZmluZWR9IGluc3RlYWQuJXMnLCB2YWx1ZSwgbmFtZSwgbmFtZSwgdmFsdWUsIG5hbWUsIG5hbWUsIG5hbWUsIGdldFN0YWNrQWRkZW5kdW0kMigpKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBOb3cgdGhhdCB3ZSd2ZSB2YWxpZGF0ZWQgY2FzaW5nLCBkbyBub3QgdmFsaWRhdGVcbiAgICAvLyBkYXRhIHR5cGVzIGZvciByZXNlcnZlZCBwcm9wc1xuICAgIGlmIChpc1Jlc2VydmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBXYXJuIHdoZW4gYSBrbm93biBhdHRyaWJ1dGUgaXMgYSBiYWQgdHlwZVxuICAgIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG5cbnZhciB3YXJuVW5rbm93blByb3BlcnRpZXMgPSBmdW5jdGlvbiAodHlwZSwgcHJvcHMsIGNhblVzZUV2ZW50U3lzdGVtKSB7XG4gIHZhciB1bmtub3duUHJvcHMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgdmFyIGlzVmFsaWQgPSB2YWxpZGF0ZVByb3BlcnR5JDEodHlwZSwga2V5LCBwcm9wc1trZXldLCBjYW5Vc2VFdmVudFN5c3RlbSk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICB1bmtub3duUHJvcHMucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB1bmtub3duUHJvcFN0cmluZyA9IHVua25vd25Qcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICByZXR1cm4gJ2AnICsgcHJvcCArICdgJztcbiAgfSkuam9pbignLCAnKTtcbiAgaWYgKHVua25vd25Qcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCB2YWx1ZSBmb3IgcHJvcCAlcyBvbiA8JXM+IHRhZy4gRWl0aGVyIHJlbW92ZSBpdCBmcm9tIHRoZSBlbGVtZW50LCAnICsgJ29yIHBhc3MgYSBzdHJpbmcgb3IgbnVtYmVyIHZhbHVlIHRvIGtlZXAgaXQgaW4gdGhlIERPTS4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtYXR0cmlidXRlLWJlaGF2aW9yJXMnLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSwgZ2V0U3RhY2tBZGRlbmR1bSQyKCkpO1xuICB9IGVsc2UgaWYgKHVua25vd25Qcm9wcy5sZW5ndGggPiAxKSB7XG4gICAgd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgdmFsdWVzIGZvciBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gRWl0aGVyIHJlbW92ZSB0aGVtIGZyb20gdGhlIGVsZW1lbnQsICcgKyAnb3IgcGFzcyBhIHN0cmluZyBvciBudW1iZXIgdmFsdWUgdG8ga2VlcCB0aGVtIGluIHRoZSBET00uICcgKyAnRm9yIGRldGFpbHMsIHNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWF0dHJpYnV0ZS1iZWhhdmlvciVzJywgdW5rbm93blByb3BTdHJpbmcsIHR5cGUsIGdldFN0YWNrQWRkZW5kdW0kMigpKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzJDIodHlwZSwgcHJvcHMsIGNhblVzZUV2ZW50U3lzdGVtKSB7XG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudCh0eXBlLCBwcm9wcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2FyblVua25vd25Qcm9wZXJ0aWVzKHR5cGUsIHByb3BzLCBjYW5Vc2VFdmVudFN5c3RlbSk7XG59XG5cbi8vIFRPRE86IGRpcmVjdCBpbXBvcnRzIGxpa2Ugc29tZS1wYWNrYWdlL3NyYy8qIGFyZSBiYWQuIEZpeCBtZS5cbnZhciBnZXRDdXJyZW50RmliZXJPd25lck5hbWUkMiA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lO1xudmFyIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMyA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bTtcblxudmFyIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gZmFsc2U7XG52YXIgZGlkV2FyblNoYWR5RE9NID0gZmFsc2U7XG5cbnZhciBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCA9ICdkYW5nZXJvdXNseVNldElubmVySFRNTCc7XG52YXIgU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HID0gJ3N1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyc7XG52YXIgU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMSA9ICdzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcnO1xudmFyIEFVVE9GT0NVUyA9ICdhdXRvRm9jdXMnO1xudmFyIENISUxEUkVOID0gJ2NoaWxkcmVuJztcbnZhciBTVFlMRSA9ICdzdHlsZSc7XG52YXIgSFRNTCA9ICdfX2h0bWwnO1xuXG52YXIgSFRNTF9OQU1FU1BBQ0UgPSBOYW1lc3BhY2VzLmh0bWw7XG5cblxudmFyIGdldFN0YWNrID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucygnJyk7XG5cbnZhciB3YXJuZWRVbmtub3duVGFncyA9IHZvaWQgMDtcbnZhciBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgPSB2b2lkIDA7XG5cbnZhciB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50ID0gdm9pZCAwO1xudmFyIHdhcm5Gb3JUZXh0RGlmZmVyZW5jZSA9IHZvaWQgMDtcbnZhciB3YXJuRm9yUHJvcERpZmZlcmVuY2UgPSB2b2lkIDA7XG52YXIgd2FybkZvckV4dHJhQXR0cmlidXRlcyA9IHZvaWQgMDtcbnZhciB3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIgPSB2b2lkIDA7XG5cbnZhciBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUgPSB2b2lkIDA7XG52YXIgbm9ybWFsaXplSFRNTCA9IHZvaWQgMDtcblxue1xuICBnZXRTdGFjayA9IGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMztcblxuICB3YXJuZWRVbmtub3duVGFncyA9IHtcbiAgICAvLyBDaHJvbWUgaXMgdGhlIG9ubHkgbWFqb3IgYnJvd3NlciBub3Qgc2hpcHBpbmcgPHRpbWU+LiBCdXQgYXMgb2YgSnVseVxuICAgIC8vIDIwMTcgaXQgaW50ZW5kcyB0byBzaGlwIGl0IGR1ZSB0byB3aWRlc3ByZWFkIHVzYWdlLiBXZSBpbnRlbnRpb25hbGx5XG4gICAgLy8gKmRvbid0KiB3YXJuIGZvciA8dGltZT4gZXZlbiBpZiBpdCdzIHVucmVjb2duaXplZCBieSBDaHJvbWUgYmVjYXVzZVxuICAgIC8vIGl0IHNvb24gd2lsbCBiZSwgYW5kIG1hbnkgYXBwcyBoYXZlIGJlZW4gdXNpbmcgaXQgYW55d2F5LlxuICAgIHRpbWU6IHRydWUsXG4gICAgLy8gVGhlcmUgYXJlIHdvcmtpbmcgcG9seWZpbGxzIGZvciA8ZGlhbG9nPi4gTGV0IHBlb3BsZSB1c2UgaXQuXG4gICAgZGlhbG9nOiB0cnVlXG4gIH07XG5cbiAgdmFsaWRhdGVQcm9wZXJ0aWVzSW5EZXZlbG9wbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBwcm9wcykge1xuICAgIHZhbGlkYXRlUHJvcGVydGllcyh0eXBlLCBwcm9wcyk7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzJDEodHlwZSwgcHJvcHMpO1xuICAgIHZhbGlkYXRlUHJvcGVydGllcyQyKHR5cGUsIHByb3BzLCAvKiBjYW5Vc2VFdmVudFN5c3RlbSAqL3RydWUpO1xuICB9O1xuXG4gIC8vIEhUTUwgcGFyc2luZyBub3JtYWxpemVzIENSIGFuZCBDUkxGIHRvIExGLlxuICAvLyBJdCBhbHNvIGNhbiB0dXJuIFxcdTAwMDAgaW50byBcXHVGRkZEIGluc2lkZSBhdHRyaWJ1dGVzLlxuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvc2luZ2xlLXBhZ2UuaHRtbCNwcmVwcm9jZXNzaW5nLXRoZS1pbnB1dC1zdHJlYW1cbiAgLy8gSWYgd2UgaGF2ZSBhIG1pc21hdGNoLCBpdCBtaWdodCBiZSBjYXVzZWQgYnkgdGhhdC5cbiAgLy8gV2Ugd2lsbCBzdGlsbCBwYXRjaCB1cCBpbiB0aGlzIGNhc2UgYnV0IG5vdCBmaXJlIHRoZSB3YXJuaW5nLlxuICB2YXIgTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYID0gL1xcclxcbj8vZztcbiAgdmFyIE5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCA9IC9cXHUwMDAwfFxcdUZGRkQvZztcblxuICBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobWFya3VwKSB7XG4gICAgdmFyIG1hcmt1cFN0cmluZyA9IHR5cGVvZiBtYXJrdXAgPT09ICdzdHJpbmcnID8gbWFya3VwIDogJycgKyBtYXJrdXA7XG4gICAgcmV0dXJuIG1hcmt1cFN0cmluZy5yZXBsYWNlKE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCwgJ1xcbicpLnJlcGxhY2UoTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYLCAnJyk7XG4gIH07XG5cbiAgd2FybkZvclRleHREaWZmZXJlbmNlID0gZnVuY3Rpb24gKHNlcnZlclRleHQsIGNsaWVudFRleHQpIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZWRDbGllbnRUZXh0ID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFRleHQpO1xuICAgIHZhciBub3JtYWxpemVkU2VydmVyVGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShzZXJ2ZXJUZXh0KTtcbiAgICBpZiAobm9ybWFsaXplZFNlcnZlclRleHQgPT09IG5vcm1hbGl6ZWRDbGllbnRUZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICB3YXJuaW5nKGZhbHNlLCAnVGV4dCBjb250ZW50IGRpZCBub3QgbWF0Y2guIFNlcnZlcjogXCIlc1wiIENsaWVudDogXCIlc1wiJywgbm9ybWFsaXplZFNlcnZlclRleHQsIG5vcm1hbGl6ZWRDbGllbnRUZXh0KTtcbiAgfTtcblxuICB3YXJuRm9yUHJvcERpZmZlcmVuY2UgPSBmdW5jdGlvbiAocHJvcE5hbWUsIHNlcnZlclZhbHVlLCBjbGllbnRWYWx1ZSkge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplZENsaWVudFZhbHVlID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFZhbHVlKTtcbiAgICB2YXIgbm9ybWFsaXplZFNlcnZlclZhbHVlID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKHNlcnZlclZhbHVlKTtcbiAgICBpZiAobm9ybWFsaXplZFNlcnZlclZhbHVlID09PSBub3JtYWxpemVkQ2xpZW50VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmcoZmFsc2UsICdQcm9wIGAlc2AgZGlkIG5vdCBtYXRjaC4gU2VydmVyOiAlcyBDbGllbnQ6ICVzJywgcHJvcE5hbWUsIEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZWRTZXJ2ZXJWYWx1ZSksIEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZWRDbGllbnRWYWx1ZSkpO1xuICB9O1xuXG4gIHdhcm5Gb3JFeHRyYUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoYXR0cmlidXRlTmFtZXMpIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGF0dHJpYnV0ZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIG5hbWVzLnB1c2gobmFtZSk7XG4gICAgfSk7XG4gICAgd2FybmluZyhmYWxzZSwgJ0V4dHJhIGF0dHJpYnV0ZXMgZnJvbSB0aGUgc2VydmVyOiAlcycsIG5hbWVzKTtcbiAgfTtcblxuICB3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAobGlzdGVuZXIgPT09IGZhbHNlKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnRXhwZWN0ZWQgYCVzYCBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCBgZmFsc2VgLlxcblxcbicgKyAnSWYgeW91IHVzZWQgdG8gY29uZGl0aW9uYWxseSBvbWl0IGl0IHdpdGggJXM9e2NvbmRpdGlvbiAmJiB2YWx1ZX0sICcgKyAncGFzcyAlcz17Y29uZGl0aW9uID8gdmFsdWUgOiB1bmRlZmluZWR9IGluc3RlYWQuJXMnLCByZWdpc3RyYXRpb25OYW1lLCByZWdpc3RyYXRpb25OYW1lLCByZWdpc3RyYXRpb25OYW1lLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDMoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdFeHBlY3RlZCBgJXNgIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IGEgdmFsdWUgb2YgYCVzYCB0eXBlLiVzJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDMoKSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFBhcnNlIHRoZSBIVE1MIGFuZCByZWFkIGl0IGJhY2sgdG8gbm9ybWFsaXplIHRoZSBIVE1MIHN0cmluZyBzbyB0aGF0IGl0XG4gIC8vIGNhbiBiZSB1c2VkIGZvciBjb21wYXJpc29uLlxuICBub3JtYWxpemVIVE1MID0gZnVuY3Rpb24gKHBhcmVudCwgaHRtbCkge1xuICAgIC8vIFdlIGNvdWxkIGhhdmUgY3JlYXRlZCBhIHNlcGFyYXRlIGRvY3VtZW50IGhlcmUgdG8gYXZvaWRcbiAgICAvLyByZS1pbml0aWFsaXppbmcgY3VzdG9tIGVsZW1lbnRzIGlmIHRoZXkgZXhpc3QuIEJ1dCB0aGlzIGJyZWFrc1xuICAgIC8vIGhvdyA8bm9zY3JpcHQ+IGlzIGJlaW5nIGhhbmRsZWQuIFNvIHdlIHVzZSB0aGUgc2FtZSBkb2N1bWVudC5cbiAgICAvLyBTZWUgdGhlIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTExNTcuXG4gICAgdmFyIHRlc3RFbGVtZW50ID0gcGFyZW50Lm5hbWVzcGFjZVVSSSA9PT0gSFRNTF9OQU1FU1BBQ0UgPyBwYXJlbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KHBhcmVudC50YWdOYW1lKSA6IHBhcmVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhwYXJlbnQubmFtZXNwYWNlVVJJLCBwYXJlbnQudGFnTmFtZSk7XG4gICAgdGVzdEVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gdGVzdEVsZW1lbnQuaW5uZXJIVE1MO1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICB2YXIgaXNEb2N1bWVudE9yRnJhZ21lbnQgPSByb290Q29udGFpbmVyRWxlbWVudC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSB8fCByb290Q29udGFpbmVyRWxlbWVudC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERTtcbiAgdmFyIGRvYyA9IGlzRG9jdW1lbnRPckZyYWdtZW50ID8gcm9vdENvbnRhaW5lckVsZW1lbnQgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xuICBsaXN0ZW5UbyhyZWdpc3RyYXRpb25OYW1lLCBkb2MpO1xufVxuXG5mdW5jdGlvbiBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgcmV0dXJuIHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFID8gcm9vdENvbnRhaW5lckVsZW1lbnQgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuXG5mdW5jdGlvbiB0cmFwQ2xpY2tPbk5vbkludGVyYWN0aXZlRWxlbWVudChub2RlKSB7XG4gIC8vIE1vYmlsZSBTYWZhcmkgZG9lcyBub3QgZmlyZSBwcm9wZXJseSBidWJibGUgY2xpY2sgZXZlbnRzIG9uXG4gIC8vIG5vbi1pbnRlcmFjdGl2ZSBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3RcbiAgLy8gZmlyZS4gVGhlIHdvcmthcm91bmQgZm9yIHRoaXMgYnVnIGludm9sdmVzIGF0dGFjaGluZyBhbiBlbXB0eSBjbGlja1xuICAvLyBsaXN0ZW5lciBvbiB0aGUgdGFyZ2V0IG5vZGUuXG4gIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gIC8vIEp1c3Qgc2V0IGl0IHVzaW5nIHRoZSBvbmNsaWNrIHByb3BlcnR5IHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBtYW5hZ2UgYW55XG4gIC8vIGJvb2trZWVwaW5nIGZvciBpdC4gTm90IHN1cmUgaWYgd2UgbmVlZCB0byBjbGVhciBpdCB3aGVuIHRoZSBsaXN0ZW5lciBpc1xuICAvLyByZW1vdmVkLlxuICAvLyBUT0RPOiBPbmx5IGRvIHRoaXMgZm9yIHRoZSByZWxldmFudCBTYWZhcmlzIG1heWJlP1xuICBub2RlLm9uY2xpY2sgPSBlbXB0eUZ1bmN0aW9uO1xufVxuXG5mdW5jdGlvbiBzZXRJbml0aWFsRE9NUHJvcGVydGllcyh0YWcsIGRvbUVsZW1lbnQsIHJvb3RDb250YWluZXJFbGVtZW50LCBuZXh0UHJvcHMsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGZvciAodmFyIHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIC8vIEZyZWV6ZSB0aGUgbmV4dCBzdHlsZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gYXNzdW1lIGl0IHdvbid0IGJlXG4gICAgICAgICAgLy8gbXV0YXRlZC4gV2UgaGF2ZSBhbHJlYWR5IHdhcm5lZCBmb3IgdGhpcyBpbiB0aGUgcGFzdC5cbiAgICAgICAgICBPYmplY3QuZnJlZXplKG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUmVsaWVzIG9uIGB1cGRhdGVTdHlsZXNCeUlEYCBub3QgbXV0YXRpbmcgYHN0eWxlVXBkYXRlc2AuXG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCBuZXh0UHJvcCwgZ2V0U3RhY2spO1xuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwpIHtcbiAgICAgIHZhciBuZXh0SHRtbCA9IG5leHRQcm9wID8gbmV4dFByb3BbSFRNTF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAobmV4dEh0bWwgIT0gbnVsbCkge1xuICAgICAgICBzZXRJbm5lckhUTUwoZG9tRWxlbWVudCwgbmV4dEh0bWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEF2b2lkIHNldHRpbmcgaW5pdGlhbCB0ZXh0Q29udGVudCB3aGVuIHRoZSB0ZXh0IGlzIGVtcHR5LiBJbiBJRTExIHNldHRpbmdcbiAgICAgICAgLy8gdGV4dENvbnRlbnQgb24gYSA8dGV4dGFyZWE+IHdpbGwgY2F1c2UgdGhlIHBsYWNlaG9sZGVyIHRvIG5vdFxuICAgICAgICAvLyBzaG93IHdpdGhpbiB0aGUgPHRleHRhcmVhPiB1bnRpbCBpdCBoYXMgYmVlbiBmb2N1c2VkIGFuZCBibHVycmVkIGFnYWluLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzY3MzEjaXNzdWVjb21tZW50LTI1NDg3NDU1M1xuICAgICAgICB2YXIgY2FuU2V0VGV4dENvbnRlbnQgPSB0YWcgIT09ICd0ZXh0YXJlYScgfHwgbmV4dFByb3AgIT09ICcnO1xuICAgICAgICBpZiAoY2FuU2V0VGV4dENvbnRlbnQpIHtcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCAnJyArIG5leHRQcm9wKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyB8fCBwcm9wS2V5ID09PSBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyQxKSB7XG4gICAgICAvLyBOb29wXG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBBVVRPRk9DVVMpIHtcbiAgICAgIC8vIFdlIHBvbHlmaWxsIGl0IHNlcGFyYXRlbHkgb24gdGhlIGNsaWVudCBkdXJpbmcgY29tbWl0LlxuICAgICAgLy8gV2UgYmxhY2tsaXN0IGl0IGhlcmUgcmF0aGVyIHRoYW4gaW4gdGhlIHByb3BlcnR5IGxpc3QgYmVjYXVzZSB3ZSBlbWl0IGl0IGluIFNTUi5cbiAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHJ1ZSAmJiB0eXBlb2YgbmV4dFByb3AgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIocHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCBwcm9wS2V5KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgIHNldFZhbHVlRm9yUHJvcGVydHkoZG9tRWxlbWVudCwgcHJvcEtleSwgbmV4dFByb3AsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcGVydGllcyhkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB3YXNDdXN0b21Db21wb25lbnRUYWcsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIC8vIFRPRE86IEhhbmRsZSB3YXNDdXN0b21Db21wb25lbnRUYWdcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cGRhdGVQYXlsb2FkLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIHByb3BLZXkgPSB1cGRhdGVQYXlsb2FkW2ldO1xuICAgIHZhciBwcm9wVmFsdWUgPSB1cGRhdGVQYXlsb2FkW2kgKyAxXTtcbiAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHByb3BWYWx1ZSwgZ2V0U3RhY2spO1xuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwpIHtcbiAgICAgIHNldElubmVySFRNTChkb21FbGVtZW50LCBwcm9wVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIHByb3BWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFZhbHVlRm9yUHJvcGVydHkoZG9tRWxlbWVudCwgcHJvcEtleSwgcHJvcFZhbHVlLCBpc0N1c3RvbUNvbXBvbmVudFRhZyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckVsZW1lbnQsIHBhcmVudE5hbWVzcGFjZSkge1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWcgPSB2b2lkIDA7XG5cbiAgLy8gV2UgY3JlYXRlIHRhZ3MgaW4gdGhlIG5hbWVzcGFjZSBvZiB0aGVpciBwYXJlbnQgY29udGFpbmVyLCBleGNlcHQgSFRNTFxuICAvLyB0YWdzIGdldCBubyBuYW1lc3BhY2UuXG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJFbGVtZW50KTtcbiAgdmFyIGRvbUVsZW1lbnQgPSB2b2lkIDA7XG4gIHZhciBuYW1lc3BhY2VVUkkgPSBwYXJlbnROYW1lc3BhY2U7XG4gIGlmIChuYW1lc3BhY2VVUkkgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgbmFtZXNwYWNlVVJJID0gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHR5cGUpO1xuICB9XG4gIGlmIChuYW1lc3BhY2VVUkkgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAge1xuICAgICAgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0eXBlLCBwcm9wcyk7XG4gICAgICAvLyBTaG91bGQgdGhpcyBjaGVjayBiZSBnYXRlZCBieSBwYXJlbnQgbmFtZXNwYWNlPyBOb3Qgc3VyZSB3ZSB3YW50IHRvXG4gICAgICAvLyBhbGxvdyA8U1ZHPiBvciA8bUFUSD4uXG4gICAgICB3YXJuaW5nKGlzQ3VzdG9tQ29tcG9uZW50VGFnIHx8IHR5cGUgPT09IHR5cGUudG9Mb3dlckNhc2UoKSwgJzwlcyAvPiBpcyB1c2luZyB1cHBlcmNhc2UgSFRNTC4gQWx3YXlzIHVzZSBsb3dlcmNhc2UgSFRNTCB0YWdzICcgKyAnaW4gUmVhY3QuJywgdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdzY3JpcHQnKSB7XG4gICAgICAvLyBDcmVhdGUgdGhlIHNjcmlwdCB2aWEgLmlubmVySFRNTCBzbyBpdHMgXCJwYXJzZXItaW5zZXJ0ZWRcIiBmbGFnIGlzXG4gICAgICAvLyBzZXQgdG8gdHJ1ZSBhbmQgaXQgZG9lcyBub3QgZXhlY3V0ZVxuICAgICAgdmFyIGRpdiA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBkaXYuaW5uZXJIVE1MID0gJzxzY3JpcHQ+PCcgKyAnL3NjcmlwdD4nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAvLyBUaGlzIGlzIGd1YXJhbnRlZWQgdG8geWllbGQgYSBzY3JpcHQgZWxlbWVudC5cbiAgICAgIHZhciBmaXJzdENoaWxkID0gZGl2LmZpcnN0Q2hpbGQ7XG4gICAgICBkb21FbGVtZW50ID0gZGl2LnJlbW92ZUNoaWxkKGZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzLmlzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gJEZsb3dJc3N1ZSBgY3JlYXRlRWxlbWVudGAgc2hvdWxkIGJlIHVwZGF0ZWQgZm9yIFdlYiBDb21wb25lbnRzXG4gICAgICBkb21FbGVtZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUsIHsgaXM6IHByb3BzLmlzIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXBhcmF0ZSBlbHNlIGJyYW5jaCBpbnN0ZWFkIG9mIHVzaW5nIGBwcm9wcy5pcyB8fCB1bmRlZmluZWRgIGFib3ZlIGJlY2F1c2Ugb2YgYSBGaXJlZm94IGJ1Zy5cbiAgICAgIC8vIFNlZSBkaXNjdXNzaW9uIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzY4OTZcbiAgICAgIC8vIGFuZCBkaXNjdXNzaW9uIGluIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyNzYyNDBcbiAgICAgIGRvbUVsZW1lbnQgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRvbUVsZW1lbnQgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHR5cGUpO1xuICB9XG5cbiAge1xuICAgIGlmIChuYW1lc3BhY2VVUkkgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICBpZiAoIWlzQ3VzdG9tQ29tcG9uZW50VGFnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkb21FbGVtZW50KSA9PT0gJ1tvYmplY3QgSFRNTFVua25vd25FbGVtZW50XScgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh3YXJuZWRVbmtub3duVGFncywgdHlwZSkpIHtcbiAgICAgICAgd2FybmVkVW5rbm93blRhZ3NbdHlwZV0gPSB0cnVlO1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIHRhZyA8JXM+IGlzIHVucmVjb2duaXplZCBpbiB0aGlzIGJyb3dzZXIuICcgKyAnSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIFJlYWN0IGNvbXBvbmVudCwgc3RhcnQgaXRzIG5hbWUgd2l0aCAnICsgJ2FuIHVwcGVyY2FzZSBsZXR0ZXIuJywgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlJDEodGV4dCwgcm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG59XG5cbmZ1bmN0aW9uIHNldEluaXRpYWxQcm9wZXJ0aWVzJDEoZG9tRWxlbWVudCwgdGFnLCByYXdQcm9wcywgcm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgdmFyIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodGFnLCByYXdQcm9wcyk7XG4gIHtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50KHRhZywgcmF3UHJvcHMpO1xuICAgIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZyAmJiAhZGlkV2FyblNoYWR5RE9NICYmIGRvbUVsZW1lbnQuc2hhZHlSb290KSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnJXMgaXMgdXNpbmcgc2hhZHkgRE9NLiBVc2luZyBzaGFkeSBET00gd2l0aCBSZWFjdCBjYW4gJyArICdjYXVzZSB0aGluZ3MgdG8gYnJlYWsgc3VidGx5LicsIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZSQyKCkgfHwgJ0EgY29tcG9uZW50Jyk7XG4gICAgICBkaWRXYXJuU2hhZHlET00gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IE1ha2Ugc3VyZSB0aGF0IHdlIGNoZWNrIGlzTW91bnRlZCBiZWZvcmUgZmlyaW5nIGFueSBvZiB0aGVzZSBldmVudHMuXG4gIHZhciBwcm9wcyA9IHZvaWQgMDtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpZnJhbWUnOlxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KCd0b3BMb2FkJywgJ2xvYWQnLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd2aWRlbyc6XG4gICAgY2FzZSAnYXVkaW8nOlxuICAgICAgLy8gQ3JlYXRlIGxpc3RlbmVyIGZvciBlYWNoIG1lZGlhIGV2ZW50XG4gICAgICBmb3IgKHZhciBldmVudCBpbiBtZWRpYUV2ZW50VHlwZXMpIHtcbiAgICAgICAgaWYgKG1lZGlhRXZlbnRUeXBlcy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcbiAgICAgICAgICB0cmFwQnViYmxlZEV2ZW50KGV2ZW50LCBtZWRpYUV2ZW50VHlwZXNbZXZlbnRdLCBkb21FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KCd0b3BFcnJvcicsICdlcnJvcicsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ltZyc6XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudCgndG9wRXJyb3InLCAnZXJyb3InLCBkb21FbGVtZW50KTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcExvYWQnLCAnbG9hZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudCgndG9wUmVzZXQnLCAncmVzZXQnLCBkb21FbGVtZW50KTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcFN1Ym1pdCcsICdzdWJtaXQnLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcFRvZ2dsZScsICd0b2dnbGUnLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpbml0V3JhcHBlclN0YXRlKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcEludmFsaWQnLCAnaW52YWxpZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICB2YWxpZGF0ZVByb3BzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzJDEoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBwcm9wcyA9IGdldEhvc3RQcm9wcyQyKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcEludmFsaWQnLCAnaW52YWxpZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMihkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBwcm9wcyA9IGdldEhvc3RQcm9wcyQzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcEludmFsaWQnLCAnaW52YWxpZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICB9XG5cbiAgYXNzZXJ0VmFsaWRQcm9wcyh0YWcsIHByb3BzLCBnZXRTdGFjayk7XG5cbiAgc2V0SW5pdGlhbERPTVByb3BlcnRpZXModGFnLCBkb21FbGVtZW50LCByb290Q29udGFpbmVyRWxlbWVudCwgcHJvcHMsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKTtcblxuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIC8vIFRPRE86IE1ha2Ugc3VyZSB3ZSBjaGVjayBpZiB0aGlzIGlzIHN0aWxsIHVubW91bnRlZCBvciBkbyBhbnkgY2xlYW5cbiAgICAgIC8vIHVwIG5lY2Vzc2FyeSBzaW5jZSB3ZSBuZXZlciBzdG9wIHRyYWNraW5nIGFueW1vcmUuXG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIGNoZWNrIGlmIHRoaXMgaXMgc3RpbGwgdW5tb3VudGVkIG9yIGRvIGFueSBjbGVhblxuICAgICAgLy8gdXAgbmVjZXNzYXJ5IHNpbmNlIHdlIG5ldmVyIHN0b3AgdHJhY2tpbmcgYW55bW9yZS5cbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcG9zdE1vdW50V3JhcHBlciQzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICBwb3N0TW91bnRXcmFwcGVyJDEoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIkMihkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgICAgIHRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50KGRvbUVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBkaWZmIGJldHdlZW4gdGhlIHR3byBvYmplY3RzLlxuZnVuY3Rpb24gZGlmZlByb3BlcnRpZXMkMShkb21FbGVtZW50LCB0YWcsIGxhc3RSYXdQcm9wcywgbmV4dFJhd1Byb3BzLCByb290Q29udGFpbmVyRWxlbWVudCkge1xuICB7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzSW5EZXZlbG9wbWVudCh0YWcsIG5leHRSYXdQcm9wcyk7XG4gIH1cblxuICB2YXIgdXBkYXRlUGF5bG9hZCA9IG51bGw7XG5cbiAgdmFyIGxhc3RQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG5leHRQcm9wcyA9IHZvaWQgMDtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBsYXN0UHJvcHMgPSBnZXRIb3N0UHJvcHMoZG9tRWxlbWVudCwgbGFzdFJhd1Byb3BzKTtcbiAgICAgIG5leHRQcm9wcyA9IGdldEhvc3RQcm9wcyhkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIGxhc3RQcm9wcyA9IGdldEhvc3RQcm9wcyQxKGRvbUVsZW1lbnQsIGxhc3RSYXdQcm9wcyk7XG4gICAgICBuZXh0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMShkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGxhc3RQcm9wcyA9IGdldEhvc3RQcm9wcyQyKGRvbUVsZW1lbnQsIGxhc3RSYXdQcm9wcyk7XG4gICAgICBuZXh0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMihkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgbGFzdFByb3BzID0gZ2V0SG9zdFByb3BzJDMoZG9tRWxlbWVudCwgbGFzdFJhd1Byb3BzKTtcbiAgICAgIG5leHRQcm9wcyA9IGdldEhvc3RQcm9wcyQzKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICB1cGRhdGVQYXlsb2FkID0gW107XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbGFzdFByb3BzID0gbGFzdFJhd1Byb3BzO1xuICAgICAgbmV4dFByb3BzID0gbmV4dFJhd1Byb3BzO1xuICAgICAgaWYgKHR5cGVvZiBsYXN0UHJvcHMub25DbGljayAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgbmV4dFByb3BzLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBjYXN0IG1heSBub3QgYmUgc291bmQgZm9yIFNWRywgTWF0aE1MIG9yIGN1c3RvbSBlbGVtZW50cy5cbiAgICAgICAgdHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQoZG9tRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGFzc2VydFZhbGlkUHJvcHModGFnLCBuZXh0UHJvcHMsIGdldFN0YWNrKTtcblxuICB2YXIgcHJvcEtleSA9IHZvaWQgMDtcbiAgdmFyIHN0eWxlTmFtZSA9IHZvaWQgMDtcbiAgdmFyIHN0eWxlVXBkYXRlcyA9IG51bGw7XG4gIGZvciAocHJvcEtleSBpbiBsYXN0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8ICFsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbGFzdFByb3BzW3Byb3BLZXldID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgIHZhciBsYXN0U3R5bGUgPSBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0U3R5bGUpIHtcbiAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZVVwZGF0ZXMpIHtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCB8fCBwcm9wS2V5ID09PSBDSElMRFJFTikge1xuICAgICAgLy8gTm9vcC4gVGhpcyBpcyBoYW5kbGVkIGJ5IHRoZSBjbGVhciB0ZXh0IG1lY2hhbmlzbS5cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyB8fCBwcm9wS2V5ID09PSBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyQxKSB7XG4gICAgICAvLyBOb29wXG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBBVVRPRk9DVVMpIHtcbiAgICAgIC8vIE5vb3AuIEl0IGRvZXNuJ3Qgd29yayBvbiB1cGRhdGVzIGFueXdheS5cbiAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlLiBJZiBhbnkgbGlzdGVuZXIgdXBkYXRlcyB3ZSBuZWVkIHRvIGVuc3VyZVxuICAgICAgLy8gdGhhdCB0aGUgXCJjdXJyZW50XCIgZmliZXIgcG9pbnRlciBnZXRzIHVwZGF0ZWQgc28gd2UgbmVlZCBhIGNvbW1pdFxuICAgICAgLy8gdG8gdXBkYXRlIHRoaXMgZWxlbWVudC5cbiAgICAgIGlmICghdXBkYXRlUGF5bG9hZCkge1xuICAgICAgICB1cGRhdGVQYXlsb2FkID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZvciBhbGwgb3RoZXIgZGVsZXRlZCBwcm9wZXJ0aWVzIHdlIGFkZCBpdCB0byB0aGUgcXVldWUuIFdlIHVzZVxuICAgICAgLy8gdGhlIHdoaXRlbGlzdCBpbiB0aGUgY29tbWl0IHBoYXNlIGluc3RlYWQuXG4gICAgICAodXBkYXRlUGF5bG9hZCA9IHVwZGF0ZVBheWxvYWQgfHwgW10pLnB1c2gocHJvcEtleSwgbnVsbCk7XG4gICAgfVxuICB9XG4gIGZvciAocHJvcEtleSBpbiBuZXh0UHJvcHMpIHtcbiAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgdmFyIGxhc3RQcm9wID0gbGFzdFByb3BzICE9IG51bGwgPyBsYXN0UHJvcHNbcHJvcEtleV0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wIHx8IG5leHRQcm9wID09IG51bGwgJiYgbGFzdFByb3AgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICAvLyBGcmVlemUgdGhlIG5leHQgc3R5bGUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGFzc3VtZSBpdCB3b24ndCBiZVxuICAgICAgICAgIC8vIG11dGF0ZWQuIFdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgZm9yIHRoaXMgaW4gdGhlIHBhc3QuXG4gICAgICAgICAgT2JqZWN0LmZyZWV6ZShuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAvLyBVbnNldCBzdHlsZXMgb24gYGxhc3RQcm9wYCBidXQgbm90IG9uIGBuZXh0UHJvcGAuXG4gICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgKCFuZXh0UHJvcCB8fCAhbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgIGlmICghc3R5bGVVcGRhdGVzKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHN0eWxlcyB0aGF0IGNoYW5nZWQgc2luY2UgYGxhc3RQcm9wYC5cbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICBpZiAobmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICBpZiAoIXN0eWxlVXBkYXRlcykge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gbmV4dFByb3Bbc3R5bGVOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuICAgICAgICBpZiAoIXN0eWxlVXBkYXRlcykge1xuICAgICAgICAgIGlmICghdXBkYXRlUGF5bG9hZCkge1xuICAgICAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVQYXlsb2FkLnB1c2gocHJvcEtleSwgc3R5bGVVcGRhdGVzKTtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IERBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MKSB7XG4gICAgICB2YXIgbmV4dEh0bWwgPSBuZXh0UHJvcCA/IG5leHRQcm9wW0hUTUxdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGxhc3RIdG1sID0gbGFzdFByb3AgPyBsYXN0UHJvcFtIVE1MXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcbiAgICAgICAgICAodXBkYXRlUGF5bG9hZCA9IHVwZGF0ZVBheWxvYWQgfHwgW10pLnB1c2gocHJvcEtleSwgJycgKyBuZXh0SHRtbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IEl0IG1pZ2h0IGJlIHRvbyBsYXRlIHRvIGNsZWFyIHRoaXMgaWYgd2UgaGF2ZSBjaGlsZHJlblxuICAgICAgICAvLyBpbnNlcnRlZCBhbHJlYWR5LlxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIGlmIChsYXN0UHJvcCAhPT0gbmV4dFByb3AgJiYgKHR5cGVvZiBuZXh0UHJvcCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykpIHtcbiAgICAgICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKHByb3BLZXksICcnICsgbmV4dFByb3ApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIHx8IHByb3BLZXkgPT09IFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEpIHtcbiAgICAgIC8vIE5vb3BcbiAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBlYWdlcmx5IGxpc3RlbiB0byB0aGlzIGV2ZW4gdGhvdWdoIHdlIGhhdmVuJ3QgY29tbWl0dGVkIHlldC5cbiAgICAgICAgaWYgKHRydWUgJiYgdHlwZW9mIG5leHRQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgcHJvcEtleSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0ZVBheWxvYWQgJiYgbGFzdFByb3AgIT09IG5leHRQcm9wKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2UuIElmIGFueSBsaXN0ZW5lciB1cGRhdGVzIHdlIG5lZWQgdG8gZW5zdXJlXG4gICAgICAgIC8vIHRoYXQgdGhlIFwiY3VycmVudFwiIHByb3BzIHBvaW50ZXIgZ2V0cyB1cGRhdGVkIHNvIHdlIG5lZWQgYSBjb21taXRcbiAgICAgICAgLy8gdG8gdXBkYXRlIHRoaXMgZWxlbWVudC5cbiAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3IgYW55IG90aGVyIHByb3BlcnR5IHdlIGFsd2F5cyBhZGQgaXQgdG8gdGhlIHF1ZXVlIGFuZCB0aGVuIHdlXG4gICAgICAvLyBmaWx0ZXIgaXQgb3V0IHVzaW5nIHRoZSB3aGl0ZWxpc3QgZHVyaW5nIHRoZSBjb21taXQuXG4gICAgICAodXBkYXRlUGF5bG9hZCA9IHVwZGF0ZVBheWxvYWQgfHwgW10pLnB1c2gocHJvcEtleSwgbmV4dFByb3ApO1xuICAgIH1cbiAgfVxuICBpZiAoc3R5bGVVcGRhdGVzKSB7XG4gICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKFNUWUxFLCBzdHlsZVVwZGF0ZXMpO1xuICB9XG4gIHJldHVybiB1cGRhdGVQYXlsb2FkO1xufVxuXG4vLyBBcHBseSB0aGUgZGlmZi5cbmZ1bmN0aW9uIHVwZGF0ZVByb3BlcnRpZXMkMShkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB0YWcsIGxhc3RSYXdQcm9wcywgbmV4dFJhd1Byb3BzKSB7XG4gIC8vIFVwZGF0ZSBjaGVja2VkICpiZWZvcmUqIG5hbWUuXG4gIC8vIEluIHRoZSBtaWRkbGUgb2YgYW4gdXBkYXRlLCBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIG11bHRpcGxlIGNoZWNrZWQuXG4gIC8vIFdoZW4gYSBjaGVja2VkIHJhZGlvIHRyaWVzIHRvIGNoYW5nZSBuYW1lLCBicm93c2VyIG1ha2VzIGFub3RoZXIgcmFkaW8ncyBjaGVja2VkIGZhbHNlLlxuICBpZiAodGFnID09PSAnaW5wdXQnICYmIG5leHRSYXdQcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5leHRSYXdQcm9wcy5uYW1lICE9IG51bGwpIHtcbiAgICB1cGRhdGVDaGVja2VkKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gIH1cblxuICB2YXIgd2FzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodGFnLCBsYXN0UmF3UHJvcHMpO1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0YWcsIG5leHRSYXdQcm9wcyk7XG4gIC8vIEFwcGx5IHRoZSBkaWZmLlxuICB1cGRhdGVET01Qcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHVwZGF0ZVBheWxvYWQsIHdhc0N1c3RvbUNvbXBvbmVudFRhZywgaXNDdXN0b21Db21wb25lbnRUYWcpO1xuXG4gIC8vIFRPRE86IEVuc3VyZSB0aGF0IGFuIHVwZGF0ZSBnZXRzIHNjaGVkdWxlZCBpZiBhbnkgb2YgdGhlIHNwZWNpYWwgcHJvcHNcbiAgLy8gY2hhbmdlZC5cbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZXIgYXJvdW5kIGlucHV0cyAqYWZ0ZXIqIHVwZGF0aW5nIHByb3BzLiBUaGlzIGhhcyB0b1xuICAgICAgLy8gaGFwcGVuIGFmdGVyIGB1cGRhdGVET01Qcm9wZXJ0aWVzYC4gT3RoZXJ3aXNlIEhUTUw1IGlucHV0IHZhbGlkYXRpb25zXG4gICAgICAvLyByYWlzZSB3YXJuaW5ncyBhbmQgcHJldmVudCB0aGUgbmV3IHZhbHVlIGZyb20gYmVpbmcgYXNzaWduZWQuXG4gICAgICB1cGRhdGVXcmFwcGVyKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICB1cGRhdGVXcmFwcGVyJDEoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAvLyA8c2VsZWN0PiB2YWx1ZSB1cGRhdGUgbmVlZHMgdG8gb2NjdXIgYWZ0ZXIgPG9wdGlvbj4gY2hpbGRyZW5cbiAgICAgIC8vIHJlY29uY2lsaWF0aW9uXG4gICAgICBwb3N0VXBkYXRlV3JhcHBlcihkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUocHJvcE5hbWUpIHtcbiAge1xuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IHByb3BOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCFwb3NzaWJsZVN0YW5kYXJkTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHBvc3NpYmxlU3RhbmRhcmROYW1lc1tsb3dlckNhc2VkTmFtZV0gfHwgbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZGlmZkh5ZHJhdGVkUHJvcGVydGllcyQxKGRvbUVsZW1lbnQsIHRhZywgcmF3UHJvcHMsIHBhcmVudE5hbWVzcGFjZSwgcm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgdmFyIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gdm9pZCAwO1xuICB2YXIgZXh0cmFBdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDtcblxuICB7XG4gICAgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nID0gcmF3UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMV0gPT09IHRydWU7XG4gICAgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0YWcsIHJhd1Byb3BzKTtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50KHRhZywgcmF3UHJvcHMpO1xuICAgIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZyAmJiAhZGlkV2FyblNoYWR5RE9NICYmIGRvbUVsZW1lbnQuc2hhZHlSb290KSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnJXMgaXMgdXNpbmcgc2hhZHkgRE9NLiBVc2luZyBzaGFkeSBET00gd2l0aCBSZWFjdCBjYW4gJyArICdjYXVzZSB0aGluZ3MgdG8gYnJlYWsgc3VidGx5LicsIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZSQyKCkgfHwgJ0EgY29tcG9uZW50Jyk7XG4gICAgICBkaWRXYXJuU2hhZHlET00gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IE1ha2Ugc3VyZSB0aGF0IHdlIGNoZWNrIGlzTW91bnRlZCBiZWZvcmUgZmlyaW5nIGFueSBvZiB0aGVzZSBldmVudHMuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaWZyYW1lJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudCgndG9wTG9hZCcsICdsb2FkJywgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd2aWRlbyc6XG4gICAgY2FzZSAnYXVkaW8nOlxuICAgICAgLy8gQ3JlYXRlIGxpc3RlbmVyIGZvciBlYWNoIG1lZGlhIGV2ZW50XG4gICAgICBmb3IgKHZhciBldmVudCBpbiBtZWRpYUV2ZW50VHlwZXMpIHtcbiAgICAgICAgaWYgKG1lZGlhRXZlbnRUeXBlcy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcbiAgICAgICAgICB0cmFwQnViYmxlZEV2ZW50KGV2ZW50LCBtZWRpYUV2ZW50VHlwZXNbZXZlbnRdLCBkb21FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc291cmNlJzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcEVycm9yJywgJ2Vycm9yJywgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbWcnOlxuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICBjYXNlICdsaW5rJzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcEVycm9yJywgJ2Vycm9yJywgZG9tRWxlbWVudCk7XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KCd0b3BMb2FkJywgJ2xvYWQnLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudCgndG9wUmVzZXQnLCAncmVzZXQnLCBkb21FbGVtZW50KTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcFN1Ym1pdCcsICdzdWJtaXQnLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RldGFpbHMnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudCgndG9wVG9nZ2xlJywgJ3RvZ2dsZScsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgaW5pdFdyYXBwZXJTdGF0ZShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KCd0b3BJbnZhbGlkJywgJ2ludmFsaWQnLCBkb21FbGVtZW50KTtcbiAgICAgIC8vIEZvciBjb250cm9sbGVkIGNvbXBvbmVudHMgd2UgYWx3YXlzIG5lZWQgdG8gZW5zdXJlIHdlJ3JlIGxpc3RlbmluZ1xuICAgICAgLy8gdG8gb25DaGFuZ2UuIEV2ZW4gaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIuXG4gICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgJ29uQ2hhbmdlJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdvcHRpb24nOlxuICAgICAgdmFsaWRhdGVQcm9wcyhkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgaW5pdFdyYXBwZXJTdGF0ZSQxKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoJ3RvcEludmFsaWQnLCAnaW52YWxpZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMihkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KCd0b3BJbnZhbGlkJywgJ2ludmFsaWQnLCBkb21FbGVtZW50KTtcbiAgICAgIC8vIEZvciBjb250cm9sbGVkIGNvbXBvbmVudHMgd2UgYWx3YXlzIG5lZWQgdG8gZW5zdXJlIHdlJ3JlIGxpc3RlbmluZ1xuICAgICAgLy8gdG8gb25DaGFuZ2UuIEV2ZW4gaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIuXG4gICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgJ29uQ2hhbmdlJyk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGFzc2VydFZhbGlkUHJvcHModGFnLCByYXdQcm9wcywgZ2V0U3RhY2spO1xuXG4gIHtcbiAgICBleHRyYUF0dHJpYnV0ZU5hbWVzID0gbmV3IFNldCgpO1xuICAgIHZhciBhdHRyaWJ1dGVzID0gZG9tRWxlbWVudC5hdHRyaWJ1dGVzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5hbWUgPSBhdHRyaWJ1dGVzW2ldLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAvLyBCdWlsdC1pbiBTU1IgYXR0cmlidXRlIGlzIHdoaXRlbGlzdGVkXG4gICAgICAgIGNhc2UgJ2RhdGEtcmVhY3Ryb290JzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gQ29udHJvbGxlZCBhdHRyaWJ1dGVzIGFyZSBub3QgdmFsaWRhdGVkXG4gICAgICAgIC8vIFRPRE86IE9ubHkgaWdub3JlIHRoZW0gb24gY29udHJvbGxlZCB0YWdzLlxuICAgICAgICBjYXNlICd2YWx1ZSc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NoZWNrZWQnOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzZWxlY3RlZCc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gSW50ZW50aW9uYWxseSB1c2UgdGhlIG9yaWdpbmFsIG5hbWUuXG4gICAgICAgICAgLy8gU2VlIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTA2NzYuXG4gICAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5hZGQoYXR0cmlidXRlc1tpXS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdXBkYXRlUGF5bG9hZCA9IG51bGw7XG4gIGZvciAodmFyIHByb3BLZXkgaW4gcmF3UHJvcHMpIHtcbiAgICBpZiAoIXJhd1Byb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIG5leHRQcm9wID0gcmF3UHJvcHNbcHJvcEtleV07XG4gICAgaWYgKHByb3BLZXkgPT09IENISUxEUkVOKSB7XG4gICAgICAvLyBGb3IgdGV4dCBjb250ZW50IGNoaWxkcmVuIHdlIGNvbXBhcmUgYWdhaW5zdCB0ZXh0Q29udGVudC4gVGhpc1xuICAgICAgLy8gbWlnaHQgbWF0Y2ggYWRkaXRpb25hbCBIVE1MIHRoYXQgaXMgaGlkZGVuIHdoZW4gd2UgcmVhZCBpdCB1c2luZ1xuICAgICAgLy8gdGV4dENvbnRlbnQuIEUuZy4gXCJmb29cIiB3aWxsIG1hdGNoIFwiZjxzcGFuPm9vPC9zcGFuPlwiIGJ1dCB0aGF0IHN0aWxsXG4gICAgICAvLyBzYXRpc2ZpZXMgb3VyIHJlcXVpcmVtZW50LiBPdXIgcmVxdWlyZW1lbnQgaXMgbm90IHRvIHByb2R1Y2UgcGVyZmVjdFxuICAgICAgLy8gSFRNTCBhbmQgYXR0cmlidXRlcy4gSWRlYWxseSB3ZSBzaG91bGQgcHJlc2VydmUgc3RydWN0dXJlIGJ1dCBpdCdzXG4gICAgICAvLyBvayBub3QgdG8gaWYgdGhlIHZpc2libGUgY29udGVudCBpcyBzdGlsbCBlbm91Z2ggdG8gaW5kaWNhdGUgd2hhdFxuICAgICAgLy8gZXZlbiBsaXN0ZW5lcnMgdGhlc2Ugbm9kZXMgbWlnaHQgYmUgd2lyZWQgdXAgdG8uXG4gICAgICAvLyBUT0RPOiBXYXJuIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBhIHNpbmdsZSB0ZXh0Tm9kZSBhcyBhIGNoaWxkLlxuICAgICAgLy8gVE9ETzogU2hvdWxkIHdlIHVzZSBkb21FbGVtZW50LmZpcnN0Q2hpbGQubm9kZVZhbHVlIHRvIGNvbXBhcmU/XG4gICAgICBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudC50ZXh0Q29udGVudCAhPT0gbmV4dFByb3ApIHtcbiAgICAgICAgICBpZiAodHJ1ZSAmJiAhc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nKSB7XG4gICAgICAgICAgICB3YXJuRm9yVGV4dERpZmZlcmVuY2UoZG9tRWxlbWVudC50ZXh0Q29udGVudCwgbmV4dFByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVQYXlsb2FkID0gW0NISUxEUkVOLCBuZXh0UHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudC50ZXh0Q29udGVudCAhPT0gJycgKyBuZXh0UHJvcCkge1xuICAgICAgICAgIGlmICh0cnVlICYmICFzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHtcbiAgICAgICAgICAgIHdhcm5Gb3JUZXh0RGlmZmVyZW5jZShkb21FbGVtZW50LnRleHRDb250ZW50LCBuZXh0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZVBheWxvYWQgPSBbQ0hJTERSRU4sICcnICsgbmV4dFByb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHRydWUgJiYgdHlwZW9mIG5leHRQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgcHJvcEtleSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cnVlICYmXG4gICAgLy8gQ29udmluY2UgRmxvdyB3ZSd2ZSBjYWxjdWxhdGVkIGl0IChpdCdzIERFVi1vbmx5IGluIHRoaXMgbWV0aG9kLilcbiAgICB0eXBlb2YgaXNDdXN0b21Db21wb25lbnRUYWcgPT09ICdib29sZWFuJykge1xuICAgICAgLy8gVmFsaWRhdGUgdGhhdCB0aGUgcHJvcGVydGllcyBjb3JyZXNwb25kIHRvIHRoZWlyIGV4cGVjdGVkIHZhbHVlcy5cbiAgICAgIHZhciBzZXJ2ZXJWYWx1ZSA9IHZvaWQgMDtcbiAgICAgIHZhciBwcm9wZXJ0eUluZm8gPSBnZXRQcm9wZXJ0eUluZm8ocHJvcEtleSk7XG4gICAgICBpZiAoc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nKSB7XG4gICAgICAgIC8vIERvbid0IGJvdGhlciBjb21wYXJpbmcuIFdlJ3JlIGlnbm9yaW5nIGFsbCB0aGVzZSB3YXJuaW5ncy5cbiAgICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIHx8IHByb3BLZXkgPT09IFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEgfHxcbiAgICAgIC8vIENvbnRyb2xsZWQgYXR0cmlidXRlcyBhcmUgbm90IHZhbGlkYXRlZFxuICAgICAgLy8gVE9ETzogT25seSBpZ25vcmUgdGhlbSBvbiBjb250cm9sbGVkIHRhZ3MuXG4gICAgICBwcm9wS2V5ID09PSAndmFsdWUnIHx8IHByb3BLZXkgPT09ICdjaGVja2VkJyB8fCBwcm9wS2V5ID09PSAnc2VsZWN0ZWQnKSB7XG4gICAgICAgIC8vIE5vb3BcbiAgICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwpIHtcbiAgICAgICAgdmFyIHJhd0h0bWwgPSBuZXh0UHJvcCA/IG5leHRQcm9wW0hUTUxdIHx8ICcnIDogJyc7XG4gICAgICAgIHZhciBzZXJ2ZXJIVE1MID0gZG9tRWxlbWVudC5pbm5lckhUTUw7XG4gICAgICAgIHZhciBleHBlY3RlZEhUTUwgPSBub3JtYWxpemVIVE1MKGRvbUVsZW1lbnQsIHJhd0h0bWwpO1xuICAgICAgICBpZiAoZXhwZWN0ZWRIVE1MICE9PSBzZXJ2ZXJIVE1MKSB7XG4gICAgICAgICAgd2FybkZvclByb3BEaWZmZXJlbmNlKHByb3BLZXksIHNlcnZlckhUTUwsIGV4cGVjdGVkSFRNTCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzWydkZWxldGUnXShwcm9wS2V5KTtcbiAgICAgICAgdmFyIGV4cGVjdGVkU3R5bGUgPSBjcmVhdGVEYW5nZXJvdXNTdHJpbmdGb3JTdHlsZXMobmV4dFByb3ApO1xuICAgICAgICBzZXJ2ZXJWYWx1ZSA9IGRvbUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICBpZiAoZXhwZWN0ZWRTdHlsZSAhPT0gc2VydmVyVmFsdWUpIHtcbiAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVyVmFsdWUsIGV4cGVjdGVkU3R5bGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lc1snZGVsZXRlJ10ocHJvcEtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgc2VydmVyVmFsdWUgPSBnZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBwcm9wS2V5LCBuZXh0UHJvcCk7XG5cbiAgICAgICAgaWYgKG5leHRQcm9wICE9PSBzZXJ2ZXJWYWx1ZSkge1xuICAgICAgICAgIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZShwcm9wS2V5LCBzZXJ2ZXJWYWx1ZSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFzaG91bGRJZ25vcmVBdHRyaWJ1dGUocHJvcEtleSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykgJiYgIXNob3VsZFJlbW92ZUF0dHJpYnV0ZShwcm9wS2V5LCBuZXh0UHJvcCwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykpIHtcbiAgICAgICAgdmFyIGlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXNbJ2RlbGV0ZSddKHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICBzZXJ2ZXJWYWx1ZSA9IGdldFZhbHVlRm9yUHJvcGVydHkoZG9tRWxlbWVudCwgcHJvcEtleSwgbmV4dFByb3AsIHByb3BlcnR5SW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG93bk5hbWVzcGFjZSA9IHBhcmVudE5hbWVzcGFjZTtcbiAgICAgICAgICBpZiAob3duTmFtZXNwYWNlID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgICAgICAgb3duTmFtZXNwYWNlID0gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHRhZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvd25OYW1lc3BhY2UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzWydkZWxldGUnXShwcm9wS2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3RhbmRhcmROYW1lID0gZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUocHJvcEtleSk7XG4gICAgICAgICAgICBpZiAoc3RhbmRhcmROYW1lICE9PSBudWxsICYmIHN0YW5kYXJkTmFtZSAhPT0gcHJvcEtleSkge1xuICAgICAgICAgICAgICAvLyBJZiBhbiBTVkcgcHJvcCBpcyBzdXBwbGllZCB3aXRoIGJhZCBjYXNpbmcsIGl0IHdpbGxcbiAgICAgICAgICAgICAgLy8gYmUgc3VjY2Vzc2Z1bGx5IHBhcnNlZCBmcm9tIEhUTUwsIGJ1dCB3aWxsIHByb2R1Y2UgYSBtaXNtYXRjaFxuICAgICAgICAgICAgICAvLyAoYW5kIHdvdWxkIGJlIGluY29ycmVjdGx5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQpLlxuICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBhbHJlYWR5IHdhcm4gYWJvdXQgYmFkIGNhc2luZyBlbHNld2hlcmUuXG4gICAgICAgICAgICAgIC8vIFNvIHdlJ2xsIHNraXAgdGhlIG1pc2xlYWRpbmcgZXh0cmEgbWlzbWF0Y2ggd2FybmluZyBpbiB0aGlzIGNhc2UuXG4gICAgICAgICAgICAgIGlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZyA9IHRydWU7XG4gICAgICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lc1snZGVsZXRlJ10oc3RhbmRhcmROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXNbJ2RlbGV0ZSddKHByb3BLZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXJ2ZXJWYWx1ZSA9IGdldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0UHJvcCAhPT0gc2VydmVyVmFsdWUgJiYgIWlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZykge1xuICAgICAgICAgIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZShwcm9wS2V5LCBzZXJ2ZXJWYWx1ZSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAge1xuICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICBpZiAoZXh0cmFBdHRyaWJ1dGVOYW1lcy5zaXplID4gMCAmJiAhc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICB3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzKGV4dHJhQXR0cmlidXRlTmFtZXMpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIGNoZWNrIGlmIHRoaXMgaXMgc3RpbGwgdW5tb3VudGVkIG9yIGRvIGFueSBjbGVhblxuICAgICAgLy8gdXAgbmVjZXNzYXJ5IHNpbmNlIHdlIG5ldmVyIHN0b3AgdHJhY2tpbmcgYW55bW9yZS5cbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcG9zdE1vdW50V3JhcHBlcihkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAvLyBUT0RPOiBNYWtlIHN1cmUgd2UgY2hlY2sgaWYgdGhpcyBpcyBzdGlsbCB1bm1vdW50ZWQgb3IgZG8gYW55IGNsZWFuXG4gICAgICAvLyB1cCBuZWNlc3Nhcnkgc2luY2Ugd2UgbmV2ZXIgc3RvcCB0cmFja2luZyBhbnltb3JlLlxuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICBwb3N0TW91bnRXcmFwcGVyJDMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICBjYXNlICdvcHRpb24nOlxuICAgICAgLy8gRm9yIGlucHV0IGFuZCB0ZXh0YXJlYSB3ZSBjdXJyZW50IGFsd2F5cyBzZXQgdGhlIHZhbHVlIHByb3BlcnR5IGF0XG4gICAgICAvLyBwb3N0IG1vdW50IHRvIGZvcmNlIGl0IHRvIGRpdmVyZ2UgZnJvbSBhdHRyaWJ1dGVzLiBIb3dldmVyLCBmb3JcbiAgICAgIC8vIG9wdGlvbiBhbmQgc2VsZWN0IHdlIGRvbid0IHF1aXRlIGRvIHRoZSBzYW1lIHRoaW5nIGFuZCBzZWxlY3RcbiAgICAgIC8vIGlzIG5vdCByZXNpbGllbnQgdG8gdGhlIERPTSBzdGF0ZSBjaGFuZ2luZyBzbyB3ZSBkb24ndCBkbyB0aGF0IGhlcmUuXG4gICAgICAvLyBUT0RPOiBDb25zaWRlciBub3QgZG9pbmcgdGhpcyBmb3IgaW5wdXQgYW5kIHRleHRhcmVhLlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmICh0eXBlb2YgcmF3UHJvcHMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBUT0RPOiBUaGlzIGNhc3QgbWF5IG5vdCBiZSBzb3VuZCBmb3IgU1ZHLCBNYXRoTUwgb3IgY3VzdG9tIGVsZW1lbnRzLlxuICAgICAgICB0cmFwQ2xpY2tPbk5vbkludGVyYWN0aXZlRWxlbWVudChkb21FbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZVBheWxvYWQ7XG59XG5cbmZ1bmN0aW9uIGRpZmZIeWRyYXRlZFRleHQkMSh0ZXh0Tm9kZSwgdGV4dCkge1xuICB2YXIgaXNEaWZmZXJlbnQgPSB0ZXh0Tm9kZS5ub2RlVmFsdWUgIT09IHRleHQ7XG4gIHJldHVybiBpc0RpZmZlcmVudDtcbn1cblxuZnVuY3Rpb24gd2FybkZvclVubWF0Y2hlZFRleHQkMSh0ZXh0Tm9kZSwgdGV4dCkge1xuICB7XG4gICAgd2FybkZvclRleHREaWZmZXJlbmNlKHRleHROb2RlLm5vZGVWYWx1ZSwgdGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCQxKHBhcmVudE5vZGUsIGNoaWxkKSB7XG4gIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmcoZmFsc2UsICdEaWQgbm90IGV4cGVjdCBzZXJ2ZXIgSFRNTCB0byBjb250YWluIGEgPCVzPiBpbiA8JXM+LicsIGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIHBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCQxKHBhcmVudE5vZGUsIGNoaWxkKSB7XG4gIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmcoZmFsc2UsICdEaWQgbm90IGV4cGVjdCBzZXJ2ZXIgSFRNTCB0byBjb250YWluIHRoZSB0ZXh0IG5vZGUgXCIlc1wiIGluIDwlcz4uJywgY2hpbGQubm9kZVZhbHVlLCBwYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCQxKHBhcmVudE5vZGUsIHRhZywgcHJvcHMpIHtcbiAge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG4gICAgd2FybmluZyhmYWxzZSwgJ0V4cGVjdGVkIHNlcnZlciBIVE1MIHRvIGNvbnRhaW4gYSBtYXRjaGluZyA8JXM+IGluIDwlcz4uJywgdGFnLCBwYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCQxKHBhcmVudE5vZGUsIHRleHQpIHtcbiAge1xuICAgIGlmICh0ZXh0ID09PSAnJykge1xuICAgICAgLy8gV2UgZXhwZWN0IHRvIGluc2VydCBlbXB0eSB0ZXh0IG5vZGVzIHNpbmNlIHRoZXkncmUgbm90IHJlcHJlc2VudGVkIGluXG4gICAgICAvLyB0aGUgSFRNTC5cbiAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGlzIHNwZWNpYWwgY2FzZSBpZiB3ZSBjYW4ganVzdCBhdm9pZCBpbnNlcnRpbmcgZW1wdHlcbiAgICAgIC8vIHRleHQgbm9kZXMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG4gICAgd2FybmluZyhmYWxzZSwgJ0V4cGVjdGVkIHNlcnZlciBIVE1MIHRvIGNvbnRhaW4gYSBtYXRjaGluZyB0ZXh0IG5vZGUgZm9yIFwiJXNcIiBpbiA8JXM+LicsIHRleHQsIHBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQxKGRvbUVsZW1lbnQsIHRhZywgcHJvcHMpIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICByZXN0b3JlQ29udHJvbGxlZFN0YXRlKGRvbUVsZW1lbnQsIHByb3BzKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDMoZG9tRWxlbWVudCwgcHJvcHMpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDIoZG9tRWxlbWVudCwgcHJvcHMpO1xuICAgICAgcmV0dXJuO1xuICB9XG59XG5cbnZhciBSZWFjdERPTUZpYmVyQ29tcG9uZW50ID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlJDEsXG5cdHNldEluaXRpYWxQcm9wZXJ0aWVzOiBzZXRJbml0aWFsUHJvcGVydGllcyQxLFxuXHRkaWZmUHJvcGVydGllczogZGlmZlByb3BlcnRpZXMkMSxcblx0dXBkYXRlUHJvcGVydGllczogdXBkYXRlUHJvcGVydGllcyQxLFxuXHRkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOiBkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzJDEsXG5cdGRpZmZIeWRyYXRlZFRleHQ6IGRpZmZIeWRyYXRlZFRleHQkMSxcblx0d2FybkZvclVubWF0Y2hlZFRleHQ6IHdhcm5Gb3JVbm1hdGNoZWRUZXh0JDEsXG5cdHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6IHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQkMSxcblx0d2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDogd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCQxLFxuXHR3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6IHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCQxLFxuXHR3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6IHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCQxLFxuXHRyZXN0b3JlQ29udHJvbGxlZFN0YXRlOiByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDFcbn0pO1xuXG4vLyBUT0RPOiBkaXJlY3QgaW1wb3J0cyBsaWtlIHNvbWUtcGFja2FnZS9zcmMvKiBhcmUgYmFkLiBGaXggbWUuXG52YXIgZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQ2ID0gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5nZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtO1xuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gZW1wdHlGdW5jdGlvbjtcblxue1xuICAvLyBUaGlzIHZhbGlkYXRpb24gY29kZSB3YXMgd3JpdHRlbiBiYXNlZCBvbiB0aGUgSFRNTDUgcGFyc2luZyBzcGVjOlxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1zY29wZVxuICAvL1xuICAvLyBOb3RlOiB0aGlzIGRvZXMgbm90IGNhdGNoIGFsbCBpbnZhbGlkIG5lc3RpbmcsIG5vciBkb2VzIGl0IHRyeSB0byAoYXMgaXQnc1xuICAvLyBub3QgY2xlYXIgd2hhdCBwcmFjdGljYWwgYmVuZWZpdCBkb2luZyBzbyBwcm92aWRlcyk7IGluc3RlYWQsIHdlIHdhcm4gb25seVxuICAvLyBmb3IgY2FzZXMgd2hlcmUgdGhlIHBhcnNlciB3aWxsIGdpdmUgYSBwYXJzZSB0cmVlIGRpZmZlcmluZyBmcm9tIHdoYXQgUmVhY3RcbiAgLy8gaW50ZW5kZWQuIEZvciBleGFtcGxlLCA8Yj48ZGl2PjwvZGl2PjwvYj4gaXMgaW52YWxpZCBidXQgd2UgZG9uJ3Qgd2FyblxuICAvLyBiZWNhdXNlIGl0IHN0aWxsIHBhcnNlcyBjb3JyZWN0bHk7IHdlIGRvIHdhcm4gZm9yIG90aGVyIGNhc2VzIGxpa2UgbmVzdGVkXG4gIC8vIDxwPiB0YWdzIHdoZXJlIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlY29uZCBlbGVtZW50IGltcGxpY2l0bHkgY2xvc2VzIHRoZVxuICAvLyBmaXJzdCwgY2F1c2luZyBhIGNvbmZ1c2luZyBtZXNzLlxuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3NwZWNpYWxcbiAgdmFyIHNwZWNpYWxUYWdzID0gWydhZGRyZXNzJywgJ2FwcGxldCcsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYmFzZScsICdiYXNlZm9udCcsICdiZ3NvdW5kJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FwdGlvbicsICdjZW50ZXInLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RkJywgJ2RldGFpbHMnLCAnZGlyJywgJ2RpdicsICdkbCcsICdkdCcsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdmcmFtZScsICdmcmFtZXNldCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lzaW5kZXgnLCAnbGknLCAnbGluaycsICdsaXN0aW5nJywgJ21haW4nLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbmF2JywgJ25vZW1iZWQnLCAnbm9mcmFtZXMnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ3AnLCAncGFyYW0nLCAncGxhaW50ZXh0JywgJ3ByZScsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc291cmNlJywgJ3N0eWxlJywgJ3N1bW1hcnknLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGVtcGxhdGUnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndWwnLCAnd2JyJywgJ3htcCddO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLXNjb3BlXG4gIHZhciBpblNjb3BlVGFncyA9IFsnYXBwbGV0JywgJ2NhcHRpb24nLCAnaHRtbCcsICd0YWJsZScsICd0ZCcsICd0aCcsICdtYXJxdWVlJywgJ29iamVjdCcsICd0ZW1wbGF0ZScsXG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaHRtbC1pbnRlZ3JhdGlvbi1wb2ludFxuICAvLyBUT0RPOiBEaXN0aW5ndWlzaCBieSBuYW1lc3BhY2UgaGVyZSAtLSBmb3IgPHRpdGxlPiwgaW5jbHVkaW5nIGl0IGhlcmVcbiAgLy8gZXJycyBvbiB0aGUgc2lkZSBvZiBmZXdlciB3YXJuaW5nc1xuICAnZm9yZWlnbk9iamVjdCcsICdkZXNjJywgJ3RpdGxlJ107XG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tYnV0dG9uLXNjb3BlXG4gIHZhciBidXR0b25TY29wZVRhZ3MgPSBpblNjb3BlVGFncy5jb25jYXQoWydidXR0b24nXSk7XG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjZ2VuZXJhdGUtaW1wbGllZC1lbmQtdGFnc1xuICB2YXIgaW1wbGllZEVuZFRhZ3MgPSBbJ2RkJywgJ2R0JywgJ2xpJywgJ29wdGlvbicsICdvcHRncm91cCcsICdwJywgJ3JwJywgJ3J0J107XG5cbiAgdmFyIGVtcHR5QW5jZXN0b3JJbmZvID0ge1xuICAgIGN1cnJlbnQ6IG51bGwsXG5cbiAgICBmb3JtVGFnOiBudWxsLFxuICAgIGFUYWdJblNjb3BlOiBudWxsLFxuICAgIGJ1dHRvblRhZ0luU2NvcGU6IG51bGwsXG4gICAgbm9iclRhZ0luU2NvcGU6IG51bGwsXG4gICAgcFRhZ0luQnV0dG9uU2NvcGU6IG51bGwsXG5cbiAgICBsaXN0SXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsLFxuICAgIGRsSXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsXG4gIH07XG5cbiAgdmFyIHVwZGF0ZWRBbmNlc3RvckluZm8kMSA9IGZ1bmN0aW9uIChvbGRJbmZvLCB0YWcsIGluc3RhbmNlKSB7XG4gICAgdmFyIGFuY2VzdG9ySW5mbyA9IF9hc3NpZ24oe30sIG9sZEluZm8gfHwgZW1wdHlBbmNlc3RvckluZm8pO1xuICAgIHZhciBpbmZvID0geyB0YWc6IHRhZywgaW5zdGFuY2U6IGluc3RhbmNlIH07XG5cbiAgICBpZiAoaW5TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChidXR0b25TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZWUgcnVsZXMgZm9yICdsaScsICdkZCcsICdkdCcgc3RhcnQgdGFncyBpblxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBpZiAoc3BlY2lhbFRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSAmJiB0YWcgIT09ICdhZGRyZXNzJyAmJiB0YWcgIT09ICdkaXYnICYmIHRhZyAhPT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGFuY2VzdG9ySW5mby5jdXJyZW50ID0gaW5mbztcblxuICAgIGlmICh0YWcgPT09ICdmb3JtJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmZvcm1UYWcgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnYScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdidXR0b24nKSB7XG4gICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdub2JyJykge1xuICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnbGknKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdkZCcgfHwgdGFnID09PSAnZHQnKSB7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgIH1cblxuICAgIHJldHVybiBhbmNlc3RvckluZm87XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cbiAgdmFyIGlzVGFnVmFsaWRXaXRoUGFyZW50ID0gZnVuY3Rpb24gKHRhZywgcGFyZW50VGFnKSB7XG4gICAgLy8gRmlyc3QsIGxldCdzIGNoZWNrIGlmIHdlJ3JlIGluIGFuIHVudXN1YWwgcGFyc2luZyBtb2RlLi4uXG4gICAgc3dpdGNoIChwYXJlbnRUYWcpIHtcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnNlbGVjdFxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnb3B0Z3JvdXAnIHx8IHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgIGNhc2UgJ29wdGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgLy8gU3RyaWN0bHkgc3BlYWtpbmcsIHNlZWluZyBhbiA8b3B0aW9uPiBkb2Vzbid0IG1lYW4gd2UncmUgaW4gYSA8c2VsZWN0PlxuICAgICAgLy8gYnV0XG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnI3RleHQnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGRcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmNhcHRpb25cbiAgICAgIC8vIE5vIHNwZWNpYWwgYmVoYXZpb3Igc2luY2UgdGhlc2UgcnVsZXMgZmFsbCBiYWNrIHRvIFwiaW4gYm9keVwiIG1vZGUgZm9yXG4gICAgICAvLyBhbGwgZXhjZXB0IHNwZWNpYWwgdGFibGUgbm9kZXMgd2hpY2ggY2F1c2UgYmFkIHBhcnNpbmcgYmVoYXZpb3IgYW55d2F5LlxuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50clxuICAgICAgY2FzZSAndHInOlxuICAgICAgICByZXR1cm4gdGFnID09PSAndGgnIHx8IHRhZyA9PT0gJ3RkJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50Ym9keVxuICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAndHInIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmNvbGdyb3VwXG4gICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdjb2wnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRhYmxlXG4gICAgICBjYXNlICd0YWJsZSc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdjYXB0aW9uJyB8fCB0YWcgPT09ICdjb2xncm91cCcgfHwgdGFnID09PSAndGJvZHknIHx8IHRhZyA9PT0gJ3Rmb290JyB8fCB0YWcgPT09ICd0aGVhZCcgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluaGVhZFxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdiYXNlJyB8fCB0YWcgPT09ICdiYXNlZm9udCcgfHwgdGFnID09PSAnYmdzb3VuZCcgfHwgdGFnID09PSAnbGluaycgfHwgdGFnID09PSAnbWV0YScgfHwgdGFnID09PSAndGl0bGUnIHx8IHRhZyA9PT0gJ25vc2NyaXB0JyB8fCB0YWcgPT09ICdub2ZyYW1lcycgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjdGhlLWh0bWwtZWxlbWVudFxuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdoZWFkJyB8fCB0YWcgPT09ICdib2R5JztcbiAgICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdodG1sJztcbiAgICB9XG5cbiAgICAvLyBQcm9iYWJseSBpbiB0aGUgXCJpbiBib2R5XCIgcGFyc2luZyBtb2RlLCBzbyB3ZSBvdXRsYXcgb25seSB0YWcgY29tYm9zXG4gICAgLy8gd2hlcmUgdGhlIHBhcnNpbmcgcnVsZXMgY2F1c2UgaW1wbGljaXQgb3BlbnMgb3IgY2xvc2VzIHRvIGJlIGFkZGVkLlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnaDEnOlxuICAgICAgY2FzZSAnaDInOlxuICAgICAgY2FzZSAnaDMnOlxuICAgICAgY2FzZSAnaDQnOlxuICAgICAgY2FzZSAnaDUnOlxuICAgICAgY2FzZSAnaDYnOlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnICE9PSAnaDEnICYmIHBhcmVudFRhZyAhPT0gJ2gyJyAmJiBwYXJlbnRUYWcgIT09ICdoMycgJiYgcGFyZW50VGFnICE9PSAnaDQnICYmIHBhcmVudFRhZyAhPT0gJ2g1JyAmJiBwYXJlbnRUYWcgIT09ICdoNic7XG5cbiAgICAgIGNhc2UgJ3JwJzpcbiAgICAgIGNhc2UgJ3J0JzpcbiAgICAgICAgcmV0dXJuIGltcGxpZWRFbmRUYWdzLmluZGV4T2YocGFyZW50VGFnKSA9PT0gLTE7XG5cbiAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgY2FzZSAnY2FwdGlvbic6XG4gICAgICBjYXNlICdjb2wnOlxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgIGNhc2UgJ3RkJzpcbiAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgIGNhc2UgJ3RoJzpcbiAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgLy8gVGhlc2UgdGFncyBhcmUgb25seSB2YWxpZCB3aXRoIGEgZmV3IHBhcmVudHMgdGhhdCBoYXZlIHNwZWNpYWwgY2hpbGRcbiAgICAgICAgLy8gcGFyc2luZyBydWxlcyAtLSBpZiB3ZSdyZSBkb3duIGhlcmUsIHRoZW4gbm9uZSBvZiB0aG9zZSBtYXRjaGVkIGFuZFxuICAgICAgICAvLyBzbyB3ZSBhbGxvdyBpdCBvbmx5IGlmIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgcGFyZW50IGlzLCBhcyBhbGwgb3RoZXJcbiAgICAgICAgLy8gY2FzZXMgYXJlIGludmFsaWQuXG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgPT0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyXG4gICAqL1xuICB2YXIgZmluZEludmFsaWRBbmNlc3RvckZvclRhZyA9IGZ1bmN0aW9uICh0YWcsIGFuY2VzdG9ySW5mbykge1xuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlICdhZGRyZXNzJzpcbiAgICAgIGNhc2UgJ2FydGljbGUnOlxuICAgICAgY2FzZSAnYXNpZGUnOlxuICAgICAgY2FzZSAnYmxvY2txdW90ZSc6XG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgY2FzZSAnZGV0YWlscyc6XG4gICAgICBjYXNlICdkaWFsb2cnOlxuICAgICAgY2FzZSAnZGlyJzpcbiAgICAgIGNhc2UgJ2Rpdic6XG4gICAgICBjYXNlICdkbCc6XG4gICAgICBjYXNlICdmaWVsZHNldCc6XG4gICAgICBjYXNlICdmaWdjYXB0aW9uJzpcbiAgICAgIGNhc2UgJ2ZpZ3VyZSc6XG4gICAgICBjYXNlICdmb290ZXInOlxuICAgICAgY2FzZSAnaGVhZGVyJzpcbiAgICAgIGNhc2UgJ2hncm91cCc6XG4gICAgICBjYXNlICdtYWluJzpcbiAgICAgIGNhc2UgJ21lbnUnOlxuICAgICAgY2FzZSAnbmF2JzpcbiAgICAgIGNhc2UgJ29sJzpcbiAgICAgIGNhc2UgJ3AnOlxuICAgICAgY2FzZSAnc2VjdGlvbic6XG4gICAgICBjYXNlICdzdW1tYXJ5JzpcbiAgICAgIGNhc2UgJ3VsJzpcbiAgICAgIGNhc2UgJ3ByZSc6XG4gICAgICBjYXNlICdsaXN0aW5nJzpcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgIGNhc2UgJ2hyJzpcbiAgICAgIGNhc2UgJ3htcCc6XG4gICAgICBjYXNlICdoMSc6XG4gICAgICBjYXNlICdoMic6XG4gICAgICBjYXNlICdoMyc6XG4gICAgICBjYXNlICdoNCc6XG4gICAgICBjYXNlICdoNSc6XG4gICAgICBjYXNlICdoNic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmZvcm1UYWcgfHwgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlO1xuXG4gICAgICBjYXNlICdsaSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZztcblxuICAgICAgY2FzZSAnZGQnOlxuICAgICAgY2FzZSAnZHQnOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAvLyBTcGVjIHNheXMgc29tZXRoaW5nIGFib3V0IHN0b3JpbmcgYSBsaXN0IG9mIG1hcmtlcnMsIGJ1dCBpdCBzb3VuZHNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byB0aGlzIGNoZWNrLlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlO1xuXG4gICAgICBjYXNlICdub2JyJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgZGlkV2FybiA9IHt9O1xuXG4gIHZhbGlkYXRlRE9NTmVzdGluZyA9IGZ1bmN0aW9uIChjaGlsZFRhZywgY2hpbGRUZXh0LCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8uY3VycmVudDtcbiAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcblxuICAgIGlmIChjaGlsZFRleHQgIT0gbnVsbCkge1xuICAgICAgd2FybmluZyhjaGlsZFRhZyA9PSBudWxsLCAndmFsaWRhdGVET01OZXN0aW5nOiB3aGVuIGNoaWxkVGV4dCBpcyBwYXNzZWQsIGNoaWxkVGFnIHNob3VsZCBiZSBudWxsJyk7XG4gICAgICBjaGlsZFRhZyA9ICcjdGV4dCc7XG4gICAgfVxuXG4gICAgdmFyIGludmFsaWRQYXJlbnQgPSBpc1RhZ1ZhbGlkV2l0aFBhcmVudChjaGlsZFRhZywgcGFyZW50VGFnKSA/IG51bGwgOiBwYXJlbnRJbmZvO1xuICAgIHZhciBpbnZhbGlkQW5jZXN0b3IgPSBpbnZhbGlkUGFyZW50ID8gbnVsbCA6IGZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcoY2hpbGRUYWcsIGFuY2VzdG9ySW5mbyk7XG4gICAgdmFyIGludmFsaWRQYXJlbnRPckFuY2VzdG9yID0gaW52YWxpZFBhcmVudCB8fCBpbnZhbGlkQW5jZXN0b3I7XG4gICAgaWYgKCFpbnZhbGlkUGFyZW50T3JBbmNlc3Rvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhbmNlc3RvclRhZyA9IGludmFsaWRQYXJlbnRPckFuY2VzdG9yLnRhZztcbiAgICB2YXIgYWRkZW5kdW0gPSBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDYoKTtcblxuICAgIHZhciB3YXJuS2V5ID0gISFpbnZhbGlkUGFyZW50ICsgJ3wnICsgY2hpbGRUYWcgKyAnfCcgKyBhbmNlc3RvclRhZyArICd8JyArIGFkZGVuZHVtO1xuICAgIGlmIChkaWRXYXJuW3dhcm5LZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpZFdhcm5bd2FybktleV0gPSB0cnVlO1xuXG4gICAgdmFyIHRhZ0Rpc3BsYXlOYW1lID0gY2hpbGRUYWc7XG4gICAgdmFyIHdoaXRlc3BhY2VJbmZvID0gJyc7XG4gICAgaWYgKGNoaWxkVGFnID09PSAnI3RleHQnKSB7XG4gICAgICBpZiAoL1xcUy8udGVzdChjaGlsZFRleHQpKSB7XG4gICAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJ1RleHQgbm9kZXMnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFnRGlzcGxheU5hbWUgPSAnV2hpdGVzcGFjZSB0ZXh0IG5vZGVzJztcbiAgICAgICAgd2hpdGVzcGFjZUluZm8gPSBcIiBNYWtlIHN1cmUgeW91IGRvbid0IGhhdmUgYW55IGV4dHJhIHdoaXRlc3BhY2UgYmV0d2VlbiB0YWdzIG9uIFwiICsgJ2VhY2ggbGluZSBvZiB5b3VyIHNvdXJjZSBjb2RlLic7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJzwnICsgY2hpbGRUYWcgKyAnPic7XG4gICAgfVxuXG4gICAgaWYgKGludmFsaWRQYXJlbnQpIHtcbiAgICAgIHZhciBpbmZvID0gJyc7XG4gICAgICBpZiAoYW5jZXN0b3JUYWcgPT09ICd0YWJsZScgJiYgY2hpbGRUYWcgPT09ICd0cicpIHtcbiAgICAgICAgaW5mbyArPSAnIEFkZCBhIDx0Ym9keT4gdG8geW91ciBjb2RlIHRvIG1hdGNoIHRoZSBET00gdHJlZSBnZW5lcmF0ZWQgYnkgJyArICd0aGUgYnJvd3Nlci4nO1xuICAgICAgfVxuICAgICAgd2FybmluZyhmYWxzZSwgJ3ZhbGlkYXRlRE9NTmVzdGluZyguLi4pOiAlcyBjYW5ub3QgYXBwZWFyIGFzIGEgY2hpbGQgb2YgPCVzPi4lcyVzJXMnLCB0YWdEaXNwbGF5TmFtZSwgYW5jZXN0b3JUYWcsIHdoaXRlc3BhY2VJbmZvLCBpbmZvLCBhZGRlbmR1bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGRlc2NlbmRhbnQgb2YgJyArICc8JXM+LiVzJywgdGFnRGlzcGxheU5hbWUsIGFuY2VzdG9yVGFnLCBhZGRlbmR1bSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRPRE86IHR1cm4gdGhpcyBpbnRvIGEgbmFtZWQgZXhwb3J0XG4gIHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvID0gdXBkYXRlZEFuY2VzdG9ySW5mbyQxO1xufVxuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nJDEgPSB2YWxpZGF0ZURPTU5lc3Rpbmc7XG5cbi8vIFRPRE86IFRoaXMgdHlwZSBpcyBzaGFyZWQgYmV0d2VlbiB0aGUgcmVjb25jaWxlciBhbmQgUmVhY3RET00sIGJ1dCB3aWxsXG4vLyBldmVudHVhbGx5IGJlIGxpZnRlZCBvdXQgdG8gdGhlIHJlbmRlcmVyLlxuXG4vLyBUT0RPOiBkaXJlY3QgaW1wb3J0cyBsaWtlIHNvbWUtcGFja2FnZS9zcmMvKiBhcmUgYmFkLiBGaXggbWUuXG52YXIgY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQkMTtcbnZhciBjcmVhdGVUZXh0Tm9kZSA9IGNyZWF0ZVRleHROb2RlJDE7XG52YXIgc2V0SW5pdGlhbFByb3BlcnRpZXMgPSBzZXRJbml0aWFsUHJvcGVydGllcyQxO1xudmFyIGRpZmZQcm9wZXJ0aWVzID0gZGlmZlByb3BlcnRpZXMkMTtcbnZhciB1cGRhdGVQcm9wZXJ0aWVzID0gdXBkYXRlUHJvcGVydGllcyQxO1xudmFyIGRpZmZIeWRyYXRlZFByb3BlcnRpZXMgPSBkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzJDE7XG52YXIgZGlmZkh5ZHJhdGVkVGV4dCA9IGRpZmZIeWRyYXRlZFRleHQkMTtcbnZhciB3YXJuRm9yVW5tYXRjaGVkVGV4dCA9IHdhcm5Gb3JVbm1hdGNoZWRUZXh0JDE7XG52YXIgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCA9IHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQkMTtcbnZhciB3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0ID0gd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCQxO1xudmFyIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCA9IHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCQxO1xudmFyIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCA9IHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCQxO1xudmFyIHVwZGF0ZWRBbmNlc3RvckluZm8gPSB2YWxpZGF0ZURPTU5lc3RpbmckMS51cGRhdGVkQW5jZXN0b3JJbmZvO1xudmFyIHByZWNhY2hlRmliZXJOb2RlID0gcHJlY2FjaGVGaWJlck5vZGUkMTtcbnZhciB1cGRhdGVGaWJlclByb3BzID0gdXBkYXRlRmliZXJQcm9wcyQxO1xuXG5cbnZhciBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyA9IHZvaWQgMDtcbnZhciB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzID0gdm9pZCAwO1xudmFyIHdhcm5PbkludmFsaWRDYWxsYmFjayA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRVbnN0YWJsZUNyZWF0ZVBvcnRhbCA9IGZhbHNlO1xuXG57XG4gIFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HID0gJ3N1cHByZXNzSHlkcmF0aW9uV2FybmluZyc7XG4gIGlmICh0eXBlb2YgTWFwICE9PSAnZnVuY3Rpb24nIHx8IE1hcC5wcm90b3R5cGUgPT0gbnVsbCB8fCB0eXBlb2YgTWFwLnByb3RvdHlwZS5mb3JFYWNoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBTZXQgIT09ICdmdW5jdGlvbicgfHwgU2V0LnByb3RvdHlwZSA9PSBudWxsIHx8IHR5cGVvZiBTZXQucHJvdG90eXBlLmNsZWFyICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBTZXQucHJvdG90eXBlLmZvckVhY2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCAnUmVhY3QgZGVwZW5kcyBvbiBNYXAgYW5kIFNldCBidWlsdC1pbiB0eXBlcy4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSAnICsgJ3BvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxscycpO1xuICB9XG5cbiAgdG9wTGV2ZWxVcGRhdGVXYXJuaW5ncyA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICBpZiAoY29udGFpbmVyLl9yZWFjdFJvb3RDb250YWluZXIgJiYgY29udGFpbmVyLm5vZGVUeXBlICE9PSBDT01NRU5UX05PREUpIHtcbiAgICAgIHZhciBob3N0SW5zdGFuY2UgPSBET01SZW5kZXJlci5maW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyhjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lci5faW50ZXJuYWxSb290LmN1cnJlbnQpO1xuICAgICAgaWYgKGhvc3RJbnN0YW5jZSkge1xuICAgICAgICB3YXJuaW5nKGhvc3RJbnN0YW5jZS5wYXJlbnROb2RlID09PSBjb250YWluZXIsICdyZW5kZXIoLi4uKTogSXQgbG9va3MgbGlrZSB0aGUgUmVhY3QtcmVuZGVyZWQgY29udGVudCBvZiB0aGlzICcgKyAnY29udGFpbmVyIHdhcyByZW1vdmVkIHdpdGhvdXQgdXNpbmcgUmVhY3QuIFRoaXMgaXMgbm90ICcgKyAnc3VwcG9ydGVkIGFuZCB3aWxsIGNhdXNlIGVycm9ycy4gSW5zdGVhZCwgY2FsbCAnICsgJ1JlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUgdG8gZW1wdHkgYSBjb250YWluZXIuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGlzUm9vdFJlbmRlcmVkQnlTb21lUmVhY3QgPSAhIWNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICAgIHZhciByb290RWwgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgaGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSAhIShyb290RWwgJiYgZ2V0SW5zdGFuY2VGcm9tTm9kZSQxKHJvb3RFbCkpO1xuXG4gICAgd2FybmluZyghaGFzTm9uUm9vdFJlYWN0Q2hpbGQgfHwgaXNSb290UmVuZGVyZWRCeVNvbWVSZWFjdCwgJ3JlbmRlciguLi4pOiBSZXBsYWNpbmcgUmVhY3QtcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIG5ldyByb290ICcgKyAnY29tcG9uZW50LiBJZiB5b3UgaW50ZW5kZWQgdG8gdXBkYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsICcgKyAneW91IHNob3VsZCBpbnN0ZWFkIGhhdmUgdGhlIGV4aXN0aW5nIGNoaWxkcmVuIHVwZGF0ZSB0aGVpciBzdGF0ZSAnICsgJ2FuZCByZW5kZXIgdGhlIG5ldyBjb21wb25lbnRzIGluc3RlYWQgb2YgY2FsbGluZyBSZWFjdERPTS5yZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFIHx8ICFjb250YWluZXIudGFnTmFtZSB8fCBjb250YWluZXIudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnQk9EWScsICdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpO1xuICB9O1xuXG4gIHdhcm5PbkludmFsaWRDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIHdhcm5pbmcoY2FsbGJhY2sgPT09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLCAnJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxlck5hbWUsIGNhbGxiYWNrKTtcbiAgfTtcbn1cblxuaW5qZWN0aW9uJDIuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChSZWFjdERPTUZpYmVyQ29tcG9uZW50KTtcblxudmFyIGV2ZW50c0VuYWJsZWQgPSBudWxsO1xudmFyIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcblxuZnVuY3Rpb24gUmVhY3RCYXRjaChyb290KSB7XG4gIHZhciBleHBpcmF0aW9uVGltZSA9IERPTVJlbmRlcmVyLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24oKTtcbiAgdGhpcy5fZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICB0aGlzLl9kaWRDb21wbGV0ZSA9IGZhbHNlO1xuICB0aGlzLl9oYXNDaGlsZHJlbiA9IGZhbHNlO1xuICB0aGlzLl9jaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuX2RlZmVyID0gdHJ1ZTtcbn1cblJlYWN0QmF0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAhdGhpcy5fZGVmZXIgPyBpbnZhcmlhbnQoZmFsc2UsICdiYXRjaC5yZW5kZXI6IENhbm5vdCByZW5kZXIgYSBiYXRjaCB0aGF0IGFscmVhZHkgY29tbWl0dGVkLicpIDogdm9pZCAwO1xuICB0aGlzLl9oYXNDaGlsZHJlbiA9IHRydWU7XG4gIHRoaXMuX2NoaWxkcmVuID0gY2hpbGRyZW47XG4gIHZhciBpbnRlcm5hbFJvb3QgPSB0aGlzLl9yb290Ll9pbnRlcm5hbFJvb3Q7XG4gIHZhciBleHBpcmF0aW9uVGltZSA9IHRoaXMuX2V4cGlyYXRpb25UaW1lO1xuICB2YXIgd29yayA9IG5ldyBSZWFjdFdvcmsoKTtcbiAgRE9NUmVuZGVyZXIudXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShjaGlsZHJlbiwgaW50ZXJuYWxSb290LCBudWxsLCBleHBpcmF0aW9uVGltZSwgd29yay5fb25Db21taXQpO1xuICByZXR1cm4gd29yaztcbn07XG5SZWFjdEJhdGNoLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgaWYgKHRoaXMuX2RpZENvbXBsZXRlKSB7XG4gICAgb25Db21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICBpZiAoY2FsbGJhY2tzID09PSBudWxsKSB7XG4gICAgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzID0gW107XG4gIH1cbiAgY2FsbGJhY2tzLnB1c2gob25Db21wbGV0ZSk7XG59O1xuUmVhY3RCYXRjaC5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaW50ZXJuYWxSb290ID0gdGhpcy5fcm9vdC5faW50ZXJuYWxSb290O1xuICB2YXIgZmlyc3RCYXRjaCA9IGludGVybmFsUm9vdC5maXJzdEJhdGNoO1xuICAhKHRoaXMuX2RlZmVyICYmIGZpcnN0QmF0Y2ggIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnYmF0Y2guY29tbWl0OiBDYW5ub3QgY29tbWl0IGEgYmF0Y2ggbXVsdGlwbGUgdGltZXMuJykgOiB2b2lkIDA7XG5cbiAgaWYgKCF0aGlzLl9oYXNDaGlsZHJlbikge1xuICAgIC8vIFRoaXMgYmF0Y2ggaXMgZW1wdHkuIFJldHVybi5cbiAgICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9kZWZlciA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBleHBpcmF0aW9uVGltZSA9IHRoaXMuX2V4cGlyYXRpb25UaW1lO1xuXG4gIC8vIEVuc3VyZSB0aGlzIGlzIHRoZSBmaXJzdCBiYXRjaCBpbiB0aGUgbGlzdC5cbiAgaWYgKGZpcnN0QmF0Y2ggIT09IHRoaXMpIHtcbiAgICAvLyBUaGlzIGJhdGNoIGlzIG5vdCB0aGUgZWFybGllc3QgYmF0Y2guIFdlIG5lZWQgdG8gbW92ZSBpdCB0byB0aGUgZnJvbnQuXG4gICAgLy8gVXBkYXRlIGl0cyBleHBpcmF0aW9uIHRpbWUgdG8gYmUgdGhlIGV4cGlyYXRpb24gdGltZSBvZiB0aGUgZWFybGllc3RcbiAgICAvLyBiYXRjaCwgc28gdGhhdCB3ZSBjYW4gZmx1c2ggaXQgd2l0aG91dCBmbHVzaGluZyB0aGUgb3RoZXIgYmF0Y2hlcy5cbiAgICBpZiAodGhpcy5faGFzQ2hpbGRyZW4pIHtcbiAgICAgIGV4cGlyYXRpb25UaW1lID0gdGhpcy5fZXhwaXJhdGlvblRpbWUgPSBmaXJzdEJhdGNoLl9leHBpcmF0aW9uVGltZTtcbiAgICAgIC8vIFJlbmRlcmluZyB0aGlzIGJhdGNoIGFnYWluIGVuc3VyZXMgaXRzIGNoaWxkcmVuIHdpbGwgYmUgdGhlIGZpbmFsIHN0YXRlXG4gICAgICAvLyB3aGVuIHdlIGZsdXNoICh1cGRhdGVzIGFyZSBwcm9jZXNzZWQgaW4gaW5zZXJ0aW9uIG9yZGVyOiBsYXN0XG4gICAgICAvLyB1cGRhdGUgd2lucykuXG4gICAgICAvLyBUT0RPOiBUaGlzIGZvcmNlcyBhIHJlc3RhcnQuIFNob3VsZCB3ZSBwcmludCBhIHdhcm5pbmc/XG4gICAgICB0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHRoZSBiYXRjaCBmcm9tIHRoZSBsaXN0LlxuICAgIHZhciBwcmV2aW91cyA9IG51bGw7XG4gICAgdmFyIGJhdGNoID0gZmlyc3RCYXRjaDtcbiAgICB3aGlsZSAoYmF0Y2ggIT09IHRoaXMpIHtcbiAgICAgIHByZXZpb3VzID0gYmF0Y2g7XG4gICAgICBiYXRjaCA9IGJhdGNoLl9uZXh0O1xuICAgIH1cbiAgICAhKHByZXZpb3VzICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ2JhdGNoLmNvbW1pdDogQ2Fubm90IGNvbW1pdCBhIGJhdGNoIG11bHRpcGxlIHRpbWVzLicpIDogdm9pZCAwO1xuICAgIHByZXZpb3VzLl9uZXh0ID0gYmF0Y2guX25leHQ7XG5cbiAgICAvLyBBZGQgaXQgdG8gdGhlIGZyb250LlxuICAgIHRoaXMuX25leHQgPSBmaXJzdEJhdGNoO1xuICAgIGZpcnN0QmF0Y2ggPSBpbnRlcm5hbFJvb3QuZmlyc3RCYXRjaCA9IHRoaXM7XG4gIH1cblxuICAvLyBTeW5jaHJvbm91c2x5IGZsdXNoIGFsbCB0aGUgd29yayB1cCB0byB0aGlzIGJhdGNoJ3MgZXhwaXJhdGlvbiB0aW1lLlxuICB0aGlzLl9kZWZlciA9IGZhbHNlO1xuICBET01SZW5kZXJlci5mbHVzaFJvb3QoaW50ZXJuYWxSb290LCBleHBpcmF0aW9uVGltZSk7XG5cbiAgLy8gUG9wIHRoZSBiYXRjaCBmcm9tIHRoZSBsaXN0LlxuICB2YXIgbmV4dCA9IHRoaXMuX25leHQ7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICBmaXJzdEJhdGNoID0gaW50ZXJuYWxSb290LmZpcnN0QmF0Y2ggPSBuZXh0O1xuXG4gIC8vIEFwcGVuZCB0aGUgbmV4dCBlYXJsaWVzdCBiYXRjaCdzIGNoaWxkcmVuIHRvIHRoZSB1cGRhdGUgcXVldWUuXG4gIGlmIChmaXJzdEJhdGNoICE9PSBudWxsICYmIGZpcnN0QmF0Y2guX2hhc0NoaWxkcmVuKSB7XG4gICAgZmlyc3RCYXRjaC5yZW5kZXIoZmlyc3RCYXRjaC5fY2hpbGRyZW4pO1xuICB9XG59O1xuUmVhY3RCYXRjaC5wcm90b3R5cGUuX29uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kaWRDb21wbGV0ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9kaWRDb21wbGV0ZSA9IHRydWU7XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gIGlmIChjYWxsYmFja3MgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gVE9ETzogRXJyb3IgaGFuZGxpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9jYWxsYmFjayA9IGNhbGxiYWNrc1tpXTtcbiAgICBfY2FsbGJhY2soKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVhY3RXb3JrKCkge1xuICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICB0aGlzLl9kaWRDb21taXQgPSBmYWxzZTtcbiAgLy8gVE9ETzogQXZvaWQgbmVlZCB0byBiaW5kIGJ5IHJlcGxhY2luZyBjYWxsYmFja3MgaW4gdGhlIHVwZGF0ZSBxdWV1ZSB3aXRoXG4gIC8vIGxpc3Qgb2YgV29yayBvYmplY3RzLlxuICB0aGlzLl9vbkNvbW1pdCA9IHRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyk7XG59XG5SZWFjdFdvcmsucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAob25Db21taXQpIHtcbiAgaWYgKHRoaXMuX2RpZENvbW1pdCkge1xuICAgIG9uQ29tbWl0KCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gIGlmIChjYWxsYmFja3MgPT09IG51bGwpIHtcbiAgICBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgPSBbXTtcbiAgfVxuICBjYWxsYmFja3MucHVzaChvbkNvbW1pdCk7XG59O1xuUmVhY3RXb3JrLnByb3RvdHlwZS5fb25Db21taXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kaWRDb21taXQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fZGlkQ29tbWl0ID0gdHJ1ZTtcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgaWYgKGNhbGxiYWNrcyA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBUT0RPOiBFcnJvciBoYW5kbGluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2NhbGxiYWNrMiA9IGNhbGxiYWNrc1tpXTtcbiAgICAhKHR5cGVvZiBfY2FsbGJhY2syID09PSAnZnVuY3Rpb24nKSA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgYXJndW1lbnQgcGFzc2VkIGFzIGNhbGxiYWNrLiBFeHBlY3RlZCBhIGZ1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIF9jYWxsYmFjazIpIDogdm9pZCAwO1xuICAgIF9jYWxsYmFjazIoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVhY3RSb290KGNvbnRhaW5lciwgaXNBc3luYywgaHlkcmF0ZSkge1xuICB2YXIgcm9vdCA9IERPTVJlbmRlcmVyLmNyZWF0ZUNvbnRhaW5lcihjb250YWluZXIsIGlzQXN5bmMsIGh5ZHJhdGUpO1xuICB0aGlzLl9pbnRlcm5hbFJvb3QgPSByb290O1xufVxuUmVhY3RSb290LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICB2YXIgd29yayA9IG5ldyBSZWFjdFdvcmsoKTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuICB7XG4gICAgd2Fybk9uSW52YWxpZENhbGxiYWNrKGNhbGxiYWNrLCAncmVuZGVyJyk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgd29yay50aGVuKGNhbGxiYWNrKTtcbiAgfVxuICBET01SZW5kZXJlci51cGRhdGVDb250YWluZXIoY2hpbGRyZW4sIHJvb3QsIG51bGwsIHdvcmsuX29uQ29tbWl0KTtcbiAgcmV0dXJuIHdvcms7XG59O1xuUmVhY3RSb290LnByb3RvdHlwZS51bm1vdW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICB2YXIgd29yayA9IG5ldyBSZWFjdFdvcmsoKTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuICB7XG4gICAgd2Fybk9uSW52YWxpZENhbGxiYWNrKGNhbGxiYWNrLCAncmVuZGVyJyk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgd29yay50aGVuKGNhbGxiYWNrKTtcbiAgfVxuICBET01SZW5kZXJlci51cGRhdGVDb250YWluZXIobnVsbCwgcm9vdCwgbnVsbCwgd29yay5fb25Db21taXQpO1xuICByZXR1cm4gd29yaztcbn07XG5SZWFjdFJvb3QucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IGZ1bmN0aW9uIChwYXJlbnRDb21wb25lbnQsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgdmFyIHdvcmsgPSBuZXcgUmVhY3RXb3JrKCk7XG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjaztcbiAge1xuICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayhjYWxsYmFjaywgJ3JlbmRlcicpO1xuICB9XG4gIGlmIChjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgIHdvcmsudGhlbihjYWxsYmFjayk7XG4gIH1cbiAgRE9NUmVuZGVyZXIudXBkYXRlQ29udGFpbmVyKGNoaWxkcmVuLCByb290LCBwYXJlbnRDb21wb25lbnQsIHdvcmsuX29uQ29tbWl0KTtcbiAgcmV0dXJuIHdvcms7XG59O1xuUmVhY3RSb290LnByb3RvdHlwZS5jcmVhdGVCYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJhdGNoID0gbmV3IFJlYWN0QmF0Y2godGhpcyk7XG4gIHZhciBleHBpcmF0aW9uVGltZSA9IGJhdGNoLl9leHBpcmF0aW9uVGltZTtcblxuICB2YXIgaW50ZXJuYWxSb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICB2YXIgZmlyc3RCYXRjaCA9IGludGVybmFsUm9vdC5maXJzdEJhdGNoO1xuICBpZiAoZmlyc3RCYXRjaCA9PT0gbnVsbCkge1xuICAgIGludGVybmFsUm9vdC5maXJzdEJhdGNoID0gYmF0Y2g7XG4gICAgYmF0Y2guX25leHQgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIC8vIEluc2VydCBzb3J0ZWQgYnkgZXhwaXJhdGlvbiB0aW1lIHRoZW4gaW5zZXJ0aW9uIG9yZGVyXG4gICAgdmFyIGluc2VydEFmdGVyID0gbnVsbDtcbiAgICB2YXIgaW5zZXJ0QmVmb3JlID0gZmlyc3RCYXRjaDtcbiAgICB3aGlsZSAoaW5zZXJ0QmVmb3JlICE9PSBudWxsICYmIGluc2VydEJlZm9yZS5fZXhwaXJhdGlvblRpbWUgPD0gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIGluc2VydEFmdGVyID0gaW5zZXJ0QmVmb3JlO1xuICAgICAgaW5zZXJ0QmVmb3JlID0gaW5zZXJ0QmVmb3JlLl9uZXh0O1xuICAgIH1cbiAgICBiYXRjaC5fbmV4dCA9IGluc2VydEJlZm9yZTtcbiAgICBpZiAoaW5zZXJ0QWZ0ZXIgIT09IG51bGwpIHtcbiAgICAgIGluc2VydEFmdGVyLl9uZXh0ID0gYmF0Y2g7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJhdGNoO1xufTtcblxuLyoqXG4gKiBUcnVlIGlmIHRoZSBzdXBwbGllZCBET00gbm9kZSBpcyBhIHZhbGlkIG5vZGUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gaXMgYSB2YWxpZCBET00gbm9kZS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQ29udGFpbmVyKG5vZGUpIHtcbiAgcmV0dXJuICEhKG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFICYmIG5vZGUubm9kZVZhbHVlID09PSAnIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlICcpKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSkge1xuICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRIeWRyYXRlRHVlVG9MZWdhY3lIZXVyaXN0aWMoY29udGFpbmVyKSB7XG4gIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gISEocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiByb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoUk9PVF9BVFRSSUJVVEVfTkFNRSkpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRBdXRvRm9jdXNIb3N0Q29tcG9uZW50KHR5cGUsIHByb3BzKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgcmV0dXJuICEhcHJvcHMuYXV0b0ZvY3VzO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIERPTVJlbmRlcmVyID0gcmVhY3RSZWNvbmNpbGVyKHtcbiAgZ2V0Um9vdEhvc3RDb250ZXh0OiBmdW5jdGlvbiAocm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gICAgdmFyIHR5cGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVzcGFjZSA9IHZvaWQgMDtcbiAgICB2YXIgbm9kZVR5cGUgPSByb290Q29udGFpbmVySW5zdGFuY2Uubm9kZVR5cGU7XG4gICAgc3dpdGNoIChub2RlVHlwZSkge1xuICAgICAgY2FzZSBET0NVTUVOVF9OT0RFOlxuICAgICAgY2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAgICB7XG4gICAgICAgICAgdHlwZSA9IG5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFID8gJyNkb2N1bWVudCcgOiAnI2ZyYWdtZW50JztcbiAgICAgICAgICB2YXIgcm9vdCA9IHJvb3RDb250YWluZXJJbnN0YW5jZS5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgbmFtZXNwYWNlID0gcm9vdCA/IHJvb3QubmFtZXNwYWNlVVJJIDogZ2V0Q2hpbGROYW1lc3BhY2UobnVsbCwgJycpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lciA9IG5vZGVUeXBlID09PSBDT01NRU5UX05PREUgPyByb290Q29udGFpbmVySW5zdGFuY2UucGFyZW50Tm9kZSA6IHJvb3RDb250YWluZXJJbnN0YW5jZTtcbiAgICAgICAgICB2YXIgb3duTmFtZXNwYWNlID0gY29udGFpbmVyLm5hbWVzcGFjZVVSSSB8fCBudWxsO1xuICAgICAgICAgIHR5cGUgPSBjb250YWluZXIudGFnTmFtZTtcbiAgICAgICAgICBuYW1lc3BhY2UgPSBnZXRDaGlsZE5hbWVzcGFjZShvd25OYW1lc3BhY2UsIHR5cGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHtcbiAgICAgIHZhciB2YWxpZGF0ZWRUYWcgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgX2FuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm8obnVsbCwgdmFsaWRhdGVkVGFnLCBudWxsKTtcbiAgICAgIHJldHVybiB7IG5hbWVzcGFjZTogbmFtZXNwYWNlLCBhbmNlc3RvckluZm86IF9hbmNlc3RvckluZm8gfTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzcGFjZTtcbiAgfSxcbiAgZ2V0Q2hpbGRIb3N0Q29udGV4dDogZnVuY3Rpb24gKHBhcmVudEhvc3RDb250ZXh0LCB0eXBlKSB7XG4gICAge1xuICAgICAgdmFyIHBhcmVudEhvc3RDb250ZXh0RGV2ID0gcGFyZW50SG9zdENvbnRleHQ7XG4gICAgICB2YXIgX25hbWVzcGFjZSA9IGdldENoaWxkTmFtZXNwYWNlKHBhcmVudEhvc3RDb250ZXh0RGV2Lm5hbWVzcGFjZSwgdHlwZSk7XG4gICAgICB2YXIgX2FuY2VzdG9ySW5mbzIgPSB1cGRhdGVkQW5jZXN0b3JJbmZvKHBhcmVudEhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbywgdHlwZSwgbnVsbCk7XG4gICAgICByZXR1cm4geyBuYW1lc3BhY2U6IF9uYW1lc3BhY2UsIGFuY2VzdG9ySW5mbzogX2FuY2VzdG9ySW5mbzIgfTtcbiAgICB9XG4gICAgdmFyIHBhcmVudE5hbWVzcGFjZSA9IHBhcmVudEhvc3RDb250ZXh0O1xuICAgIHJldHVybiBnZXRDaGlsZE5hbWVzcGFjZShwYXJlbnROYW1lc3BhY2UsIHR5cGUpO1xuICB9LFxuICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9LFxuICBwcmVwYXJlRm9yQ29tbWl0OiBmdW5jdGlvbiAoKSB7XG4gICAgZXZlbnRzRW5hYmxlZCA9IGlzRW5hYmxlZCgpO1xuICAgIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb24oKTtcbiAgICBzZXRFbmFibGVkKGZhbHNlKTtcbiAgfSxcbiAgcmVzZXRBZnRlckNvbW1pdDogZnVuY3Rpb24gKCkge1xuICAgIHJlc3RvcmVTZWxlY3Rpb24oc2VsZWN0aW9uSW5mb3JtYXRpb24pO1xuICAgIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbiAgICBzZXRFbmFibGVkKGV2ZW50c0VuYWJsZWQpO1xuICAgIGV2ZW50c0VuYWJsZWQgPSBudWxsO1xuICB9LFxuICBjcmVhdGVJbnN0YW5jZTogZnVuY3Rpb24gKHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gICAgdmFyIHBhcmVudE5hbWVzcGFjZSA9IHZvaWQgMDtcbiAgICB7XG4gICAgICAvLyBUT0RPOiB0YWtlIG5hbWVzcGFjZSBpbnRvIGFjY291bnQgd2hlbiB2YWxpZGF0aW5nLlxuICAgICAgdmFyIGhvc3RDb250ZXh0RGV2ID0gaG9zdENvbnRleHQ7XG4gICAgICB2YWxpZGF0ZURPTU5lc3RpbmckMSh0eXBlLCBudWxsLCBob3N0Q29udGV4dERldi5hbmNlc3RvckluZm8pO1xuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5jaGlsZHJlbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBwcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgdmFyIG93bkFuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm8oaG9zdENvbnRleHREZXYuYW5jZXN0b3JJbmZvLCB0eXBlLCBudWxsKTtcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nJDEobnVsbCwgc3RyaW5nLCBvd25BbmNlc3RvckluZm8pO1xuICAgICAgfVxuICAgICAgcGFyZW50TmFtZXNwYWNlID0gaG9zdENvbnRleHREZXYubmFtZXNwYWNlO1xuICAgIH1cbiAgICB2YXIgZG9tRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQodHlwZSwgcHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgcGFyZW50TmFtZXNwYWNlKTtcbiAgICBwcmVjYWNoZUZpYmVyTm9kZShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCBkb21FbGVtZW50KTtcbiAgICB1cGRhdGVGaWJlclByb3BzKGRvbUVsZW1lbnQsIHByb3BzKTtcbiAgICByZXR1cm4gZG9tRWxlbWVudDtcbiAgfSxcbiAgYXBwZW5kSW5pdGlhbENoaWxkOiBmdW5jdGlvbiAocGFyZW50SW5zdGFuY2UsIGNoaWxkKSB7XG4gICAgcGFyZW50SW5zdGFuY2UuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICB9LFxuICBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjogZnVuY3Rpb24gKGRvbUVsZW1lbnQsIHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAgICBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgICByZXR1cm4gc2hvdWxkQXV0b0ZvY3VzSG9zdENvbXBvbmVudCh0eXBlLCBwcm9wcyk7XG4gIH0sXG4gIHByZXBhcmVVcGRhdGU6IGZ1bmN0aW9uIChkb21FbGVtZW50LCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgaG9zdENvbnRleHQpIHtcbiAgICB7XG4gICAgICB2YXIgaG9zdENvbnRleHREZXYgPSBob3N0Q29udGV4dDtcbiAgICAgIGlmICh0eXBlb2YgbmV3UHJvcHMuY2hpbGRyZW4gIT09IHR5cGVvZiBvbGRQcm9wcy5jaGlsZHJlbiAmJiAodHlwZW9mIG5ld1Byb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3UHJvcHMuY2hpbGRyZW4gPT09ICdudW1iZXInKSkge1xuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBuZXdQcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgdmFyIG93bkFuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm8oaG9zdENvbnRleHREZXYuYW5jZXN0b3JJbmZvLCB0eXBlLCBudWxsKTtcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nJDEobnVsbCwgc3RyaW5nLCBvd25BbmNlc3RvckluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlmZlByb3BlcnRpZXMoZG9tRWxlbWVudCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpO1xuICB9LFxuICBzaG91bGRTZXRUZXh0Q29udGVudDogZnVuY3Rpb24gKHR5cGUsIHByb3BzKSB7XG4gICAgcmV0dXJuIHR5cGUgPT09ICd0ZXh0YXJlYScgfHwgdHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gPT09ICdudW1iZXInIHx8IHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PT0gJ29iamVjdCcgJiYgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT09IG51bGwgJiYgdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbCA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6IGZ1bmN0aW9uICh0eXBlLCBwcm9wcykge1xuICAgIHJldHVybiAhIXByb3BzLmhpZGRlbjtcbiAgfSxcbiAgY3JlYXRlVGV4dEluc3RhbmNlOiBmdW5jdGlvbiAodGV4dCwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICAgIHtcbiAgICAgIHZhciBob3N0Q29udGV4dERldiA9IGhvc3RDb250ZXh0O1xuICAgICAgdmFsaWRhdGVET01OZXN0aW5nJDEobnVsbCwgdGV4dCwgaG9zdENvbnRleHREZXYuYW5jZXN0b3JJbmZvKTtcbiAgICB9XG4gICAgdmFyIHRleHROb2RlID0gY3JlYXRlVGV4dE5vZGUodGV4dCwgcm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgICBwcmVjYWNoZUZpYmVyTm9kZShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCB0ZXh0Tm9kZSk7XG4gICAgcmV0dXJuIHRleHROb2RlO1xuICB9LFxuXG5cbiAgbm93OiBub3csXG5cbiAgbXV0YXRpb246IHtcbiAgICBjb21taXRNb3VudDogZnVuY3Rpb24gKGRvbUVsZW1lbnQsIHR5cGUsIG5ld1Byb3BzLCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gICAgICAvLyBEZXNwaXRlIHRoZSBuYW1pbmcgdGhhdCBtaWdodCBpbXBseSBvdGhlcndpc2UsIHRoaXMgbWV0aG9kIG9ubHlcbiAgICAgIC8vIGZpcmVzIGlmIHRoZXJlIGlzIGFuIGBVcGRhdGVgIGVmZmVjdCBzY2hlZHVsZWQgZHVyaW5nIG1vdW50aW5nLlxuICAgICAgLy8gVGhpcyBoYXBwZW5zIGlmIGBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbmAgcmV0dXJucyBgdHJ1ZWAgKHdoaWNoIGl0XG4gICAgICAvLyBkb2VzIHRvIGltcGxlbWVudCB0aGUgYGF1dG9Gb2N1c2AgYXR0cmlidXRlIG9uIHRoZSBjbGllbnQpLiBCdXRcbiAgICAgIC8vIHRoZXJlIGFyZSBhbHNvIG90aGVyIGNhc2VzIHdoZW4gdGhpcyBtaWdodCBoYXBwZW4gKHN1Y2ggYXMgcGF0Y2hpbmdcbiAgICAgIC8vIHVwIHRleHQgY29udGVudCBkdXJpbmcgaHlkcmF0aW9uIG1pc21hdGNoKS4gU28gd2UnbGwgY2hlY2sgdGhpcyBhZ2Fpbi5cbiAgICAgIGlmIChzaG91bGRBdXRvRm9jdXNIb3N0Q29tcG9uZW50KHR5cGUsIG5ld1Byb3BzKSkge1xuICAgICAgICBkb21FbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21taXRVcGRhdGU6IGZ1bmN0aW9uIChkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMsIGludGVybmFsSW5zdGFuY2VIYW5kbGUpIHtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgcHJvcHMgaGFuZGxlIHNvIHRoYXQgd2Uga25vdyB3aGljaCBwcm9wcyBhcmUgdGhlIG9uZXMgd2l0aFxuICAgICAgLy8gd2l0aCBjdXJyZW50IGV2ZW50IGhhbmRsZXJzLlxuICAgICAgdXBkYXRlRmliZXJQcm9wcyhkb21FbGVtZW50LCBuZXdQcm9wcyk7XG4gICAgICAvLyBBcHBseSB0aGUgZGlmZiB0byB0aGUgRE9NIG5vZGUuXG4gICAgICB1cGRhdGVQcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcyk7XG4gICAgfSxcbiAgICByZXNldFRleHRDb250ZW50OiBmdW5jdGlvbiAoZG9tRWxlbWVudCkge1xuICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgJycpO1xuICAgIH0sXG4gICAgY29tbWl0VGV4dFVwZGF0ZTogZnVuY3Rpb24gKHRleHRJbnN0YW5jZSwgb2xkVGV4dCwgbmV3VGV4dCkge1xuICAgICAgdGV4dEluc3RhbmNlLm5vZGVWYWx1ZSA9IG5ld1RleHQ7XG4gICAgfSxcbiAgICBhcHBlbmRDaGlsZDogZnVuY3Rpb24gKHBhcmVudEluc3RhbmNlLCBjaGlsZCkge1xuICAgICAgcGFyZW50SW5zdGFuY2UuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgIH0sXG4gICAgYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjogZnVuY3Rpb24gKGNvbnRhaW5lciwgY2hpbGQpIHtcbiAgICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkge1xuICAgICAgICBjb250YWluZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGQsIGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbiAocGFyZW50SW5zdGFuY2UsIGNoaWxkLCBiZWZvcmVDaGlsZCkge1xuICAgICAgcGFyZW50SW5zdGFuY2UuaW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmVDaGlsZCk7XG4gICAgfSxcbiAgICBpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTogZnVuY3Rpb24gKGNvbnRhaW5lciwgY2hpbGQsIGJlZm9yZUNoaWxkKSB7XG4gICAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICAgICAgY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmVDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmVDaGlsZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVDaGlsZDogZnVuY3Rpb24gKHBhcmVudEluc3RhbmNlLCBjaGlsZCkge1xuICAgICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOiBmdW5jdGlvbiAoY29udGFpbmVyLCBjaGlsZCkge1xuICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgICAgIGNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGh5ZHJhdGlvbjoge1xuICAgIGNhbkh5ZHJhdGVJbnN0YW5jZTogZnVuY3Rpb24gKGluc3RhbmNlLCB0eXBlLCBwcm9wcykge1xuICAgICAgaWYgKGluc3RhbmNlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUgfHwgdHlwZS50b0xvd2VyQ2FzZSgpICE9PSBpbnN0YW5jZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyBoYXMgbm93IGJlZW4gcmVmaW5lZCB0byBhbiBlbGVtZW50IG5vZGUuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSxcbiAgICBjYW5IeWRyYXRlVGV4dEluc3RhbmNlOiBmdW5jdGlvbiAoaW5zdGFuY2UsIHRleHQpIHtcbiAgICAgIGlmICh0ZXh0ID09PSAnJyB8fCBpbnN0YW5jZS5ub2RlVHlwZSAhPT0gVEVYVF9OT0RFKSB7XG4gICAgICAgIC8vIEVtcHR5IHN0cmluZ3MgYXJlIG5vdCBwYXJzZWQgYnkgSFRNTCBzbyB0aGVyZSB3b24ndCBiZSBhIGNvcnJlY3QgbWF0Y2ggaGVyZS5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICAvLyBUaGlzIGhhcyBub3cgYmVlbiByZWZpbmVkIHRvIGEgdGV4dCBub2RlLlxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH0sXG4gICAgZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIHZhciBub2RlID0gaW5zdGFuY2UubmV4dFNpYmxpbmc7XG4gICAgICAvLyBTa2lwIG5vbi1oeWRyYXRhYmxlIG5vZGVzLlxuICAgICAgd2hpbGUgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFICYmIG5vZGUubm9kZVR5cGUgIT09IFRFWFRfTk9ERSkge1xuICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6IGZ1bmN0aW9uIChwYXJlbnRJbnN0YW5jZSkge1xuICAgICAgdmFyIG5leHQgPSBwYXJlbnRJbnN0YW5jZS5maXJzdENoaWxkO1xuICAgICAgLy8gU2tpcCBub24taHlkcmF0YWJsZSBub2Rlcy5cbiAgICAgIHdoaWxlIChuZXh0ICYmIG5leHQubm9kZVR5cGUgIT09IEVMRU1FTlRfTk9ERSAmJiBuZXh0Lm5vZGVUeXBlICE9PSBURVhUX05PREUpIHtcbiAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIGh5ZHJhdGVJbnN0YW5jZTogZnVuY3Rpb24gKGluc3RhbmNlLCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICAgICAgcHJlY2FjaGVGaWJlck5vZGUoaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSwgaW5zdGFuY2UpO1xuICAgICAgLy8gVE9ETzogUG9zc2libHkgZGVmZXIgdGhpcyB1bnRpbCB0aGUgY29tbWl0IHBoYXNlIHdoZXJlIGFsbCB0aGUgZXZlbnRzXG4gICAgICAvLyBnZXQgYXR0YWNoZWQuXG4gICAgICB1cGRhdGVGaWJlclByb3BzKGluc3RhbmNlLCBwcm9wcyk7XG4gICAgICB2YXIgcGFyZW50TmFtZXNwYWNlID0gdm9pZCAwO1xuICAgICAge1xuICAgICAgICB2YXIgaG9zdENvbnRleHREZXYgPSBob3N0Q29udGV4dDtcbiAgICAgICAgcGFyZW50TmFtZXNwYWNlID0gaG9zdENvbnRleHREZXYubmFtZXNwYWNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRpZmZIeWRyYXRlZFByb3BlcnRpZXMoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBwYXJlbnROYW1lc3BhY2UsIHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG4gICAgfSxcbiAgICBoeWRyYXRlVGV4dEluc3RhbmNlOiBmdW5jdGlvbiAodGV4dEluc3RhbmNlLCB0ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gICAgICBwcmVjYWNoZUZpYmVyTm9kZShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCB0ZXh0SW5zdGFuY2UpO1xuICAgICAgcmV0dXJuIGRpZmZIeWRyYXRlZFRleHQodGV4dEluc3RhbmNlLCB0ZXh0KTtcbiAgICB9LFxuICAgIGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6IGZ1bmN0aW9uIChwYXJlbnRDb250YWluZXIsIHRleHRJbnN0YW5jZSwgdGV4dCkge1xuICAgICAge1xuICAgICAgICB3YXJuRm9yVW5tYXRjaGVkVGV4dCh0ZXh0SW5zdGFuY2UsIHRleHQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTogZnVuY3Rpb24gKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgdGV4dEluc3RhbmNlLCB0ZXh0KSB7XG4gICAgICBpZiAodHJ1ZSAmJiBwYXJlbnRQcm9wc1tTVVBQUkVTU19IWURSQVRJT05fV0FSTklOR10gIT09IHRydWUpIHtcbiAgICAgICAgd2FybkZvclVubWF0Y2hlZFRleHQodGV4dEluc3RhbmNlLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTogZnVuY3Rpb24gKHBhcmVudENvbnRhaW5lciwgaW5zdGFuY2UpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudChwYXJlbnRDb250YWluZXIsIGluc3RhbmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0KHBhcmVudENvbnRhaW5lciwgaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkaWROb3RIeWRyYXRlSW5zdGFuY2U6IGZ1bmN0aW9uIChwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIGluc3RhbmNlKSB7XG4gICAgICBpZiAodHJ1ZSAmJiBwYXJlbnRQcm9wc1tTVVBQUkVTU19IWURSQVRJT05fV0FSTklOR10gIT09IHRydWUpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudChwYXJlbnRJbnN0YW5jZSwgaW5zdGFuY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQocGFyZW50SW5zdGFuY2UsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTogZnVuY3Rpb24gKHBhcmVudENvbnRhaW5lciwgdHlwZSwgcHJvcHMpIHtcbiAgICAgIHtcbiAgICAgICAgd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50KHBhcmVudENvbnRhaW5lciwgdHlwZSwgcHJvcHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6IGZ1bmN0aW9uIChwYXJlbnRDb250YWluZXIsIHRleHQpIHtcbiAgICAgIHtcbiAgICAgICAgd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0KHBhcmVudENvbnRhaW5lciwgdGV4dCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOiBmdW5jdGlvbiAocGFyZW50VHlwZSwgcGFyZW50UHJvcHMsIHBhcmVudEluc3RhbmNlLCB0eXBlLCBwcm9wcykge1xuICAgICAgaWYgKHRydWUgJiYgcGFyZW50UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkddICE9PSB0cnVlKSB7XG4gICAgICAgIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudChwYXJlbnRJbnN0YW5jZSwgdHlwZSwgcHJvcHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6IGZ1bmN0aW9uIChwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIHRleHQpIHtcbiAgICAgIGlmICh0cnVlICYmIHBhcmVudFByb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HXSAhPT0gdHJ1ZSkge1xuICAgICAgICB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQocGFyZW50SW5zdGFuY2UsIHRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6IHJJQyxcbiAgY2FuY2VsRGVmZXJyZWRDYWxsYmFjazogY0lDXG59KTtcblxuaW5qZWN0aW9uJDMuaW5qZWN0UmVuZGVyZXIoRE9NUmVuZGVyZXIpO1xuXG52YXIgd2FybmVkQWJvdXRIeWRyYXRlQVBJID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGxlZ2FjeUNyZWF0ZVJvb3RGcm9tRE9NQ29udGFpbmVyKGNvbnRhaW5lciwgZm9yY2VIeWRyYXRlKSB7XG4gIHZhciBzaG91bGRIeWRyYXRlID0gZm9yY2VIeWRyYXRlIHx8IHNob3VsZEh5ZHJhdGVEdWVUb0xlZ2FjeUhldXJpc3RpYyhjb250YWluZXIpO1xuICAvLyBGaXJzdCBjbGVhciBhbnkgZXhpc3RpbmcgY29udGVudC5cbiAgaWYgKCFzaG91bGRIeWRyYXRlKSB7XG4gICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgIHZhciByb290U2libGluZyA9IHZvaWQgMDtcbiAgICB3aGlsZSAocm9vdFNpYmxpbmcgPSBjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICB7XG4gICAgICAgIGlmICghd2FybmVkICYmIHJvb3RTaWJsaW5nLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgcm9vdFNpYmxpbmcuaGFzQXR0cmlidXRlKFJPT1RfQVRUUklCVVRFX05BTUUpKSB7XG4gICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAncmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSAnICsgJ2FyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSAnICsgJ3doaXRlLXNwYWNlIGluc2VydGVkIGFyb3VuZCBzZXJ2ZXItcmVuZGVyZWQgbWFya3VwLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQocm9vdFNpYmxpbmcpO1xuICAgIH1cbiAgfVxuICB7XG4gICAgaWYgKHNob3VsZEh5ZHJhdGUgJiYgIWZvcmNlSHlkcmF0ZSAmJiAhd2FybmVkQWJvdXRIeWRyYXRlQVBJKSB7XG4gICAgICB3YXJuZWRBYm91dEh5ZHJhdGVBUEkgPSB0cnVlO1xuICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdyZW5kZXIoKTogQ2FsbGluZyBSZWFjdERPTS5yZW5kZXIoKSB0byBoeWRyYXRlIHNlcnZlci1yZW5kZXJlZCBtYXJrdXAgJyArICd3aWxsIHN0b3Agd29ya2luZyBpbiBSZWFjdCB2MTcuIFJlcGxhY2UgdGhlIFJlYWN0RE9NLnJlbmRlcigpIGNhbGwgJyArICd3aXRoIFJlYWN0RE9NLmh5ZHJhdGUoKSBpZiB5b3Ugd2FudCBSZWFjdCB0byBhdHRhY2ggdG8gdGhlIHNlcnZlciBIVE1MLicpO1xuICAgIH1cbiAgfVxuICAvLyBMZWdhY3kgcm9vdHMgYXJlIG5vdCBhc3luYyBieSBkZWZhdWx0LlxuICB2YXIgaXNBc3luYyA9IGZhbHNlO1xuICByZXR1cm4gbmV3IFJlYWN0Um9vdChjb250YWluZXIsIGlzQXN5bmMsIHNob3VsZEh5ZHJhdGUpO1xufVxuXG5mdW5jdGlvbiBsZWdhY3lSZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGNoaWxkcmVuLCBjb250YWluZXIsIGZvcmNlSHlkcmF0ZSwgY2FsbGJhY2spIHtcbiAgLy8gVE9ETzogRW5zdXJlIGFsbCBlbnRyeSBwb2ludHMgY29udGFpbiB0aGlzIGNoZWNrXG4gICFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikgPyBpbnZhcmlhbnQoZmFsc2UsICdUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogdm9pZCAwO1xuXG4gIHtcbiAgICB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzKGNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBUT0RPOiBXaXRob3V0IGBhbnlgIHR5cGUsIEZsb3cgc2F5cyBcIlByb3BlcnR5IGNhbm5vdCBiZSBhY2Nlc3NlZCBvbiBhbnlcbiAgLy8gbWVtYmVyIG9mIGludGVyc2VjdGlvbiB0eXBlLlwiIFdoeXl5eXl5LlxuICB2YXIgcm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICBpZiAoIXJvb3QpIHtcbiAgICAvLyBJbml0aWFsIG1vdW50XG4gICAgcm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID0gbGVnYWN5Q3JlYXRlUm9vdEZyb21ET01Db250YWluZXIoY29udGFpbmVyLCBmb3JjZUh5ZHJhdGUpO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBvcmlnaW5hbENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gRE9NUmVuZGVyZXIuZ2V0UHVibGljUm9vdEluc3RhbmNlKHJvb3QuX2ludGVybmFsUm9vdCk7XG4gICAgICAgIG9yaWdpbmFsQ2FsbGJhY2suY2FsbChpbnN0YW5jZSk7XG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJbml0aWFsIG1vdW50IHNob3VsZCBub3QgYmUgYmF0Y2hlZC5cbiAgICBET01SZW5kZXJlci51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwYXJlbnRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgICByb290LmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGNoaWxkcmVuLCBjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290LnJlbmRlcihjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBfb3JpZ2luYWxDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IERPTVJlbmRlcmVyLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShyb290Ll9pbnRlcm5hbFJvb3QpO1xuICAgICAgICBfb3JpZ2luYWxDYWxsYmFjay5jYWxsKGluc3RhbmNlKTtcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFVwZGF0ZVxuICAgIGlmIChwYXJlbnRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgcm9vdC5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LnJlbmRlcihjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuICByZXR1cm4gRE9NUmVuZGVyZXIuZ2V0UHVibGljUm9vdEluc3RhbmNlKHJvb3QuX2ludGVybmFsUm9vdCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgY29udGFpbmVyKSB7XG4gIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cbiAgIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSA/IGludmFyaWFudChmYWxzZSwgJ1RhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiB2b2lkIDA7XG4gIC8vIFRPRE86IHBhc3MgUmVhY3RET00gcG9ydGFsIGltcGxlbWVudGF0aW9uIGFzIHRoaXJkIGFyZ3VtZW50XG4gIHJldHVybiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufVxuXG52YXIgUmVhY3RET00gPSB7XG4gIGNyZWF0ZVBvcnRhbDogY3JlYXRlUG9ydGFsLFxuXG4gIGZpbmRET01Ob2RlOiBmdW5jdGlvbiAoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gICAge1xuICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgIGlmIChvd25lciAhPT0gbnVsbCAmJiBvd25lci5zdGF0ZU5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHdhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gb3duZXIuc3RhdGVOb2RlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcjtcbiAgICAgICAgd2FybmluZyh3YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBmaW5kRE9NTm9kZSBpbnNpZGUgaXRzIHJlbmRlcigpLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgZ2V0Q29tcG9uZW50TmFtZShvd25lcikgfHwgJ0EgY29tcG9uZW50Jyk7XG4gICAgICAgIG93bmVyLnN0YXRlTm9kZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tcG9uZW50T3JFbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoY29tcG9uZW50T3JFbGVtZW50Lm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnRPckVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIGluc3QgPSBnZXQoY29tcG9uZW50T3JFbGVtZW50KTtcbiAgICBpZiAoaW5zdCkge1xuICAgICAgcmV0dXJuIERPTVJlbmRlcmVyLmZpbmRIb3N0SW5zdGFuY2UoaW5zdCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlLiBLZXlzOiAlcycsIE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudCkpO1xuICAgIH1cbiAgfSxcbiAgaHlkcmF0ZTogZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiB0aHJvdyBvciB3YXJuIGlmIHdlIGNvdWxkbid0IGh5ZHJhdGU/XG4gICAgcmV0dXJuIGxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKG51bGwsIGVsZW1lbnQsIGNvbnRhaW5lciwgdHJ1ZSwgY2FsbGJhY2spO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKG51bGwsIGVsZW1lbnQsIGNvbnRhaW5lciwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgfSxcbiAgdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IGZ1bmN0aW9uIChwYXJlbnRDb21wb25lbnQsIGVsZW1lbnQsIGNvbnRhaW5lck5vZGUsIGNhbGxiYWNrKSB7XG4gICAgIShwYXJlbnRDb21wb25lbnQgIT0gbnVsbCAmJiBoYXMocGFyZW50Q29tcG9uZW50KSkgPyBpbnZhcmlhbnQoZmFsc2UsICdwYXJlbnRDb21wb25lbnQgbXVzdCBiZSBhIHZhbGlkIFJlYWN0IENvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgIHJldHVybiBsZWdhY3lSZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGVsZW1lbnQsIGNvbnRhaW5lck5vZGUsIGZhbHNlLCBjYWxsYmFjayk7XG4gIH0sXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICAhaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpID8gaW52YXJpYW50KGZhbHNlLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogdm9pZCAwO1xuXG4gICAgaWYgKGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyKSB7XG4gICAgICB7XG4gICAgICAgIHZhciByb290RWwgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICAgICAgdmFyIHJlbmRlcmVkQnlEaWZmZXJlbnRSZWFjdCA9IHJvb3RFbCAmJiAhZ2V0SW5zdGFuY2VGcm9tTm9kZSQxKHJvb3RFbCk7XG4gICAgICAgIHdhcm5pbmcoIXJlbmRlcmVkQnlEaWZmZXJlbnRSZWFjdCwgXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFRoZSBub2RlIHlvdSdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgXCIgKyAnd2FzIHJlbmRlcmVkIGJ5IGFub3RoZXIgY29weSBvZiBSZWFjdC4nKTtcbiAgICAgIH1cblxuICAgICAgLy8gVW5tb3VudCBzaG91bGQgbm90IGJlIGJhdGNoZWQuXG4gICAgICBET01SZW5kZXJlci51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIobnVsbCwgbnVsbCwgY29udGFpbmVyLCBmYWxzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC8vIElmIHlvdSBjYWxsIHVubW91bnRDb21wb25lbnRBdE5vZGUgdHdpY2UgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgeW91J2xsXG4gICAgICAvLyBnZXQgYHRydWVgIHR3aWNlLiBUaGF0J3MgcHJvYmFibHkgZmluZT9cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB7XG4gICAgICAgIHZhciBfcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICAgIHZhciBoYXNOb25Sb290UmVhY3RDaGlsZCA9ICEhKF9yb290RWwgJiYgZ2V0SW5zdGFuY2VGcm9tTm9kZSQxKF9yb290RWwpKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGFpbmVyIGl0c2VsZiBpcyBhIFJlYWN0IHJvb3Qgbm9kZS5cbiAgICAgICAgdmFyIGlzQ29udGFpbmVyUmVhY3RSb290ID0gY29udGFpbmVyLm5vZGVUeXBlID09PSAxICYmIGlzVmFsaWRDb250YWluZXIoY29udGFpbmVyLnBhcmVudE5vZGUpICYmICEhY29udGFpbmVyLnBhcmVudE5vZGUuX3JlYWN0Um9vdENvbnRhaW5lcjtcblxuICAgICAgICB3YXJuaW5nKCFoYXNOb25Sb290UmVhY3RDaGlsZCwgXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFRoZSBub2RlIHlvdSdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgXCIgKyAnd2FzIHJlbmRlcmVkIGJ5IFJlYWN0IGFuZCBpcyBub3QgYSB0b3AtbGV2ZWwgY29udGFpbmVyLiAlcycsIGlzQ29udGFpbmVyUmVhY3RSb290ID8gJ1lvdSBtYXkgaGF2ZSBhY2NpZGVudGFsbHkgcGFzc2VkIGluIGEgUmVhY3Qgcm9vdCBub2RlIGluc3RlYWQgJyArICdvZiBpdHMgY29udGFpbmVyLicgOiAnSW5zdGVhZCwgaGF2ZSB0aGUgcGFyZW50IGNvbXBvbmVudCB1cGRhdGUgaXRzIHN0YXRlIGFuZCAnICsgJ3JlcmVuZGVyIGluIG9yZGVyIHRvIHJlbW92ZSB0aGlzIGNvbXBvbmVudC4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcblxuXG4gIC8vIFRlbXBvcmFyeSBhbGlhcyBzaW5jZSB3ZSBhbHJlYWR5IHNoaXBwZWQgUmVhY3QgMTYgUkMgd2l0aCBpdC5cbiAgLy8gVE9ETzogcmVtb3ZlIGluIFJlYWN0IDE3LlxuICB1bnN0YWJsZV9jcmVhdGVQb3J0YWw6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRpZFdhcm5BYm91dFVuc3RhYmxlQ3JlYXRlUG9ydGFsKSB7XG4gICAgICBkaWRXYXJuQWJvdXRVbnN0YWJsZUNyZWF0ZVBvcnRhbCA9IHRydWU7XG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ1RoZSBSZWFjdERPTS51bnN0YWJsZV9jcmVhdGVQb3J0YWwoKSBhbGlhcyBoYXMgYmVlbiBkZXByZWNhdGVkLCAnICsgJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgMTcrLiBVcGRhdGUgeW91ciBjb2RlIHRvIHVzZSAnICsgJ1JlYWN0RE9NLmNyZWF0ZVBvcnRhbCgpIGluc3RlYWQuIEl0IGhhcyB0aGUgZXhhY3Qgc2FtZSBBUEksICcgKyAnYnV0IHdpdGhvdXQgdGhlIFwidW5zdGFibGVfXCIgcHJlZml4LicpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUG9ydGFsLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfSxcblxuXG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOiBET01SZW5kZXJlci5iYXRjaGVkVXBkYXRlcyxcblxuICB1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6IERPTVJlbmRlcmVyLmRlZmVycmVkVXBkYXRlcyxcblxuICBmbHVzaFN5bmM6IERPTVJlbmRlcmVyLmZsdXNoU3luYyxcblxuICB1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6IERPTVJlbmRlcmVyLmZsdXNoQ29udHJvbGxlZCxcblxuICBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDoge1xuICAgIC8vIEZvciBUYXBFdmVudFBsdWdpbiB3aGljaCBpcyBwb3B1bGFyIGluIG9wZW4gc291cmNlXG4gICAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLFxuICAgIC8vIFVzZWQgYnkgdGVzdC11dGlsc1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50UGx1Z2luUmVnaXN0cnksXG4gICAgRXZlbnRQcm9wYWdhdG9yczogRXZlbnRQcm9wYWdhdG9ycyxcbiAgICBSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6IFJlYWN0Q29udHJvbGxlZENvbXBvbmVudCxcbiAgICBSZWFjdERPTUNvbXBvbmVudFRyZWU6IFJlYWN0RE9NQ29tcG9uZW50VHJlZSxcbiAgICBSZWFjdERPTUV2ZW50TGlzdGVuZXI6IFJlYWN0RE9NRXZlbnRMaXN0ZW5lclxuICB9XG59O1xuXG5SZWFjdERPTS51bnN0YWJsZV9jcmVhdGVSb290ID0gZnVuY3Rpb24gY3JlYXRlUm9vdChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgdmFyIGh5ZHJhdGUgPSBvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5oeWRyYXRlID09PSB0cnVlO1xuICByZXR1cm4gbmV3IFJlYWN0Um9vdChjb250YWluZXIsIHRydWUsIGh5ZHJhdGUpO1xufTtcblxudmFyIGZvdW5kRGV2VG9vbHMgPSBET01SZW5kZXJlci5pbmplY3RJbnRvRGV2VG9vbHMoe1xuICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gIGJ1bmRsZVR5cGU6IDEsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcbiAgcmVuZGVyZXJQYWNrYWdlTmFtZTogJ3JlYWN0LWRvbSdcbn0pO1xuXG57XG4gIGlmICghZm91bmREZXZUb29scyAmJiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LnRvcCA9PT0gd2luZG93LnNlbGYpIHtcbiAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUgb3IgRmlyZWZveCwgcHJvdmlkZSBhIGRvd25sb2FkIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRWRnZScpID09PSAtMSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+IC0xKSB7XG4gICAgICB2YXIgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAvLyBEb24ndCB3YXJuIGluIGV4b3RpYyBjYXNlcyBsaWtlIGNocm9tZS1leHRlbnNpb246Ly8uXG4gICAgICBpZiAoL14oaHR0cHM/fGZpbGUpOiQvLnRlc3QocHJvdG9jb2wpKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnJWNEb3dubG9hZCB0aGUgUmVhY3QgRGV2VG9vbHMgJyArICdmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJyArIChwcm90b2NvbCA9PT0gJ2ZpbGU6JyA/ICdcXG5Zb3UgbWlnaHQgbmVlZCB0byB1c2UgYSBsb2NhbCBIVFRQIHNlcnZlciAoaW5zdGVhZCBvZiBmaWxlOi8vKTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzLWZhcScgOiAnJyksICdmb250LXdlaWdodDpib2xkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG52YXIgUmVhY3RET00kMiA9IE9iamVjdC5mcmVlemUoe1xuXHRkZWZhdWx0OiBSZWFjdERPTVxufSk7XG5cbnZhciBSZWFjdERPTSQzID0gKCBSZWFjdERPTSQyICYmIFJlYWN0RE9NICkgfHwgUmVhY3RET00kMjtcblxuLy8gVE9ETzogZGVjaWRlIG9uIHRoZSB0b3AtbGV2ZWwgZXhwb3J0IGZvcm0uXG4vLyBUaGlzIGlzIGhhY2t5IGJ1dCBtYWtlcyBpdCB3b3JrIHdpdGggYm90aCBSb2xsdXAgYW5kIEplc3QuXG52YXIgcmVhY3REb20gPSBSZWFjdERPTSQzWydkZWZhdWx0J10gPyBSZWFjdERPTSQzWydkZWZhdWx0J10gOiBSZWFjdERPTSQzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0RG9tO1xuICB9KSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMVxuICogcmVhY3QuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBjaGVja1Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMnKTtcblxuLy8gVE9ETzogdGhpcyBpcyBzcGVjaWFsIGJlY2F1c2UgaXQgZ2V0cyBpbXBvcnRlZCBkdXJpbmcgYnVpbGQuXG5cbnZhciBSZWFjdFZlcnNpb24gPSAnMTYuMy4xJztcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbFsnZm9yJ107XG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2xbJ2ZvciddKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG52YXIgUkVBQ1RfQ0FMTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QuY2FsbCcpIDogMHhlYWM4O1xudmFyIFJFQUNUX1JFVFVSTl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QucmV0dXJuJykgOiAweGVhYzk7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2xbJ2ZvciddKCdyZWFjdC5wb3J0YWwnKSA6IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QuZnJhZ21lbnQnKSA6IDB4ZWFjYjtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3Quc3RyaWN0X21vZGUnKSA6IDB4ZWFjYztcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QucHJvdmlkZXInKSA6IDB4ZWFjZDtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2xbJ2ZvciddKCdyZWFjdC5jb250ZXh0JykgOiAweGVhY2U7XG52YXIgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sWydmb3InXSgncmVhY3QuYXN5bmNfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2xbJ2ZvciddKCdyZWFjdC5mb3J3YXJkX3JlZicpIDogMHhlYWQwO1xuXG52YXIgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG52YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7XG5cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgbWF5YmVJdGVyYXRvciA9IE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF07XG4gIGlmICh0eXBlb2YgbWF5YmVJdGVyYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFdBUk5JTkc6IERPIE5PVCBtYW51YWxseSByZXF1aXJlIHRoaXMgbW9kdWxlLlxuICogVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvciBgaW52YXJpYW50KC4uLilgIHVzZWQgYnkgdGhlIGVycm9yIGNvZGUgc3lzdGVtXG4gKiBhbmQgd2lsbCBfb25seV8gYmUgcmVxdWlyZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgYmFiZWwgcGFzcy5cbiAqIEl0IGFsd2F5cyB0aHJvd3MuXG4gKi9cblxuLyoqXG4gKiBGb3JrZWQgZnJvbSBmYmpzL3dhcm5pbmc6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2U2NmJhMjBhZDViZTQzM2ViNTQ0MjNmMmIwOTdkODI5MzI0ZDlkZTYvcGFja2FnZXMvZmJqcy9zcmMvX19mb3Jrc19fL3dhcm5pbmcuanNcbiAqXG4gKiBPbmx5IGNoYW5nZSBpcyB3ZSB1c2UgY29uc29sZS53YXJuIGluc3RlYWQgb2YgY29uc29sZS5lcnJvcixcbiAqIGFuZCBkbyBub3RoaW5nIHdoZW4gJ2NvbnNvbGUnIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKiBUaGlzIHJlYWxseSBzaW1wbGlmaWVzIHRoZSBjb2RlLlxuICogLS0tXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIGxvd1ByaW9yaXR5V2FybmluZyA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9O1xuXG4gIGxvd1ByaW9yaXR5V2FybmluZyA9IGZ1bmN0aW9uIChjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmckMSA9IGxvd1ByaW9yaXR5V2FybmluZztcblxudmFyIGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudCA9IHt9O1xuXG5mdW5jdGlvbiB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICB7XG4gICAgdmFyIF9jb25zdHJ1Y3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHZhciBjb21wb25lbnROYW1lID0gX2NvbnN0cnVjdG9yICYmIChfY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgX2NvbnN0cnVjdG9yLm5hbWUpIHx8ICdSZWFjdENsYXNzJztcbiAgICB2YXIgd2FybmluZ0tleSA9IGNvbXBvbmVudE5hbWUgKyAnLicgKyBjYWxsZXJOYW1lO1xuICAgIGlmIChkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2FybmluZyhmYWxzZSwgXCJDYW4ndCBjYWxsICVzIG9uIGEgY29tcG9uZW50IHRoYXQgaXMgbm90IHlldCBtb3VudGVkLiBcIiArICdUaGlzIGlzIGEgbm8tb3AsIGJ1dCBpdCBtaWdodCBpbmRpY2F0ZSBhIGJ1ZyBpbiB5b3VyIGFwcGxpY2F0aW9uLiAnICsgJ0luc3RlYWQsIGFzc2lnbiB0byBgdGhpcy5zdGF0ZWAgZGlyZWN0bHkgb3IgZGVmaW5lIGEgYHN0YXRlID0ge307YCAnICsgJ2NsYXNzIHByb3BlcnR5IHdpdGggdGhlIGRlc2lyZWQgc3RhdGUgaW4gdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjb21wb25lbnROYW1lKTtcbiAgICBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0gPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgYWJzdHJhY3QgQVBJIGZvciBhbiB1cGRhdGUgcXVldWUuXG4gKi9cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGNhbGxlck5hbWUgbmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbiBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgaGVscGVycyBmb3IgdGhlIHVwZGF0aW5nIHN0YXRlIG9mIGEgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgLy8gV2UgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCB1cGRhdGVyIGJ1dCB0aGUgcmVhbCBvbmUgZ2V0cyBpbmplY3RlZCBieSB0aGVcbiAgLy8gcmVuZGVyZXIuXG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICEodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy4nKSA6IHZvaWQgMDtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbn07XG5cbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgY2FsbGJhY2ssICdmb3JjZVVwZGF0ZScpO1xufTtcblxuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cbntcbiAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXVxuICB9O1xuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyQxKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIgZm5OYW1lIGluIGRlcHJlY2F0ZWRBUElzKSB7XG4gICAgaWYgKGRlcHJlY2F0ZWRBUElzLmhhc093blByb3BlcnR5KGZuTmFtZSkpIHtcbiAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBDb21wb25lbnREdW1teSgpIHt9XG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4vKipcbiAqIENvbnZlbmllbmNlIGNvbXBvbmVudCB3aXRoIGRlZmF1bHQgc2hhbGxvdyBlcXVhbGl0eSBjaGVjayBmb3Igc0NVLlxuICovXG5mdW5jdGlvbiBQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbnZhciBwdXJlQ29tcG9uZW50UHJvdG90eXBlID0gUHVyZUNvbXBvbmVudC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50RHVtbXkoKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuY29uc3RydWN0b3IgPSBQdXJlQ29tcG9uZW50O1xuLy8gQXZvaWQgYW4gZXh0cmEgcHJvdG90eXBlIGp1bXAgZm9yIHRoZXNlIG1ldGhvZHMuXG5fYXNzaWduKHB1cmVDb21wb25lbnRQcm90b3R5cGUsIENvbXBvbmVudC5wcm90b3R5cGUpO1xucHVyZUNvbXBvbmVudFByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCA9IHRydWU7XG5cbi8vIGFuIGltbXV0YWJsZSBvYmplY3Qgd2l0aCBhIHNpbmdsZSBtdXRhYmxlIHZhbHVlXG5mdW5jdGlvbiBjcmVhdGVSZWYoKSB7XG4gIHZhciByZWZPYmplY3QgPSB7XG4gICAgY3VycmVudDogbnVsbFxuICB9O1xuICB7XG4gICAgT2JqZWN0LnNlYWwocmVmT2JqZWN0KTtcbiAgfVxuICByZXR1cm4gcmVmT2JqZWN0O1xufVxuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICpcbiAqIFRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBjb21wb25lbnQgd2hvIHNob3VsZCBvd24gYW55IGNvbXBvbmVudHMgdGhhdCBhcmVcbiAqIGN1cnJlbnRseSBiZWluZyBjb25zdHJ1Y3RlZC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcbn07XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWUsXG4gIF9fc2VsZjogdHJ1ZSxcbiAgX19zb3VyY2U6IHRydWVcbn07XG5cbnZhciBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHZvaWQgMDtcbnZhciBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHZvaWQgMDtcblxuZnVuY3Rpb24gaGFzVmFsaWRSZWYoY29uZmlnKSB7XG4gIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0O1xuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb25maWcua2V5ICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24pIHtcbiAgICAgIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICclczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcyknLCBkaXNwbGF5TmFtZSk7XG4gICAgfVxuICB9O1xuICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdrZXknLCB7XG4gICAgZ2V0OiB3YXJuQWJvdXRBY2Nlc3NpbmdLZXksXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHdhcm5BYm91dEFjY2Vzc2luZ1JlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duKSB7XG4gICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnJXM6IGByZWZgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfTtcbiAgd2FybkFib3V0QWNjZXNzaW5nUmVmLmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgUmVhY3QgZWxlbWVudC4gVGhpcyBubyBsb25nZXIgYWRoZXJlcyB0b1xuICogdGhlIGNsYXNzIHBhdHRlcm4sIHNvIGRvIG5vdCB1c2UgbmV3IHRvIGNhbGwgaXQuIEFsc28sIG5vIGluc3RhbmNlb2YgY2hlY2tcbiAqIHdpbGwgd29yay4gSW5zdGVhZCB0ZXN0ICQkdHlwZW9mIGZpZWxkIGFnYWluc3QgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIHRvIGNoZWNrXG4gKiBpZiBzb21ldGhpbmcgaXMgYSBSZWFjdCBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHsqfSBrZXlcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IHNlbGYgQSAqdGVtcG9yYXJ5KiBoZWxwZXIgdG8gZGV0ZWN0IHBsYWNlcyB3aGVyZSBgdGhpc2AgaXNcbiAqIGRpZmZlcmVudCBmcm9tIHRoZSBgb3duZXJgIHdoZW4gUmVhY3QuY3JlYXRlRWxlbWVudCBpcyBjYWxsZWQsIHNvIHRoYXQgd2VcbiAqIGNhbiB3YXJuLiBXZSB3YW50IHRvIGdldCByaWQgb2Ygb3duZXIgYW5kIHJlcGxhY2Ugc3RyaW5nIGByZWZgcyB3aXRoIGFycm93XG4gKiBmdW5jdGlvbnMsIGFuZCBhcyBsb25nIGFzIGB0aGlzYCBhbmQgb3duZXIgYXJlIHRoZSBzYW1lLCB0aGVyZSB3aWxsIGJlIG5vXG4gKiBjaGFuZ2UgaW4gYmVoYXZpb3IuXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBBbiBhbm5vdGF0aW9uIG9iamVjdCAoYWRkZWQgYnkgYSB0cmFuc3BpbGVyIG9yIG90aGVyd2lzZSlcbiAqIGluZGljYXRpbmcgZmlsZW5hbWUsIGxpbmUgbnVtYmVyLCBhbmQvb3Igb3RoZXIgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0geyp9IG93bmVyXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3dzIHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcblxuICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogcmVmLFxuICAgIHByb3BzOiBwcm9wcyxcblxuICAgIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gICAgX293bmVyOiBvd25lclxuICB9O1xuXG4gIHtcbiAgICAvLyBUaGUgdmFsaWRhdGlvbiBmbGFnIGlzIGN1cnJlbnRseSBtdXRhdGl2ZS4gV2UgcHV0IGl0IG9uXG4gICAgLy8gYW4gZXh0ZXJuYWwgYmFja2luZyBzdG9yZSBzbyB0aGF0IHdlIGNhbiBmcmVlemUgdGhlIHdob2xlIG9iamVjdC5cbiAgICAvLyBUaGlzIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgV2Vha01hcCBvbmNlIHRoZXkgYXJlIGltcGxlbWVudGVkIGluXG4gICAgLy8gY29tbW9ubHkgdXNlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMuXG4gICAgZWxlbWVudC5fc3RvcmUgPSB7fTtcblxuICAgIC8vIFRvIG1ha2UgY29tcGFyaW5nIFJlYWN0RWxlbWVudHMgZWFzaWVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSBtYWtlXG4gICAgLy8gdGhlIHZhbGlkYXRpb24gZmxhZyBub24tZW51bWVyYWJsZSAod2hlcmUgcG9zc2libGUsIHdoaWNoIHNob3VsZFxuICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrXG4gICAgLy8gaWdub3JlcyBpdC5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pO1xuICAgIC8vIHNlbGYgYW5kIHNvdXJjZSBhcmUgREVWIG9ubHkgcHJvcGVydGllcy5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNlbGZcbiAgICB9KTtcbiAgICAvLyBUd28gZWxlbWVudHMgY3JlYXRlZCBpbiB0d28gZGlmZmVyZW50IHBsYWNlcyBzaG91bGQgYmUgY29uc2lkZXJlZFxuICAgIC8vIGVxdWFsIGZvciB0ZXN0aW5nIHB1cnBvc2VzIGFuZCB0aGVyZWZvcmUgd2UgaGlkZSBpdCBmcm9tIGVudW1lcmF0aW9uLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICB9KTtcbiAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50LnByb3BzKTtcbiAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IFJlYWN0RWxlbWVudCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjY3JlYXRlZWxlbWVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lID0gdm9pZCAwO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIHByb3BzID0ge307XG5cbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciByZWYgPSBudWxsO1xuICB2YXIgc2VsZiA9IG51bGw7XG4gIHZhciBzb3VyY2UgPSBudWxsO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIGlmIChoYXNWYWxpZFJlZihjb25maWcpKSB7XG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgIH1cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIHNlbGYgPSBjb25maWcuX19zZWxmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc2VsZjtcbiAgICBzb3VyY2UgPSBjb25maWcuX19zb3VyY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zb3VyY2U7XG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdFxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG4gICAge1xuICAgICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShjaGlsZEFycmF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG5cbiAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuICAgIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAge1xuICAgIGlmIChrZXkgfHwgcmVmKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLiQkdHlwZW9mID09PSAndW5kZWZpbmVkJyB8fCBwcm9wcy4kJHR5cGVvZiAhPT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgJ1Vua25vd24nIDogdHlwZTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBSZWFjdEVsZW1lbnRzIG9mIGEgZ2l2ZW4gdHlwZS5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjY3JlYXRlZmFjdG9yeVxuICovXG5cblxuZnVuY3Rpb24gY2xvbmVBbmRSZXBsYWNlS2V5KG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuXG4gIHJldHVybiBuZXdFbGVtZW50O1xufVxuXG4vKipcbiAqIENsb25lIGFuZCByZXR1cm4gYSBuZXcgUmVhY3RFbGVtZW50IHVzaW5nIGVsZW1lbnQgYXMgdGhlIHN0YXJ0aW5nIHBvaW50LlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNjbG9uZWVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gY2xvbmVFbGVtZW50KGVsZW1lbnQsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lID0gdm9pZCAwO1xuXG4gIC8vIE9yaWdpbmFsIHByb3BzIGFyZSBjb3BpZWRcbiAgdmFyIHByb3BzID0gX2Fzc2lnbih7fSwgZWxlbWVudC5wcm9wcyk7XG5cbiAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuICB2YXIga2V5ID0gZWxlbWVudC5rZXk7XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgLy8gU2VsZiBpcyBwcmVzZXJ2ZWQgc2luY2UgdGhlIG93bmVyIGlzIHByZXNlcnZlZC5cbiAgdmFyIHNlbGYgPSBlbGVtZW50Ll9zZWxmO1xuICAvLyBTb3VyY2UgaXMgcHJlc2VydmVkIHNpbmNlIGNsb25lRWxlbWVudCBpcyB1bmxpa2VseSB0byBiZSB0YXJnZXRlZCBieSBhXG4gIC8vIHRyYW5zcGlsZXIsIGFuZCB0aGUgb3JpZ2luYWwgc291cmNlIGlzIHByb2JhYmx5IGEgYmV0dGVyIGluZGljYXRvciBvZiB0aGVcbiAgLy8gdHJ1ZSBvd25lci5cbiAgdmFyIHNvdXJjZSA9IGVsZW1lbnQuX3NvdXJjZTtcblxuICAvLyBPd25lciB3aWxsIGJlIHByZXNlcnZlZCwgdW5sZXNzIHJlZiBpcyBvdmVycmlkZGVuXG4gIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIGlmIChoYXNWYWxpZFJlZihjb25maWcpKSB7XG4gICAgICAvLyBTaWxlbnRseSBzdGVhbCB0aGUgcmVmIGZyb20gdGhlIHBhcmVudC5cbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgfVxuICAgIGlmIChoYXNWYWxpZEtleShjb25maWcpKSB7XG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuXG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgb3ZlcnJpZGUgZXhpc3RpbmcgcHJvcHNcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdm9pZCAwO1xuICAgIGlmIChlbGVtZW50LnR5cGUgJiYgZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgZGVmYXVsdFByb3BzID0gZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcztcbiAgICB9XG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgaWYgKGNvbmZpZ1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCAmJiBkZWZhdWx0UHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFZlcmlmaWVzIHRoZSBvYmplY3QgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2lzdmFsaWRlbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIGNvbXBvbmVudC5cbiAqIEBmaW5hbFxuICovXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cblxudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSB7fTtcblxue1xuICAvLyBDb21wb25lbnQgdGhhdCBpcyBiZWluZyB3b3JrZWQgb25cbiAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2sgPSBudWxsO1xuXG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW1wbCA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0Q3VycmVudFN0YWNrO1xuICAgIGlmIChpbXBsKSB7XG4gICAgICByZXR1cm4gaW1wbCgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIFNFUEFSQVRPUiA9ICcuJztcbnZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG5cbi8qKlxuICogRXNjYXBlIGFuZCB3cmFwIGtleSBzbyBpdCBpcyBzYWZlIHRvIHVzZSBhcyBhIHJlYWN0aWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIGJlIGVzY2FwZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBlc2NhcGVkIGtleS5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlUmVnZXggPSAvWz06XS9nO1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPSc6ICc9MCcsXG4gICAgJzonOiAnPTInXG4gIH07XG4gIHZhciBlc2NhcGVkU3RyaW5nID0gKCcnICsga2V5KS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xuXG4gIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xufVxuXG4vKipcbiAqIFRPRE86IFRlc3QgdGhhdCBhIHNpbmdsZSBjaGlsZCBhbmQgYW4gYXJyYXkgd2l0aCBvbmUgaXRlbSBoYXZlIHRoZSBzYW1lIGtleVxuICogcGF0dGVybi5cbiAqL1xuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICckJi8nKTtcbn1cblxudmFyIFBPT0xfU0laRSA9IDEwO1xudmFyIHRyYXZlcnNlQ29udGV4dFBvb2wgPSBbXTtcbmZ1bmN0aW9uIGdldFBvb2xlZFRyYXZlcnNlQ29udGV4dChtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgaWYgKHRyYXZlcnNlQ29udGV4dFBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IHRyYXZlcnNlQ29udGV4dFBvb2wucG9wKCk7XG4gICAgdHJhdmVyc2VDb250ZXh0LnJlc3VsdCA9IG1hcFJlc3VsdDtcbiAgICB0cmF2ZXJzZUNvbnRleHQua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICAgIHRyYXZlcnNlQ29udGV4dC5mdW5jID0gbWFwRnVuY3Rpb247XG4gICAgdHJhdmVyc2VDb250ZXh0LmNvbnRleHQgPSBtYXBDb250ZXh0O1xuICAgIHRyYXZlcnNlQ29udGV4dC5jb3VudCA9IDA7XG4gICAgcmV0dXJuIHRyYXZlcnNlQ29udGV4dDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0OiBtYXBSZXN1bHQsXG4gICAgICBrZXlQcmVmaXg6IGtleVByZWZpeCxcbiAgICAgIGZ1bmM6IG1hcEZ1bmN0aW9uLFxuICAgICAgY29udGV4dDogbWFwQ29udGV4dCxcbiAgICAgIGNvdW50OiAwXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWxlYXNlVHJhdmVyc2VDb250ZXh0KHRyYXZlcnNlQ29udGV4dCkge1xuICB0cmF2ZXJzZUNvbnRleHQucmVzdWx0ID0gbnVsbDtcbiAgdHJhdmVyc2VDb250ZXh0LmtleVByZWZpeCA9IG51bGw7XG4gIHRyYXZlcnNlQ29udGV4dC5mdW5jID0gbnVsbDtcbiAgdHJhdmVyc2VDb250ZXh0LmNvbnRleHQgPSBudWxsO1xuICB0cmF2ZXJzZUNvbnRleHQuY291bnQgPSAwO1xuICBpZiAodHJhdmVyc2VDb250ZXh0UG9vbC5sZW5ndGggPCBQT09MX1NJWkUpIHtcbiAgICB0cmF2ZXJzZUNvbnRleHRQb29sLnB1c2godHJhdmVyc2VDb250ZXh0KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICB2YXIgaW52b2tlQ2FsbGJhY2sgPSBmYWxzZTtcblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwpIHtcbiAgICBpbnZva2VDYWxsYmFjayA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHN3aXRjaCAoY2hpbGRyZW4uJCR0eXBlb2YpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGludm9rZUNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sodHJhdmVyc2VDb250ZXh0LCBjaGlsZHJlbixcbiAgICAvLyBJZiBpdCdzIHRoZSBvbmx5IGNoaWxkLCB0cmVhdCB0aGUgbmFtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBhbiBhcnJheVxuICAgIC8vIHNvIHRoYXQgaXQncyBjb25zaXN0ZW50IGlmIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gZ3Jvd3MuXG4gICAgbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZHJlbiwgMCkgOiBuYW1lU29GYXIpO1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gdm9pZCAwO1xuICB2YXIgbmV4dE5hbWUgPSB2b2lkIDA7XG4gIHZhciBzdWJ0cmVlQ291bnQgPSAwOyAvLyBDb3VudCBvZiBjaGlsZHJlbiBmb3VuZCBpbiB0aGUgY3VycmVudCBzdWJ0cmVlLlxuICB2YXIgbmV4dE5hbWVQcmVmaXggPSBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SIDogbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpKTtcbiAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAge1xuICAgICAgICAvLyBXYXJuIGFib3V0IHVzaW5nIE1hcHMgYXMgY2hpbGRyZW5cbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gPT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgICB3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIHVuc3VwcG9ydGVkIGFuZCB3aWxsIGxpa2VseSB5aWVsZCAnICsgJ3VuZXhwZWN0ZWQgcmVzdWx0cy4gQ29udmVydCBpdCB0byBhIHNlcXVlbmNlL2l0ZXJhYmxlIG9mIGtleWVkICcgKyAnUmVhY3RFbGVtZW50cyBpbnN0ZWFkLiVzJywgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtKCkpO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcCA9IHZvaWQgMDtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBhZGRlbmR1bSA9ICcnO1xuICAgICAge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQuJyArIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuU3RyaW5nID0gJycgKyBjaGlsZHJlbjtcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ09iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzJywgY2hpbGRyZW5TdHJpbmcgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbignLCAnKSArICd9JyA6IGNoaWxkcmVuU3RyaW5nLCBhZGRlbmR1bSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICAvLyBEbyBzb21lIHR5cGVjaGVja2luZyBoZXJlIHNpbmNlIHdlIGNhbGwgdGhpcyBibGluZGx5LiBXZSB3YW50IHRvIGVuc3VyZVxuICAvLyB0aGF0IHdlIGRvbid0IGJsb2NrIHBvdGVudGlhbCBmdXR1cmUgRVMgQVBJcy5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdvYmplY3QnICYmIGNvbXBvbmVudCAhPT0gbnVsbCAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdCBrZXlcbiAgICByZXR1cm4gZXNjYXBlKGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZChib29rS2VlcGluZywgY2hpbGQsIG5hbWUpIHtcbiAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jLFxuICAgICAgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG5cbiAgZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLmZvcmVhY2hcbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmNcbiAqIEBwYXJhbSB7Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCBmb3IgZm9yRWFjaENvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBnZXRQb29sZWRUcmF2ZXJzZUNvbnRleHQobnVsbCwgbnVsbCwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkLCB0cmF2ZXJzZUNvbnRleHQpO1xuICByZWxlYXNlVHJhdmVyc2VDb250ZXh0KHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQoYm9va0tlZXBpbmcsIGNoaWxkLCBjaGlsZEtleSkge1xuICB2YXIgcmVzdWx0ID0gYm9va0tlZXBpbmcucmVzdWx0LFxuICAgICAga2V5UHJlZml4ID0gYm9va0tlZXBpbmcua2V5UHJlZml4LFxuICAgICAgZnVuYyA9IGJvb2tLZWVwaW5nLmZ1bmMsXG4gICAgICBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcblxuXG4gIHZhciBtYXBwZWRDaGlsZCA9IGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG4gIGlmIChBcnJheS5pc0FycmF5KG1hcHBlZENoaWxkKSkge1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAobWFwcGVkQ2hpbGQgIT0gbnVsbCkge1xuICAgIGlmIChpc1ZhbGlkRWxlbWVudChtYXBwZWRDaGlsZCkpIHtcbiAgICAgIG1hcHBlZENoaWxkID0gY2xvbmVBbmRSZXBsYWNlS2V5KG1hcHBlZENoaWxkLFxuICAgICAgLy8gS2VlcCBib3RoIHRoZSAobWFwcGVkKSBhbmQgb2xkIGtleXMgaWYgdGhleSBkaWZmZXIsIGp1c3QgYXNcbiAgICAgIC8vIHRyYXZlcnNlQWxsQ2hpbGRyZW4gdXNlZCB0byBkbyBmb3Igb2JqZWN0cyBhcyBjaGlsZHJlblxuICAgICAga2V5UHJlZml4ICsgKG1hcHBlZENoaWxkLmtleSAmJiAoIWNoaWxkIHx8IGNoaWxkLmtleSAhPT0gbWFwcGVkQ2hpbGQua2V5KSA/IGVzY2FwZVVzZXJQcm92aWRlZEtleShtYXBwZWRDaGlsZC5rZXkpICsgJy8nIDogJycpICsgY2hpbGRLZXkpO1xuICAgIH1cbiAgICByZXN1bHQucHVzaChtYXBwZWRDaGlsZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICB2YXIgZXNjYXBlZFByZWZpeCA9ICcnO1xuICBpZiAocHJlZml4ICE9IG51bGwpIHtcbiAgICBlc2NhcGVkUHJlZml4ID0gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHByZWZpeCkgKyAnLyc7XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IGdldFBvb2xlZFRyYXZlcnNlQ29udGV4dChhcnJheSwgZXNjYXBlZFByZWZpeCwgZnVuYywgY29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIHJlbGVhc2VUcmF2ZXJzZUNvbnRleHQodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBNYXBzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLm1hcFxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXNcbiAqIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5jb3VudFxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCwgbnVsbCk7XG59XG5cbi8qKlxuICogRmxhdHRlbiBhIGNoaWxkcmVuIG9iamVjdCAodHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gKSBhbmRcbiAqIHJldHVybiBhbiBhcnJheSB3aXRoIGFwcHJvcHJpYXRlbHkgcmUta2V5ZWQgY2hpbGRyZW4uXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi50b2FycmF5XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCByZXN1bHQsIG51bGwsIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgY2hpbGQgaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuIGFuZCB2ZXJpZmllcyB0aGF0IHRoZXJlXG4gKiBpcyBvbmx5IG9uZSBjaGlsZCBpbiB0aGUgY29sbGVjdGlvbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLm9ubHlcbiAqXG4gKiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzXG4gKiBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGUgcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0b1xuICogYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmUgb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdEVsZW1lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gICFpc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgaWYgKGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAge1xuICAgICAgd2FybmluZyhjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gbnVsbCB8fCB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicsICdjcmVhdGVDb250ZXh0OiBFeHBlY3RlZCB0aGUgb3B0aW9uYWwgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgJyArICdmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBjYWxjdWxhdGVDaGFuZ2VkQml0cyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbnRleHQgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IGNhbGN1bGF0ZUNoYW5nZWRCaXRzLFxuICAgIF9kZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBfY3VycmVudFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgX2NoYW5nZWRCaXRzOiAwLFxuICAgIC8vIFRoZXNlIGFyZSBjaXJjdWxhclxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIENvbnN1bWVyOiBudWxsXG4gIH07XG5cbiAgY29udGV4dC5Qcm92aWRlciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfUFJPVklERVJfVFlQRSxcbiAgICBfY29udGV4dDogY29udGV4dFxuICB9O1xuICBjb250ZXh0LkNvbnN1bWVyID0gY29udGV4dDtcblxuICB7XG4gICAgY29udGV4dC5fY3VycmVudFJlbmRlcmVyID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0O1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkUmVmKHJlbmRlcikge1xuICB7XG4gICAgd2FybmluZyh0eXBlb2YgcmVuZGVyID09PSAnZnVuY3Rpb24nLCAnZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgd2FzIGdpdmVuICVzLicsIHJlbmRlciA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiByZW5kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSxcbiAgICByZW5kZXI6IHJlbmRlclxuICB9O1xufVxuXG52YXIgZGVzY3JpYmVDb21wb25lbnRGcmFtZSA9IGZ1bmN0aW9uIChuYW1lLCBzb3VyY2UsIG93bmVyTmFtZSkge1xuICByZXR1cm4gJ1xcbiAgICBpbiAnICsgKG5hbWUgfHwgJ1Vua25vd24nKSArIChzb3VyY2UgPyAnIChhdCAnICsgc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKSArICc6JyArIHNvdXJjZS5saW5lTnVtYmVyICsgJyknIDogb3duZXJOYW1lID8gJyAoY3JlYXRlZCBieSAnICsgb3duZXJOYW1lICsgJyknIDogJycpO1xufTtcblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAvLyBOb3RlOiBpdHMgdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgaWYgaXQncyBhIHBvbHlmaWxsLlxuICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0FTWU5DX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShmaWJlcikge1xuICB2YXIgdHlwZSA9IGZpYmVyLnR5cGU7XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lO1xuICB9XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gJ1JlYWN0RnJhZ21lbnQnO1xuICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICByZXR1cm4gJ1JlYWN0UG9ydGFsJztcbiAgICBjYXNlIFJFQUNUX0NBTExfVFlQRTpcbiAgICAgIHJldHVybiAnUmVhY3RDYWxsJztcbiAgICBjYXNlIFJFQUNUX1JFVFVSTl9UWVBFOlxuICAgICAgcmV0dXJuICdSZWFjdFJldHVybic7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmVhY3RFbGVtZW50VmFsaWRhdG9yIHByb3ZpZGVzIGEgd3JhcHBlciBhcm91bmQgYSBlbGVtZW50IGZhY3RvcnlcbiAqIHdoaWNoIHZhbGlkYXRlcyB0aGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBlbGVtZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gKiB1c2VkIG9ubHkgaW4gREVWIGFuZCBjb3VsZCBiZSByZXBsYWNlZCBieSBhIHN0YXRpYyB0eXBlIGNoZWNrZXIgZm9yIGxhbmd1YWdlc1xuICogdGhhdCBzdXBwb3J0IGl0LlxuICovXG5cbnZhciBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCA9IHZvaWQgMDtcbnZhciBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biA9IHZvaWQgMDtcblxudmFyIGdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKCkge307XG52YXIgZ2V0U3RhY2tBZGRlbmR1bSA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50ID0gbnVsbDtcblxuICBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biA9IGZhbHNlO1xuXG4gIGdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyNlbXB0eSc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGVsZW1lbnQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJyN0ZXh0JztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICByZXR1cm4gJ1JlYWN0LkZyYWdtZW50JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQudHlwZS5kaXNwbGF5TmFtZSB8fCBlbGVtZW50LnR5cGUubmFtZSB8fCAnVW5rbm93bic7XG4gICAgfVxuICB9O1xuXG4gIGdldFN0YWNrQWRkZW5kdW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YWNrID0gJyc7XG4gICAgaWYgKGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KSB7XG4gICAgICB2YXIgbmFtZSA9IGdldERpc3BsYXlOYW1lKGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KTtcbiAgICAgIHZhciBvd25lciA9IGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50Ll9vd25lcjtcbiAgICAgIHN0YWNrICs9IGRlc2NyaWJlQ29tcG9uZW50RnJhbWUobmFtZSwgY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQuX3NvdXJjZSwgb3duZXIgJiYgZ2V0Q29tcG9uZW50TmFtZShvd25lcikpO1xuICAgIH1cbiAgICBzdGFjayArPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKSB8fCAnJztcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAgaWYgKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShlbGVtZW50UHJvcHMpIHtcbiAgaWYgKGVsZW1lbnRQcm9wcyAhPT0gbnVsbCAmJiBlbGVtZW50UHJvcHMgIT09IHVuZGVmaW5lZCAmJiBlbGVtZW50UHJvcHMuX19zb3VyY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBzb3VyY2UgPSBlbGVtZW50UHJvcHMuX19zb3VyY2U7XG4gICAgdmFyIGZpbGVOYW1lID0gc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKTtcbiAgICB2YXIgbGluZU51bWJlciA9IHNvdXJjZS5saW5lTnVtYmVyO1xuICAgIHJldHVybiAnXFxuXFxuQ2hlY2sgeW91ciBjb2RlIGF0ICcgKyBmaWxlTmFtZSArICc6JyArIGxpbmVOdW1iZXIgKyAnLic7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlcmUncyBubyBrZXkgZXhwbGljaXRseSBzZXQgb24gZHluYW1pYyBhcnJheXMgb2YgY2hpbGRyZW4gb3JcbiAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlblxuICogdXBkYXRlcy5cbiAqL1xudmFyIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpIHtcbiAgdmFyIGluZm8gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcblxuICBpZiAoIWluZm8pIHtcbiAgICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/IHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTtcbiAgICBpZiAocGFyZW50TmFtZSkge1xuICAgICAgaW5mbyA9ICdcXG5cXG5DaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDwnICsgcGFyZW50TmFtZSArICc+Lic7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmZvO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC4gRXJyb3Igc3RhdHVzZXMgYXJlIGNhY2hlZCBzbyBhIHdhcm5pbmdcbiAqIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuXG4gIHZhciBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvID0gZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhwYXJlbnRUeXBlKTtcbiAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgIHJldHVybjtcbiAgfVxuICBvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10gPSB0cnVlO1xuXG4gIC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gIC8vIHByb3BlcnR5LCBpdCBtYXkgYmUgdGhlIGNyZWF0b3Igb2YgdGhlIGNoaWxkIHRoYXQncyByZXNwb25zaWJsZSBmb3JcbiAgLy8gYXNzaWduaW5nIGl0IGEga2V5LlxuICB2YXIgY2hpbGRPd25lciA9ICcnO1xuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIC8vIEdpdmUgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLlxuICAgIGNoaWxkT3duZXIgPSAnIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tICcgKyBnZXRDb21wb25lbnROYW1lKGVsZW1lbnQuX293bmVyKSArICcuJztcbiAgfVxuXG4gIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50ID0gZWxlbWVudDtcbiAge1xuICAgIHdhcm5pbmcoZmFsc2UsICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMgU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLiVzJywgY3VycmVudENvbXBvbmVudEVycm9ySW5mbywgY2hpbGRPd25lciwgZ2V0U3RhY2tBZGRlbmR1bSgpKTtcbiAgfVxuICBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCA9IG51bGw7XG59XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgZXZlcnkgZWxlbWVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhblxuICogYXJyYXkgd2l0aCBhbiBleHBsaWNpdCBrZXlzIHByb3BlcnR5IGRlZmluZWQsIG9yIGluIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB3aXRoIHZhbGlkIGtleSBwcm9wZXJ0eS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlIFN0YXRpY2FsbHkgcGFzc2VkIGNoaWxkIG9mIGFueSB0eXBlLlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIG5vZGUncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7XG4gIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gRW50cnkgaXRlcmF0b3JzIHVzZWQgdG8gcHJvdmlkZSBpbXBsaWNpdCBrZXlzLFxuICAgICAgLy8gYnV0IG5vdyB3ZSBwcmludCBhIHNlcGFyYXRlIHdhcm5pbmcgZm9yIHRoZW0gbGF0ZXIuXG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgdmFyIHN0ZXAgPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gZWxlbWVudCwgdmFsaWRhdGUgdGhhdCBpdHMgcHJvcHMgZm9sbG93IHRoZSBwcm9wVHlwZXMgZGVmaW5pdGlvbixcbiAqIHByb3ZpZGVkIGJ5IHRoZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENsYXNzID0gZWxlbWVudC50eXBlO1xuICBpZiAodHlwZW9mIGNvbXBvbmVudENsYXNzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuYW1lID0gY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZTtcbiAgdmFyIHByb3BUeXBlcyA9IGNvbXBvbmVudENsYXNzLnByb3BUeXBlcztcbiAgaWYgKHByb3BUeXBlcykge1xuICAgIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50ID0gZWxlbWVudDtcbiAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgZ2V0U3RhY2tBZGRlbmR1bSk7XG4gICAgY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQgPSBudWxsO1xuICB9IGVsc2UgaWYgKGNvbXBvbmVudENsYXNzLlByb3BUeXBlcyAhPT0gdW5kZWZpbmVkICYmICFwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93bikge1xuICAgIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICB3YXJuaW5nKGZhbHNlLCAnQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/JywgbmFtZSB8fCAnVW5rbm93bicpO1xuICB9XG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgd2FybmluZyhjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgJyArICdkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIGZyYWdtZW50LCB2YWxpZGF0ZSB0aGF0IGl0IGNhbiBvbmx5IGJlIHByb3ZpZGVkIHdpdGggZnJhZ21lbnQgcHJvcHNcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBmcmFnbWVudFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZnJhZ21lbnQpIHtcbiAgY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQgPSBmcmFnbWVudDtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyYWdtZW50LnByb3BzKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSAhPT0gJ2NoaWxkcmVuJyAmJiBrZXkgIT09ICdrZXknKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBwcm9wIGAlc2Agc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4gJyArICdSZWFjdC5GcmFnbWVudCBjYW4gb25seSBoYXZlIGBrZXlgIGFuZCBgY2hpbGRyZW5gIHByb3BzLiVzJywga2V5LCBnZXRTdGFja0FkZGVuZHVtKCkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGZyYWdtZW50LnJlZiAhPT0gbnVsbCkge1xuICAgIHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGF0dHJpYnV0ZSBgcmVmYCBzdXBwbGllZCB0byBgUmVhY3QuRnJhZ21lbnRgLiVzJywgZ2V0U3RhY2tBZGRlbmR1bSgpKTtcbiAgfVxuXG4gIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICB2YXIgdmFsaWRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpO1xuXG4gIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG4gIGlmICghdmFsaWRUeXBlKSB7XG4gICAgdmFyIGluZm8gPSAnJztcbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlSW5mbyA9IGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHByb3BzKTtcbiAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgaW5mbyArPSBzb3VyY2VJbmZvO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgIH1cblxuICAgIGluZm8gKz0gZ2V0U3RhY2tBZGRlbmR1bSgpIHx8ICcnO1xuXG4gICAgdmFyIHR5cGVTdHJpbmcgPSB2b2lkIDA7XG4gICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlU3RyaW5nID0gJ2FycmF5JztcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZVN0cmluZyA9IHR5cGVvZiB0eXBlO1xuICAgIH1cblxuICAgIHdhcm5pbmcoZmFsc2UsICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciAnICsgJ2J1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgJyArICdjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGVTdHJpbmcsIGluZm8pO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgLy8gVGhlIHJlc3VsdCBjYW4gYmUgbnVsbGlzaCBpZiBhIG1vY2sgb3IgYSBjdXN0b20gZnVuY3Rpb24gaXMgdXNlZC5cbiAgLy8gVE9ETzogRHJvcCB0aGlzIHdoZW4gdGhlc2UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIGFzIHRoZSB0eXBlIGFyZ3VtZW50LlxuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICAvLyBTa2lwIGtleSB3YXJuaW5nIGlmIHRoZSB0eXBlIGlzbid0IHZhbGlkIHNpbmNlIG91ciBrZXkgdmFsaWRhdGlvbiBsb2dpY1xuICAvLyBkb2Vzbid0IGV4cGVjdCBhIG5vbi1zdHJpbmcvZnVuY3Rpb24gdHlwZSBhbmQgY2FuIHRocm93IGNvbmZ1c2luZyBlcnJvcnMuXG4gIC8vIFdlIGRvbid0IHdhbnQgZXhjZXB0aW9uIGJlaGF2aW9yIHRvIGRpZmZlciBiZXR3ZWVuIGRldiBhbmQgcHJvZC5cbiAgLy8gKFJlbmRlcmluZyB3aWxsIHRocm93IHdpdGggYSBoZWxwZnVsIG1lc3NhZ2UgYW5kIGFzIHNvb24gYXMgdGhlIHR5cGUgaXNcbiAgLy8gZml4ZWQsIHRoZSBrZXkgd2FybmluZ3Mgd2lsbCBhcHBlYXIuKVxuICBpZiAodmFsaWRUeXBlKSB7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZWxlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmFjdG9yeVdpdGhWYWxpZGF0aW9uKHR5cGUpIHtcbiAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBjcmVhdGVFbGVtZW50V2l0aFZhbGlkYXRpb24uYmluZChudWxsLCB0eXBlKTtcbiAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTtcbiAgLy8gTGVnYWN5IGhvb2s6IHJlbW92ZSBpdFxuICB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbGlkYXRlZEZhY3RvcnksICd0eXBlJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSAnICsgJ2JlZm9yZSBwYXNzaW5nIGl0IHRvIGNyZWF0ZUZhY3RvcnkuJyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHtcbiAgICAgICAgICB2YWx1ZTogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsaWRhdGVkRmFjdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xvbmVFbGVtZW50V2l0aFZhbGlkYXRpb24oZWxlbWVudCwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gIHZhciBuZXdFbGVtZW50ID0gY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCBuZXdFbGVtZW50LnR5cGUpO1xuICB9XG4gIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICByZXR1cm4gbmV3RWxlbWVudDtcbn1cblxudmFyIFJlYWN0ID0ge1xuICBDaGlsZHJlbjoge1xuICAgIG1hcDogbWFwQ2hpbGRyZW4sXG4gICAgZm9yRWFjaDogZm9yRWFjaENoaWxkcmVuLFxuICAgIGNvdW50OiBjb3VudENoaWxkcmVuLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG5cbiAgY3JlYXRlUmVmOiBjcmVhdGVSZWYsXG4gIENvbXBvbmVudDogQ29tcG9uZW50LFxuICBQdXJlQ29tcG9uZW50OiBQdXJlQ29tcG9uZW50LFxuXG4gIGNyZWF0ZUNvbnRleHQ6IGNyZWF0ZUNvbnRleHQsXG4gIGZvcndhcmRSZWY6IGZvcndhcmRSZWYsXG5cbiAgRnJhZ21lbnQ6IFJFQUNUX0ZSQUdNRU5UX1RZUEUsXG4gIFN0cmljdE1vZGU6IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUsXG4gIHVuc3RhYmxlX0FzeW5jTW9kZTogUkVBQ1RfQVNZTkNfTU9ERV9UWVBFLFxuXG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbixcbiAgY2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnRXaXRoVmFsaWRhdGlvbixcbiAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeVdpdGhWYWxpZGF0aW9uLFxuICBpc1ZhbGlkRWxlbWVudDogaXNWYWxpZEVsZW1lbnQsXG5cbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuXG4gIF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOiB7XG4gICAgUmVhY3RDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuICAgIC8vIFVzZWQgYnkgcmVuZGVyZXJzIHRvIGF2b2lkIGJ1bmRsaW5nIG9iamVjdC1hc3NpZ24gdHdpY2UgaW4gVU1EIGJ1bmRsZXM6XG4gICAgYXNzaWduOiBfYXNzaWduXG4gIH1cbn07XG5cbntcbiAgX2Fzc2lnbihSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCwge1xuICAgIC8vIFRoZXNlIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gcHJvZHVjdGlvbi5cbiAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lOiBSZWFjdERlYnVnQ3VycmVudEZyYW1lLFxuICAgIC8vIFNoaW0gZm9yIFJlYWN0IERPTSAxNi4wLjAgd2hpY2ggc3RpbGwgZGVzdHJ1Y3R1cmVkIChidXQgbm90IHVzZWQpIHRoaXMuXG4gICAgLy8gVE9ETzogcmVtb3ZlIGluIFJlYWN0IDE3LjAuXG4gICAgUmVhY3RDb21wb25lbnRUcmVlSG9vazoge31cbiAgfSk7XG59XG5cblxuXG52YXIgUmVhY3QkMiA9IE9iamVjdC5mcmVlemUoe1xuXHRkZWZhdWx0OiBSZWFjdFxufSk7XG5cbnZhciBSZWFjdCQzID0gKCBSZWFjdCQyICYmIFJlYWN0ICkgfHwgUmVhY3QkMjtcblxuLy8gVE9ETzogZGVjaWRlIG9uIHRoZSB0b3AtbGV2ZWwgZXhwb3J0IGZvcm0uXG4vLyBUaGlzIGlzIGhhY2t5IGJ1dCBtYWtlcyBpdCB3b3JrIHdpdGggYm90aCBSb2xsdXAgYW5kIEplc3QuXG52YXIgcmVhY3QgPSBSZWFjdCQzWydkZWZhdWx0J10gPyBSZWFjdCQzWydkZWZhdWx0J10gOiBSZWFjdCQzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0O1xuICB9KSgpO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCB7QWNjb3VudFN0YXR1c30gZnJvbSAnLi4vc3JjL2luZGV4J1xuaW1wb3J0IHtuU1FMfSBmcm9tICduYW5vLXNxbCdcbmltcG9ydCBCYWxhbmNlVGFibGUgZnJvbSAnLi4vc3JjL2RiL2JhbGFuY2VUYWJsZSdcblxuQmFsYW5jZVRhYmxlLm9uQ29ubmVjdGVkKChyZXMpID0+IHtcbiAgcmV0dXJuIG5TUUwoKS5xdWVyeSgndXBzZXJ0Jywge1xuICAgIHVzZXJJZDogJ2FudG9uJywgYmFsYW5jZTogMjBcbiAgfSkuZXhlYygpXG59KVxuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxBY2NvdW50U3RhdHVzIC8+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pXG4iXSwic291cmNlUm9vdCI6IiJ9