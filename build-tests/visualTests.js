!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=125)}([function(e,t,n){(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(6);t.Promise="undefined"!=typeof window&&window.Promise?window.Promise:void 0!==e&&e.Promise?e.Promise:r.Promise,t._assign=function(e){return e?JSON.parse(JSON.stringify(e)):null},t.fastCHAIN=function(e,n){return new t.Promise(function(t,o){if(e&&e.length){var i=[],a=function(){i.length<e.length?n(e[i.length],i.length,function(e){i.push(e),r.setFast(a)}):t(i)};a()}else t([])})},t.fastRACE=function(e,n){return new t.Promise(function(t,r){if(e&&e.length){var o=!1,i=0,a=function(){i<e.length&&(n(e[i],i,function(e){o||(o=!0,t([e]))}),i++,a())};a()}else t([])})},t.fastALL=function(e,n){return t.Promise.all((e||[]).map(function(e,r){return new t.Promise(function(t,o){n(e,r,function(e){t(e)})})}))};var o="undefined"==typeof window?"":navigator.userAgent||"";t.isSafari=0!==o.length&&(/^((?!chrome|android).)*safari/i.test(o)||/iPad|iPhone|iPod/.test(o)&&!window.MSStream),t.isMSBrowser=0!==o.length&&(o.indexOf("MSIE ")>0||o.indexOf("Trident/")>0||o.indexOf("Edge/")>0),t.isAndroid=/Android/.test(o),t.random16Bits=function(){if("undefined"==typeof crypto)return Math.round(Math.random()*Math.pow(2,16));if(crypto.getRandomValues){var t=new Uint16Array(1);return crypto.getRandomValues(t),t[0]}return void 0!==e&&e._crypto.randomBytes?e._crypto.randomBytes(2).reduce(function(e,t){return t*e}):Math.round(Math.random()*Math.pow(2,16))},t.timeid=function(e){for(var n=Math.round((new Date).getTime()/(e?1:1e3)).toString();n.length<(e?13:10);)n="0"+n;return n+"-"+(t.random16Bits()+t.random16Bits()).toString(16)},t.intersect=function(e,t){return!(!e||!t)&&(!(!e.length||!t.length)&&(e||[]).filter(function(e){return-1!==(t||[]).indexOf(e)}).length>0)},t.uuid=function(){var e,n,r="";return[r,r,r,r,r,r,r,r].reduce(function(o,i,a){for(e=t.random16Bits(),n=3===a?4:4===a?(e%16&3|8).toString(16):r,e=e.toString(16);e.length<4;)e="0"+e;return o+([2,3,4,5].indexOf(a)>-1?"-":r)+(n+e).slice(0,4)},r)};var i={int:function(e){return e},uuid:t.uuid,timeId:function(){return t.timeid()},timeIdms:function(){return t.timeid(!0)}};t.hash=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return(t>>>0).toString(16)},t.generateID=function(e,t){return i[e]?i[e](t||1):""},t.cleanArgs=function(e,n){for(var r={},o=e.length;o--;){var i=e[o].split(":");i.length>1?r[i[0]]=t.cast(i[1],n[i[0]]||void 0):r[i[0]]=n[i[0]]||void 0}return r},t.isObject=function(e){return"[object Object]"===Object.prototype.toString.call(e)},t.cast=function(e,n){if("any"===e||"blob"===e)return n;var r=typeof n;if("undefined"===r||null===n)return n;var o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},i=function(e,n){switch(e){case"safestr":return i("string",n).replace(/[&<>"'`=\/]/gim,function(e){return o[e]});case"int":return"number"!==r||n%1!=0?parseInt(n||0):n;case"number":case"float":return"number"!==r?parseFloat(n||0):n;case"any[]":case"array":return Array.isArray(n)?n:[];case"uuid":case"timeId":case"timeIdms":case"string":return"string"!==r?String(n):n;case"object":case"obj":case"map":return t.isObject(n)?n:{};case"boolean":case"bool":return!0===n}return n},a=i(String(e||"").toLowerCase(),n);if(-1!==e.indexOf("[]")){var s=e.slice(0,e.lastIndexOf("[]"));return(n||[]).map(function(e){return t.cast(s,e)})}return void 0!==a?["int","float","number"].indexOf(e)>-1&&isNaN(a)?0:a:void 0},t.sortedInsert=function(e,n,r,o){return e.length?(e.splice(t.binarySearch(e,n),0,n),e):(e.push(n),e)},t.binarySearch=function(e,n,r,o){var i=e.length,a=r||0,s=void 0!==o?o:i-1;if(0===i)return 0;if(n>e[s])return s+1;if(n<e[a])return a;if(a>=s)return 0;var u=a+Math.floor((s-a)/2);return n<e[u]?t.binarySearch(e,n,a,u-1):n>e[u]?t.binarySearch(e,n,u+1,s):0},t.removeDuplicates=function(e){if(!e.length)return[];for(var t=[e[0]],n=1;n<e.length;n++)e[n]!==e[n-1]&&t.push(e[n]);return t},t.deepFreeze=function(e){return Object.getOwnPropertyNames(e||{}).forEach(function(n){var r=e[n];"object"==typeof r&&null!==r&&(e[n]=t.deepFreeze(r))}),Object.freeze(e)};var a={};t.objQuery=function(e,t,n){var r=function(e,t,n){return e[t]&&n?r(e,t+1,n[e[t]]):n},o=e+(n?"1":"0");if(a[o])return r(a[o],0,t);var i=[];if(i=e.indexOf("[")>-1?[].concat.apply([],e.split(".").map(function(e){return e.match(/([^\[]+)|\[([^\]]+)\]\[/gim)||e})).map(function(e){return e.replace(/\[|\]/gim,"")}):e.split("."),n){var s=i.shift()+"."+i.shift();i.unshift(s)}return a[o]=i,r(a[o],0,t)}}).call(this,n(17))},function(e,t){var n=e.exports={version:"2.5.5"};"number"==typeof __e&&(__e=n)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){e.exports=!n(12)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(13),o=n(46),i=n(29),a=Object.defineProperty;t.f=n(3)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n=0,r={},o=Array.prototype.slice,i="undefined"!=typeof window&&window.setImmediate?window.setImmediate:!(void 0===e||!e.setImmediate)&&e.setImmediate,a="undefined"!=typeof window&&window.postMessage&&window.addEventListener,s="undefined"!=typeof window&&window.Promise?window.Promise:!(void 0===e||!e.Promise)&&e.Promise,u=function(e){return e[0].apply(null,o.call(e,1))};a&&window.addEventListener("message",function(e){var t,n=e.data;"string"==typeof n&&0===n.indexOf("setMsg")&&(t=r[n])&&(delete r[n],u(t))});var l=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=n++,i="setMsg"+o;return r[i]=e,window.postMessage(i,"*"),o};t.setFast=i?function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i(function(){u(e)})}:s?function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];s.resolve().then(function(){u(e)})}:a?l:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];setTimeout(function(){u(e)},0)};var c=function(){},f=["R"],d=["F"],p=["P"],h=function(){function t(e){this._state=p,this._queue=[],this._outcome=void 0,e!==c&&b(this,e)}return t.doPolyFill=function(){void 0!==e&&(e.Promise||(e.Promise=this)),"undefined"!=typeof window&&(window.Promise||(window.Promise=this))},t.prototype.catch=function(e){return this.then(function(){},e)},t.prototype.then=function(e,n){if("function"!=typeof e&&this._state===d||"function"!=typeof n&&this._state===f)return this;var r=new t(c);this._state!==p?m(r,this._state===d?e:n,this._outcome):this._queue.push(new y(r,e,n));return r},t.resolve=function(e){return e instanceof this?e:v._resolve(new t(c),e)},t.reject=function(e){return v._reject(new t(c),e)},t.all=function(e){return new t(function(t,n){var r=[];if(e.length)for(var o=function(n,o,i){void 0!==i?r.push(i):r.push(o),r.length==e.length&&t(r)},i=function(t){e[t].then(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];o(0,e,void 0)}).catch(function(e){o(0,void 0,e)})},a=0;a<e.length;a++)i(a);else t([])})},t.race=function(e){var n,r=this,o=e.length,i=!1,a=-1,s=new t(c);if(!1!==Array.isArray(e))return this.reject(new TypeError);if(!o)return this.resolve([]);for(;++a<o;)n=e[a],r.resolve(n).then(function(e){i||(i=!0,v._resolve(s,e))},function(e){i||(i=!0,v._reject(s,e))});return s},t}();t.Promise=h;var y=function(){function e(e,t,n){this._promise=e,"function"==typeof t&&(this._onFulfilled=t,this._callFulfilled=this._otherCallFulfilled),"function"==typeof n&&(this._onRejected=n,this._callRejected=this._otherCallRejected)}return e.prototype._callFulfilled=function(e){v._resolve(this._promise,e)},e.prototype._otherCallFulfilled=function(e){m(this._promise,this._onFulfilled,e)},e.prototype._callRejected=function(e){v._reject(this._promise,e)},e.prototype._otherCallRejected=function(e){m(this._promise,this._onRejected,e)},e}();function m(e,n,r){t.setFast(function(){var t;try{t=n.apply(null,r)}catch(t){return v._reject(e,t)}return t===e?v._reject(e,new TypeError):v._resolve(e,t),null})}t._QueueItem=y;var v=function(){function e(){}return e._resolve=function(t,n){var r=_(g,n),o=r._value,i=-1,a=t._queue.length;if("error"===r._status)return e._reject(t,r._value);if(o)b(t,o);else for(t._state=d,t._outcome=n;++i<a;)t._queue[i]._callFulfilled(n);return t},e._reject=function(e,t){e._state=f,e._outcome=t;for(var n=-1,r=e._queue.length;++n<r;)e._queue[n]._callRejected(t);return e},e}();function g(e){var t=e&&e.then;return!e||"object"!=typeof e&&"function"!=typeof e||"function"!=typeof t?null:function(){t.apply(e,arguments)}}function b(e,t){var n=!1;function r(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];n||(n=!0,v._reject(e,t))}function o(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];n||(n=!0,v._resolve(e,t))}var i=_(function(){t(o,r)});"error"===i._status&&r(i._value)}function _(e,t){var n={_status:null,_value:null};try{n._value=e(t),n._status="success"}catch(e){n._status="error",n._value=e}return n}}).call(this,n(17))},function(e,t,n){var r=n(30)("wks"),o=n(16),i=n(2).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(91),o=n(32);e.exports=function(e){return r(o(e))}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(4),o=n(15);e.exports=n(3)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(2),o=n(1),i=n(47),a=n(10),s=n(5),u=function(e,t,n){var l,c,f,d=e&u.F,p=e&u.G,h=e&u.S,y=e&u.P,m=e&u.B,v=e&u.W,g=p?o:o[t]||(o[t]={}),b=g.prototype,_=p?r:h?r[t]:(r[t]||{}).prototype;for(l in p&&(n=t),n)(c=!d&&_&&void 0!==_[l])&&s(g,l)||(f=c?_[l]:n[l],g[l]=p&&"function"!=typeof _[l]?n[l]:m&&c?i(f,r):v&&_[l]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):y&&"function"==typeof f?i(Function.call,f):f,y&&((g.virtual||(g.virtual={}))[l]=f,e&u.R&&b&&!b[l]&&a(b,l,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(9);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(){this._sorted=[],this._indexOf={},this.ai=1,this.doAI=!1}return e.prototype.set=function(e){var t=this;if(this._sorted=e||[],this._indexOf={},this._sorted.forEach(function(e,n){t._indexOf[String(e)]=n}),this.doAI&&this._sorted.length){var n=this._sorted.length;this.ai=this._sorted[n-1]+1}},e.prototype.getLocation=function(e){var t=this.indexOf(e);return-1!==t?t:r.binarySearch(this._sorted,e)},e.prototype.add=function(e){if(this.doAI)parseInt(e)>=this.ai&&this.ai++,this._indexOf[String(e)]=this._sorted.length,this._sorted.push(e);else{var t=r.binarySearch(this._sorted,e);this._sorted.splice(t,0,e),this._indexOf[String(e)]=t;for(var n=t+1;n<this._sorted.length;n++)this._indexOf[String(this._sorted[n])]++}},e.prototype.keys=function(){return this._sorted},e.prototype.indexOf=function(e){return void 0!==this._indexOf[String(e)]?this._indexOf[String(e)]:-1},e.prototype.remove=function(e){var t=this._indexOf[String(e)];if(void 0!==t){delete this._indexOf[String(e)],this._sorted.splice(t,1);for(var n=t;n<this._sorted.length;n++)this._indexOf[String(this._sorted[n])]--}},e}();t.DatabaseIndex=o},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=n(64),a=n(63),s=n(62),u=n(0),l=n(61),c=n(53),f=1.41,d=["_util"],p=function(){function e(){this.version=f,this._onConnectedCallBacks=[];var e=this;e._actions={},e._views={},e.dataModels={},e._events=["*","change","delete","upsert","drop","select","error"],e._hasEvents={},e.tableNames=[],e.plugins=[],e.hasPK={},e.skipPurge={},e.toRowFns={},e.tablePKs={},e.toColFns={},e.toColRules={},e._randoms=[],e._randomPtr=0,e.hasAnyEvents=!1;for(var t=0;t<200;t++)e._randoms.push(u.random16Bits().toString(16));e._callbacks={},e._callbacks["*"]=new s.ReallySmallEvents,e.iB=new l.NanoSQLDefaultBackend;var n={models:{},actions:{},views:{},config:{},parent:this};e.iB.willConnect&&e.iB.willConnect(n,function(){e.iB.didConnect&&e.iB.didConnect(n,function(){})})}return e.prototype.toColumn=function(e){return this.toColFns[this.sTable]||(this.toColFns[this.sTable]={}),this.toColFns[this.sTable]=e,this},e.prototype.toRow=function(e){return this.toRowFns[this.sTable]||(this.toRowFns[this.sTable]={}),this.toRowFns[this.sTable]=e,this},e.prototype.fastRand=function(){return this._randomPtr++,this._randomPtr>=this._randoms.length&&(this._randomPtr=0),this._randoms[this._randomPtr]},e.prototype.table=function(e){return e&&(this.sTable=e),this},e.prototype.connect=function(){var e=this,t=this;return new u.Promise(function(n,r){var o={models:t.dataModels,actions:t._actions,views:t._views,config:t._config,parent:e};o.models[d[0]]=[{key:"key",type:"string",props:["pk()","ai()"]},{key:"value",type:"any"}],t._config&&t._config.history&&e.use(new c._NanoSQLHistoryPlugin(t._config.historyMode)),t._config&&!1===t._config.mode||e.use(new l.NanoSQLDefaultBackend),u.fastCHAIN(e.plugins,function(e,t,n){e.willConnect?e.willConnect(o,function(e){o=e,n()}):n()}).then(function(){e.dataModels=o.models,e._actions=o.actions,e._views=o.views,e._config=o.config,Object.keys(e.dataModels).forEach(function(t){var n=!1;e.dataModels[t]=e.dataModels[t].filter(function(e){return"*"!==e.key||"*"!==e.type||(n=!0,!1)}),e.skipPurge[t]=n}),e.plugins.forEach(function(t){t.didExec&&(e.pluginHasDidExec=!0)}),t.tableNames=Object.keys(e.dataModels);var r=function(){u.fastALL(e.plugins,function(e,t,n){e.didConnect?e.didConnect(o,function(){n()}):n()}).then(function(){e.isConnected=!0,e._onConnectedCallBacks.length&&e._onConnectedCallBacks.forEach(function(e){return e()}),n(t.tableNames)})},i=function(t){e.query("upsert",{key:"version",value:e.version}).manualExec({table:"_util"}).then(function(){t?e.extend("rebuild_idx").then(function(){r()}):r()})};e.query("select").where(["key","=","version"]).manualExec({table:"_util"}).then(function(e){e.length?e[0].value<=1.21?i(!0):e[0].value<f?i(!1):r():i(!0)})})})},e.prototype.getActions=function(e){return this._actions[e].map(function(e){return{name:e.name,args:e.args}})},e.prototype.getViews=function(e){return this._views[e].map(function(e){return{name:e.name,args:e.args}})},e.prototype.getConfig=function(){return this._config},e.prototype.avFilter=function(e){return this._AVMod=e,this},e.prototype.use=function(e){return this.plugins.push(e),this},e.prototype.on=function(e,t){var n=this,r=n.sTable,o=n._events.length,i=e.split(" ");if(Array.isArray(r))return this;for(n._callbacks[r]||(n._callbacks[r]=new s.ReallySmallEvents),o=i.length;o--;)-1!==n._events.indexOf(i[o])&&n._callbacks[r].on(i[o],t);return n._refreshEventChecker()},e.prototype.off=function(e,t){var n=this,r=e.split(" "),o=r.length,i=n.sTable;if(Array.isArray(i))return this;for(;o--;)-1!==n._events.indexOf(r[o])&&n._callbacks[i].off(r[o],t);return n._refreshEventChecker()},e.prototype._refreshEventChecker=function(){var e=this;return this._hasEvents={},Object.keys(this._callbacks).concat(["*"]).forEach(function(t){e._hasEvents[t]=e._events.reduce(function(n,r){return n+(e._callbacks[t]&&e._callbacks[t].eventListeners[r]?e._callbacks[t].eventListeners[r].length:0)},0)>0}),this.hasAnyEvents=!1,Object.keys(this._hasEvents).forEach(function(t){e.hasAnyEvents=e.hasAnyEvents||e._hasEvents[t]}),this},e.prototype.model=function(e,t,n){var r=this,o=this,i=o.sTable;if(Array.isArray(i))return this;o._callbacks[i]||(o._callbacks[i]=new s.ReallySmallEvents);var a=!1;if(!n){if(-1!==["string","safestr","timeId","timeIdms","uuid","int","float","number","array","map","bool","blob","any"].indexOf(i.replace(/\W/gim,""))||0===i.indexOf("_")||null!==i.match(/[\(\)\]\[\.]/g))throw Error("Invalid Table Name! https://docs.nanosql.io/setup/data-models");(e||[]).forEach(function(e){if(null!==e.key.match(/[\(\)\]\[\.]/g)||0===e.key.indexOf("_"))throw Error("Invalid Data Model! https://docs.nanosql.io/setup/data-models")})}return o.toColRules[i]={},(e||[]).forEach(function(e){e.props&&e.props.forEach(function(t){if(-1!==t.indexOf("from=>")&&-1!==t.indexOf("(")){var n=t.replace("from=>","").split("(").shift(),r=t.replace("from=>","").split("(").pop().replace(")","").split(",").map(function(e){return e.trim()});o.toColRules[i][e.key]=[n].concat(r)}if(0===t.indexOf("toColumn.")){n=t.replace(/toColumn\.(.*)\(.*\)/gim,"$1"),r=t.replace(/toColumn\..*\((.*)\)/gim,"$1").split(",").map(function(e){return e.trim()});o.toColRules[i][e.key]=[n].concat(r)}}),e.props&&u.intersect(["pk","pk()"],e.props)&&(r.tablePKs[i]=e.key,a=!0)}),this.hasPK[i]=a,a||(this.tablePKs[i]="_id_",e.unshift({key:"_id_",type:"uuid",props:["pk()"]})),o.dataModels[i]=e,o._views[i]=[],o._actions[i]=[],o},e.prototype.views=function(e){return Array.isArray(this.sTable)?this:(this._views[this.sTable]=e,this)},e.prototype.getView=function(e,t){return void 0===t&&(t={}),Array.isArray(this.sTable)?new u.Promise(function(e,t){return t()}):this._doAV("View",this._views[this.sTable],e,t)},e.prototype.actions=function(e){return Array.isArray(this.sTable)?this:(this._actions[this.sTable]=e,this)},e.prototype.doAction=function(e,t){return Array.isArray(this.sTable)?new u.Promise(function(e,t){return t()}):this._doAV("Action",this._actions[this.sTable],e,t)},e.prototype.queryFilter=function(e){return this.queryMod=e,this},e.prototype._doAV=function(e,t,n,r){var o=this,i=this,a=t.reduce(function(e,t){return t.name===n?t:e},null);return a?(i._activeAV=n,i._AVMod?new u.Promise(function(t,n){i._AVMod(o.sTable,e,i._activeAV||"",r,function(e){a.call(a.args?u.cleanArgs(a.args,e):{},i).then(t).catch(n)},function(e){n(e)})}):a.call(a.args?u.cleanArgs(a.args,r):{},i)):new u.Promise(function(e,t){return t("Action/View Not Found!")})},e.prototype.query=function(e,t){var n=this._activeAV;return this._activeAV=void 0,new i._NanoSQLQuery(this,this.sTable,e,t,n)},e.prototype.onConnected=function(e){this.isConnected?e():this._onConnectedCallBacks.push(e)},e.prototype.triggerEvent=function(e){var t=this;if(t._hasEvents["*"]||t._hasEvents[e.table]){if("*"===e.table)return this;o.setFast(function(){e.types.forEach(function(n){t._callbacks["*"].trigger(n,e,t),t._callbacks["*"].trigger("*",e,t),e.table&&t._callbacks[e.table]&&t._callbacks[e.table].trigger(n,e,t)})})}return t},e.prototype.default=function(e){var t={},n=this;return Array.isArray(n.sTable)?{}:(n.dataModels[n.sTable].forEach(function(n){t[n.key]=e&&e[n.key]?e[n.key]:n.default,void 0===t[n.key]&&(t[n.key]=u.cast(n.type,null))}),t)},e.prototype.rawDump=function(e){var t=this;return new u.Promise(function(n,o){var i={};u.fastCHAIN(t.plugins,function(t,n,o){t.dumpTables?t.dumpTables(e).then(function(e){i=r({},i,e),o(i)}):o()}).then(function(){n(i)})})},e.prototype.rawImport=function(e){var t=this;return new u.Promise(function(n,r){u.fastCHAIN(t.plugins,function(t,n,r){t.importTables?t.importTables(e).then(r):r()}).then(function(){n()})})},e.prototype.disconnect=function(){return u.fastCHAIN(this.plugins,function(e,t,n){e.willDisconnect?e.willDisconnect(n):n()})},e.prototype.doTransaction=function(e){var t=this,n=this,o=[],i=u.random16Bits().toString(16);return new u.Promise(function(s,l){n.plugins.length?u.fastCHAIN(n.plugins,function(e,t,n){e.transactionBegin?e.transactionBegin(i,n):n()}).then(function(){Array.isArray(n.sTable)||e(function(e){var t=e||n.sTable;return{query:function(e,n){return new a._NanoSQLTransactionQuery(e,n,t,o,i)}}},function(){var e=[];u.fastCHAIN(o,function(t,o,a){e.push(t.table),n.query(t.action,t.actionArgs).manualExec(r({},t,{table:t.table,transaction:!0,queryID:i})).then(a)}).then(function(r){u.fastCHAIN(t.plugins,function(e,t,n){e.transactionEnd?e.transactionEnd(i,n):n()}).then(function(){e.filter(function(e,t,n){return n.indexOf(e)===t}).forEach(function(e){0!==e.indexOf("_")&&n.triggerEvent({query:o[0],table:e,time:(new Date).getTime(),result:r,types:["transaction"],actionOrView:"",notes:[],transactionID:i,affectedRowPKS:[],affectedRows:[]})}),s(r)})})})}):l("Nothing to do, no plugins!")})},e.prototype.config=function(e){return this._config=e,this},e.prototype.extend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this;return new u.Promise(function(t,r){if(n.plugins.length){var o=e,i=[];u.fastCHAIN(n.plugins,function(e,t,n){e.extend?e.extend(function(e,t){o=e,i=t,n()},o,i):n()}).then(function(){t(i)})}else r("No plugins!")})},e.prototype.loadJS=function(e,t,n,r){var o=this;return n?this.doTransaction(function(n,r){t.forEach(function(t){n(e).query("upsert",t).exec()}),r()}):new u.Promise(function(n,i){u.fastCHAIN(t,function(n,i,a){r&&r(Math.round((i+1)/t.length*1e4)/100),o.query("upsert",n).manualExec({table:e}).then(a)}).then(function(e){n(e.map(function(e){return e.shift()}))})})},e.prototype.loadCSV=function(e,t,n,r,o){var i=this,a=[],s=t.split("\n").map(function(e,t){if(0!==t){var n={},o=e.match(/(,)|(["|\[|\{].*?["|\]|\}]|[^",\s]+)(?=\s*,|\s*$)/g)||[],i=!1;","===o[0]&&o.unshift("");for(var s=function(){var e=!1;if(o.forEach(function(t,n){e||","===t&&(void 0!==o[n+1]&&","!==o[n+1]||(e=!0,o.splice(n+1,0,"")))}),e)return"break";i=!0};!i;){if("break"===s())break}o=o.filter(function(e,t){return t%2==0});for(var u=a.length;u--;)1===o[u].indexOf("{")||1===o[u].indexOf("[")?o[u]=JSON.parse(o[u].slice(1,o[u].length-1).replace(/'/gm,'"')):0===o[u].indexOf('"')&&(o[u]=o[u].slice(1,o[u].length-1)),n[a[u]]=o[u];return r?r(n):n}a=e.split(",")}).filter(function(e){return e});return n?this.doTransaction(function(t,n){s.forEach(function(n){t(e).query("upsert",n).exec()}),n()}):new u.Promise(function(t,n){u.fastCHAIN(s,function(t,n,r){o&&o(Math.round((n+1)/s.length*1e4)/100),i.query("upsert",t).manualExec({table:e}).then(r)}).then(function(e){t(e.map(function(e){return e.shift()}))})})},e}();t.NanoSQLInstance=p,p.functions={COUNT:{type:"A",call:function(e,t,n){t(n&&"*"!==n?e.filter(function(e){return u.objQuery(n,e)}).length:e.length)}},MAX:{type:"A",call:function(e,t,n){if(e.length){var r=u.objQuery(n,e[0])||0;e.forEach(function(e){u.objQuery(n,e);u.objQuery(n,e)>r&&(r=u.objQuery(n,e))}),t(r)}else t(0)}},MIN:{type:"A",call:function(e,t,n){if(e.length){var r=u.objQuery(n,e[0])||0;e.forEach(function(e){var t=u.objQuery(n,e);t<r&&(r=t)}),t(r)}else t(0)}},AVG:{type:"A",call:function(e,t,n){t(e.reduce(function(e,t){return e+(u.objQuery(n,t)||0)},0)/e.length)}},SUM:{type:"A",call:function(e,t,n){t(e.reduce(function(e,t){return e+(u.objQuery(n,t)||0)},0))}},LOWER:{type:"S",call:function(e,t,n){t(e.map(function(e){return String(u.objQuery(n,e)).toLowerCase()}))}},UPPER:{type:"S",call:function(e,t,n){t(e.map(function(e){return String(u.objQuery(n,e)).toUpperCase()}))}},CAST:{type:"S",call:function(e,t,n,r){t(e.map(function(e){return u.cast(r,u.objQuery(n,e))}))}},ABS:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.abs(u.objQuery(n,e))}))}},CEIL:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.ceil(u.objQuery(n,e))}))}},POW:{type:"S",call:function(e,t,n,r){t(e.map(function(e){return Math.pow(u.objQuery(n,e),parseInt(r))}))}},ROUND:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.round(u.objQuery(n,e))}))}},SQRT:{type:"S",call:function(e,t,n){t(e.map(function(e){return Math.sqrt(u.objQuery(n,e))}))}}};var h=new p;t.nSQL=function(e){return h.table(e)},"undefined"!=typeof window&&(window["nano-sql"]={nSQL:t.nSQL,NanoSQLInstance:p})},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(2),o=n(1),i=n(27),a=n(21),s=n(4).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,n){t.f=n(7)},function(e,t,n){var r=n(4).f,o=n(5),i=n(7)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(41),o=n(23);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(13),o=n(92),i=n(23),a=n(31)("IE_PROTO"),s=function(){},u=function(){var e,t=n(45)("iframe"),r=i.length;for(t.style.display="none",n(87).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[i[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[a]=e):n=u(),void 0===t?n:o(n,t)}},function(e,t){e.exports={}},function(e,t){e.exports=!0},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(2),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var r=n(30)("keys"),o=n(16);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(33);r=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}}).apply(void 0,[t].concat(r))}},e.exports=r},function(e,t,n){"use strict";var r=function(e){};r=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")},e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,s,u],f=0;(l=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";e.exports=n(124)},function(e,t,n){var r=n(19),o=n(15),i=n(8),a=n(29),s=n(5),u=n(46),l=Object.getOwnPropertyDescriptor;t.f=n(3)?l:function(e,t){if(e=i(e),t=a(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(41),o=n(23).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(5),o=n(8),i=n(90)(!1),a=n(31)("IE_PROTO");e.exports=function(e,t){var n,s=o(e),u=0,l=[];for(n in s)n!=a&&r(s,n)&&l.push(n);for(;t.length>u;)r(s,n=t[u++])&&(~i(l,n)||l.push(n));return l}},function(e,t,n){e.exports=n(10)},function(e,t,n){"use strict";var r=n(27),o=n(11),i=n(42),a=n(10),s=n(26),u=n(93),l=n(22),c=n(48),f=n(7)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,y,m,v){u(n,t,h);var g,b,_,w=function(e){if(!d&&e in S)return S[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},x=t+" Iterator",k="values"==y,C=!1,S=e.prototype,T=S[f]||S["@@iterator"]||y&&S[y],E=T||w(y),I=y?k?w("entries"):E:void 0,O="Array"==t&&S.entries||T;if(O&&(_=c(O.call(new e)))!==Object.prototype&&_.next&&(l(_,x,!0),r||"function"==typeof _[f]||a(_,f,p)),k&&T&&"values"!==T.name&&(C=!0,E=function(){return T.call(this)}),r&&!v||!d&&!C&&S[f]||a(S,f,E),s[t]=E,s[x]=p,y)if(g={values:k?E:w("values"),keys:m?E:w("keys"),entries:I},v)for(b in g)b in S||i(S,b,g[b]);else o(o.P+o.F*(d||C),t,g);return g}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(97)),o=a(n(82)),i="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function a(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof o.default&&"symbol"===i(r.default)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":i(e)}},function(e,t,n){var r=n(9),o=n(2).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){e.exports=!n(3)&&!n(12)(function(){return 7!=Object.defineProperty(n(45)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(104);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(5),o=n(49),i=n(31)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var r=n(32);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";var r=n(35),o=n(34),i=n(123),a={};e.exports=function(e,t,n,s,u){for(var l in e)if(e.hasOwnProperty(l)){var c;try{r("function"==typeof e[l],"%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.",s||"React class",n,l,typeof e[l]),c=e[l](t,l,s,n,null,i)}catch(e){c=e}if(o(!c||c instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",s||"React class",n,l,typeof c),c instanceof Error&&!(c.message in a)){a[c.message]=!0;var f=u?u():"";o(!1,"Failed %s type: %s%s",n,c.message,null!=f?f:"")}}}},function(e,t,n){"use strict";var r={};Object.freeze(r),e.exports=r},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(s[a[c]]=n[a[c]])}}return s}},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=["_hist","_hist_ptr","_id"],a=function(){function e(e){this.historyModeArgs=e,this._tablePkKeys={},this._tablePkTypes={},this._tableKeys={}}return e.prototype.willConnect=function(e,t){var n=this;this.parent=e.parent;var a={};Object.keys(e.models).forEach(function(t){if(0!==t.indexOf("_")){var r=o._assign(e.models[t]).map(function(e){return e.props&&o.intersect(["pk","pk()"],e.props)&&(n._tablePkKeys[t]=e.key,n._tablePkTypes[t]=e.type,n._tableKeys[t]={}),delete e.props,delete e.default,e});r.unshift({key:"_id",type:"timeIdms",props:["pk()"]}),a["_"+t+"__hist_rows"]=r,a["_"+t+"__hist_idx"]=[{key:"id",type:n._tablePkTypes[t],props:["pk()"]},{key:"histRows",type:"timeIdms[]"},{key:"histPtr",type:"number"}]}});var s="string"!=typeof this.historyModeArgs,u=[{key:"id",type:"timeIdms",props:["pk()"]},{key:"table",type:"string"},{key:"keys",type:"any[]"}],l=[{key:"id",type:"timeIdms",props:["pk()"]},{key:"ptr",type:"int"}];"database"!==this.historyModeArgs&&this.historyModeArgs?("database"!==this.historyModeArgs||s)&&(this.historyModes={},s?this.historyModes=o._assign(this.historyModeArgs):Object.keys(this._tablePkKeys).forEach(function(e){n.historyModes[e]=n.historyModeArgs}),Object.keys(this.historyModes).forEach(function(e){"table"===n.historyModes[e]&&(a["_"+e+"__hist"]=u,a["_"+e+"__hist_ptr"]=l)})):(a[i[0]]=u,a[i[1]]=l),e.models=r({},e.models,a),t(e)},e.prototype._histTable=function(e){return e?this.historyModes?"table"===this.historyModes[e]?"_"+e+"__hist":null:"_hist":"__null"},e.prototype._generateHistoryPointers=function(e,t){var n=this,r=this._histTable(e);r?this.parent.query("select").manualExec({table:r+"_ptr"}).then(function(i){i.length?t():n.parent.query("upsert",{id:o.timeid(!0),table:e,ptr:0}).manualExec({table:r+"_ptr"}).then(t)}):t()},e.prototype.didConnect=function(e,t){var n=this,r=function(){o.fastALL(Object.keys(n._tableKeys),function(e,t,r){n.parent.extend("idx","_"+e+"__hist_idx").then(function(t){t.forEach(function(t){n._tableKeys[e][t]=!0}),n.historyModes?n._generateHistoryPointers(e,r):r()})}).then(t)};this.historyModes?r():this.parent.query("select").manualExec({table:"_hist_ptr"}).then(function(e){e.length?r():n.parent.query("upsert",{id:o.timeid(!0),table:"",ptr:0}).manualExec({table:"_hist_ptr"}).then(r)})},e.prototype._purgeRowHistory=function(e,t,n,r){var i=this,a="_"+e+"__hist_rows",s="_"+e+"__hist_idx";o.fastALL(t,function(t,n,u){i.parent.query("select").where(["id","=",t]).manualExec({table:s}).then(function(n){if(n.length){var l=Object.isFrozen(n[0])?o._assign(n[0]):n[0],c=[];if(r)c=c.concat(l.histRows.filter(function(e){return-1!==e})),l.histPtr=0,l.histRows=[];else{for(;l.histPtr--;)c.push(l.histRows.shift());l.histPtr=0}c.length?i.parent.query("upsert",l).comment("History Purge").where(["id","=",t]).manualExec({table:s}).then(function(){i.parent.query("delete").comment("History Purge").where(["_id","IN",c]).manualExec({table:a}).then(function(){r?i.parent.query("select").where([i._tablePkKeys[e],"=",t]).manualExec({table:e}).then(function(n){i._unshiftSingleRow(e,["change"],t,n[0],!1,u)}):u()})}):u()}else u()})}).then(n)},e.prototype._purgeTableHistory=function(e,t,n){var r=this;this.parent.query("select").manualExec({table:e+"_ptr"}).then(function(i){var a=Object.isFrozen(i[0])?o._assign(i[0]):i[0];if(n||a.ptr>0){var s=r.parent.query("select");n||s.range(-1*a.ptr,0),s.manualExec({table:e}).then(function(i){if(i.length){var s={};i.forEach(function(e){s[e.table]||(s[e.table]=[]),s[e.table]=s[e.table].concat(e.keys)}),o.fastALL(Object.keys(s),function(e,t,o){r._purgeRowHistory(e,s[e],o,n)}).then(function(){r.parent.query("delete").comment("History Purge").where(["id","IN",i.map(function(e){return e.id})]).manualExec({table:e}).then(function(){a.ptr=0,r.parent.query("upsert",a).comment("History Purge").where(["id","=",a.id]).manualExec({table:e+"_ptr"}).then(t)})})}else t()})}else t()})},e.prototype._purgeParentHistory=function(e,t,n){if(this.historyModes){var r=this._histTable(e);r?this._purgeTableHistory(r,n):this._purgeRowHistory(e,t,n)}else this._purgeTableHistory("_hist",n)},e.prototype._purgeAllHistory=function(e,t,n){if(this.historyModes){var r=this._histTable(e);r?this._purgeTableHistory(r,n,!0):this._purgeRowHistory(e,[t],n,!0)}else this._purgeTableHistory("_hist",n,!0)},e.prototype.didExec=function(e,t){var n=this;e.table&&0!==e.table.indexOf("_")&&e.types.indexOf("change")>-1&&-1===e.query.comments.indexOf("History Write")?this._purgeParentHistory(e.table,e.affectedRowPKS,function(){o.fastALL(e.affectedRows,function(t,r,o){var i=t[n._tablePkKeys[e.table]];n._tableKeys[e.table][i]?n._unshiftSingleRow(e.table,e.types,i,t,!1,function(e){o(i)}):(n._tableKeys[e.table][i]=!0,n._unshiftSingleRow(e.table,e.types,i,t,!0,function(t){n.parent.query("upsert",{id:i,histRows:[t,-1],histPtr:0}).manualExec({table:"_"+e.table+"__hist_idx"}).then(function(){o(i)})}))}).then(function(r){n._unshiftParent(e,r,t)})}):t(e)},e.prototype._unshiftParent=function(e,t,n){var r=this._histTable(e.table);r?this.parent.query("upsert",{id:o.timeid(!0),table:e.table,keys:t}).manualExec({table:r}).then(function(){n(e)}):n(e)},e.prototype._unshiftSingleRow=function(e,t,n,i,a,s){var u=this,l="_"+e+"__hist_idx",c=o.timeid(!0),f=function(e){u.parent.query("select").where(["id","=",n]).manualExec({table:l}).then(function(t){var r=Object.isFrozen(t[0])?o._assign(t[0]):t[0];r.histRows.unshift(e),u.parent.query("upsert",r).where(["id","=",n]).manualExec({table:l}).then(function(){s(e)})})};t.indexOf("delete")>-1||t.indexOf("drop")>-1?f(-1):this.parent.query("upsert",r({_id:c},i)).manualExec({table:"_"+e+"__hist_rows"}).then(function(){a?s(c):f(c)})},e.prototype.extend=function(e,t,n){if("hist"===t[0]){var r=t[1],o=t[2],i=t[3];switch(r){case"<":case">":this._shiftHistory(r,o,i,function(n){e(t,[n])});break;case"?":this._queryHistory(o,i,function(n){e(t,n)});break;case"rev":this._getRevisionHistory(o,i,function(n){e(t,n)});break;case"clear":this._purgeAllHistory(o,i,function(){e(t,n)})}}else e(t,n)},e.prototype._getRevisionHistory=function(e,t,n){var r=this,a="_"+e+"__hist_idx";this.parent.query("select").where(["id","=",t]).manualExec({table:a}).then(function(t){var a=t[0].histRows.filter(function(e){return-1!==e});r.parent.query("select").where(["_id","IN",a]).manualExec({table:"_"+e+"__hist_rows"}).then(function(e){var r={};e.forEach(function(e){r[e[i[2]]]=Object.isFrozen(e)?o._assign(e):e,delete r[e[i[2]]][i[2]]}),n([{pointer:t[0].histRows.length-t[0].histPtr-1,revisions:t[0].histRows.reverse().map(function(e){return-1===e?null:r[e]})}])})})},e.prototype._getTableHistory=function(e,t){var n=this;this.parent.extend("idx.length",e).then(function(r){n.parent.query("select").manualExec({table:e+"_ptr"}).then(function(e){e.length?t([r,r-e[0].ptr]):t([0,0])})})},e.prototype._queryHistory=function(e,t,n){if(this.historyModes){var r=this._histTable(e);if(r){if(!e)throw Error("Need a table to query this history!");this._getTableHistory(r,n)}else{if(!t)throw Error("Need a row primary key to query this history!");var o="_"+e+"__hist_idx";this.parent.query("select").where(["id","=",t]).manualExec({table:o}).then(function(e){var t=e[0];n([t.histRows.length,t.histRows.length-t.histPtr-1])})}}else this._getTableHistory("_hist",function(e){n(e)})},e.prototype._shiftTableHistory=function(e,t,n){var r=this;this.parent.query("select").manualExec({table:t+"_ptr"}).then(function(i){var a=o._assign(i[0]);a.ptr+="<"===e?1:-1,a.ptr<0&&(a.ptr=0),r.parent.extend("idx.length",t).then(function(s){a.ptr>s&&(a.ptr=s),i[0].ptr!==a.ptr?r.parent.query("select").range(-1,"<"===e?i[0].ptr:a.ptr).manualExec({table:t}).then(function(i){r.parent.query("upsert",a).manualExec({table:t+"_ptr"}).then(function(){o.fastALL(i[0].keys,function(t,n,o){r._shiftRowHistory(e,i[0].table,t,o)}).then(function(e){n(e.indexOf(!0)>-1)})})}):n(!1)})})},e.prototype._shiftRowHistory=function(e,t,n,r){var i=this,a=function(e){i.parent.query("upsert",e).where([i._tablePkKeys[t],"=",n]).manualExec({table:"_"+t+"__hist_idx"}).then(function(){r(!0)})};this.parent.query("select").where([this._tablePkKeys[t],"=",n]).manualExec({table:"_"+t+"__hist_idx"}).then(function(s){var u=o._assign(s[0]);if(u.histPtr+="<"===e?1:-1,u.histPtr<0&&(u.histPtr=0),u.histPtr>u.histRows.length-1&&(u.histPtr=u.histRows.length-1),u.histPtr!==s[0].histPtr){var l=u.histRows[u.histPtr];-1===l?i.parent.query("delete").comment("History Write").where([i._tablePkKeys[t],"=",n]).manualExec({table:t}).then(function(){a(u)}):i.parent.query("select").where(["_id","=",l]).manualExec({table:"_"+t+"__hist_rows"}).then(function(e){i.parent.query("upsert",e[0]).comment("History Write").manualExec({table:t}).then(function(){a(u)})})}else r(!1)})},e.prototype._shiftHistory=function(e,t,n,r){if(this.historyModes){var o=this._histTable(t);if(o){if(!t)throw Error("Need a table to change this history!");this._shiftTableHistory(e,o,r)}else{if(!n)throw Error("Need a row primary key to change this history!");this._shiftRowHistory(e,t,n,r)}}else this._shiftTableHistory(e,"_hist",r)},e}();t._NanoSQLHistoryPlugin=a},function(e,t,n){(function(e){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=n(0),a=n(14),s=function(t){e._fs.existsSync(t)&&(e._fs.readdirSync(t).forEach(function(n){var r=t+"/"+n;e._fs.statSync(r).isDirectory()?s(r):e._fs.unlinkSync(r)}),e._fs.rmdirSync(t))},u=function(){function t(e,t,n){this.path=e,this.writeCache=t,this.readCache=n,this._pkKey={},this._pkType={},this._dbIndex={},this._levelDBs={},this._isPKnum={}}return t.prototype.connect=function(t){var n=this;i.fastALL(Object.keys(this._dbIndex),function(t,r,o){var i=[];n._levelDBs[t].createKeyStream().on("data",function(r){i.push(n._isPKnum[t]?new e._Int64BE(r).toNumber():r)}).on("end",function(){i.length&&n._dbIndex[t].set(i),o()})}).then(t)},t.prototype.disconnect=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t._levelDBs[e].close(r)}).then(function(){e()})},t.prototype.setID=function(t){this._id=t,this._path=(this.path||".")+"/db_"+this._id,e._fs.existsSync(this._path)||e._fs.mkdirSync(this._path)},t.prototype.makeTable=function(t,n){var r=this;this._dbIndex[t]=new a.DatabaseIndex,this._levelDBs[t]=e._levelup(e._leveldown(e._path.join(this._path,t)),{cacheSize:1024*(this.readCache||32)*1024,writeBufferSize:1024*(this.writeCache||32)*1024}),n.forEach(function(e){e.props&&i.intersect(["pk","pk()"],e.props)&&(r._pkType[t]=e.type,r._pkKey[t]=e.key,r._isPKnum[t]=-1!==["int","number","float"].indexOf(e.type)),e.props&&i.intersect(["ai","ai()"],e.props)&&i.intersect(["pk","pk()"],e.props)&&"int"===e.type&&(r._dbIndex[t].doAI=!0)})},t.prototype.write=function(t,n,o,a){if(!(n=n||i.generateID(this._pkType[t],this._dbIndex[t].ai)))throw Error("Can't add a row without a primary key!");-1===this._dbIndex[t].indexOf(n)&&this._dbIndex[t].add(n);var s,u=r({},o,((s={})[this._pkKey[t]]=n,s));this._levelDBs[t].put(this._isPKnum[t]?new e._Int64BE(n).toBuffer():n,JSON.stringify(u),function(e){if(e)throw Error(e);a(u)})},t.prototype.delete=function(t,n,r){-1!==this._dbIndex[t].indexOf(n)&&this._dbIndex[t].remove(n),this._levelDBs[t].del(this._isPKnum[t]?new e._Int64BE(n).toBuffer():n,function(e){if(e)throw Error(e);r()})},t.prototype.read=function(t,n,r){-1!==this._dbIndex[t].indexOf(n)?this._levelDBs[t].get(this._isPKnum[t]?new e._Int64BE(n).toBuffer():n,function(e,t){if(e)throw Error(e);r(JSON.parse(t))}):r(null)},t.prototype.rangeRead=function(t,n,r,i,a,s){var u=this._dbIndex[t].keys(),l=-1===[typeof i,typeof a].indexOf("undefined"),c=l?[i,a]:[0,u.length-1],f=[],d=s&&l?i:u[c[0]],p=s&&l?a:u[c[1]];this._levelDBs[t].createValueStream({gte:this._isPKnum[t]?new e._Int64BE(d).toBuffer():d,lte:this._isPKnum[t]?new e._Int64BE(p).toBuffer():p}).on("data",function(e){f.push(JSON.parse(e))}).on("end",function(){var e=c[0]||0,t=0,i=function(){t<f.length?n(f[t],e,function(){e++,++t%500==0?o.setFast(i):i()}):r()};i()})},t.prototype.drop=function(e,t){var n=this;i.fastALL(this._dbIndex[e].keys(),function(t,r,o){n._levelDBs[e].del(t,o)}).then(function(){var r=new a.DatabaseIndex;r.doAI=n._dbIndex[e].doAI,n._dbIndex[e]=r,t()})},t.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},t.prototype.destroy=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,function(){t._levelDBs[e].close(r)})}).then(function(){s(t._path),e()})},t}();t._LevelStore=u}).call(this,n(17))},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=n(0),a=n(14),s=function(){function e(e){this._pkKey={},this._pkType={},this._dbIndex={},this._size=1e3*(e||0)*1e3}return e.prototype.setID=function(e){this._id=e},e.prototype.connect=function(e){var t=this;this._db=window.openDatabase(this._id,"1.0",this._id,this._size||i.isAndroid?5e6:1),i.fastALL(Object.keys(this._pkKey),function(e,n,r){t._sql(!0,"CREATE TABLE IF NOT EXISTS "+e+" (id BLOB PRIMARY KEY UNIQUE, data TEXT)",[],function(){t._sql(!1,"SELECT id FROM "+e,[],function(n){for(var o=[],i=0;i<n.rows.length;i++)o.push(n.rows.item(i).id);o=o.sort(),t._dbIndex[e].set(o),r()})})}).then(e)},e.prototype._chkTable=function(e){if(-1===Object.keys(this._pkType).indexOf(e))throw Error("No table "+e+" found!");return e},e.prototype.makeTable=function(e,t){var n=this;this._dbIndex[e]=new a.DatabaseIndex,t.forEach(function(t){t.props&&t.props.indexOf("pk")>-1&&(n._pkType[e]=t.type,n._pkKey[e]=t.key),t.props&&t.props.indexOf("ai")>-1&&t.props.indexOf("pk")>-1&&"int"===t.type&&(n._dbIndex[e].doAI=!0)})},e.prototype._sql=function(e,t,n,r){var o=function(e){e.executeSql(t,n,function(e,t){r(t)},function(e,r){return console.error(t,n,r),!1})};e?this._db.transaction(o):this._db.readTransaction(o)},e.prototype.write=function(e,t,n,o){if(!(t=t||i.generateID(this._pkType[e],this._dbIndex[e].ai)))throw new Error("Can't add a row without a primary key!");var a,s,u=!1;if(-1===this._dbIndex[e].indexOf(t)&&(u=!0,this._dbIndex[e].add(t)),u){var l=r({},n,((a={})[this._pkKey[e]]=t,a));this._sql(!0,"INSERT into "+this._chkTable(e)+" (id, data) VALUES (?, ?)",[t,JSON.stringify(l)],function(e){o(l)})}else{var c=r({},n,((s={})[this._pkKey[e]]=t,s));this._sql(!0,"UPDATE "+this._chkTable(e)+" SET data = ? WHERE id = ?",[JSON.stringify(c),t],function(){o(c)})}},e.prototype.delete=function(e,t,n){-1!==this._dbIndex[e].indexOf(t)&&this._dbIndex[e].remove(t),this._sql(!0,"DELETE FROM "+this._chkTable(e)+" WHERE id = ?",[t],function(){n()})},e.prototype.read=function(e,t,n){this._sql(!1,"SELECT data FROM "+this._chkTable(e)+" WHERE id = ?",[t],function(e){e.rows.length?n(JSON.parse(e.rows.item(0).data)):n(void 0)})},e.prototype.batchRead=function(e,t,n){this._sql(!1,"SELECT data from "+this._chkTable(e)+" WHERE id IN ("+t.map(function(e){return"?"}).join(", ")+") ORDER BY id",t,function(e){for(var t=e.rows.length,r=[];t--;)r.unshift(JSON.parse(e.rows.item(t).data));n(r)})},e.prototype.rangeRead=function(e,t,n,r,i,a){var s=this,u=this._dbIndex[e].keys(),l=-1===[typeof r,typeof i].indexOf("undefined"),c=l?[r,i]:[];if(u.length){a&&l&&(c=c.map(function(t){return s._dbIndex[e].getLocation(t)}));var f=c[0]||0,d=[],p=c[0],h="SELECT data from "+this._chkTable(e);if(c.length){for(u[p];p<=c[1];)d.push(u[p]),p++;h+=" WHERE id IN ("+d.map(function(e){return"?"}).join(", ")+")"}h+=" ORDER BY id",this._sql(!1,h,d,function(e){var r=0,i=function(){e.rows.length>r?t(JSON.parse(e.rows.item(r).data),f,function(){f++,++r%500==0?o.setFast(i):i()}):n()};i()})}else n()},e.prototype.drop=function(e,t){var n=new a.DatabaseIndex;n.doAI=this._dbIndex[e].doAI,this._dbIndex[e]=n,this._sql(!0,"DELETE FROM "+this._chkTable(e),[],function(e){t()})},e.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},e.prototype.destroy=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,r)}).then(e)},e}();t._WebSQLStore=s},function(module,exports,__webpack_require__){var __assign=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(exports,"__esModule",{value:!0});var lie_ts_1=__webpack_require__(6),utilities_1=__webpack_require__(0),db_idx_1=__webpack_require__(14),_evalContext=function(source,context){var compiled=eval("(function("+Object.keys(context).join(", ")+") {"+source+"})");return compiled.apply(context,Object.keys(context).map(function(e){return context[e]}))},_IndexedDBStore=function(){function e(e){this._worker='function o(r){this.go=function(t){var o=0;r&&r.length||t([]),r.forEach(function(e,n){e(function(){++o===r.length&&t([])})})}}var s={db:null,store:function(e,n,t){var o=s.db.transaction(e,n);t(o,o.objectStore(e),function(e,n){return function(){postMessage({do:e,args:n})}})},init:function(){addEventListener("message",function(e){var n=e.data;s[n.do]&&s[n.do](n.args)},!1)},setup:function(n){var e=indexedDB.open(n.id,1),t=!1,a={};e.onupgradeneeded=function(e){t=!0,s.db=e.target.result,Object.keys(n.pkKeys).forEach(function(e){s.db.createObjectStore(e,{keyPath:n.pkKeys[e]}),a[e]=[]})},e.onsuccess=function(e){if(s.db=e.target.result,t)postMessage({do:"rdy",args:a});else{new o(Object.keys(n.pkKeys).map(function(t){return function(n){var e,o,r;e=t,o=function(e){a[t]=e,n()},r=[],s.store(e,"readonly",function(e,n,t){n.openCursor().onsuccess=function(e){var n=e.target.result;n&&(r.push(n.key),n.continue())},e.oncomplete=function(){o(r)}})}})).go(function(){postMessage({do:"rdy",args:a})})}}},write:function(o){s.store(o.table,"readwrite",function(e,n,t){n.put(o.row),e.oncomplete=t("write_"+o.id,null)})},read:function(r){s.store(r.table,"readonly",function(e,n,t){var o=n.get(r.pk);o.onsuccess=function(){postMessage({do:"read_"+r.id,args:o.result})}})},readRange:function(a){s.store(a.table,"readonly",function(e,n,t){var o=[],r=-1===a.range.indexOf(void 0)?n.openCursor(IDBKeyRange.bound(a.range[0],a.range[1])):n.openCursor();e.oncomplete=t("readRange_"+a.id+"_done",o),r.onsuccess=function(e){var n=e.target.result;n&&(o.push(n.value),n.continue())}})},delete:function(o){s.store(o.table,"readwrite",function(e,n,t){e.oncomplete=t("delete_"+o.id,!0),e.onerror=t("delete_"+o.id,!1),"_clear_"===o.pk?n.clear():n.delete(o.pk)})}};s.init();',this._pkKey={},this._pkType={},this._dbIndex={},this._waitingCBs={},this._useWorker=e}return e.prototype.connect=function(e){var t=this;if(this._useWorker)this._w=new Worker(window.URL.createObjectURL(new Blob([this._worker]))),this._w.addEventListener("message",function(e){t._handleWWMessage(e.data.do,e.data.args)});else{var n=[];_evalContext(this._worker,{postMessage:function(e){t._handleWWMessage(e.do,e.args)},addEventListener:function(e,t){n.push(t)}}),this._w={addEventListener:null,postMessage:function(e,t){n.forEach(function(t){t({data:e})})}}}this._waitingCBs.rdy=function(n){Object.keys(n).forEach(function(e){t._dbIndex[e].set(n[e])}),e()},this._w.postMessage({do:"setup",args:{pkKeys:this._pkKey,id:this._id}})},e.prototype.setID=function(e){this._id=e},e.prototype._handleWWMessage=function(e,t){this._waitingCBs[e]&&(this._waitingCBs[e](t),delete this._waitingCBs[e])},e.prototype.makeTable=function(e,t){var n=this;this._dbIndex[e]=new db_idx_1.DatabaseIndex,t.forEach(function(t){t.props&&utilities_1.intersect(["pk","pk()"],t.props)&&(n._pkType[e]=t.type,n._pkKey[e]=t.key,t.props&&utilities_1.intersect(["ai","ai()"],t.props)&&("int"===t.type||"number"===t.type)&&(n._dbIndex[e].doAI=!0))})},e.prototype.write=function(e,t,n,r){if(!(t=t||utilities_1.generateID(this._pkType[e],this._dbIndex[e].ai)))throw new Error("Can't add a row without a primary key!");-1===this._dbIndex[e].indexOf(t)&&this._dbIndex[e].add(t);var o,i=utilities_1.uuid(),a=__assign({},n,((o={})[this._pkKey[e]]=t,o));this._waitingCBs["write_"+i]=function(e){r(a)},this._w.postMessage({do:"write",args:{table:e,id:i,row:a}})},e.prototype.delete=function(e,t,n){-1!==this._dbIndex[e].indexOf(t)&&this._dbIndex[e].remove(t);var r=utilities_1.uuid();this._waitingCBs["delete_"+r]=function(e){n()},this._w.postMessage({do:"delete",args:{table:e,id:r,pk:t}})},e.prototype.read=function(e,t,n){var r=utilities_1.uuid();-1!==this._dbIndex[e].indexOf(t)?(this._waitingCBs["read_"+r]=function(e){n(e)},this._w.postMessage({do:"read",args:{table:e,id:r,pk:t}})):n(null)},e.prototype.rangeRead=function(e,t,n,r,o,i){var a=this,s=this._dbIndex[e].keys(),u=-1===[typeof r,typeof o].indexOf("undefined"),l=u?[r,o]:[0,s.length-1];if(s.length){var c=utilities_1.uuid(),f=[],d=l[0],p=0;this._waitingCBs["readRange_"+c+"_done"]=function(e){delete a._waitingCBs["readRange_"+c],f=e;var r=function(){d<=l[1]?t(f[p],d,function(){d++,++p%500==0?lie_ts_1.setFast(r):r()}):n()};r()},this._w.postMessage({do:"readRange",args:{table:e,id:c,range:i&&u?l:l.map(function(e){return s[e]})}})}else n()},e.prototype.drop=function(e,t){var n=new db_idx_1.DatabaseIndex;n.doAI=this._dbIndex[e].doAI,this._dbIndex[e]=n;var r=utilities_1.uuid();this._waitingCBs["delete_"+r]=function(e){t()},this._w.postMessage({do:"delete",args:{table:e,id:r,pk:"_clear_"}})},e.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},e.prototype.destroy=function(e){var t=this;utilities_1.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,r)}).then(e)},e}();exports._IndexedDBStore=_IndexedDBStore},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),i=n(0),a=n(14),s=function(){function e(e){this._pkKey={},this._pkType={},this._rows={},this._dbIndex={},this._ls=e||!1}return e.prototype.connect=function(e){e()},e.prototype.setID=function(e){this._id=e},e.prototype.makeTable=function(e,t){var n=this;this._rows[e]={},this._dbIndex[e]=new a.DatabaseIndex,t.forEach(function(t){if(t.props&&i.intersect(["pk","pk()"],t.props)&&(n._pkType[e]=t.type,n._pkKey[e]=t.key),t.props&&i.intersect(["pk","pk()"],t.props)&&i.intersect(["ai","ai()"],t.props)&&"int"===t.type&&(n._dbIndex[e].doAI=!0),n._ls){var r=localStorage.getItem(n._id+"*"+e+"_idx");r&&n._dbIndex[e].set(JSON.parse(r))}})},e.prototype.write=function(e,t,n,o){if(!(t=t||i.generateID(this._pkType[e],this._dbIndex[e].ai)))throw new Error("Can't add a row without a primary key!");if(-1===this._dbIndex[e].indexOf(t)&&(this._dbIndex[e].add(t),this._ls&&localStorage.setItem(this._id+"*"+e+"_idx",JSON.stringify(this._dbIndex[e].keys()))),this._ls){var a=r({},n,((s={})[this._pkKey[e]]=t,s));localStorage.setItem(this._id+"*"+e+"__"+t,JSON.stringify(a)),o(a)}else{a=r({},n,((u={})[this._pkKey[e]]=t,u));this._rows[e][t]=i.deepFreeze(a),o(a)}var s,u},e.prototype.delete=function(e,t,n){-1!==this._dbIndex[e].indexOf(t)&&(this._dbIndex[e].remove(t),this._ls&&localStorage.setItem(this._id+"*"+e+"_idx",JSON.stringify(this._dbIndex[e].keys()))),this._ls?localStorage.removeItem(this._id+"*"+e+"__"+t):delete this._rows[e][t],n()},e.prototype.read=function(e,t,n){if(this._ls){var r=localStorage.getItem(this._id+"*"+e+"__"+t);n(r?JSON.parse(r):void 0)}else n(this._rows[e][t])},e.prototype.rangeRead=function(e,t,n,r,i,a){var s=this,u=this._dbIndex[e].keys(),l=-1===[typeof r,typeof i].indexOf("undefined"),c=l?[r,i]:[0,u.length-1];if(u.length){a&&l&&(c=c.map(function(t){return s._dbIndex[e].getLocation(t)}));var f=c[0],d=0,p=function(){f++,++d%500==0?o.setFast(h):h()},h=function(){if(f<=c[1])if(s._ls){var r=localStorage.getItem(s._id+"*"+e+"__"+u[f]);t(r?JSON.parse(r):void 0,f,p)}else t(s._rows[e][u[f]],f,p);else n()};h()}else n()},e.prototype.drop=function(e,t){var n=this;this._ls?(localStorage.setItem(this._id+"*"+e+"_idx",JSON.stringify([])),this._dbIndex[e].keys().forEach(function(t){localStorage.removeItem(n._id+"*"+e+"__"+t)})):this._rows[e]={};var r=new a.DatabaseIndex;r.doAI=this._dbIndex[e].doAI,this._dbIndex[e]=r,t()},e.prototype.getIndex=function(e,t,n){n(t?this._dbIndex[e].keys().length:this._dbIndex[e].keys())},e.prototype.destroy=function(e){var t=this;i.fastALL(Object.keys(this._dbIndex),function(e,n,r){t.drop(e,r)}).then(e)},e}();t._SyncStore=s},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="$",r=function(){function e(t){this._trie=e._create(t)}return e.prototype.getIndex=function(){return this._trie},e.prototype.setIndex=function(e){this._trie=e},e.prototype.addWord=function(t){return t.toLowerCase().split("").reduce(function(t,n,r,o){return e._append(t,n,r,o)},this._trie),this},e.prototype.removeWord=function(t){var r=e._checkPrefix(this._trie,t),o=r.prefixFound,i=r.prefixNode;return o&&delete i[n],this},e.prototype.getWords=function(){return e._recursePrefix(this._trie,"")},e.prototype.getPrefix=function(t){if(t=t.toLowerCase(),!this._isPrefix(t))return[];var n=e._checkPrefix(this._trie,t).prefixNode;return e._recursePrefix(n,t)},e.prototype._isPrefix=function(t){return e._checkPrefix(this._trie,t).prefixFound},e._append=function(e,t,r,o){return e[t]=e[t]||{},e=e[t],r===o.length-1&&(e[n]=1),e},e._checkPrefix=function(e,t){return{prefixFound:t.toLowerCase().split("").every(function(t,n){return!!e[t]&&(e=e[t])}),prefixNode:e}},e._create=function(t){return(t||[]).reduce(function(t,n){return n.toLowerCase().split("").reduce(e._append,t),t},{})},e._recursePrefix=function(t,r,o){void 0===o&&(o=[]);var i=r;for(var a in t)a===n&&(o.push(i),i=""),e._recursePrefix(t[a],r+a,o);return o.sort()},e}();t.Trie=r},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(58),i=n(0),a=n(57),s=n(56),u=n(55),l=n(54),c=function(){function e(e,t){if(this._tableNames=[],this._nsql=e,this._mode=t.persistent?"PERM":t.mode||"TEMP",this._id=t.id,this._size=t.size||5,this.adapters=[],this.models={},this.tableInfo={},this._trieIndexes={},this._tableNames=[],this._doCache=t.cache||!0,this._cache={},this._cacheKeys={},this.adapters[0]={adapter:null,waitForWrites:!0},"string"==typeof this._mode)switch("PERM"===this._mode&&(this._mode=this._detectStorageMethod()||this._mode),this._mode){case"IDB":this.adapters[0].adapter=new s._IndexedDBStore(!1);break;case"IDB_WW":this.adapters[0].adapter=new s._IndexedDBStore(!0);break;case"WSQL":this.adapters[0].adapter=new u._WebSQLStore(this._size);break;case"LS":this.adapters[0].adapter=new a._SyncStore(!0);break;case"LVL":this.adapters[0].adapter=new l._LevelStore(t.dbPath,t.writeCache,t.readCache);break;case"TEMP":this.adapters[0].adapter=new a._SyncStore(!1)}else this.adapters[0].adapter=this._mode}return e.prototype.init=function(e,t){var n=this;this._id||(this._id=i.hash(JSON.stringify(e)).toString()),this.models=this._createSecondaryIndexTables(e),this._tableNames=Object.keys(this.models),this.adapters.forEach(function(e){e.adapter.setID(n._id)}),this._tableNames.forEach(function(t){n._newTable(t,e[t])}),this._relFromTable={},this._relToTable={},this._relationColumns={},this._columnsAreTables={},this._tableNames.forEach(function(e){n.tableInfo[e]._viewTables=Object.keys(n.tableInfo).reduce(function(t,r){return r===e?t:(-1!==Object.keys(n.tableInfo[r]._views).indexOf(e)&&t.push({table:r,column:n.tableInfo[r]._views[e].pkColumn}),t)},[]);var t=n.models[e].length;n._relFromTable[e]={},n._relationColumns[e]=[],n._relToTable[e]=[],n._columnsAreTables[e]={};for(var r=function(){var r=n.models[e][t];if(-1!==n._tableNames.indexOf(r.type.replace("[]",""))){var o="";n._columnsAreTables[e][r.key]={_toTable:r.type.replace("[]",""),_thisType:-1===r.type.indexOf("[]")?"single":"array"},r.props&&(r.props.forEach(function(e){-1!==e.indexOf("ref=>")&&(o=e.replace("ref=>","")),0===e.indexOf("orm(")&&(o=e.replace(/orm\((.*)\)/gim,"$1"))}),o&&(n._hasORM=!0,n._relationColumns[e].push(r.key),n._relFromTable[e][r.key]={_toTable:r.type.replace("[]",""),_toColumn:o.replace("[]",""),_toType:-1===o.indexOf("[]")?"single":"array",_thisType:-1===r.type.indexOf("[]")?"single":"array"}))}};t--;)r()}),Object.keys(this._relFromTable).forEach(function(e){Object.keys(n._relFromTable[e]).forEach(function(t){var r=n._relFromTable[e][t];n._relToTable[r._toTable].push({_thisColumn:r._toColumn,_thisType:r._toType,_fromTable:e,_fromColumn:t,_fromType:r._thisType})})}),i.fastALL(this.adapters,function(e,t,r){e.adapter.connect(function(){e.adapter.setNSQL&&e.adapter.setNSQL(n._nsql),r()})}).then(function(){i.fastALL(Object.keys(n._trieIndexes),function(e,t,r){var o=n._trieIndexes[e];Object.keys(o).length?i.fastALL(Object.keys(o),function(t,r,o){var i="_"+e+"_idx_"+t;n.adapters[0].adapter.getIndex(i,!1,function(r){r.forEach(function(r){n._trieIndexes[e][t].addWord(String(r))}),o()})}).then(r):r()}).then(function(){t(n.models)})})},e.prototype._invalidateCache=function(e,t){var n=this;this._doCache&&Object.keys(this._cacheKeys[e]).forEach(function(r){for(var o=t.length,i=!0;o--&&i;)n._cacheKeys[e][r][t[o]]&&(delete n._cache[e][r],delete n._cacheKeys[e][r],i=!1)})},e.prototype.rebuildIndexes=function(e,t){var n=this,r=(new Date).getTime();i.fastALL(Object.keys(this.tableInfo),function(t,r,o){if("_ALL_"!==e&&e!==t||0===t.indexOf("_"))o();else{var a=n.tableInfo[t]._secondaryIndexes;i.fastALL(a,function(e,r,o){var i="_"+t+"_idx_"+e;n._drop(i,o)}).then(function(){var e=n.tableInfo[t]._pk,r={};a.forEach(function(e){r[e]={}}),n._read(t,function(t,n,o){t[e]?(a.forEach(function(n){t[n]&&(r[n][t[n]]||(r[n][t[n]]=[]),r[n][t[n]].push(t[e]))}),o(!1)):o(!1)},function(){i.fastALL(a,function(e,o,a){var s="_"+t+"_idx_"+e;i.fastALL(Object.keys(r[e]),function(t,o,i){n.adapterWrite(s,t,{id:t,rows:r[e][t].sort()},i)}).then(a)}).then(function(){o()})})})}}).then(function(){t((new Date).getTime()-r)})},e.prototype._secondaryIndexKey=function(e){return i.isObject(e)||Array.isArray(e)?JSON.stringify(e).substr(0,12):"number"==typeof e?e:String(e).substr(0,32)},e.prototype._detectStorageMethod=function(){if("undefined"==typeof window)return"LVL";if(i.isSafari)return"WSQL";if(i.isMSBrowser)return"undefined"!=typeof indexedDB?"IDB":"LS";if(-1===[typeof Worker,typeof Blob,typeof indexedDB].indexOf("undefined")&&window.URL&&window.URL.createObjectURL)try{var e=new Worker(window.URL.createObjectURL(new Blob(["var t = 't';"])));e.postMessage(""),e.terminate();return indexedDB.open("1234",1),indexedDB.deleteDatabase("1234"),"IDB_WW"}catch(e){if("undefined"!=typeof indexedDB)return"IDB"}return"LS"},e.prototype._secondaryIndexRead=function(e,t,n,r){var o=this;this.adapters[0].adapter.read("_"+e+"_idx_"+t,this._secondaryIndexKey(n),function(t){void 0!==t&&null!==t?o._read(e,t.rows||[],r):r([])})},e.prototype._rangeRead=function(e,t,n,r,o){var i=[];this.adapters[0].adapter.rangeRead(e,function(e,t,n){i.push(e),n()},function(){o(i)},t,n,r)},e.prototype._read=function(e,t,n){var r=this;if(Array.isArray(t)){var o=this.adapters[0].adapter.batchRead;o?o.apply(this.adapters[0].adapter,[e,t,n]):i.fastALL(t,function(t,n,o){r.adapters[0].adapter.read(e,t,o)}).then(function(e){n(e.filter(function(e){return e}))})}else{var a=[];"function"!=typeof t||this.adapters[0].adapter.rangeRead(e,function(e,n,r){t(e,n,function(t){t&&a.push(e),r()})},function(){n(a)})}},e.prototype._trieRead=function(e,t,n,r){var o=this,a=this._trieIndexes[e][t].getPrefix(n);i.fastALL(a,function(n,r,i){o._secondaryIndexRead(e,t,n,i)}).then(function(e){r([].concat.apply([],e))})},e.prototype._clearSecondaryIndexes=function(e,t,n,r,o){var a=this;i.fastALL(this.tableInfo[e]._secondaryIndexes.filter(function(e){return-1===r.indexOf(e)}),function(r,o,s){var u=a._secondaryIndexKey(n[r]),l="_"+e+"_idx_"+r;a.adapters[0].adapter.read(l,u,function(e){if(e){var n=e.rows.indexOf(t);if(-1!==n){var r=e?Object.isFrozen(e)?i._assign(e):e:{id:null,rows:[]};r.rows.splice(n,1),r.rows.sort(),r.rows=i.removeDuplicates(r.rows),a.adapterWrite(l,r.id,r,s)}else s()}else s()})}).then(o)},e.prototype._setSecondaryIndexes=function(e,t,n,r,o){var a=this;i.fastALL(this.tableInfo[e]._secondaryIndexes.filter(function(e){return-1===r.indexOf(e)}),function(r,o,s){var u=a._secondaryIndexKey(n[r]);if(u){a._trieIndexes[e][r]&&a._trieIndexes[e][r].addWord(String(n[r]));var l="_"+e+"_idx_"+r;a.adapters[0].adapter.read(l,u,function(e){var n=e?Object.isFrozen(e)?i._assign(e):e:{id:u,rows:[]};n.rows.push(t),n.rows.sort(),n.rows=i.removeDuplicates(n.rows),a.adapterWrite(l,u,n,s)})}else s()}).then(o)},e.prototype._write=function(e,t,n,o,i){var a,s=this;if(n){var u=r({},n,o,((a={})[this.tableInfo[e]._pk]=t,a)),l=Object.keys(u).filter(function(e){return u[e]===n[e]});this.tableInfo[e]._secondaryIndexes.length?this._clearSecondaryIndexes(e,t,n,l,function(){s._setSecondaryIndexes(e,t,u,l,function(){s.adapterWrite(e,t,u,i)})}):this.adapterWrite(e,t,u,i)}else this.adapterWrite(e,t,o,function(t){s.tableInfo[e]._secondaryIndexes.length?s._setSecondaryIndexes(e,t[s.tableInfo[e]._pk],o,[],function(){i(t)}):i(t)})},e.prototype._delete=function(e,t,n){var r=this;if(!t)throw new Error("Can't delete without a primary key!");this.adapters[0].adapter.read(e,t,function(o){r._clearSecondaryIndexes(e,t,o,[],function(){r.adapterDelete(e,t,function(){n(o)})})})},e.prototype._drop=function(e,t){var n=this;i.fastALL(this.tableInfo[e]._secondaryIndexes,function(t,r,o){n.adapterDrop("_"+e+"_idx_"+t,o)}).then(function(){n._trieIndexes[e]={},n.tableInfo[e]._trieColumns.forEach(function(t){n._trieIndexes[e][t]=new o.Trie([])}),n.adapterDrop(e,t)})},e.prototype._createSecondaryIndexTables=function(e){return Object.keys(e).forEach(function(t){var n=!1,r=!1;if(e[t].forEach(function(o){o.props&&i.intersect(["pk","pk()"],o.props)&&(n=!0),o.props&&i.intersect(["trie","idx","idx()","trie()"],o.props)&&(r=!0,e["_"+t+"_idx_"+o.key]=[{key:"id",type:-1!==["number","float","int"].indexOf(o.type)?o.type:"string",props:["pk"]},{key:"rows",type:"any[]"}])}),r&&!n)throw new Error("Tables with secondary indexes must have a primary key!")}),e},e.prototype._newTable=function(e,t){var n=this;this.tableInfo[e]={_pk:"",_pkType:"",_keys:[],_defaults:[],_secondaryIndexes:[],_trieColumns:[],_name:e,_views:{},_viewTables:[]},this._cache[e]={},this._cacheKeys[e]={},this._trieIndexes[e]={},this.adapters.forEach(function(n){n.adapter.makeTable(e,t)});for(var r=this.models[e].length,a=function(){var t=s.models[e][r];if(s.tableInfo[e]._keys.unshift(t.key),s.tableInfo[e]._defaults[r]=t.default,t.props&&t.props.length){var a=!1;t.props.forEach(function(r){if(-1!==r.indexOf("from=>")){n._hasViews=!0;var o=t.type;"from=>GHOST"!==r&&"from=>LIVE"!==r&&(o=r.replace("from=>","").split(".").shift()),n.tableInfo[e]._views[o]||(n.tableInfo[e]._views[o]={pkColumn:"",mode:"",columns:[]}),"from=>GHOST"===r||"from=>LIVE"===r?(a=!0,n.tableInfo[e]._views[o].pkColumn=t.key,n.tableInfo[e]._views[o].mode=r.replace("from=>","")):n.tableInfo[e]._views[o].columns.push({thisColumn:t.key,otherColumn:r.replace("from=>","").split(".").pop()})}}),i.intersect(["pk","pk()"],t.props)&&(s.tableInfo[e]._pk=t.key,s.tableInfo[e]._pkType=t.type),(i.intersect(["trie","idx","idx()","trie()"],t.props)||a)&&s.tableInfo[e]._secondaryIndexes.push(t.key),i.intersect(["trie","trie()"],t.props)&&(s.tableInfo[e]._trieColumns.push(t.key),s._trieIndexes[e][t.key]=new o.Trie([]))}},s=this;r--;)a();return e},e.prototype.adapterWrite=function(e,t,n,r,o){var a;i.fastALL(this.adapters,function(r,o,i){r.waitForWrites?r.adapter.write(e,t,n,function(e){a=e,i()}):(i(),r.adapter.write(e,t,n,function(e){}))}).then(function(){r(a)}).catch(function(e){o&&o(e)})},e.prototype.adapterDelete=function(e,t,n,r){i.fastALL(this.adapters,function(n,r,o){n.waitForWrites?n.adapter.delete(e,t,function(){o()}):(o(),n.adapter.delete(e,t,function(){}))}).then(function(){n()}).catch(function(e){r&&r(e)})},e.prototype.adapterDrop=function(e,t,n){i.fastALL(this.adapters,function(t,n,r){t.waitForWrites?t.adapter.drop(e,function(){r()}):(r(),t.adapter.drop(e,function(){}))}).then(function(){t()}).catch(function(e){n&&n(e)})},e}();t._NanoSQLStorage=c},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(18),i=n(0),a={select:function(e,t){e._select(t)},upsert:function(e,t){e._upsert(t)},delete:function(e,t){e._delete(t)},drop:function(e,t){e._drop(t)},"show tables":function(e,t){e._query.result=Object.keys(e._store.tableInfo),t(e._query)},describe:function(e,t){"string"==typeof e._query.table?(e._query.result=i._assign(e._store.models[e._query.table]),t(e._query)):t(e._query)}},s=function(){function e(e){this._store=e}return e.prototype.doQuery=function(e,t){this._query=e,this._isInstanceTable=Array.isArray(e.table),a[e.action](this,t)},e.prototype._getRows=function(e){this._isInstanceTable?new c(this._query).getRows(e):new l(this._query,this._store,function(t){e(t.filter(function(e){return e}))})},e.prototype._setCache=function(e){var t=this;this._store._cache[this._query.table][this._hash]=e,this._store._cacheKeys[this._query.table][this._hash]={},e.forEach(function(e){t._store._cacheKeys[t._query.table][t._hash][e[t._store.tableInfo[t._query.table]._pk]]=!0})},e.prototype._select=function(e){var t=this;this._hash=i.hash(JSON.stringify(r({},this._query,{queryID:null})));var n=!this._query.join&&!this._query.orm&&this._store._doCache&&!Array.isArray(this._query.table);this._getRows(function(r){["having","orderBy","offset","limit","actionArgs","groupBy","orm","join"].filter(function(e){return t._query[e]}).length?new u(t._query,t._store)._executeQueryArguments(r,function(o){n&&t._setCache(r),t._query.result=o,e(t._query)}):(n&&t._setCache(r),t._query.result=r,e(t._query))})},e.prototype._updateORMRows=function(e,t,n,r,o){var a=this;this._store.tableInfo[e._fromTable]._pk;this._store._read(e._fromTable,t,function(t){i.fastALL(t,function(t,o,s){var u=Object.isFrozen(t)?i._assign(t):t;if("array"===e._fromType){u[e._fromColumn]=u[e._fromColumn]||[];var l=u[e._fromColumn].indexOf(r);n?-1===l?u[e._fromColumn].push(r):s():-1!==l?u[e._fromColumn].splice(l,1):s(),u[e._fromColumn].sort()}else u[e._fromColumn]=n?r:null;a._store._nsql.query("upsert",u).comment("_orm_skip").manualExec({table:e._fromTable}).then(s)}).then(o)})},e.prototype._syncORM=function(e,t,n,r){var o=this;if(this._store._hasORM){var a=this._store._relToTable[this._query.table];if(-1===this._query.comments.indexOf("_orm_skip"))if(a&&a.length){for(var s=Math.max(t.length,n.length),u=[];s--;)u.push(" ");i.fastCHAIN(u,function(r,s,u){i.fastALL(a,function(r,a,u){var l,c;switch(e){case"del":var f=t[s][o._store.tableInfo[o._query.table]._pk],d="array"===r._thisType?t[s][r._thisColumn]||[]:[t[s][r._thisColumn]].filter(function(e){return e});o._updateORMRows(r,d,!1,f,u);break;case"add":var p=n[s][o._store.tableInfo[o._query.table]._pk];if(t[s])if(l=t[s][r._thisColumn],c=n[s][r._thisColumn],Array.isArray(l)&&Array.isArray(c)?l.length===c.length&&l.filter(function(e,t){return e!==c[t]}).length>0:l===c)u();else if("array"===r._thisType){var h=(n[s][r._thisColumn]||[]).filter(function(e){return-1===(t[s][r._thisColumn]||[]).indexOf(e)}),y=(t[s][r._thisColumn]||[]).filter(function(e){return-1===(n[s][r._thisColumn]||[]).indexOf(e)});i.fastALL([h,y],function(e,t,n){o._updateORMRows(r,e,0===t,p,n)}).then(u)}else{var m=function(){null!==n[s][r._thisColumn]&&void 0!==n[s][r._thisColumn]?o._updateORMRows(r,[n[s][r._thisColumn]],!0,p,u):u()};null!==t[s][r._thisColumn]&&void 0!==t[s][r._thisColumn]?o._updateORMRows(r,[t[s][r._thisColumn]],!1,p,m):m()}else{var v="array"===r._thisType?n[s][r._thisColumn]||[]:[n[s][r._thisColumn]].filter(function(e){return e});v&&v.length?o._updateORMRows(r,v,!0,p,u):u()}}}).then(u)}).then(r)}else r();else r()}else r()},e.prototype._updateRowViews=function(e,t,n){var r=this;this._store._hasViews?null!==e&&void 0!==e?i.fastALL(Object.keys(this._store.tableInfo[this._query.table]._views),function(n,o,i){var a=r._store.tableInfo[r._query.table]._views[n].pkColumn;if(void 0!==e[a]){if(e[a]!==t[a])return null===e[a]?(r._store.tableInfo[r._query.table]._views[n].columns.forEach(function(t){e[t.thisColumn]=null}),void i()):void r._store._read(n,[e[a]],function(t){if(!t.length&&"LIVE"===r._store.tableInfo[r._query.table]._views[n].mode)return r._store.tableInfo[r._query.table]._views[n].columns.forEach(function(t){e[t.thisColumn]=null}),void i();r._store.tableInfo[r._query.table]._views[n].columns.forEach(function(n){e[n.thisColumn]=t[0][n.otherColumn]}),i()});i()}else i()}).then(function(){n(e)}):n(e||{}):n(e)},e.prototype._updateRemoteViews=function(e,t,n){var r=this,o=this._store.tableInfo[this._query.table]._pk;i.fastALL(e,function(e,n,a){i.fastALL(r._store.tableInfo[r._query.table]._viewTables,function(n,a,s){t&&"GHOST"===r._store.tableInfo[n.table]._views[r._query.table].mode?s():r._store._secondaryIndexRead(n.table,n.column,e[o],function(o){if(o.length){var a=r._store.tableInfo[n.table]._views[r._query.table].columns,u=r._store.tableInfo[n.table]._views[r._query.table].pkColumn;i.fastALL(o,function(o,i,s){var l=a.length,c=!1;if(t){if("LIVE"===r._store.tableInfo[n.table]._views[r._query.table].mode)for(c=!0,o[u]=null;l--;)o[a[l].otherColumn]=null}else for(;l--;)o[a[l].otherColumn]!==e[a[l].thisColumn]&&(o[a[l].otherColumn]=e[a[l].thisColumn],c=!0);if(c){var f=r._store.tableInfo[n.table]._pk;r._store.adapterWrite(n.table,o[f],o,s)}else s()}).then(s)}else s()})}).then(a)}).then(n)},e.prototype._doAfterQuery=function(e,t,n){var r=this;this._store._hasViews&&this._store.tableInfo[this._query.table]._viewTables.length?this._updateRemoteViews(e,t,function(){n(r._query)}):n(this._query)},e.prototype._upsert=function(e){var t=this,n=this._store.tableInfo[this._query.table]._pk;if(this._isInstanceTable)this._getRows(function(n){t._query.result=t._query.table.map(function(e){return-1===n.indexOf(e)?e:r({},t._query.actionArgs,e)}),e(t._query)});else if(this._query.where)this._getRows(function(r){r.length?i.fastCHAIN(r,function(e,r,o){t._updateRowViews(t._query.actionArgs||{},e,function(r){t._store._write(t._query.table,e[n],e,r,o)})}).then(function(o){var i=o.map(function(e){return e[n]});t._store._invalidateCache(t._query.table,i),t._query.result=[{msg:o.length+" row(s) modfied.",affectedRowPKS:i,affectedRows:o}],t._syncORM("add",r,o,function(){t._doAfterQuery(o,!1,e)})}):(t._query.result=[{msg:"0 row(s) modfied.",affectedRowPKS:[],affectedRows:[]}],e(t._query))});else{var o=this._query.actionArgs||{};this._store._cache[this._query.table]={};var a=function(r){t._updateRowViews(o,r,function(i){t._store._write(t._query.table,o[n],r,i,function(o){t._query.result=[{msg:"1 row inserted.",affectedRowPKS:[o[n]],affectedRows:[o]}],t._store._hasORM?t._syncORM("add",[r].filter(function(e){return e}),[o],function(){t._doAfterQuery([o],!1,e)}):t._doAfterQuery([o],!1,e)})})};void 0!==o[n]?this._store._read(this._query.table,[o[n]],function(e){e.length?a(e[0]):a(null)}):a(null)}},e.prototype._delete=function(e){var t=this;this._isInstanceTable?this._query.where?this._getRows(function(n){t._query.result=t._query.table.filter(function(e){return-1===n.indexOf(e)}),e(t._query)}):(this._query.result=[],e(this._query)):this._query.where?this._getRows(function(n){(n=n.filter(function(e){return e})).length?i.fastALL(n,function(e,n,r){t._store._delete(t._query.table,e[t._store.tableInfo[t._query.table]._pk],r)}).then(function(r){t._store._cache[t._query.table]={};var o=n.map(function(e){return e[t._store.tableInfo[t._query.table]._pk]});t._store._invalidateCache(t._query.table,o),t._query.result=[{msg:n.length+" row(s) deleted.",affectedRowPKS:o,affectedRows:n}],t._syncORM("del",n,[],function(){t._doAfterQuery(n,!0,e)})}):(t._query.result=[{msg:"0 row(s) deleted.",affectedRowPKS:[],affectedRows:[]}],e(t._query))}):this._drop(e)},e.prototype._drop=function(e){var t=this;if(this._isInstanceTable)return this._query.result=[],void e(this._query);this._store._rangeRead(this._query.table,void 0,void 0,!1,function(n){t._store._cache[t._query.table]={},t._store._cacheKeys[t._query.table]={},t._store._drop(t._query.table,function(){t._query.result=[{msg:"'"+t._query.table+"' table dropped.",affectedRowPKS:n.map(function(e){return e[t._store.tableInfo[t._query.table]._pk]}),affectedRows:n}],t._syncORM("del",n,[],function(){t._doAfterQuery(n,!0,e)})})})},e}();t._NanoSQLStorageQuery=s;var u=function(){function e(e,t){this.q=e,this.s=t,this._groupByColumns=[]}return e.prototype._join=function(e,t){var n=this;if(this.q.join){var r={};"cross"!==this.q.join.type&&this.q.join.where&&(r={_left:this.q.join.where[0],_check:this.q.join.where[1],_right:this.q.join.where[2]});var o=this.q.table,i=this.q.join.table;this._doJoin(this.q.join.type,o,i,r,function(e){n.q.where?t(e.filter(function(e,t){return Array.isArray(n.q.where)?f(e,n.q.where||[],t,!0):n.q.where(e,t)})):n.q.range?t(e.filter(function(e,t){return n.q.range&&n.q.range[0]>=t&&n.q.range[1]<=t})):t(e)})}else t(e)},e.prototype._groupByKey=function(e,t){return e.reduce(function(e,n){return-1!==n.indexOf(".length")?e+"."+String((t[n.replace(".length","")]||[]).length):e+"."+String(t[n])},"").slice(1)},e.prototype._groupBy=function(e){var t=this,n=this.q.groupBy||{},r=e.sort(function(e,r){return t._sortObj(e,r,n,!0)});return r.forEach(function(e,r){var o=Object.keys(n).map(function(t){return String(e[t])||""}).join(".");t._sortGroups||(t._sortGroups={}),t._sortGroups[o]||(t._sortGroups[o]=[]),t._sortGroups[o].push(r)}),r},e.prototype._having=function(e){var t=this;return e.filter(function(e,n){return Array.isArray(t.q.having)?f(e,t.q.having||[],n,!0):t.q.having(e,n)})},e.prototype._orderBy=function(e){var t=this;return e.sort(function(e,n){return t._sortObj(e,n,t.q.orderBy||{},!1)})},e.prototype._offset=function(e){var t=this;return e.filter(function(e,n){return!t.q.offset||n>=t.q.offset})},e.prototype._limit=function(e){var t=this;return e.filter(function(e,n){return!t.q.limit||n<t.q.limit})},e.prototype._orm=function(e,t){var n=this,r=this.q.orm?this.q.orm.map(function(e){return"string"==typeof e?{key:e,limit:5}:e}):[];i.fastALL(e,function(e,t,a){e=Object.isFrozen(e)?i._assign(e):e,i.fastALL(r,function(t,r,i){if(e[t.key]&&e[t.key].length){var a=n.s._columnsAreTables[n.q.table][t.key];a?n.s._nsql.query("select").where([n.s.tableInfo[a._toTable]._pk,"array"===a._thisType?"IN":"=",e[t.key]]).manualExec({table:a._toTable}).then(function(n){var r=o.nSQL().query("select",t.select);t.where&&r.where(t.where),void 0!==t.limit&&r.limit(t.limit),void 0!==t.offset&&r.offset(t.offset),t.orderBy&&r.orderBy(t.orderBy),t.groupBy&&r.groupBy(t.groupBy),r.manualExec({table:n}).then(function(r){n.filter(function(e){return e}).length?e[t.key]="array"===a._thisType?r:r[0]:e[t.key]="array"===a._thisType?[]:void 0,i()})}):i()}else i()}).then(function(){a(e)})}).then(t)},e.prototype._doJoin=function(e,t,n,r,o){var i="left",a="right",s="outer",u=this,l=u.s.tableInfo[e===a?n:t],c=u.s.tableInfo[e===a?t:n],d=function(e,t){return[l,c].reduce(function(n,r,o){return r._keys.forEach(function(i){n[r._name+"."+i]=((0===o?e:t)||{})[i]}),n},{})},p=[],h=r&&r._right&&r._right.split(".").pop()||"",y={},m=[];u.s._read(l._name,function(t,n,o){var v=!1;u.s._read(c._name,function(n,o,i){var u;r&&"cross"!==e?f(((u={})[l._name]=t,u[c._name]=n,u),[r._left,r._check,e===a?t[h]:n[h]],0)?(e===s&&(y[o]=!0),p.push(d(t,n)),v=!0):e===s&&(m[o]=n):(p.push(d(t,n)),v=!0);i(!1)},function(){!v&&[i,a,s].indexOf(e)>-1&&p.push(d(t,null)),o(!1)})},function(){if(e===s){for(var t=m.filter(function(e,t){return!y[t]}),n=0;n<t.length;)p.push(d(null,t[n])),n++;o(p)}else o(p)})},e.prototype._sortObj=function(e,t,n,r){return Object.keys(n).reduce(function(o,a){var s=r?i.objQuery(a,e):e[a],u=r?i.objQuery(a,t):t[a];return o||(s===u?0:(s>u?1:-1)*("desc"===n[a]?-1:1))},0)},e.prototype._mutateRows=function(e,t){var n=this,r=this.q.actionArgs,a={},s={};if(r&&r.length){var u=!1,l={};r.forEach(function(e){if(-1!==e.indexOf("(")){var t=(e.match(/^.*\(/g)||[""])[0].replace(/\(|\)/g,"").toUpperCase(),n=o.NanoSQLInstance.functions[t],r=1===e.split(" AS ").length?t:(e.split(" AS ").pop()||"").trim();if(!n)throw new Error("'"+t+"' is not a valid function!");"A"===n.type&&(u=!0),l[e]={fn:n,key:r}}}),i.fastALL(r,function(t,r,o){if(t.indexOf("(")>-1){var c=(t.match(/\(.*\)/g)||[""])[0].replace(/\(|\)/g,"").split(",").map(function(e){return e.trim()});n._sortGroups&&u?i.fastALL(Object.keys(n._sortGroups),function(r,o,i){var a;s[r]||(s[r]={}),(a=l[t].fn).call.apply(a,[e.filter(function(e,t){return n._sortGroups[r].indexOf(t)>-1}),function(e){s[r][l[t].key]=e,i()}].concat(c))}).then(o):(f=l[t].fn).call.apply(f,[e,function(e){a[l[t].key]=e,o()}].concat(c))}else o();var f}).then(function(){var o=function(e,t,o){var a={};return r.forEach(function(r){var s=r.indexOf("(")>-1,u=s?l[r].fn.type:"";if(r.indexOf(" AS ")>-1){var c=r.split(" AS "),f=s?l[r].key:c[0].trim();a[c[1]]=s?"A"===u?o[f]:o[f][t]:i.objQuery(f,e,void 0!==n.q.join)}else{f=s?l[r].key:r;a[r]=s?"A"===u?o[f]:o[f][t]:i.objQuery(f,e,void 0!==n.q.join)}}),a};if(!e.length&&u){var c=[{}];return Object.keys(l).forEach(function(e){void 0!==a[l[e].key]&&(c[0][e]=a[l[e].key])}),void t(c)}if(n._sortGroups&&u){var f=[];Object.keys(n._sortGroups).forEach(function(t){var r=e.filter(function(e,r){return n._sortGroups[t].indexOf(r)>-1}).filter(function(e,t){return t<1});r&&r.length&&f.push(o(r[0],0,s[t]))}),t(f)}else t(u?e.filter(function(e,t){return t<1}).map(function(e,t){return o(e,t,a)}):e.map(function(e,t){return o(e,t,a)}))})}else t(e)},e.prototype._executeQueryArguments=function(e,t){var n=this,r=function(){n.q.having&&(e=n._having(e)),n.q.orderBy&&(e=n._orderBy(e)),n.q.offset&&(e=n._offset(e)),n.q.limit&&(e=n._limit(e)),t(e)},o=function(){n.q.actionArgs&&n.q.actionArgs.length?n._mutateRows(e,function(t){e=t,r()}):r()},i=function(){n.q.groupBy&&(e=n._groupBy(e)),n.q.orm?n._orm(e,function(t){e=t,o()}):o()};this.q.join?this._join(e,function(t){e=t,i()}):i()},e}();t._MutateSelection=u;var l=function(){function e(e,t,n){var r=this;if(this.q=e,this.s=t,this.q.join&&this.q.orm)throw new Error("Cannot do a JOIN and ORM command at the same time!");if([this.q.where,this.q.range,this.q.trie].filter(function(e){return e}).length>1)throw new Error("Can only have ONE of Trie, Range or Where!");if(this.q.join)n([]);else if(this.q.trie&&this.q.trie.column&&this.q.trie.search)this._selectByTrie(n);else if(this.q.range&&this.q.range.length)this._selectByRange(n);else if(this.q.where&&this.q.where.length&&Array.isArray(this.q.where)){if("string"==typeof this.q.where[0]?0===this._isOptimizedWhere(this.q.where):0===(this.q.where||[]).reduce(function(e,t,n){return n%2==1?e:e+r._isOptimizedWhere(t)},0))this._selectByKeys(this.q.where,n);else{var o=this._isSubOptimizedWhere(this.q.where);if(o>0){var i=this.q.where.slice(0,o),a=this.q.where.slice(o+1);this._selectByKeys(i,function(e){n(e.filter(function(e,t){return f(e,a,t)}))})}else this._fullTableScan(n)}}else this._fullTableScan(n)}return e.prototype._selectByKeys=function(e,t){var n=this;if(e&&"string"==typeof e[0])this._selectRowsByIndex(e,t);else if(e){var r=[],o="";i.fastCHAIN(e,function(e,t,i){if("string"==typeof e)return o=e,void i();n._selectRowsByIndex(e,function(e){if("AND"===o){for(var t={},a=e.length;a--;)t[e[a][n.s.tableInfo[n.q.table]._pk]]=!0;r=r.filter(function(e){return t[e[n.s.tableInfo[n.q.table]._pk]]})}else r=r.concat(e);i()})}).then(function(){t(r)})}},e.prototype._selectRowsByIndex=function(e,t){var n=this;if("BETWEEN"!==e[1]){var r=[];switch(e[1]){case"IN":r=e[2];break;case"=":r=[e[2]]}e[0]===this.s.tableInfo[this.q.table]._pk?this.s._read(this.q.table,r,t):i.fastALL(r,function(t,r,o){n.s._secondaryIndexRead(n.q.table,e[0],t,o)}).then(function(e){t([].concat.apply([],e))})}else{var o=e[0]===this.s.tableInfo[this.q.table]._pk?"":e[0];if(o){var a="_"+this.q.table+"_idx_"+o;this.s._rangeRead(a,e[2][0],e[2][1],!0,function(e){for(var r=[],o=e.length;o--;)r=r.concat(e[o].rows);n.s._read(n.q.table,r,t)})}else this.s._rangeRead(this.q.table,e[2][0],e[2][1],!0,function(e){t(e)})}},e.prototype._selectByRange=function(e){var t=this;if(this.q.range){var n=this.q.range;n[0]>0?this.s._rangeRead(this.q.table,n[1],n[1]+n[0],!1,e):this.s.adapters[0].adapter.getIndex(this.q.table,!0,function(r){for(var o=n[0]>0?n[1]:r+n[0]-n[1],i=o,a=Math.abs(n[0])-1;a--;)i++;t.s._rangeRead(t.q.table,o,i,!1,e)})}else e([])},e.prototype._selectByTrie=function(e){this.q.trie?this.s._trieRead(this.q.table,this.q.trie.column,this.q.trie.search,e):e([])},e.prototype._fullTableScan=function(e){var t=this,n=void 0!==this.q.where,r=n&&Array.isArray(this.q.where);this.s._read(this.q.table,function(e,o,i){i(!n||(r?f(e,t.q.where,o):t.q.where(e,o)))},e)},e.prototype._isSubOptimizedWhere=function(e){var t=this;if("string"==typeof e[0])return 0;if(0===this._isOptimizedWhere(e[0])){var n=0;return e.forEach(function(r,o){o%2==0&&0===t._isOptimizedWhere(r)&&e[o+1]&&(n=o+1)}),"AND"!==e[n]?0:n}return 0},e.prototype._isOptimizedWhere=function(e){var t=this.s.tableInfo[this.q.table];return["=","IN","BETWEEN"].indexOf(e[1])>-1&&(e[0]===t._pk||t._secondaryIndexes.indexOf(e[0])>-1)?0:1},e}();t._RowSelection=l;var c=function(){function e(e){this.q=e}return e.prototype.getRows=function(e){var t=this;if(this.q.join||this.q.orm||this.q.trie)throw new Error("Cannot do a JOIN, ORM or TRIE command with instance table!");if(this.q.range&&this.q.range.length){var n,r,o=this.q.range;n=o[0]<0?this.q.table.length+o[0]-o[1]:o[1];var i=Math.abs(o[0])-1;for(r=n;i--;)r++;e(this.q.table.filter(function(e,t){return t>=n&&t<=r}))}else e(this.q.table.filter(function(e,n){return!t.q.where||(Array.isArray(t.q.where)?f(e,t.q.where||[],n):t.q.where(e,n))}))},e}();t.InstanceSelection=c;var f=function(e,t,n,r){var o=["AND","OR"];if("string"!=typeof t[0]){var a=t.map(function(t,n){return-1!==o.indexOf(t)?("AND"===t&&!0,t):0===d(t[2],t[1],i.objQuery(t[0],e,r))});return a.forEach(function(e,t){"OR"===e&&(a[t]=a[t-1]||a[t+1],a[t-1]=void 0,a[t+1]=void 0)}),-1===a.indexOf(!1)}return 0===d(t[2],t[1],i.objQuery(t[0],e,r))},d=function(e,t,n){var r=function(e){return["LIKE","NOT LIKE"].indexOf(t)>-1?String(e||"").toLowerCase():e},o=r(n),i=r(e);if("NULL"===e||"NOT NULL"===e){var a="="===t||"LIKE"===t;return("NULL"===e?null===n||void 0===n:null!==n&&void 0!==n)?a?0:1:a?1:0}switch(t){case"=":return o===i?0:1;case"!=":return o!==i?0:1;case">":return o>i?0:1;case"<":return o<i?0:1;case"<=":return o<=i?0:1;case">=":return o>=i?0:1;case"IN":return(i||[]).indexOf(o)<0?1:0;case"NOT IN":return(i||[]).indexOf(o)<0?0:1;case"REGEX":return o.match(i).length?0:1;case"LIKE":return o.indexOf(i)<0?1:0;case"NOT LIKE":return o.indexOf(i)>=0?1:0;case"BETWEEN":return i[0]<=o&&i[1]>=o?0:1;case"HAVE":return(o||[]).indexOf(i)<0?1:0;case"NOT HAVE":return(o||[]).indexOf(i)<0?0:1;case"INTERSECT":return(o||[]).filter(function(e){return(i||[]).indexOf(e)>-1}).length>0?0:1;case"NOT INTERSECT":return 0===(o||[]).filter(function(e){return(i||[]).indexOf(e)>-1}).length?0:1;default:return 1}}},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(18),i=n(60),a=n(0),s=n(59),u=function(){function e(){this._queryPool=[],this._queryPtr=0}return e.prototype.willConnect=function(e,t){this.parent=e.parent,this._store=new s._NanoSQLStorage(e.parent,r({},e.config)),this._store.init(e.models,function(n){e.models=r({},e.models,n),t(e)})},e.prototype.doExec=function(e,t){e.state="complete",new i._NanoSQLStorageQuery(this._store).doQuery(e,t)},e.prototype.dumpTables=function(e){var t=this;return new a.Promise(function(n,r){var o={},i=e&&e.length?e:Object.keys(t._store.tableInfo);a.fastALL(i,function(e,n,r){o[e]=[],t._store.adapters[0].adapter.rangeRead(e,function(t,n,r){o[e].push(t),r()},r)}).then(function(){n(o)})})},e.prototype.importTables=function(e){var t=this;return new a.Promise(function(n,r){a.fastALL(Object.keys(e),function(n,r,o){var i=t._store.tableInfo[n]._pk;a.fastALL(e[n],function(e,r,o){e[i]?t._store.adapters[0].adapter.write(n,e[i],e,o):o()}).then(o)}).then(function(){n()})})},e.prototype.willDisconnect=function(e){a.fastALL(this._store.adapters||[],function(e,t,n){e.disconnect?e.disconnect(n):n()}).then(e)},e.prototype.extend=function(e,t,n){var r=this;switch(t[0]){case"clone":var i=new o.NanoSQLInstance;Object.keys(this.parent.dataModels).forEach(function(e){i.table(e).model(r.parent.dataModels[e],[],!0)}),i.config({id:this._store._id,mode:t[1]}).connect().then(function(){a.fastCHAIN(Object.keys(r.parent.dataModels),function(e,t,n){console.log("Importing "+e+"..."),r.parent.rawDump([e]).then(function(e){return i.rawImport(e)}).then(n)}).then(function(){e(t,[])})});break;case"flush":var s=[];s=t[1]?[t[1]]:this.parent.tableNames,a.fastCHAIN(s,function(e,t,n){r._store._drop(e,n)}).then(function(){e(t,s)});break;case"get_adapter":t[1]?e(t,[this._store.adapters[t[1]].adapter]):e(t,[this._store.adapters[0].adapter]);break;case"idx.length":case"idx":var u=t[1];Object.keys(this._store.tableInfo).indexOf(u)>-1?this._store.adapters[0].adapter.getIndex(u,"idx"!==t[0],function(n){e(t,n)}):e(t,[]);break;case"rebuild_idx":t[1]?this._store.rebuildIndexes(t[1],function(n){e(t,[n])}):a.fastALL(Object.keys(this._store.tableInfo),function(e,t,n){r._store.rebuildIndexes(e,n)}).then(function(n){e(t,n)});break;case"clear_cache":t[1]&&t[2]?this._store._invalidateCache(t[1],t[2]):t[1]?(this._store._cache[t[1]]={},this._store._cacheKeys[t[1]]={}):Object.keys(this._store.tableInfo).forEach(function(e){r._store._cache[e]={},r._store._cacheKeys[e]={}}),e(t,t[1]||Object.keys(this._store.tableInfo));break;default:e(t,n)}},e}();t.NanoSQLDefaultBackend=u},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.eventListeners={}}return e.prototype.on=function(e,t){this.eventListeners[e]||(this.eventListeners[e]=[]),this.eventListeners[e].push(t)},e.prototype.off=function(e,t){var n=this;this.eventListeners[e]&&this.eventListeners[e].length&&this.eventListeners[e].forEach(function(r,o){r===t&&n.eventListeners[e].splice(o,1)})},e.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.eventListeners[e]&&this.eventListeners[e].forEach(function(e){return e.apply(void 0,t)})},e}();t.ReallySmallEvents=n,t.RSE=new n},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,n,r,o){this.thisQ={state:"pending",table:n,action:e,actionArgs:t,queryID:o,transaction:!0,result:[],comments:[]},this._queries=r}return e.prototype.where=function(e){return this.thisQ.where=e,this},e.prototype.exec=function(){this._queries.push(this.thisQ)},e}();t._NanoSQLTransactionQuery=n},function(e,t,n){var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i={affectedRowPKS:[],affectedRows:[]},a=function(e,t){1!==e._db.plugins.length||e._db.hasAnyEvents?o.fastCHAIN(e._db.plugins,function(t,n,r){t.doExec?t.doExec(e._query,function(t){e._query=t||e._query,r()}):r()}).then(function(){if(e._db.hasPK[e._query.table]?t(e._query.result):t(e._query.result.map(function(e){return r({},e,{_id_:void 0})})),e._db.hasAnyEvents||e._db.pluginHasDidExec){var n=function(){switch(e._query.action){case"select":return[e._query.action];case"delete":case"upsert":case"drop":return[e._query.action,"change"];default:return[]}}(),a=e._query.result&&e._query.result.length,s={table:e._query.table,query:e._query,time:Date.now(),result:e._query.result,notes:[],types:n,actionOrView:e._AV,transactionID:e._query.transaction?e._query.queryID:void 0,affectedRowPKS:a?(e._query.result[0]||i).affectedRowPKS:[],affectedRows:a?(e._query.result[0]||i).affectedRows:[]};o.fastCHAIN(e._db.plugins,function(e,t,n){e.didExec?e.didExec(s,function(e){s=e,n()}):n()}).then(function(){e._db.triggerEvent(s)})}}):e._db.plugins[0].doExec(e._query,function(n){e._query=n,e._db.hasPK[e._query.table]?t(e._query.result):t(e._query.result.map(function(e){return r({},e,{_id_:void 0})}))})},s={},u=function(){function e(e,t,n,r,o){this._db=e,this._AV=o||"",this._query={table:t,comments:[],state:"pending",queryID:Date.now()+"."+this._db.fastRand(),action:n,actionArgs:r,result:[]}}return e.prototype.where=function(e){return this._query.where=e,this},e.prototype.range=function(e,t){return this._query.range=[e,t],this},e.prototype.on=function(e){return this._query.on=e,this},e.prototype.debounce=function(e){return this._query.debounce=e||250,this},e.prototype.orm=function(e){return this._query.orm=e,this},e.prototype.orderBy=function(e){return this._query.orderBy=e,this},e.prototype.groupBy=function(e){return this._query.groupBy=e,this},e.prototype.having=function(e){return e.length&&Array.isArray(e)||(this._error="Having condition requires an array!"),this._query.having=e,this},e.prototype.join=function(e){if(Array.isArray(this._query.table))throw Error("Can't JOIN with instance table!");return e.table&&e.type||(this._error="Join command requires table and type arguments!"),this._query.join=e,this},e.prototype.limit=function(e){return this._query.limit=e,this},e.prototype.trieSearch=function(e,t){return this._query.trie={column:e,search:t},this},e.prototype.comment=function(e){return this._query.comments.push(e),this},e.prototype.extend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this._query.extend=e,this},e.prototype.offset=function(e){return this._query.offset=e,this},e.prototype.toCSV=function(e){var t=this;return new o.Promise(function(n,r){t.exec().then(function(r){var o=[];r.length||n("",t),e&&o.push(Object.keys(r[0]).join(",")),r.forEach(function(e){o.push(Object.keys(e).map(function(t){return null===e[t]||void 0===e[t]?"":"object"==typeof e[t]?'"'+JSON.stringify(e[t]).replace(/\"/g,"'")+'"':e[t]}).join(","))}),n(o.join("\n"),t)})})},e.prototype.manualExec=function(e){return this._query=r({},this._query,e),this.exec()},e.prototype.denormalizationQuery=function(e){var t=this;return new o.Promise(function(n,r){switch(e){case"tocolumn":var i={};t._query.actionArgs&&t._query.actionArgs.length?Object.keys(t._db.toColRules[t._query.table]).filter(function(e){return-1!==t._query.actionArgs.indexOf(e)}).forEach(function(e){i[e]=t._db.toColRules[t._query.table][e]}):i=t._db.toColRules[t._query.table],t._query.action="select",t._query.actionArgs=void 0;var s=Object.keys(i);a(t,function(e){o.fastCHAIN(e,function(e,n,r){Object.isFrozen(e)&&(e=o._assign(e)),o.fastALL(s,function(n,r,o){var a=t._db.toColFns[t._query.table][i[n][0]];a?a.apply(null,[e[n],function(t){e[n]=t,o()}].concat(i[n].filter(function(e,t){return t>0}).map(function(t){return e[t]}))):o()}).then(function(){t._db.query("upsert",e).manualExec({table:t._query.table}).then(r).catch(r)})}).then(function(){n({msg:e.length+" rows modified"})})});break;case"torow":var u=(t._query.actionArgs||"").replace("()","");if(!t._db.toRowFns[t._query.table]||!t._db.toRowFns[t._query.table][u])return void r("No function "+t._query.actionArgs+" found to perform updates!");var l=t._db.toRowFns[t._query.table][u],c=t._db.tablePKs[t._query.table];if(t._query.on&&t._query.on.length)return void o.fastALL(t._query.on,function(e,n,r){l(e,{},function(n){n[c]=e,t._db.query("upsert",n).manualExec({table:t._query.table}).then(r).catch(r)})}).then(function(){n([{msg:(t._query.on||[]).length+" rows modified or added."}])});t._query.action="select",t._query.actionArgs=void 0,a(t,function(e){o.fastALL(e,function(e,n,r){Object.isFrozen(e)&&(e=o._assign(e)),l(e[c],e,function(n){n[c]=e[c],t._db.query("upsert",n).manualExec({table:t._query.table}).then(r).catch(r)})}).then(function(){n({msg:e.length+" rows modified"})})})}})},e.prototype.exec=function(){var e=this;if("*"!==this._query.table){var t=this,n=this._query.action.toLowerCase();if(["tocolumn","torow"].indexOf(n)>-1){if(this._query.debounce){var r=o.hash(JSON.stringify([this._query.table,n,this._query.actionArgs,this._query.on,this._query.where].filter(function(e){return e})));return new o.Promise(function(t,o){s[r]&&clearTimeout(s[r]),s[r]=setTimeout(function(){e.denormalizationQuery(n).then(t)},e._query.debounce)})}return this.denormalizationQuery(n)}if(!(["select","upsert","delete","drop","show tables","describe"].indexOf(n)>-1))throw Error("No valid database action!");var i=this._query.actionArgs||("select"===n||"delete"===n?[]:{});if("upsert"===n){for(var u={},l=this._db.dataModels[this._query.table],c=0;c<l.length;)void 0!==i[l[c].key]&&(u[l[c].key]=o.cast(l[c].type,i[l[c].key])),c++;if(this._db.skipPurge[this._query.table]){var f=l.map(function(e){return e.key});Object.keys(i).filter(function(e){return-1===f.indexOf(e)}).forEach(function(e){u[e]=i[e]})}i=u}return this._query.action=n,this._query.actionArgs=this._query.actionArgs?i:void 0,new o.Promise(function(n,r){Array.isArray(e._query.table)?e._db.iB.doExec&&e._db.iB.doExec(e._query,function(e){n(e.result)}):(t._db.plugins.length||(t._error="No plugins, nothing to do!"),t._error?r(t._error,e._db):e._db.queryMod?e._db.queryMod(e._query,function(t){e._query=t,a(e,n)}):a(e,n))})}},e}();t._NanoSQLQuery=u},function(e,t,n){var r=n(11);r(r.S,"Object",{create:n(25)})},function(e,t,n){n(65);var r=n(1).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){e.exports={default:n(66),__esModule:!0}},function(e,t,n){var r=n(9),o=n(13),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(47)(Function.call,n(37).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){var r=n(11);r(r.S,"Object",{setPrototypeOf:n(68).set})},function(e,t,n){n(69),e.exports=n(1).Object.setPrototypeOf},function(e,t,n){e.exports={default:n(70),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(71)),o=a(n(67)),i=a(n(44));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,i.default)(t)));e.prototype=(0,o.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){n(20)("observable")},function(e,t,n){n(20)("asyncIterator")},function(e,t){},function(e,t,n){var r=n(8),o=n(38).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(40);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(24),o=n(39),i=n(19);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,s=n(e),u=i.f,l=0;s.length>l;)u.call(e,a=s[l++])&&t.push(a);return t}},function(e,t,n){var r=n(16)("meta"),o=n(9),i=n(5),a=n(4).f,s=0,u=Object.isExtensible||function(){return!0},l=!n(12)(function(){return u(Object.preventExtensions({}))}),c=function(e){a(e,r,{value:{i:"O"+ ++s,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return l&&f.NEED&&u(e)&&!i(e,r)&&c(e),e}}},function(e,t,n){"use strict";var r=n(2),o=n(5),i=n(3),a=n(11),s=n(42),u=n(79).KEY,l=n(12),c=n(30),f=n(22),d=n(16),p=n(7),h=n(21),y=n(20),m=n(78),v=n(77),g=n(13),b=n(9),_=n(8),w=n(29),x=n(15),k=n(25),C=n(76),S=n(37),T=n(4),E=n(24),I=S.f,O=T.f,P=C.f,R=r.Symbol,A=r.JSON,N=A&&A.stringify,M=p("_hidden"),q=p("toPrimitive"),L={}.propertyIsEnumerable,j=c("symbol-registry"),D=c("symbols"),F=c("op-symbols"),U=Object.prototype,W="function"==typeof R,B=r.QObject,H=!B||!B.prototype||!B.prototype.findChild,z=i&&l(function(){return 7!=k(O({},"a",{get:function(){return O(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=I(U,t);r&&delete U[t],O(e,t,n),r&&e!==U&&O(U,t,r)}:O,V=function(e){var t=D[e]=k(R.prototype);return t._k=e,t},K=W&&"symbol"==typeof R.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof R},Q=function(e,t,n){return e===U&&Q(F,t,n),g(e),t=w(t,!0),g(n),o(D,t)?(n.enumerable?(o(e,M)&&e[M][t]&&(e[M][t]=!1),n=k(n,{enumerable:x(0,!1)})):(o(e,M)||O(e,M,x(1,{})),e[M][t]=!0),z(e,t,n)):O(e,t,n)},$=function(e,t){g(e);for(var n,r=m(t=_(t)),o=0,i=r.length;i>o;)Q(e,n=r[o++],t[n]);return e},Y=function(e){var t=L.call(this,e=w(e,!0));return!(this===U&&o(D,e)&&!o(F,e))&&(!(t||!o(this,e)||!o(D,e)||o(this,M)&&this[M][e])||t)},J=function(e,t){if(e=_(e),t=w(t,!0),e!==U||!o(D,t)||o(F,t)){var n=I(e,t);return!n||!o(D,t)||o(e,M)&&e[M][t]||(n.enumerable=!0),n}},G=function(e){for(var t,n=P(_(e)),r=[],i=0;n.length>i;)o(D,t=n[i++])||t==M||t==u||r.push(t);return r},X=function(e){for(var t,n=e===U,r=P(n?F:_(e)),i=[],a=0;r.length>a;)!o(D,t=r[a++])||n&&!o(U,t)||i.push(D[t]);return i};W||(s((R=function(){if(this instanceof R)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===U&&t.call(F,n),o(this,M)&&o(this[M],e)&&(this[M][e]=!1),z(this,e,x(1,n))};return i&&H&&z(U,e,{configurable:!0,set:t}),V(e)}).prototype,"toString",function(){return this._k}),S.f=J,T.f=Q,n(38).f=C.f=G,n(19).f=Y,n(39).f=X,i&&!n(27)&&s(U,"propertyIsEnumerable",Y,!0),h.f=function(e){return V(p(e))}),a(a.G+a.W+a.F*!W,{Symbol:R});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var te=E(p.store),ne=0;te.length>ne;)y(te[ne++]);a(a.S+a.F*!W,"Symbol",{for:function(e){return o(j,e+="")?j[e]:j[e]=R(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in j)if(j[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!W,"Object",{create:function(e,t){return void 0===t?k(e):$(k(e),t)},defineProperty:Q,defineProperties:$,getOwnPropertyDescriptor:J,getOwnPropertyNames:G,getOwnPropertySymbols:X}),A&&a(a.S+a.F*(!W||l(function(){var e=R();return"[null]"!=N([e])||"{}"!=N({a:e})||"{}"!=N(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!K(e))return v(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,N.apply(A,r)}}),R.prototype[q]||n(10)(R.prototype,q,R.prototype.valueOf),f(R,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){n(80),n(75),n(74),n(73),e.exports=n(1).Symbol},function(e,t,n){e.exports={default:n(81),__esModule:!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports=function(){}},function(e,t,n){"use strict";var r=n(84),o=n(83),i=n(26),a=n(8);e.exports=n(43)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){n(85);for(var r=n(2),o=n(10),i=n(26),a=n(7)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<s.length;u++){var l=s[u],c=r[l],f=c&&c.prototype;f&&!f[a]&&o(f,a,l),i[l]=i.Array}},function(e,t,n){var r=n(2).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(28),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(28),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(8),o=n(89),i=n(88);e.exports=function(e){return function(t,n,a){var s,u=r(t),l=o(u.length),c=i(a,l);if(e&&n!=n){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(40);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(4),o=n(13),i=n(24);e.exports=n(3)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),s=a.length,u=0;s>u;)r.f(e,n=a[u++],t[n]);return e}},function(e,t,n){"use strict";var r=n(25),o=n(15),i=n(22),a={};n(10)(a,n(7)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(28),o=n(32);e.exports=function(e){return function(t,n){var i,a,s=String(o(t)),u=r(n),l=s.length;return u<0||u>=l?e?"":void 0:(i=s.charCodeAt(u))<55296||i>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(94)(!0);n(43)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){n(95),n(86),e.exports=n(21).f("iterator")},function(e,t,n){e.exports={default:n(96),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(44),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,i.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){var r=n(11);r(r.S+r.F*!n(3),"Object",{defineProperty:n(4).f})},function(e,t,n){n(99);var r=n(1).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t,n){e.exports={default:n(100),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(101),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,i.default)(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(11),o=n(1),i=n(12);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){var r=n(49),o=n(48);n(105)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){n(106),e.exports=n(1).Object.getPrototypeOf},function(e,t,n){e.exports={default:n(107),__esModule:!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(108)),o=c(n(103)),i=c(n(102)),a=c(n(98)),s=c(n(72)),u=n(36),l=c(u);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(t.__proto__||(0,r.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){return l.default.createElement("div",null,"Account balance ",this.props.nSQLdata)}}],[{key:"tables",value:function(){return["balance"]}},{key:"onChange",value:function(e,t){console.log("account status changed event",e),t((new Date).getTime())}}]),t}(u.PureComponent);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AccountStatus=void 0;var r=n(109);Object.defineProperty(t,"AccountStatus",{enumerable:!0,get:function(){return(e=r,e&&e.__esModule?e:{default:e}).default;var e}});var o=n(18);(0,o.nSQL)("balance").model([{key:"id",type:"int",props:["pk","ai"]},{key:"userId",type:"string"},{key:"balance",type:"int"}]).config({mode:"TEMP"}).connect().then(function(e){return(0,o.nSQL)().query("upsert",{userId:"anton",balance:20}).exec()})},function(e,t,n){"use strict";var r=/-(.)/g;e.exports=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})}},function(e,t,n){"use strict";var r=n(111),o=/^-ms-/;e.exports=function(e){return r(e.replace(o,"ms-"))}},function(e,t,n){"use strict";var r=/([A-Z])/g;e.exports=function(e){return e.replace(r,"-$1").toLowerCase()}},function(e,t,n){"use strict";var r=n(113),o=/^ms-/;e.exports=function(e){return r(e).replace(o,"-ms-")}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(115);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(116);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.1
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){var t=n(36),r=n(35),o=n(34),i=n(120),a=n(52),s=n(33),u=n(50),l=n(119),c=n(118),f=n(117),d=n(51),p=n(114),h=n(112);t||r(!1,"ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");var y=function(e,t,n,r,o,i,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this._caughtError=e,this._hasCaughtError=!0}};if("undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var m=document.createElement("react");y=function(e,t,n,o,i,a,s,u,l){"undefined"==typeof document&&r(!1,"The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");var c=document.createEvent("Event"),f=!0,d=Array.prototype.slice.call(arguments,3);var p=void 0,h=!1,y=!1;function v(e){p=e.error,h=!0,null===p&&0===e.colno&&0===e.lineno&&(y=!0)}var g="react-"+(e||"invokeguardedcallback");window.addEventListener("error",v),m.addEventListener(g,function e(){m.removeEventListener(g,e,!1),t.apply(n,d),f=!1},!1),c.initEvent(g,!1,!1),m.dispatchEvent(c),f?(h?y&&(p=new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.")):p=new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue."),this._hasCaughtError=!0,this._caughtError=p):(this._hasCaughtError=!1,this._caughtError=null),window.removeEventListener("error",v)}}var v=y,g={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){v.apply(g,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(g.invokeGuardedCallback.apply(this,arguments),g.hasCaughtError()){var l=g.clearCaughtError();g._hasRethrowError||(g._hasRethrowError=!0,g._rethrowError=l)}},rethrowCaughtError:function(){return b.apply(g,arguments)},hasCaughtError:function(){return g._hasCaughtError},clearCaughtError:function(){if(g._hasCaughtError){var e=g._caughtError;return g._caughtError=null,g._hasCaughtError=!1,e}r(!1,"clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.")}},b=function(){if(g._hasRethrowError){var e=g._rethrowError;throw g._rethrowError=null,g._hasRethrowError=!1,e}},_=null,w={};function x(){if(_)for(var e in w){var t=w[e],n=_.indexOf(e);if(n>-1||r(!1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e),!S[n]){t.extractEvents||r(!1,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e),S[n]=t;var o=t.eventTypes;for(var i in o)k(o[i],t,i)||r(!1,"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",i,e)}}}function k(e,t,n){T.hasOwnProperty(n)&&r(!1,"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",n),T[n]=e;var o=e.phasedRegistrationNames;if(o){for(var i in o){if(o.hasOwnProperty(i))C(o[i],t,n)}return!0}return!!e.registrationName&&(C(e.registrationName,t,n),!0)}function C(e,t,n){E[e]&&r(!1,"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e),E[e]=t,I[e]=t.eventTypes[n].dependencies;var o=e.toLowerCase();O[o]=e,"onDoubleClick"===e&&(O.ondblclick=e)}var S=[],T={},E={},I={},O={};function P(e){_&&r(!1,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."),_=Array.prototype.slice.call(e),x()}function R(e){var t=!1;for(var n in e)if(e.hasOwnProperty(n)){var o=e[n];w.hasOwnProperty(n)&&w[n]===o||(w[n]&&r(!1,"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",n),w[n]=o,t=!0)}t&&x()}var A=Object.freeze({plugins:S,eventNameDispatchConfigs:T,registrationNameModules:E,registrationNameDependencies:I,possibleRegistrationNames:O,injectEventPluginOrder:P,injectEventPluginsByName:R}),N=null,M=null,q=null,L=function(e){N=e.getFiberCurrentPropsFromNode,M=e.getInstanceFromNode,q=e.getNodeFromInstance,o(q&&M,"EventPluginUtils.injection.injectComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.")},j=void 0;function D(e,t,n,r){var o=e.type||"unknown-event";e.currentTarget=q(r),g.invokeGuardedCallbackAndCatchFirstError(o,n,void 0,e),e.currentTarget=null}function F(e,t){return null==t&&r(!1,"accumulateInto(...): Accumulated items must not be null or undefined."),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function U(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}j=function(e){var t=e._dispatchListeners,n=e._dispatchInstances,r=Array.isArray(t),i=r?t.length:t?1:0,a=Array.isArray(n),s=a?n.length:n?1:0;o(a===r&&s===i,"EventPluginUtils: Invalid `event`.")};var W=null,B=function(e,t){e&&(!function(e,t){var n=e._dispatchListeners,r=e._dispatchInstances;if(j(e),Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)D(e,0,n[o],r[o]);else n&&D(e,0,n,r);e._dispatchListeners=null,e._dispatchInstances=null}(e),e.isPersistent()||e.constructor.release(e))},H=function(e){return B(e)},z=function(e){return B(e)};var V={injectEventPluginOrder:P,injectEventPluginsByName:R};function K(e,t){var n,o=e.stateNode;if(!o)return null;var i=N(o);return i?(n=i[t],function(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||(r=t,"button"!==r&&"input"!==r&&"select"!==r&&"textarea"!==r));default:return!1}var r}(t,e.type,i)?null:(n&&"function"!=typeof n&&r(!1,"Expected `%s` listener to be a function, instead got a value of `%s` type.",t,typeof n),n)):null}function Q(e,t){null!==e&&(W=F(W,e));var n=W;W=null,n&&(U(n,t?H:z),W&&r(!1,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."),g.rethrowCaughtError())}function $(e,t,n,r){Q(function(e,t,n,r){for(var o=null,i=0;i<S.length;i++){var a=S[i];if(a){var s=a.extractEvents(e,t,n,r);s&&(o=F(o,s))}}return o}(e,t,n,r),!1)}var Y=Object.freeze({injection:V,getListener:K,runEventsInBatch:Q,runExtractedEventsInBatch:$}),J=0,G=1,X=2,Z=3,ee=4,te=5,ne=6,re=7,oe=8,ie=9,ae=10,se=11,ue=12,le=13,ce=14,fe=Math.random().toString(36).slice(2),de="__reactInternalInstance$"+fe,pe="__reactEventHandlers$"+fe;function he(e,t){t[de]=e}function ye(e){if(e[de])return e[de];for(;!e[de];){if(!e.parentNode)return null;e=e.parentNode}var t=e[de];return t.tag===te||t.tag===ne?t:null}function me(e){var t=e[de];return t&&(t.tag===te||t.tag===ne)?t:null}function ve(e){if(e.tag===te||e.tag===ne)return e.stateNode;r(!1,"getNodeFromInstance: Invalid argument.")}function ge(e){return e[pe]||null}function be(e,t){e[pe]=t}var _e=Object.freeze({precacheFiberNode:he,getClosestInstanceFromNode:ye,getInstanceFromNode:me,getNodeFromInstance:ve,getFiberCurrentPropsFromNode:ge,updateFiberProps:be});function we(e){do{e=e.return}while(e&&e.tag!==te);return e||null}function xe(e,t,n){for(var r=[];e;)r.push(e),e=we(e);var o=void 0;for(o=r.length;o-- >0;)t(r[o],"captured",n);for(o=0;o<r.length;o++)t(r[o],"bubbled",n)}function ke(e,t,n,r,o){for(var i=e&&t?function(e,t){for(var n=0,r=e;r;r=we(r))n++;for(var o=0,i=t;i;i=we(i))o++;for(;n-o>0;)e=we(e),n--;for(;o-n>0;)t=we(t),o--;for(var a=n;a--;){if(e===t||e===t.alternate)return e;e=we(e),t=we(t)}return null}(e,t):null,a=[];e&&e!==i;){var s=e.alternate;if(null!==s&&s===i)break;a.push(e),e=we(e)}for(var u=[];t&&t!==i;){var l=t.alternate;if(null!==l&&l===i)break;u.push(t),t=we(t)}for(var c=0;c<a.length;c++)n(a[c],"bubbled",r);for(var f=u.length;f-- >0;)n(u[f],"captured",o)}function Ce(e,t,n){o(e,"Dispatching inst must not be null");var r=function(e,t,n){return K(e,t.dispatchConfig.phasedRegistrationNames[n])}(e,n,t);r&&(n._dispatchListeners=F(n._dispatchListeners,r),n._dispatchInstances=F(n._dispatchInstances,e))}function Se(e){e&&e.dispatchConfig.phasedRegistrationNames&&xe(e._targetInst,Ce,e)}function Te(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;xe(t?we(t):null,Ce,e)}}function Ee(e,t,n){if(e&&n&&n.dispatchConfig.registrationName){var r=K(e,n.dispatchConfig.registrationName);r&&(n._dispatchListeners=F(n._dispatchListeners,r),n._dispatchInstances=F(n._dispatchInstances,e))}}function Ie(e){e&&e.dispatchConfig.registrationName&&Ee(e._targetInst,0,e)}function Oe(e){U(e,Se)}function Pe(e,t,n,r){ke(n,r,Ee,e,t)}var Re=Object.freeze({accumulateTwoPhaseDispatches:Oe,accumulateTwoPhaseDispatchesSkipTarget:function(e){U(e,Te)},accumulateEnterLeaveDispatches:Pe,accumulateDirectDispatches:function(e){U(e,Ie)}}),Ae=null;function Ne(){return!Ae&&i.canUseDOM&&(Ae="textContent"in document.documentElement?"textContent":"innerText"),Ae}var Me={_root:null,_startText:null,_fallbackText:null};function qe(){if(Me._fallbackText)return Me._fallbackText;var e=void 0,t=Me._startText,n=t.length,r=void 0,o=Le(),i=o.length;for(e=0;e<n&&t[e]===o[e];e++);var a=n-e;for(r=1;r<=a&&t[n-r]===o[i-r];r++);var s=r>1?1-r:void 0;return Me._fallbackText=o.slice(e,s),Me._fallbackText}function Le(){return"value"in Me._root?Me._root.value:Me._root[Ne()]}var je=!1,De=10,Fe=["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"],Ue={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function We(e,t,n,r){delete this.nativeEvent,delete this.preventDefault,delete this.stopPropagation,this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n;var o=this.constructor.Interface;for(var i in o)if(o.hasOwnProperty(i)){delete this[i];var a=o[i];a?this[i]=a(n):"target"===i?this.target=r:this[i]=n[i]}var u=null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue;return this.isDefaultPrevented=u?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function Be(e,t){var n="function"==typeof t;return{configurable:!0,set:function(e){return r(n?"setting the method":"setting the property","This is effectively a no-op"),e},get:function(){return r(n?"accessing the method":"accessing the property",n?"This is a no-op function":"This is set to null"),t}};function r(t,n){o(!1,"This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.",t,e,n)}}function He(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ze(e){e instanceof this||r(!1,"Trying to release an event instance  into a pool of a different type."),e.destructor(),this.eventPool.length<De&&this.eventPool.push(e)}function Ve(e){e.eventPool=[],e.getPooled=He,e.release=ze}a(We.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)Object.defineProperty(this,t,Be(t,e[t]));for(var n=0;n<Fe.length;n++)this[Fe[n]]=null;Object.defineProperty(this,"nativeEvent",Be("nativeEvent",null)),Object.defineProperty(this,"preventDefault",Be("preventDefault",s)),Object.defineProperty(this,"stopPropagation",Be("stopPropagation",s))}}),We.Interface=Ue,We.extend=function(e){var t=this,n=function(){};n.prototype=t.prototype;var r=new n;function o(){return t.apply(this,arguments)}return a(r,o.prototype),o.prototype=r,o.prototype.constructor=o,o.Interface=a({},t.Interface,e),o.extend=t.extend,Ve(o),o},"function"==typeof Proxy&&!Object.isSealed(new Proxy({},{}))&&(We=new Proxy(We,{construct:function(e,t){return this.apply(e,Object.create(e.prototype),t)},apply:function(e,t,n){return new Proxy(e.apply(t,n),{set:function(e,t,n){return"isPersistent"===t||e.constructor.Interface.hasOwnProperty(t)||-1!==Fe.indexOf(t)||(o(je||e.isPersistent(),"This synthetic event is reused for performance reasons. If you're seeing this, you're adding a new property in the synthetic event object. The property is never released. See https://fb.me/react-event-pooling for more information."),je=!0),e[t]=n,!0}})}})),Ve(We);var Ke=We,Qe=Ke.extend({data:null}),$e=Ke.extend({data:null}),Ye=[9,13,27,32],Je=229,Ge=i.canUseDOM&&"CompositionEvent"in window,Xe=null;i.canUseDOM&&"documentMode"in document&&(Xe=document.documentMode);var Ze=i.canUseDOM&&"TextEvent"in window&&!Xe,et=i.canUseDOM&&(!Ge||Xe&&Xe>8&&Xe<=11),tt=32,nt=String.fromCharCode(tt),rt={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},ot=!1;function it(e,t){switch(e){case"topKeyUp":return-1!==Ye.indexOf(t.keyCode);case"topKeyDown":return t.keyCode!==Je;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function at(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}var st=!1;function ut(e,t,n,r){var o=void 0,i=void 0;if(Ge?o=function(e){switch(e){case"topCompositionStart":return rt.compositionStart;case"topCompositionEnd":return rt.compositionEnd;case"topCompositionUpdate":return rt.compositionUpdate}}(e):st?it(e,n)&&(o=rt.compositionEnd):function(e,t){return"topKeyDown"===e&&t.keyCode===Je}(e,n)&&(o=rt.compositionStart),!o)return null;et&&(st||o!==rt.compositionStart?o===rt.compositionEnd&&st&&(i=qe()):st=function(e){return Me._root=e,Me._startText=Le(),!0}(r));var a=Qe.getPooled(o,t,n,r);if(i)a.data=i;else{var s=at(n);null!==s&&(a.data=s)}return Oe(a),a}function lt(e,t){if(st){if("topCompositionEnd"===e||!Ge&&it(e,t)){var n=qe();return Me._root=null,Me._startText=null,Me._fallbackText=null,st=!1,n}return null}switch(e){case"topPaste":return null;case"topKeyPress":if(!function(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}(t)){if(t.char&&t.char.length>1)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return et?null:t.data;default:return null}}function ct(e,t,n,r){var o=void 0;if(!(o=Ze?function(e,t){switch(e){case"topCompositionEnd":return at(t);case"topKeyPress":return t.which!==tt?null:(ot=!0,nt);case"topTextInput":var n=t.data;return n===nt&&ot?null:n;default:return null}}(e,n):lt(e,n)))return null;var i=$e.getPooled(rt.beforeInput,t,n,r);return i.data=o,Oe(i),i}var ft={eventTypes:rt,extractEvents:function(e,t,n,r){var o=ut(e,t,n,r),i=ct(e,t,n,r);return null===o?i:null===i?o:[o,i]}},dt=null,pt=null,ht=null;function yt(e){var t=M(e);if(t){dt&&"function"==typeof dt.restoreControlledState||r(!1,"Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");var n=N(t.stateNode);dt.restoreControlledState(t.stateNode,t.type,n)}}var mt={injectFiberControlledHostComponent:function(e){dt=e}};function vt(e){pt?ht?ht.push(e):ht=[e]:pt=e}function gt(){return null!==pt||null!==ht}function bt(){if(pt){var e=pt,t=ht;if(pt=null,ht=null,yt(e),t)for(var n=0;n<t.length;n++)yt(t[n])}}var _t=Object.freeze({injection:mt,enqueueStateRestore:vt,needsStateRestore:gt,restoreStateIfNeeded:bt}),wt=function(e,t){return e(t)},xt=function(e,t,n){return e(t,n)},kt=function(){},Ct=!1;function St(e,t){if(Ct)return e(t);Ct=!0;try{return wt(e,t)}finally{Ct=!1,gt()&&(kt(),bt())}}var Tt=function(e){wt=e.batchedUpdates,xt=e.interactiveUpdates,kt=e.flushInteractiveUpdates},Et={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function It(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Et[e.type]:"textarea"===t}var Ot=1,Pt=3,Rt=8,At=9,Nt=11;function Mt(e){var t=e.target||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===Pt?t.parentNode:t}
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function qt(e,t){if(!i.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,r=n in document;if(!r){var o=document.createElement("div");o.setAttribute(n,"return;"),r="function"==typeof o[n]}return r}function Lt(e){var t=e.type,n=e.nodeName;return n&&"input"===n.toLowerCase()&&("checkbox"===t||"radio"===t)}function jt(e){return e._valueTracker}function Dt(e){jt(e)||(e._valueTracker=function(e){var t=Lt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){!function(e){e._valueTracker=null}(e),delete e[t]}}}(e))}function Ft(e){if(!e)return!1;var t=jt(e);if(!t)return!0;var n=t.getValue(),r=function(e){var t="";return e?t=Lt(e)?e.checked?"true":"false":e.value:t}(e);return r!==n&&(t.setValue(r),!0)}var Ut=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Wt=Ut.ReactCurrentOwner,Bt=Ut.ReactDebugCurrentFrame,Ht=function(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")},zt="function"==typeof Symbol&&Symbol.for,Vt=zt?Symbol.for("react.element"):60103,Kt=zt?Symbol.for("react.call"):60104,Qt=zt?Symbol.for("react.return"):60105,$t=zt?Symbol.for("react.portal"):60106,Yt=zt?Symbol.for("react.fragment"):60107,Jt=zt?Symbol.for("react.strict_mode"):60108,Gt=zt?Symbol.for("react.provider"):60109,Xt=zt?Symbol.for("react.context"):60110,Zt=zt?Symbol.for("react.async_mode"):60111,en=zt?Symbol.for("react.forward_ref"):60112,tn="function"==typeof Symbol&&Symbol.iterator,nn="@@iterator";function rn(e){if(null===e||void 0===e)return null;var t=tn&&e[tn]||e[nn];return"function"==typeof t?t:null}function on(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case Yt:return"ReactFragment";case $t:return"ReactPortal";case Kt:return"ReactCall";case Qt:return"ReactReturn"}return null}function an(e){switch(e.tag){case J:case G:case X:case te:var t=e._debugOwner,n=e._debugSource,r=on(e),o=null;return t&&(o=on(t)),Ht(r,n,o);default:return""}}function sn(e){var t="",n=e;do{t+=an(n),n=n.return}while(n);return t}function un(){var e=ln.current;return null===e?null:sn(e)}var ln={current:null,phase:null,resetCurrentFiber:function(){Bt.getCurrentStack=null,ln.current=null,ln.phase=null},setCurrentFiber:function(e){Bt.getCurrentStack=un,ln.current=e,ln.phase=null},setCurrentPhase:function(e){ln.phase=e},getCurrentFiberOwnerName:function(){var e=ln.current;if(null===e)return null;var t=e._debugOwner;return null!==t&&void 0!==t?on(t):null},getCurrentFiberStackAddendum:un},cn=0,fn=2,dn=3,pn=4,hn=5,yn=6,mn=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",vn=mn+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",gn="data-reactroot",bn=new RegExp("^["+mn+"]["+vn+"]*$"),_n={},wn={};function xn(e){return!!wn.hasOwnProperty(e)||!_n.hasOwnProperty(e)&&(bn.test(e)?(wn[e]=!0,!0):(_n[e]=!0,o(!1,"Invalid attribute name: `%s`",e),!1))}function kn(e,t,n){return null!==t?t.type===cn:!n&&(e.length>2&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))}function Cn(e,t,n,r){if(null!==n&&n.type===cn)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":if(r)return!1;if(null!==n)return!n.acceptsBooleans;var o=e.toLowerCase().slice(0,5);return"data-"!==o&&"aria-"!==o;default:return!1}}function Sn(e,t,n,r){if(null===t||void 0===t)return!0;if(Cn(e,t,n,r))return!0;if(null!==n)switch(n.type){case dn:return!t;case pn:return!1===t;case hn:return isNaN(t);case yn:return isNaN(t)||t<1}return!1}function Tn(e){return In.hasOwnProperty(e)?In[e]:null}function En(e,t,n,r,o){this.acceptsBooleans=t===fn||t===dn||t===pn,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var In={};["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"].forEach(function(e){In[e]=new En(e,cn,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0],n=e[1];In[t]=new En(t,1,!1,n,null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){In[e]=new En(e,fn,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){In[e]=new En(e,fn,!1,e,null)}),["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach(function(e){In[e]=new En(e,dn,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){In[e]=new En(e,dn,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){In[e]=new En(e,pn,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){In[e]=new En(e,yn,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){In[e]=new En(e,hn,!1,e.toLowerCase(),null)});var On=/[\-\:]([a-z])/g,Pn=function(e){return e[1].toUpperCase()};function Rn(e,t,n,r){if(r.mustUseProperty)return e[r.propertyName];var o=r.attributeName,i=null;if(r.type===pn){if(e.hasAttribute(o)){var a=e.getAttribute(o);return""===a||(Sn(t,n,r,!1)?a:a===""+n?n:a)}}else if(e.hasAttribute(o)){if(Sn(t,n,r,!1))return e.getAttribute(o);if(r.type===dn)return n;i=e.getAttribute(o)}return Sn(t,n,r,!1)?null===i?n:i:i===""+n?n:i}function An(e,t,n){if(xn(t)){if(!e.hasAttribute(t))return void 0===n?void 0:null;var r=e.getAttribute(t);return r===""+n?n:r}}function Nn(e,t,n,r){var o=Tn(t);if(!kn(t,o,r))if(Sn(t,n,o,r)&&(n=null),r||null===o){if(xn(t)){var i=t;null===n?e.removeAttribute(i):e.setAttribute(i,""+n)}}else if(o.mustUseProperty){var a=o.propertyName;if(null===n){var s=o.type;e[a]=s!==dn&&""}else e[a]=n}else{var u=o.attributeName,l=o.attributeNamespace;if(null===n)e.removeAttribute(u);else{var c=o.type,f=void 0;f=c===dn||c===pn&&!0===n?"":""+n,l?e.setAttributeNS(l,u,f):e.setAttribute(u,f)}}}["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach(function(e){var t=e.replace(On,Pn);In[t]=new En(t,1,!1,e,null)}),["xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type"].forEach(function(e){var t=e.replace(On,Pn);In[t]=new En(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(On,Pn);In[t]=new En(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),In.tabIndex=new En("tabIndex",1,!1,"tabindex",null);var Mn={checkPropTypes:null},qn={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},Ln={value:function(e,t,n){return!e[t]||qn[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}};Mn.checkPropTypes=function(e,t,n){u(Ln,t,"prop",e,n)};var jn=ln.getCurrentFiberOwnerName,Dn=ln.getCurrentFiberStackAddendum,Fn=!1,Un=!1,Wn=!1,Bn=!1;function Hn(e){return"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}function zn(e,t){var n=e,r=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:n._wrapperState.initialChecked})}function Vn(e,t){Mn.checkPropTypes("input",t,Dn),void 0===t.checked||void 0===t.defaultChecked||Un||(o(!1,"%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",jn()||"A component",t.type),Un=!0),void 0===t.value||void 0===t.defaultValue||Fn||(o(!1,"%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",jn()||"A component",t.type),Fn=!0);var n=e,r=null==t.defaultValue?"":t.defaultValue;n._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:Gn(null!=t.value?t.value:r),controlled:Hn(t)}}function Kn(e,t){var n=e,r=t.checked;null!=r&&Nn(n,"checked",r,!1)}function Qn(e,t){var n=e,r=Hn(t);n._wrapperState.controlled||!r||Bn||(o(!1,"A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s",t.type,Dn()),Bn=!0),!n._wrapperState.controlled||r||Wn||(o(!1,"A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s",t.type,Dn()),Wn=!0),Kn(e,t);var i=Gn(t.value);null!=i&&("number"===t.type?(0===i&&""===n.value||n.value!=i)&&(n.value=""+i):n.value!==""+i&&(n.value=""+i)),t.hasOwnProperty("value")?Jn(n,t.type,i):t.hasOwnProperty("defaultValue")&&Jn(n,t.type,Gn(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(n.defaultChecked=!!t.defaultChecked)}function $n(e,t){var n=e;(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===n.value&&(n.value=""+n._wrapperState.initialValue),n.defaultValue=""+n._wrapperState.initialValue);var r=n.name;""!==r&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==r&&(n.name=r)}function Yn(e,t){var n=e;Qn(n,t),function(e,t){var n=t.name;if("radio"===t.type&&null!=n){for(var o=e;o.parentNode;)o=o.parentNode;for(var i=o.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),a=0;a<i.length;a++){var s=i[a];if(s!==e&&s.form===e.form){var u=ge(s);u||r(!1,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."),Ft(s),Qn(s,u)}}}}(n,t)}function Jn(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Gn(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}var Xn={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}};function Zn(e,t,n){var r=Ke.getPooled(Xn.change,e,t,n);return r.type="change",vt(n),Oe(r),r}var er=null,tr=null;function nr(e){Q(e,!1)}function rr(e){if(Ft(ve(e)))return e}function or(e,t){if("topChange"===e)return t}var ir=!1;function ar(){er&&(er.detachEvent("onpropertychange",sr),er=null,tr=null)}function sr(e){"value"===e.propertyName&&rr(tr)&&function(e){St(nr,Zn(tr,e,Mt(e)))}(e)}function ur(e,t,n){"topFocus"===e?(ar(),function(e,t){tr=t,(er=e).attachEvent("onpropertychange",sr)}(t,n)):"topBlur"===e&&ar()}function lr(e,t){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return rr(tr)}function cr(e,t){if("topClick"===e)return rr(t)}function fr(e,t){if("topInput"===e||"topChange"===e)return rr(t)}i.canUseDOM&&(ir=qt("input")&&(!document.documentMode||document.documentMode>9));var dr={eventTypes:Xn,_isInputEventSupported:ir,extractEvents:function(e,t,n,r){var o,i,a=t?ve(t):window,s=void 0,u=void 0;if("select"===(i=(o=a).nodeName&&o.nodeName.toLowerCase())||"input"===i&&"file"===o.type?s=or:It(a)?ir?s=fr:(s=lr,u=ur):function(e){var t=e.nodeName;return t&&"input"===t.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}(a)&&(s=cr),s){var l=s(e,t);if(l)return Zn(l,n,r)}u&&u(e,a,t),"topBlur"===e&&function(e,t){if(null!=e){var n=e._wrapperState||t._wrapperState;n&&n.controlled&&"number"===t.type&&Jn(t,"number",t.value)}}(t,a)}},pr=Ke.extend({view:null,detail:null}),hr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function yr(e){var t=this.nativeEvent;if(t.getModifierState)return t.getModifierState(e);var n=hr[e];return!!n&&!!t[n]}function mr(e){return yr}var vr=pr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:mr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),gr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},br={eventTypes:gr,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=void 0;if(r.window===r)o=r;else{var i=r.ownerDocument;o=i?i.defaultView||i.parentWindow:window}var a=void 0,s=void 0;if("topMouseOut"===e){a=t;var u=n.relatedTarget||n.toElement;s=u?ye(u):null}else a=null,s=t;if(a===s)return null;var l=null==a?o:ve(a),c=null==s?o:ve(s),f=vr.getPooled(gr.mouseLeave,a,n,r);f.type="mouseleave",f.target=l,f.relatedTarget=c;var d=vr.getPooled(gr.mouseEnter,s,n,r);return d.type="mouseenter",d.target=c,d.relatedTarget=l,Pe(f,d,a,s),[f,d]}};function _r(e){return e._reactInternalFiber}var wr=0,xr=1,kr=2,Cr=4,Sr=6,Tr=8,Er=16,Ir=32,Or=64,Pr=128,Rr=256,Ar=2048,Nr=2559,Mr=512,qr=1024,Lr=1,jr=2,Dr=3;function Fr(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if((t.effectTag&kr)!==wr)return Lr;for(;t.return;)if(((t=t.return).effectTag&kr)!==wr)return Lr}return t.tag===Z?jr:Dr}function Ur(e){return Fr(e)===jr}function Wr(e){var t=Wt.current;if(null!==t&&t.tag===X){var n=t,r=n.stateNode;o(r._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",on(n)||"A component"),r._warnedAboutRefsInRender=!0}var i=_r(e);return!!i&&Fr(i)===jr}function Br(e){Fr(e)!==jr&&r(!1,"Unable to find node on an unmounted component.")}function Hr(e){var t=e.alternate;if(!t){var n=Fr(e);return n===Dr&&r(!1,"Unable to find node on an unmounted component."),n===Lr?null:e}for(var o=e,i=t;;){var a=o.return,s=a?a.alternate:null;if(!a||!s)break;if(a.child===s.child){for(var u=a.child;u;){if(u===o)return Br(a),e;if(u===i)return Br(a),t;u=u.sibling}r(!1,"Unable to find node on an unmounted component.")}if(o.return!==i.return)o=a,i=s;else{for(var l=!1,c=a.child;c;){if(c===o){l=!0,o=a,i=s;break}if(c===i){l=!0,i=a,o=s;break}c=c.sibling}if(!l){for(c=s.child;c;){if(c===o){l=!0,o=s,i=a;break}if(c===i){l=!0,i=s,o=a;break}c=c.sibling}l||r(!1,"Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}o.alternate!==i&&r(!1,"Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}return o.tag!==Z&&r(!1,"Unable to find node on an unmounted component."),o.stateNode.current===o?e:t}var zr=Ke.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Vr=Ke.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=pr.extend({relatedTarget:null});function Qr(e){var t=void 0,n=e.keyCode;return"charCode"in e?0===(t=e.charCode)&&13===n&&(t=13):t=n,10===t&&(t=13),t>=32||13===t?t:0}var $r={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Yr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};var Jr=pr.extend({key:function(e){if(e.key){var t=$r[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=Qr(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?Yr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:mr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Gr=vr.extend({dataTransfer:null}),Xr=pr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:mr}),Zr=Ke.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),eo=vr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),to={},no={};function ro(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n,o="top"+n,i={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[o],isInteractive:t};to[e]=i,no[o]=i}["blur","cancel","click","close","contextMenu","copy","cut","doubleClick","dragEnd","dragStart","drop","focus","input","invalid","keyDown","keyPress","keyUp","mouseDown","mouseUp","paste","pause","play","rateChange","reset","seeked","submit","touchCancel","touchEnd","touchStart","volumeChange"].forEach(function(e){ro(e,!0)}),["abort","animationEnd","animationIteration","animationStart","canPlay","canPlayThrough","drag","dragEnter","dragExit","dragLeave","dragOver","durationChange","emptied","encrypted","ended","error","load","loadedData","loadedMetadata","loadStart","mouseMove","mouseOut","mouseOver","playing","progress","scroll","seeking","stalled","suspend","timeUpdate","toggle","touchMove","transitionEnd","waiting","wheel"].forEach(function(e){ro(e,!1)});var oo=["topAbort","topCancel","topCanPlay","topCanPlayThrough","topClose","topDurationChange","topEmptied","topEncrypted","topEnded","topError","topInput","topInvalid","topLoad","topLoadedData","topLoadedMetadata","topLoadStart","topPause","topPlay","topPlaying","topProgress","topRateChange","topReset","topSeeked","topSeeking","topStalled","topSubmit","topSuspend","topTimeUpdate","topToggle","topVolumeChange","topWaiting"],io={eventTypes:to,isInteractiveTopLevelEventType:function(e){var t=no[e];return void 0!==t&&!0===t.isInteractive},extractEvents:function(e,t,n,r){var i=no[e];if(!i)return null;var a=void 0;switch(e){case"topKeyPress":if(0===Qr(n))return null;case"topKeyDown":case"topKeyUp":a=Jr;break;case"topBlur":case"topFocus":a=Kr;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":a=vr;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":a=Gr;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":a=Xr;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":a=zr;break;case"topTransitionEnd":a=Zr;break;case"topScroll":a=pr;break;case"topWheel":a=eo;break;case"topCopy":case"topCut":case"topPaste":a=Vr;break;default:-1===oo.indexOf(e)&&o(!1,"SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.",e),a=Ke}var s=a.getPooled(i,t,n,r);return Oe(s),s}},ao=io.isInteractiveTopLevelEventType,so=10,uo=[];function lo(e){for(;e.return;)e=e.return;return e.tag!==Z?null:e.stateNode.containerInfo}function co(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=lo(n);if(!r)break;e.ancestors.push(n),n=ye(r)}while(n);for(var o=0;o<e.ancestors.length;o++)t=e.ancestors[o],$(e.topLevelType,t,e.nativeEvent,Mt(e.nativeEvent))}var fo=!0;function po(e){fo=!!e}function ho(){return fo}function yo(e,t,n){if(!n)return null;!function(e,t,n){e.addEventListener(t,n,!1)}(n,t,(ao(e)?vo:go).bind(null,e))}function mo(e,t,n){if(!n)return null;!function(e,t,n){e.addEventListener(t,n,!0)}(n,t,(ao(e)?vo:go).bind(null,e))}function vo(e,t){xt(go,e,t)}function go(e,t){if(fo){var n=ye(Mt(t));null===n||"number"!=typeof n.tag||Ur(n)||(n=null);var r,o=function(e,t,n){if(uo.length){var r=uo.pop();return r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,r}return{topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]}}(e,t,n);try{St(co,o)}finally{(r=o).topLevelType=null,r.nativeEvent=null,r.targetInst=null,r.ancestors.length=0,uo.length<so&&uo.push(r)}}}var bo=Object.freeze({get _enabled(){return fo},setEnabled:po,isEnabled:ho,trapBubbledEvent:yo,trapCapturedEvent:mo,dispatchEvent:go});function _o(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var wo={animationend:_o("Animation","AnimationEnd"),animationiteration:_o("Animation","AnimationIteration"),animationstart:_o("Animation","AnimationStart"),transitionend:_o("Transition","TransitionEnd")},xo={},ko={};function Co(e){if(xo[e])return xo[e];if(!wo[e])return e;var t=wo[e];for(var n in t)if(t.hasOwnProperty(n)&&n in ko)return xo[e]=t[n];return e}i.canUseDOM&&(ko=document.createElement("div").style,"AnimationEvent"in window||(delete wo.animationend.animation,delete wo.animationiteration.animation,delete wo.animationstart.animation),"TransitionEvent"in window||delete wo.transitionend.transition);var So={topAnimationEnd:Co("animationend"),topAnimationIteration:Co("animationiteration"),topAnimationStart:Co("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Co("transitionend"),topWheel:"wheel"},To={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Eo={},Io=0,Oo="_reactListenersID"+(""+Math.random()).slice(2);function Po(e){return Object.prototype.hasOwnProperty.call(e,Oo)||(e[Oo]=Io++,Eo[e[Oo]]={}),Eo[e[Oo]]}function Ro(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ao(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function No(e,t){for(var n=Ro(e),r=0,o=0;n;){if(n.nodeType===Pt){if(o=r+n.textContent.length,r<=t&&o>=t)return{node:n,offset:t-r};r=o}n=Ro(Ao(n))}}function Mo(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,r=t.anchorOffset,o=t.focusNode,i=t.focusOffset;try{n.nodeType,o.nodeType}catch(e){return null}return function(e,t,n,r,o){var i=0,a=-1,s=-1,u=0,l=0,c=e,f=null;e:for(;;){for(var d=null;c!==t||0!==n&&c.nodeType!==Pt||(a=i+n),c!==r||0!==o&&c.nodeType!==Pt||(s=i+o),c.nodeType===Pt&&(i+=c.nodeValue.length),null!==(d=c.firstChild);)f=c,c=d;for(;;){if(c===e)break e;if(f===t&&++u===n&&(a=i),f===r&&++l===o&&(s=i),null!==(d=c.nextSibling))break;f=(c=f).parentNode}c=d}if(-1===a||-1===s)return null;return{start:a,end:s}}(e,n,r,o,i)}function qo(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}function Lo(){var e=l();return{focusedElem:e,selectionRange:qo(e)?function(e){var t=void 0;t="selectionStart"in e?{start:e.selectionStart,end:e.selectionEnd}:Mo(e);return t||{start:0,end:0}}(e):null}}function jo(e){var t,n=l(),r=e.focusedElem,o=e.selectionRange;if(n!==r&&(t=r,f(document.documentElement,t))){qo(r)&&function(e,t){var n=t.start,r=t.end;void 0===r&&(r=n);"selectionStart"in e?(e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length)):function(e,t){if(window.getSelection){var n=window.getSelection(),r=e[Ne()].length,o=Math.min(t.start,r),i=void 0===t.end?o:Math.min(t.end,r);if(!n.extend&&o>i){var a=i;i=o,o=a}var s=No(e,o),u=No(e,i);if(s&&u){if(1===n.rangeCount&&n.anchorNode===s.node&&n.anchorOffset===s.offset&&n.focusNode===u.node&&n.focusOffset===u.offset)return;var l=document.createRange();l.setStart(s.node,s.offset),n.removeAllRanges(),o>i?(n.addRange(l),n.extend(u.node,u.offset)):(l.setEnd(u.node,u.offset),n.addRange(l))}}}(e,t)}(r,o);for(var i=[],a=r;a=a.parentNode;)a.nodeType===Ot&&i.push({element:a,left:a.scrollLeft,top:a.scrollTop});r.focus();for(var s=0;s<i.length;s++){var u=i[s];u.element.scrollLeft=u.left,u.element.scrollTop=u.top}}}var Do=i.canUseDOM&&"documentMode"in document&&document.documentMode<=11,Fo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},Uo=null,Wo=null,Bo=null,Ho=!1;function zo(e,t){if(Ho||null==Uo||Uo!==l())return null;var n=function(e){if("selectionStart"in e&&qo(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}}(Uo);if(!Bo||!c(Bo,n)){Bo=n;var r=Ke.getPooled(Fo.select,Wo,e,t);return r.type="select",r.target=Uo,Oe(r),r}return null}var Vo={eventTypes:Fo,extractEvents:function(e,t,n,r){var o=r.window===r?r.document:r.nodeType===At?r:r.ownerDocument;if(!o||!function(e,t){for(var n=Po(t),r=I[e],o=0;o<r.length;o++){var i=r[o];if(!n.hasOwnProperty(i)||!n[i])return!1}return!0}("onSelect",o))return null;var i=t?ve(t):window;switch(e){case"topFocus":(It(i)||"true"===i.contentEditable)&&(Uo=i,Wo=t,Bo=null);break;case"topBlur":Uo=null,Wo=null,Bo=null;break;case"topMouseDown":Ho=!0;break;case"topContextMenu":case"topMouseUp":return Ho=!1,zo(n,r);case"topSelectionChange":if(Do)break;case"topKeyDown":case"topKeyUp":return zo(n,r)}return null}};V.injectEventPluginOrder(["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"]),L(_e),V.injectEventPluginsByName({SimpleEventPlugin:io,EnterLeaveEventPlugin:br,ChangeEventPlugin:dr,SelectEventPlugin:Vo,BeforeInputEventPlugin:ft});var Ko=1073741823,Qo=0,$o=1,Yo=Ko,Jo=10,Go=2;function Xo(e){return(e/Jo|0)+Go}function Zo(e){return(e-Go)*Jo}function ei(e,t,n){return(1+((e+t/Jo)/(r=n/Jo)|0))*r;var r}var ti=0,ni=1,ri=2,oi=void 0;oi=!1;try{var ii=Object.preventExtensions({}),ai=new Map([[ii,null]]),si=new Set([ii]);ai.set(0,0),si.add(0)}catch(e){oi=!0}var ui=void 0;ui=1;var li=function(e,t,n,r){return new function(e,t,n,r){this.tag=e,this.key=n,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.mode=r,this.effectTag=wr,this.nextEffect=null,this.firstEffect=null,this.lastEffect=null,this.expirationTime=Qo,this.alternate=null,this._debugID=ui++,this._debugSource=null,this._debugOwner=null,this._debugIsCurrentlyTiming=!1,oi||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}(e,t,n,r)};function ci(e,t,n){var r=e.alternate;return null===r?((r=li(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r._debugID=e._debugID,r._debugSource=e._debugSource,r._debugOwner=e._debugOwner,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=wr,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function fi(e,t,n){var r;r=e._owner;var o,i=void 0,a=e.type,s=e.key,u=e.props,l=void 0;if("function"==typeof a)l=(o=a).prototype&&o.prototype.isReactComponent?X:J;else if("string"==typeof a)l=te;else switch(a){case Yt:return pi(u.children,t,n,s);case Zt:l=se,t|=ni|ri;break;case Jt:l=se,t|=ri;break;case Kt:l=re;break;case Qt:l=ie;break;default:if("object"==typeof a&&null!==a)switch(a.$$typeof){case Gt:l=le;break;case Xt:l=ue;break;case en:l=ce;break;default:if("number"==typeof a.tag)return(i=a).pendingProps=u,i.expirationTime=n,i;di(a,r)}else di(a,r)}return(i=li(l,u,s,t)).type=a,i.expirationTime=n,i._debugSource=e._source,i._debugOwner=e._owner,i}function di(e,t){var n="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(n+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var o=t?on(t):null;o&&(n+="\n\nCheck the render method of `"+o+"`."),r(!1,"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==e?e:typeof e,n)}function pi(e,t,n,r){var o=li(ae,e,r,t);return o.expirationTime=n,o}function hi(e,t,n){var r=li(ne,e,null,t);return r.expirationTime=n,r}function yi(e,t,n){var r=null!==e.children?e.children:[],o=li(ee,r,e.key,t);return o.expirationTime=n,o.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},o}function mi(e,t){return null===e&&(e=li(J,null,null,ti)),e.tag=t.tag,e.key=t.key,e.type=t.type,e.stateNode=t.stateNode,e.return=t.return,e.child=t.child,e.sibling=t.sibling,e.index=t.index,e.ref=t.ref,e.pendingProps=t.pendingProps,e.memoizedProps=t.memoizedProps,e.updateQueue=t.updateQueue,e.memoizedState=t.memoizedState,e.mode=t.mode,e.effectTag=t.effectTag,e.nextEffect=t.nextEffect,e.firstEffect=t.firstEffect,e.lastEffect=t.lastEffect,e.expirationTime=t.expirationTime,e.alternate=t.alternate,e._debugID=t._debugID,e._debugSource=t._debugSource,e._debugOwner=t._debugOwner,e._debugIsCurrentlyTiming=t._debugIsCurrentlyTiming,e}function vi(e,t,n){var r=function(e){return li(Z,null,null,e?ni|ri:ti)}(t),o={current:r,containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:Qo,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:Qo,firstBatch:null,nextScheduledRoot:null};return r.stateNode=o,o}var gi=null,bi=null,_i=!1;function wi(e){return function(t){try{return e(t)}catch(e){_i||(_i=!0,o(!1,"React DevTools encountered an error: %s",e))}}}function xi(e){"function"==typeof gi&&gi(e)}function ki(e){"function"==typeof bi&&bi(e)}var Ci=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.warn(i);try{throw new Error(i)}catch(e){}}).apply(void 0,[t].concat(r))}},Si={discardPendingWarnings:function(){},flushPendingDeprecationWarnings:function(){},flushPendingUnsafeLifecycleWarnings:function(){},recordDeprecationWarnings:function(e,t){},recordUnsafeLifecycleWarnings:function(e,t){}},Ti={UNSAFE_componentWillMount:"componentDidMount",UNSAFE_componentWillReceiveProps:"static getDerivedStateFromProps",UNSAFE_componentWillUpdate:"componentDidUpdate"},Ei=[],Ii=[],Oi=[],Pi=new Map,Ri=new Set,Ai=new Set;Si.discardPendingWarnings=function(){Ei=[],Ii=[],Oi=[],Pi=new Map},Si.flushPendingUnsafeLifecycleWarnings=function(){Pi.forEach(function(e,t){var n=[];if(Object.keys(e).forEach(function(t){var r=e[t];if(r.length>0){var o=new Set;r.forEach(function(e){o.add(on(e)||"Component"),Ai.add(e.type)});var i=t.replace("UNSAFE_",""),a=Ti[t],s=Array.from(o).sort().join(", ");n.push(i+": Please update the following components to use "+a+" instead: "+s)}}),n.length>0){var r=sn(t);o(!1,"Unsafe lifecycle methods were found within a strict-mode tree:%s\n\n%s\n\nLearn more about this warning here:\nhttps://fb.me/react-strict-mode-warnings",r,n.join("\n\n"))}}),Pi=new Map};Si.flushPendingDeprecationWarnings=function(){if(Ei.length>0){var e=new Set;Ei.forEach(function(t){e.add(on(t)||"Component"),Ri.add(t.type)});var t=Array.from(e).sort().join(", ");Ci(!1,"componentWillMount is deprecated and will be removed in the next major version. Use componentDidMount instead. As a temporary workaround, you can rename to UNSAFE_componentWillMount.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",t),Ei=[]}if(Ii.length>0){var n=new Set;Ii.forEach(function(e){n.add(on(e)||"Component"),Ri.add(e.type)});var r=Array.from(n).sort().join(", ");Ci(!1,"componentWillReceiveProps is deprecated and will be removed in the next major version. Use static getDerivedStateFromProps instead.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",r),Ii=[]}if(Oi.length>0){var o=new Set;Oi.forEach(function(e){o.add(on(e)||"Component"),Ri.add(e.type)});var i=Array.from(o).sort().join(", ");Ci(!1,"componentWillUpdate is deprecated and will be removed in the next major version. Use componentDidUpdate instead. As a temporary workaround, you can rename to UNSAFE_componentWillUpdate.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",i),Oi=[]}},Si.recordDeprecationWarnings=function(e,t){Ri.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&Ei.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&Ii.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&Oi.push(e))},Si.recordUnsafeLifecycleWarnings=function(e,t){var n=function(e){for(var t=null;null!==e;)e.mode&ri&&(t=e),e=e.return;return t}(e);if(!Ai.has(e.type)&&("function"!=typeof t.componentWillMount||!0!==t.componentWillMount.__suppressDeprecationWarning)){var r=void 0;Pi.has(n)?r=Pi.get(n):(r={UNSAFE_componentWillMount:[],UNSAFE_componentWillReceiveProps:[],UNSAFE_componentWillUpdate:[]},Pi.set(n,r));var o=[];"function"!=typeof t.componentWillMount&&"function"!=typeof t.UNSAFE_componentWillMount||o.push("UNSAFE_componentWillMount"),"function"!=typeof t.componentWillReceiveProps&&"function"!=typeof t.UNSAFE_componentWillReceiveProps||o.push("UNSAFE_componentWillReceiveProps"),"function"!=typeof t.componentWillUpdate&&"function"!=typeof t.UNSAFE_componentWillUpdate||o.push("UNSAFE_componentWillUpdate"),o.length>0&&o.forEach(function(t){r[t].push(e)})}};var Ni=!0,Mi=!0,qi=!1,Li=!1,ji=!1,Di=!0,Fi=!0,Ui=!1,Wi="undefined"!=typeof performance&&"function"==typeof performance.mark&&"function"==typeof performance.clearMarks&&"function"==typeof performance.measure&&"function"==typeof performance.clearMeasures,Bi=null,Hi=null,zi=null,Vi=!1,Ki=!1,Qi=!1,$i=0,Yi=0,Ji=!1,Gi=new Set,Xi=function(e){return"⚛ "+e},Zi=function(e){performance.mark(Xi(e))},ea=function(e,t,n){var r=Xi(t),o=function(e,t){return(t?"⛔ ":"⚛ ")+e+(t?" Warning: "+t:"")}(e,n);try{performance.measure(o,r)}catch(e){}performance.clearMarks(r),performance.clearMeasures(o)},ta=function(e,t){return e+" (#"+t+")"},na=function(e,t,n){return null===n?e+" ["+(t?"update":"mount")+"]":e+"."+n},ra=function(e,t){var n=on(e)||"Unknown",r=e._debugID,o=null!==e.alternate,i=na(n,o,t);if(Vi&&Gi.has(i))return!1;Gi.add(i);var a=ta(i,r);return Zi(a),!0},oa=function(e,t){var n=on(e)||"Unknown",r=e._debugID,o=null!==e.alternate,i=na(n,o,t);!function(e){performance.clearMarks(Xi(e))}(ta(i,r))},ia=function(e,t,n){var r=on(e)||"Unknown",o=e._debugID,i=null!==e.alternate,a=na(r,i,t),s=ta(a,o);ea(a,s,n)},aa=function(e){switch(e.tag){case Z:case te:case ne:case ee:case re:case ie:case ae:case le:case ue:return!0;default:return!1}},sa=function(){null!==Hi&&null!==zi&&oa(zi,Hi),zi=null,Hi=null,Qi=!1},ua=function(){for(var e=Bi;e;)e._debugIsCurrentlyTiming&&ia(e,null,null),e=e.return},la=function(e){null!==e.return&&la(e.return),e._debugIsCurrentlyTiming&&ra(e,null)},ca=function(){null!==Bi&&la(Bi)};function fa(){Ni&&Yi++}function da(){Ni&&(Vi&&(Ki=!0),null!==Hi&&"componentWillMount"!==Hi&&"componentWillReceiveProps"!==Hi&&(Qi=!0))}function pa(e){if(Ni){if(!Wi||aa(e))return;e._debugIsCurrentlyTiming=!1,oa(e,null)}}function ha(e){if(Ni){if(!Wi||aa(e))return;if(Bi=e.return,!e._debugIsCurrentlyTiming)return;e._debugIsCurrentlyTiming=!1,ia(e,null,null)}}function ya(e){if(Ni){if(!Wi||aa(e))return;if(Bi=e.return,!e._debugIsCurrentlyTiming)return;e._debugIsCurrentlyTiming=!1;ia(e,null,"An error was thrown inside this error boundary")}}function ma(e,t){if(Ni){if(!Wi)return;if(sa(),!ra(e,t))return;zi=e,Hi=t}}function va(){if(Ni){if(!Wi)return;if(null!==Hi&&null!==zi)ia(zi,Hi,Qi?"Scheduled a cascading update":null);Hi=null,zi=null}}function ga(e,t){if(Ni){if(!Wi)return;var n=null;if(null!==e)if(e.tag===Z)n="A top-level update interrupted the previous render";else n="An update to "+(on(e)||"Unknown")+" interrupted the previous render";else $i>1&&(n="There were cascading updates");$i=0;var r=t?"(React Tree Reconciliation: Completed Root)":"(React Tree Reconciliation: Yielded)";ua(),ea(r,"(React Tree Reconciliation)",n)}}function ba(){if(Ni){if(!Wi)return;Vi=!0,Ki=!1,Gi.clear(),Zi("(Committing Changes)")}}function _a(){if(Ni){if(!Wi)return;var e=null;Ki?e="Lifecycle hook scheduled a cascading update":$i>0&&(e="Caused by a cascading update in earlier commit"),Ki=!1,$i++,Vi=!1,Gi.clear(),ea("(Committing Changes)","(Committing Changes)",e)}}var wa=void 0;function xa(e){var t={baseState:e,expirationTime:Qo,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null,isProcessing:!1};return t}function ka(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(e.expirationTime===Qo||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}wa=!1;var Ca=void 0,Sa=void 0;function Ta(e){Ca=Sa=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=xa(null));var r=void 0;null!==t?null===(r=t.updateQueue)&&(r=t.updateQueue=xa(null)):r=null,Ca=n,Sa=r=r!==n?r:null}function Ea(e,t){Ta(e);var n=Ca,r=Sa;if((n.isProcessing||null!==r&&r.isProcessing)&&!wa&&(o(!1,"An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."),wa=!0),null!==r){if(null===n.last||null===r.last)return ka(n,t),void ka(r,t);ka(n,t),r.last=t}else ka(n,t)}function Ia(e,t,n,r){var o=e.partialState;return"function"==typeof o?o.call(t,n,r):o}function Oa(e,t,n,r,o,i){if(null!==e&&e.updateQueue===n){var s=n;n=t.updateQueue={baseState:s.baseState,expirationTime:s.expirationTime,first:s.first,last:s.last,isInitialized:s.isInitialized,capturedValues:s.capturedValues,callbackList:null,hasForceUpdate:!1}}n.isProcessing=!0,n.expirationTime=Qo;var u=void 0;n.isInitialized?u=n.baseState:(u=n.baseState=t.memoizedState,n.isInitialized=!0);for(var l=!0,c=n.first,f=!1;null!==c;){var d=c.expirationTime;if(d>i){var p=n.expirationTime;(p===Qo||p>d)&&(n.expirationTime=d),f||(f=!0,n.baseState=u),c=c.next}else{f||(n.first=c.next,null===n.first&&(n.last=null)),(ji||Di&&t.mode&ri)&&Ia(c,r,u,o);var h=void 0;if(c.isReplace?(u=Ia(c,r,u,o),l=!0):(h=Ia(c,r,u,o))&&(u=l?a({},u,h):a(u,h),l=!1),c.isForced&&(n.hasForceUpdate=!0),null!==c.callback){var y=n.callbackList;null===y&&(y=n.callbackList=[]),y.push(c)}if(null!==c.capturedValue){var m=n.capturedValues;null===m?n.capturedValues=[c.capturedValue]:m.push(c.capturedValue)}c=c.next}}return null!==n.callbackList?t.effectTag|=Ir:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),f||(f=!0,n.baseState=u),n.isProcessing=!1,u}function Pa(e,t){var n=e.callbackList;if(null!==n){e.callbackList=null;for(var o=0;o<n.length;o++){var i=n[o],a=i.callback;i.callback=null,"function"!=typeof a&&r(!1,"Invalid argument passed as callback. Expected a function. Instead received: %s",a),a.call(t)}}}var Ra,Aa={},Na=Array.isArray,Ma=void 0,qa=void 0,La=void 0,ja=void 0,Da=void 0;Ma=new Set,qa=new Set,La=new Set,ja=new Set,Da=new Set;var Fa=new Set;function Ua(e,t){for(var n={},r=0;r<t.length;r++){var o=t[r].value,i=e.getDerivedStateFromCatch.call(null,o);null!==i&&void 0!==i&&a(n,i)}return n}Ra=function(e,t){if(null!==e&&"function"!=typeof e){var n=t+"_"+e;Fa.has(n)||(Fa.add(n),o(!1,"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e))}},Object.defineProperty(Aa,"_processChildContext",{enumerable:!1,value:function(){r(!1,"_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).")}}),Object.freeze(Aa);var Wa=function(e,t,n,r,i){var s=e.cacheContext,u=e.getMaskedContext,l=e.getUnmaskedContext,f=e.isContextConsumer,p=e.hasContextChanged,h={isMounted:Wr,enqueueSetState:function(e,r,o){var i=_r(e);Ra(o=void 0===o?null:o,"setState");var a=n(i);Ea(i,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(i,a)},enqueueReplaceState:function(e,r,o){var i=_r(e);Ra(o=void 0===o?null:o,"replaceState");var a=n(i);Ea(i,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(i,a)},enqueueForceUpdate:function(e,r){var o=_r(e);Ra(r=void 0===r?null:r,"forceUpdate");var i=n(o);Ea(o,{expirationTime:i,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(o,i)}};function y(e,t,n,r,i,a){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var s=e.stateNode,u=e.type;if("function"==typeof s.shouldComponentUpdate){ma(e,"shouldComponentUpdate");var l=s.shouldComponentUpdate(n,i,a);return va(),o(void 0!==l,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",on(e)||"Component"),l}return!u.prototype||!u.prototype.isPureReactComponent||(!c(t,n)||!c(r,i))}function m(e,t){t.props=e.memoizedProps,t.state=e.memoizedState}function v(e,t){var n;t.updater=h,e.stateNode=t,n=e,t._reactInternalFiber=n,t._reactInternalInstance=Aa}function g(e,t,n,r){var i=t.state;if(ma(e,"componentWillReceiveProps"),"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),va(),t.state!==i){var a=on(e)||"Component";Ma.has(a)||(Ma.add(a),o(!1,"%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",a)),h.enqueueReplaceState(t,t.state,null)}}function b(e,t,n,r){var i=e.type;if("function"==typeof i.getDerivedStateFromProps){(ji||Di&&e.mode&ri)&&i.getDerivedStateFromProps.call(null,n,r);var a=i.getDerivedStateFromProps.call(null,n,r);if(void 0===a){var s=on(e)||"Component";qa.has(s)||(qa.add(s),o(!1,"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",s))}return a}}return{adoptClassInstance:v,callGetDerivedStateFromProps:b,constructClassInstance:function(e,t){var n=e.type,r=l(e),i=f(e),c=i?u(e,r):d;(ji||Di&&e.mode&ri)&&new n(t,c);var p=new n(t,c),h=null!==p.state&&void 0!==p.state?p.state:null;if(v(e,p),"function"==typeof n.getDerivedStateFromProps&&null===h){var y=on(e)||"Component";La.has(y)||(La.add(y),o(!1,"%s: Did not properly initialize state during construction. Expected state to be an object, but it was %s.",y,null===p.state?"null":"undefined"))}if("function"==typeof n.getDerivedStateFromProps||"function"==typeof p.getSnapshotBeforeUpdate){var m=null,g=null,_=null;if("function"==typeof p.componentWillMount&&!0!==p.componentWillMount.__suppressDeprecationWarning?m="componentWillMount":"function"==typeof p.UNSAFE_componentWillMount&&(m="UNSAFE_componentWillMount"),"function"==typeof p.componentWillReceiveProps&&!0!==p.componentWillReceiveProps.__suppressDeprecationWarning?g="componentWillReceiveProps":"function"==typeof p.UNSAFE_componentWillReceiveProps&&(g="UNSAFE_componentWillReceiveProps"),"function"==typeof p.componentWillUpdate&&!0!==p.componentWillUpdate.__suppressDeprecationWarning?_="componentWillUpdate":"function"==typeof p.UNSAFE_componentWillUpdate&&(_="UNSAFE_componentWillUpdate"),null!==m||null!==g||null!==_){var w=on(e)||"Component",x="function"==typeof n.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";Da.has(w)||(Da.add(w),o(!1,"Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks",w,x,null!==m?"\n  "+m:"",null!==g?"\n  "+g:"",null!==_?"\n  "+_:""))}}e.memoizedState=h;var k=b(e,0,t,h);return null!==k&&void 0!==k&&(e.memoizedState=a({},e.memoizedState,k)),i&&s(e,r,c),p},mountClassInstance:function(e,t){var n=e.type,r=e.alternate;!function(e){var t=e.stateNode,n=e.type,r=on(e)||"Component";t.render||(n.prototype&&"function"==typeof n.prototype.render?o(!1,"%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",r):o(!1,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",r));var i=!t.getInitialState||t.getInitialState.isReactClassApproved||t.state;o(i,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",r);var a=!t.getDefaultProps||t.getDefaultProps.isReactClassApproved;o(a,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",r);var s=!t.propTypes;o(s,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",r);var u=!t.contextTypes;o(u,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",r);var l="function"!=typeof t.componentShouldUpdate;o(l,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",r),n.prototype&&n.prototype.isPureReactComponent&&void 0!==t.shouldComponentUpdate&&o(!1,"%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",on(e)||"A pure component");var c="function"!=typeof t.componentDidUnmount;o(c,"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",r);var f="function"!=typeof t.componentDidReceiveProps;o(f,"%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",r);var d="function"!=typeof t.componentWillRecieveProps;o(d,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",r);var p="function"!=typeof t.UNSAFE_componentWillRecieveProps;o(p,"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",r);var h=t.props!==e.pendingProps;o(void 0===t.props||!h,"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",r,r);var y=!t.defaultProps;o(y,"Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",r,r),"function"!=typeof t.getSnapshotBeforeUpdate||"function"==typeof t.componentDidUpdate||"function"==typeof t.componentDidUpdate||ja.has(n)||(ja.add(n),o(!1,"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",on(e)));var m="function"!=typeof t.getDerivedStateFromProps;o(m,"%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",r);var v="function"!=typeof t.getDerivedStateFromCatch;o(v,"%s: getDerivedStateFromCatch() is defined as an instance method and will be ignored. Instead, declare it as a static method.",r);var g="function"!=typeof n.getSnapshotBeforeUpdate;o(g,"%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",r);var b=t.state;b&&("object"!=typeof b||Na(b))&&o(!1,"%s.state: must be set to an object or null",r),"function"==typeof t.getChildContext&&o("object"==typeof n.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",r)}(e);var i=e.stateNode,a=e.pendingProps,s=l(e);if(i.props=a,i.state=e.memoizedState,i.refs=d,i.context=u(e,s),e.mode&ri&&Si.recordUnsafeLifecycleWarnings(e,i),Ui&&Si.recordDeprecationWarnings(e,i),"function"!=typeof n.getDerivedStateFromProps&&"function"!=typeof i.getSnapshotBeforeUpdate&&("function"==typeof i.UNSAFE_componentWillMount||"function"==typeof i.componentWillMount)){!function(e,t){ma(e,"componentWillMount");var n=t.state;"function"==typeof t.componentWillMount&&t.componentWillMount(),"function"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),va(),n!==t.state&&(o(!1,"%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",on(e)||"Component"),h.enqueueReplaceState(t,t.state,null))}(e,i);var c=e.updateQueue;null!==c&&(i.state=Oa(r,e,c,i,a,t))}"function"==typeof i.componentDidMount&&(e.effectTag|=Cr)},resumeMountClassInstance:function(e,t){var n=e.type,o=e.stateNode;m(e,o);var s=e.memoizedProps,c=e.pendingProps,f=o.context,d=l(e),h=u(e,d),v="function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate;v||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||s===c&&f===h||g(e,o,c,h);var _=e.memoizedState,w=void 0,x=void 0;if(null!==e.updateQueue){w=Oa(null,e,e.updateQueue,o,c,t);var k=e.updateQueue;null!==k&&null!==k.capturedValues&&Li&&"function"==typeof n.getDerivedStateFromCatch&&(x=Ua(n,k.capturedValues))}else w=_;var C=void 0;if(s!==c&&(C=b(e,0,c,w)),null!==C&&void 0!==C){w=null===w||void 0===w?C:a({},w,C);var S=e.updateQueue;null!==S&&(S.baseState=a({},S.baseState,C))}if(null!==x&&void 0!==x){w=null===w||void 0===w?x:a({},w,x);var T=e.updateQueue;null!==T&&(T.baseState=a({},T.baseState,x))}if(!(s!==c||_!==w||p()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate))return"function"==typeof o.componentDidMount&&(e.effectTag|=Cr),!1;var E=y(e,s,c,_,w,h);return E?(v||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(ma(e,"componentWillMount"),"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),va()),"function"==typeof o.componentDidMount&&(e.effectTag|=Cr)):("function"==typeof o.componentDidMount&&(e.effectTag|=Cr),r(e,c),i(e,w)),o.props=c,o.state=w,o.context=h,E},updateClassInstance:function(e,t,n){var o=t.type,s=t.stateNode;m(t,s);var c=t.memoizedProps,f=t.pendingProps,d=s.context,h=l(t),v=u(t,h),_="function"==typeof o.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate;_||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||c===f&&d===v||g(t,s,f,v);var w=t.memoizedState,x=void 0,k=void 0;if(null!==t.updateQueue){x=Oa(e,t,t.updateQueue,s,f,n);var C=t.updateQueue;null!==C&&null!==C.capturedValues&&Li&&"function"==typeof o.getDerivedStateFromCatch&&(k=Ua(o,C.capturedValues))}else x=w;var S=void 0;if(c!==f&&(S=b(t,0,f,x)),null!==S&&void 0!==S){x=null===x||void 0===x?S:a({},x,S);var T=t.updateQueue;null!==T&&(T.baseState=a({},T.baseState,S))}if(null!==k&&void 0!==k){x=null===x||void 0===x?k:a({},x,k);var E=t.updateQueue;null!==E&&(E.baseState=a({},E.baseState,k))}if(!(c!==f||w!==x||p()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"==typeof s.componentDidUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Cr)),"function"==typeof s.getSnapshotBeforeUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Ar)),!1;var I=y(t,c,f,w,x,v);return I?(_||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||(ma(t,"componentWillUpdate"),"function"==typeof s.componentWillUpdate&&s.componentWillUpdate(f,x,v),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(f,x,v),va()),"function"==typeof s.componentDidUpdate&&(t.effectTag|=Cr),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=Ar)):("function"==typeof s.componentDidUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Cr)),"function"==typeof s.getSnapshotBeforeUpdate&&(c===e.memoizedProps&&w===e.memoizedState||(t.effectTag|=Ar)),r(t,f),i(t,x)),s.props=f,s.state=x,s.context=v,I}}},Ba=ln.getCurrentFiberStackAddendum,Ha=void 0,za=void 0,Va=void 0,Ka=void 0,Qa=function(e){};Ha=!1,za={},Va={},Ka={},Qa=function(e){if(null!==e&&"object"==typeof e&&e._store&&!e._store.validated&&null==e.key){"object"!=typeof e._store&&r(!1,"React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."),e._store.validated=!0;var t='Each child in an array or iterator should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.'+(Ba()||"");Va[t]||(Va[t]=!0,o(!1,'Each child in an array or iterator should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.%s',Ba()))}};var $a=Array.isArray;function Ya(e,t,n){var i=n.ref;if(null!==i&&"function"!=typeof i&&"object"!=typeof i){if(e.mode&ri){var a=on(e)||"Component";za[a]||(o(!1,'A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using createRef() instead.\n%s\n\nLearn more about using refs safely here:\nhttps://fb.me/react-strict-mode-string-ref',i,sn(e)),za[a]=!0)}if(n._owner){var s=n._owner,u=void 0;if(s){var l=s;l.tag!==X&&r(!1,"Stateless function components cannot have refs."),u=l.stateNode}u||r(!1,"Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.",i);var c=""+i;if(null!==t&&null!==t.ref&&t.ref._stringRef===c)return t.ref;var f=function(e){var t=u.refs===d?u.refs={}:u.refs;null===e?delete t[c]:t[c]=e};return f._stringRef=c,f}"string"!=typeof i&&r(!1,"Expected ref to be a function or a string."),n._owner||r(!1,"Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.",i)}return i}function Ja(e,t){if("textarea"!==e.type){var n;n=" If you meant to render a collection of children, use an array instead."+(Ba()||""),r(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,n)}}function Ga(){var e="Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."+(Ba()||"");Ka[e]||(Ka[e]=!0,o(!1,"Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.%s",Ba()||""))}function Xa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=Tr}}function n(n,r){if(!e)return null;for(var o=r;null!==o;)t(n,o),o=o.sibling;return null}function i(e,t){for(var n=new Map,r=t;null!==r;)null!==r.key?n.set(r.key,r):n.set(r.index,r),r=r.sibling;return n}function a(e,t,n){var r=ci(e,t,n);return r.index=0,r.sibling=null,r}function s(t,n,r){if(t.index=r,!e)return n;var o=t.alternate;if(null!==o){var i=o.index;return i<n?(t.effectTag=kr,n):i}return t.effectTag=kr,n}function u(t){return e&&null===t.alternate&&(t.effectTag=kr),t}function l(e,t,n,r){if(null===t||t.tag!==ne){var o=hi(n,e.mode,r);return o.return=e,o}var i=a(t,n,r);return i.return=e,i}function c(e,t,n,r){if(null!==t&&t.type===n.type){var o=a(t,n.props,r);return o.ref=Ya(e,t,n),o.return=e,o._debugSource=n._source,o._debugOwner=n._owner,o}var i=fi(n,e.mode,r);return i.ref=Ya(e,t,n),i.return=e,i}function f(e,t,n,r){if(null===t||t.tag!==ee||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation){var o=yi(n,e.mode,r);return o.return=e,o}var i=a(t,n.children||[],r);return i.return=e,i}function d(e,t,n,r,o){if(null===t||t.tag!==ae){var i=pi(n,e.mode,r,o);return i.return=e,i}var s=a(t,n,r);return s.return=e,s}function p(e,t,n){if("string"==typeof t||"number"==typeof t){var r=hi(""+t,e.mode,n);return r.return=e,r}if("object"==typeof t&&null!==t){switch(t.$$typeof){case Vt:var o=fi(t,e.mode,n);return o.ref=Ya(e,null,t),o.return=e,o;case $t:var i=yi(t,e.mode,n);return i.return=e,i}if($a(t)||rn(t)){var a=pi(t,e.mode,n,null);return a.return=e,a}Ja(e,t)}return"function"==typeof t&&Ga(),null}function h(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Vt:return n.key===o?n.type===Yt?d(e,t,n.props.children,r,o):c(e,t,n,r):null;case $t:return n.key===o?f(e,t,n,r):null}if($a(n)||rn(n))return null!==o?null:d(e,t,n,r,null);Ja(e,n)}return"function"==typeof n&&Ga(),null}function y(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Vt:var i=e.get(null===r.key?n:r.key)||null;return r.type===Yt?d(t,i,r.props.children,o,r.key):c(t,i,r,o);case $t:return f(t,e.get(null===r.key?n:r.key)||null,r,o)}if($a(r)||rn(r))return d(t,e.get(n)||null,r,o,null);Ja(t,r)}return"function"==typeof r&&Ga(),null}function m(e,t){if("object"!=typeof e||null===e)return t;switch(e.$$typeof){case Vt:case $t:Qa(e);var n=e.key;if("string"!=typeof n)break;if(null===t){(t=new Set).add(n);break}if(!t.has(n)){t.add(n);break}o(!1,"Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.%s",n,Ba())}return t}return function(l,c,f,d){"object"==typeof f&&null!==f&&f.type===Yt&&null===f.key&&(f=f.props.children);var v="object"==typeof f&&null!==f;if(v)switch(f.$$typeof){case Vt:return u(function(e,r,o,i){for(var s=o.key,u=r;null!==u;){if(u.key===s){if(u.tag===ae?o.type===Yt:u.type===o.type){n(e,u.sibling);var l=a(u,o.type===Yt?o.props.children:o.props,i);return l.ref=Ya(e,u,o),l.return=e,l._debugSource=o._source,l._debugOwner=o._owner,l}n(e,u);break}t(e,u),u=u.sibling}if(o.type===Yt){var c=pi(o.props.children,e.mode,i,o.key);return c.return=e,c}var f=fi(o,e.mode,i);return f.ref=Ya(e,r,o),f.return=e,f}(l,c,f,d));case $t:return u(function(e,r,o,i){for(var s=o.key,u=r;null!==u;){if(u.key===s){if(u.tag===ee&&u.stateNode.containerInfo===o.containerInfo&&u.stateNode.implementation===o.implementation){n(e,u.sibling);var l=a(u,o.children||[],i);return l.return=e,l}n(e,u);break}t(e,u),u=u.sibling}var c=yi(o,e.mode,i);return c.return=e,c}(l,c,f,d))}if("string"==typeof f||"number"==typeof f)return u(function(e,t,r,o){if(null!==t&&t.tag===ne){n(e,t.sibling);var i=a(t,r,o);return i.return=e,i}n(e,t);var s=hi(r,e.mode,o);return s.return=e,s}(l,c,""+f,d));if($a(f))return function(r,o,a,u){for(var l=null,c=0;c<a.length;c++)l=m(a[c],l);for(var f=null,d=null,v=o,g=0,b=0,_=null;null!==v&&b<a.length;b++){v.index>b?(_=v,v=null):_=v.sibling;var w=h(r,v,a[b],u);if(null===w){null===v&&(v=_);break}e&&v&&null===w.alternate&&t(r,v),g=s(w,g,b),null===d?f=w:d.sibling=w,d=w,v=_}if(b===a.length)return n(r,v),f;if(null===v){for(;b<a.length;b++){var x=p(r,a[b],u);x&&(g=s(x,g,b),null===d?f=x:d.sibling=x,d=x)}return f}for(var k=i(0,v);b<a.length;b++){var C=y(k,r,b,a[b],u);C&&(e&&null!==C.alternate&&k.delete(null===C.key?b:C.key),g=s(C,g,b),null===d?f=C:d.sibling=C,d=C)}return e&&k.forEach(function(e){return t(r,e)}),f}(l,c,f,d);if(rn(f))return function(a,u,l,c){var f=rn(l);"function"!=typeof f&&r(!1,"An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."),"function"==typeof l.entries&&l.entries===f&&(o(Ha,"Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.%s",Ba()),Ha=!0);var d=f.call(l);if(d)for(var v=null,g=d.next();!g.done;g=d.next())v=m(g.value,v);var b=f.call(l);null==b&&r(!1,"An iterable object provided no iterator.");for(var _=null,w=null,x=u,k=0,C=0,S=null,T=b.next();null!==x&&!T.done;C++,T=b.next()){x.index>C?(S=x,x=null):S=x.sibling;var E=h(a,x,T.value,c);if(null===E){x||(x=S);break}e&&x&&null===E.alternate&&t(a,x),k=s(E,k,C),null===w?_=E:w.sibling=E,w=E,x=S}if(T.done)return n(a,x),_;if(null===x){for(;!T.done;C++,T=b.next()){var I=p(a,T.value,c);null!==I&&(k=s(I,k,C),null===w?_=I:w.sibling=I,w=I)}return _}for(var O=i(0,x);!T.done;C++,T=b.next()){var P=y(O,a,C,T.value,c);null!==P&&(e&&null!==P.alternate&&O.delete(null===P.key?C:P.key),k=s(P,k,C),null===w?_=P:w.sibling=P,w=P)}return e&&O.forEach(function(e){return t(a,e)}),_}(l,c,f,d);if(v&&Ja(l,f),"function"==typeof f&&Ga(),void 0===f)switch(l.tag){case X:if(l.stateNode.render._isMockFunction)break;case G:var g=l.type;r(!1,"%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.",g.displayName||g.name||"Component")}return n(l,c)}}var Za=Xa(!0),es=Xa(!1);var ts=void 0,ns=void 0,rs=void 0;ts={},ns={},rs={};var os=function(e,t,n,i,s,u,l){var c=e.shouldSetTextContent,f=e.shouldDeprioritizeSubtree,d=t.pushHostContext,p=t.pushHostContainer,h=i.pushProvider,y=n.getMaskedContext,m=n.getUnmaskedContext,v=n.hasContextChanged,g=n.pushContextProvider,b=n.pushTopLevelContextObject,_=n.invalidateContextProvider,w=s.enterHydrationState,x=s.resetHydrationState,k=s.tryToClaimNextHydratableInstance,C=Wa(n,u,l,D,F),S=C.adoptClassInstance,T=C.callGetDerivedStateFromProps,E=C.constructClassInstance,I=C.mountClassInstance,O=C.resumeMountClassInstance,P=C.updateClassInstance;function R(e,t,n){A(e,t,n,t.expirationTime)}function A(e,t,n,r){t.child=null===e?es(t,null,n,r):Za(t,e.child,n,r)}function N(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=Pr)}function M(e,t,n,r,o,i){if(N(e,t),!n&&!o)return r&&_(t,!1),j(e,t);var a=t.type,s=t.stateNode;Wt.current=t;var u=void 0;return!o||Li&&"function"==typeof a.getDerivedStateFromCatch?(ln.setCurrentPhase("render"),u=s.render(),(ji||Di&&t.mode&ri)&&s.render(),ln.setCurrentPhase(null)):u=null,t.effectTag|=xr,o&&(A(e,t,null,i),t.child=null),A(e,t,u,i),F(t,s.state),D(t,s.props),r&&_(t,!0),t.child}function q(e){var t=e.stateNode;t.pendingContext?b(e,t.pendingContext,t.pendingContext!==t.context):t.context&&b(e,t.context,!1),p(e,t.containerInfo)}function L(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var i=void 0;switch(o.tag){case ue:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(var s=o;null!==s;){var u=s.alternate;if(s.expirationTime===Qo||s.expirationTime>r)s.expirationTime=r,null!==u&&(u.expirationTime===Qo||u.expirationTime>r)&&(u.expirationTime=r);else{if(null===u||!(u.expirationTime===Qo||u.expirationTime>r))break;u.expirationTime=r}s=s.return}i=null}else i=o.child;break;case le:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}var l=i.sibling;if(null!==l){i=l;break}i=i.return}o=i}}function j(e,t){return pa(t),function(e,t){if(null!==e&&t.child!==e.child&&r(!1,"Resuming work not yet implemented."),null!==t.child){var n=t.child,o=ci(n,n.pendingProps,n.expirationTime);for(t.child=o,o.return=t;null!==n.sibling;)n=n.sibling,(o=o.sibling=ci(n,n.pendingProps,n.expirationTime)).return=t;o.sibling=null}}(e,t),t.child}function D(e,t){e.memoizedProps=t}function F(e,t){e.memoizedState=t}return{beginWork:function(e,t,n){if(t.expirationTime===Qo||t.expirationTime>n)return function(e,t){switch(pa(t),t.tag){case Z:q(t);break;case X:g(t);break;case ee:p(t,t.stateNode.containerInfo);break;case le:h(t)}return null}(0,t);switch(t.tag){case J:return function(e,t,n){null!==e&&r(!1,"An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");var i,s=t.type,u=t.pendingProps,l=m(t),c=y(t,l);if(s.prototype&&"function"==typeof s.prototype.render){var f=on(t)||"Unknown";ts[f]||(o(!1,"The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",f,f),ts[f]=!0)}if(Wt.current=t,i=s(u,c),t.effectTag|=xr,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){var d=t.type;if(t.tag=X,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,"function"==typeof d.getDerivedStateFromProps){var p=T(t,i,u,t.memoizedState);null!==p&&void 0!==p&&(t.memoizedState=a({},t.memoizedState,p))}var h=g(t);return S(t,i),I(t,n),M(e,t,!0,h,!1,n)}t.tag=G;var v=t.type;if(v&&o(!v.childContextTypes,"%s(...): childContextTypes cannot be defined on a functional component.",v.displayName||v.name||"Component"),null!==t.ref){var b="",_=ln.getCurrentFiberOwnerName();_&&(b+="\n\nCheck the render method of `"+_+"`.");var w=_||t._debugID||"",x=t._debugSource;x&&(w=x.fileName+":"+x.lineNumber),rs[w]||(rs[w]=!0,o(!1,"Stateless function components cannot be given refs. Attempts to access this ref will fail.%s%s",b,ln.getCurrentFiberStackAddendum()))}if("function"==typeof s.getDerivedStateFromProps){var k=on(t)||"Unknown";ns[k]||(o(!1,"%s: Stateless functional components do not support getDerivedStateFromProps.",k),ns[k]=!0)}return R(e,t,i),D(t,u),t.child}(e,t,n);case G:return function(e,t){var n=t.type,r=t.pendingProps;if(v());else if(t.memoizedProps===r)return j(e,t);var o,i=m(t),a=y(t,i);return Wt.current=t,ln.setCurrentPhase("render"),o=n(r,a),ln.setCurrentPhase(null),t.effectTag|=xr,R(e,t,o),D(t,r),t.child}(e,t);case X:return function(e,t,n){var r=g(t),o=void 0;null===e?null===t.stateNode?(E(t,t.pendingProps),I(t,n),o=!0):o=O(t,n):o=P(e,t,n);var i=!1,a=t.updateQueue;return null!==a&&null!==a.capturedValues&&(o=!0,i=!0),M(e,t,o,r,i,n)}(e,t,n);case Z:return function(e,t,n){q(t);var r=t.updateQueue;if(null!==r){var o=t.memoizedState,i=Oa(e,t,r,null,null,n);F(t,i);var a=void 0;if(null!==(r=t.updateQueue)&&null!==r.capturedValues)a=null;else{if(o===i)return x(),j(e,t);a=i.element}var s=t.stateNode;return(null===e||null===e.child)&&s.hydrate&&w(t)?(t.effectTag|=kr,t.child=es(t,null,a,n)):(x(),R(e,t,a)),F(t,i),t.child}return x(),j(e,t)}(e,t,n);case te:return function(e,t,n){d(t),null===e&&k(t);var r=t.type,o=t.memoizedProps,i=t.pendingProps,a=null!==e?e.memoizedProps:null;if(v());else if(o===i){var s=t.mode&ni&&f(r,i);if(s&&(t.expirationTime=Yo),!s||n!==Yo)return j(e,t)}var u=i.children;return c(r,i)?u=null:a&&c(r,a)&&(t.effectTag|=Er),N(e,t),n!==Yo&&t.mode&ni&&f(r,i)?(t.expirationTime=Yo,t.memoizedProps=i,null):(R(e,t,u),D(t,i),t.child)}(e,t,n);case ne:return function(e,t){return null===e&&k(t),D(t,t.pendingProps),null}(e,t);case oe:t.tag=re;case re:return function(e,t,n){var r=t.pendingProps;v()||t.memoizedProps===r&&(r=t.memoizedProps);var o=r.children;return t.stateNode=null===e?es(t,t.stateNode,o,n):Za(t,e.stateNode,o,n),D(t,r),t.stateNode}(e,t,n);case ie:return null;case ee:return function(e,t,n){p(t,t.stateNode.containerInfo);var r=t.pendingProps;if(v());else if(t.memoizedProps===r)return j(e,t);return null===e?(t.child=Za(t,null,r,n),D(t,r)):(R(e,t,r),D(t,r)),t.child}(e,t,n);case ce:return function(e,t){var n=(0,t.type.render)(t.pendingProps,t.ref);return R(e,t,n),D(t,n),t.child}(e,t);case ae:return function(e,t){var n=t.pendingProps;if(v());else if(t.memoizedProps===n)return j(e,t);return R(e,t,n),D(t,n),t.child}(e,t);case se:return function(e,t){var n=t.pendingProps.children;if(v());else if(null===n||t.memoizedProps===n)return j(e,t);return R(e,t,n),D(t,n),t.child}(e,t);case le:return function(e,t,n){var r=t.type._context,i=t.pendingProps,a=t.memoizedProps;if(v());else if(a===i)return t.stateNode=0,h(t),j(e,t);var s=i.value;t.memoizedProps=i;var u=void 0;if(null===a)u=Ko;else if(a.value===i.value){if(a.children===i.children)return t.stateNode=0,h(t),j(e,t);u=0}else{var l=a.value;if(l===s&&(0!==l||1/l==1/s)||l!=l&&s!=s){if(a.children===i.children)return t.stateNode=0,h(t),j(e,t);u=0}else if(u="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,s):Ko,o((u&Ko)===u,"calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s",u),0==(u|=0)){if(a.children===i.children)return t.stateNode=0,h(t),j(e,t)}else L(t,r,u,n)}return t.stateNode=u,h(t),R(e,t,i.children),t.child}(e,t,n);case ue:return function(e,t,n){var r=t.type,i=t.pendingProps,a=t.memoizedProps,s=r._currentValue,u=r._changedBits;if(v());else if(0===u&&a===i)return j(e,t);t.memoizedProps=i;var l=i.unstable_observedBits;void 0!==l&&null!==l||(l=Ko),t.stateNode=l,0!=(u&l)&&L(t,r,u,n);var c=i.children;return o("function"==typeof c,"A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),R(e,t,c(s)),t.child}(e,t,n);default:r(!1,"Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.")}}}},is=function(e,t,n,o,i){var a=e.createInstance,s=e.createTextInstance,u=e.appendInitialChild,l=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.mutation,d=e.persistence,p=t.getRootHostContainer,h=t.popHostContext,y=t.getHostContext,m=t.popHostContainer,v=n.popContextProvider,g=n.popTopLevelContextObject,b=o.popProvider,_=i.prepareToHydrateHostInstance,w=i.prepareToHydrateHostTextInstance,x=i.popHydrationState;function k(e){e.effectTag|=Cr}function C(e){e.effectTag|=Pr}function S(e,t,n){var o=t.memoizedProps;o||r(!1,"Should be resolved by now. This error is likely caused by a bug in React. Please file an issue."),t.tag=oe;var i=[];!function(e,t){var n=t.stateNode;for(n&&(n.return=t);null!==n;){if(n.tag===te||n.tag===ne||n.tag===ee)r(!1,"A call cannot have host component children.");else if(n.tag===ie)e.push(n.pendingProps.value);else if(null!==n.child){n.child.return=n,n=n.child;continue}for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(i,t);var a=(0,o.handler)(o.props,i),s=null!==e?e.child:null;return t.child=Za(t,s,a,n),t.child}function T(e,t){for(var n=t.child;null!==n;){if(n.tag===te||n.tag===ne)u(e,n.stateNode);else if(n.tag===ee);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)return;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}var E=void 0,I=void 0,O=void 0;if(f)Mi?(E=function(e){},I=function(e,t,n,r,o,i,a,s){t.updateQueue=n,n&&k(t)},O=function(e,t,n,r){n!==r&&k(t)}):r(!1,"Mutating reconciler is disabled.");else if(d)if(qi){var P=d.cloneInstance,R=d.createContainerChildSet,A=d.appendChildToContainerChildSet,N=d.finalizeContainerChildren;E=function(e){var t=e.stateNode;if(null===e.firstEffect);else{var n=t.containerInfo,r=R(n);!function(e,t){for(var n=t.child;null!==n;){if(n.tag===te||n.tag===ne)A(e,n.stateNode);else if(n.tag===ee);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)return;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(r,e),t.pendingChildren=r,k(e),N(n,r)}},I=function(e,t,n,r,o,i,a,s){var u=null===t.firstEffect,c=e.stateNode;if(u&&null===n)t.stateNode=c;else{var f=t.stateNode,d=P(c,n,r,o,i,t,u,f);l(d,r,i,a,s)&&k(t),t.stateNode=d,u?k(t):T(d,t)}},O=function(e,t,n,r){if(n!==r){var o=p(),i=y();t.stateNode=s(r,o,i,t),k(t)}}}else r(!1,"Persistent reconciler is disabled.");else r(!1,"Noop reconciler is disabled.");return{completeWork:function(e,t,n){var o=t.pendingProps;switch(t.tag){case G:return null;case X:v(t);var i=t.stateNode,u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(t.effectTag&=~Or,"function"==typeof i.componentDidCatch?t.effectTag|=Rr:u.capturedValues=null),null;case Z:m(t),g(t);var f=t.stateNode;f.pendingContext&&(f.context=f.pendingContext,f.pendingContext=null),null!==e&&null!==e.child||(x(t),t.effectTag&=~kr),E(t);var d=t.updateQueue;return null!==d&&null!==d.capturedValues&&(t.effectTag|=Rr),null;case te:h(t);var P=p(),R=t.type;if(null!==e&&null!=t.stateNode){var A=e.memoizedProps,N=t.stateNode,M=y(),q=c(N,R,A,o,P,M);I(e,t,q,R,A,o,P,M),e.ref!==t.ref&&C(t)}else{if(!o)return null===t.stateNode&&r(!1,"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."),null;var L=y();if(x(t))_(t,P,L)&&k(t);else{var j=a(R,o,P,L,t);T(j,t),l(j,R,o,P,L)&&k(t),t.stateNode=j}null!==t.ref&&C(t)}return null;case ne:var D=o;if(e&&null!=t.stateNode){var F=e.memoizedProps;O(e,t,F,D)}else{if("string"!=typeof D)return null===t.stateNode&&r(!1,"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."),null;var U=p(),W=y();x(t)?w(t)&&k(t):t.stateNode=s(D,U,W,t)}return null;case re:return S(e,t,n);case oe:return t.tag=re,null;case ie:case ce:case ae:case se:return null;case ee:return m(t),E(t),null;case le:return b(t),null;case ue:return null;case J:r(!1,"An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");default:r(!1,"Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.")}}}};function as(e,t){return{value:e,source:t,stack:sn(t)}}var ss=g.invokeGuardedCallback,us=g.hasCaughtError,ls=g.clearCaughtError,cs=null;function fs(e,t){var n=t.source,r=t.stack;null===r&&(r=sn(n));var o={componentName:null!==n?on(n):null,componentStack:null!==r?r:"",error:t.value,errorBoundary:null,errorBoundaryName:null,errorBoundaryFound:!1,willRetry:!1};null!==e&&e.tag===X&&(o.errorBoundary=e.stateNode,o.errorBoundaryName=on(e),o.errorBoundaryFound=!0,o.willRetry=!0);try{!function(e){var t=e.error;if(!t||!t.suppressReactErrorLogging){var n=e.componentName,r=e.componentStack,o=e.errorBoundaryName,i=e.errorBoundaryFound,a=e.willRetry,s=(n?"The above error occurred in the <"+n+"> component:":"The above error occurred in one of your React components:")+r+"\n\n"+(i&&o?a?"React will try to recreate this component tree from scratch using the error boundary you provided, "+o+".":"This error was initially handled by the error boundary "+o+".\nRecreating the tree from scratch failed so React will unmount the tree.":"Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.");console.error(s)}}(o)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}cs=new Set;var ds=function(e,t,n,i,a,s){var u=e.getPublicInstance,l=e.mutation,c=e.persistence,f=function(e,t){ma(e,"componentWillUnmount"),t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount(),va()};function d(e){var n=e.ref;if(null!==n)if("function"==typeof n){if(ss(null,n,null,null),us()){var r=ls();t(e,r)}}else n.current=null}function p(e,t){switch(t.tag){case X:if(t.effectTag&Ar&&null!==e){var n=e.memoizedProps,i=e.memoizedState;ma(t,"getSnapshotBeforeUpdate");var a=t.stateNode;a.props=t.memoizedProps,a.state=t.memoizedState;var s=a.getSnapshotBeforeUpdate(n,i),u=cs;void 0!==s||u.has(t.type)||(u.add(t.type),o(!1,"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",on(t))),a.__reactInternalSnapshotBeforeUpdate=s,va()}return;case Z:case te:case ne:case ee:return;default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}}function h(e,t,n,o,i){switch(n.tag){case X:var a=n.stateNode;if(n.effectTag&Cr)if(null===t)ma(n,"componentDidMount"),a.props=n.memoizedProps,a.state=n.memoizedState,a.componentDidMount(),va();else{var s=t.memoizedProps,l=t.memoizedState;ma(n,"componentDidUpdate"),a.props=n.memoizedProps,a.state=n.memoizedState,a.componentDidUpdate(s,l,a.__reactInternalSnapshotBeforeUpdate),va()}var c=n.updateQueue;return void(null!==c&&Pa(c,a));case Z:var f=n.updateQueue;if(null!==f){var d=null;if(null!==n.child)switch(n.child.tag){case te:d=u(n.child.stateNode);break;case X:d=n.child.stateNode}Pa(f,d)}return;case te:var p=n.stateNode;if(null===t&&n.effectTag&Cr){var h=n.type,y=n.memoizedProps;S(p,h,y,n)}return;case ne:case ee:return;default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}}function y(e,t){switch(e.tag){case X:var n=e.type,o=e.stateNode,i=e.updateQueue;(null===i||null===i.capturedValues)&&r(!1,"An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");var s=i.capturedValues;i.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&a(o),o.props=e.memoizedProps,o.state=e.memoizedState;for(var u=0;u<s.length;u++){var l=s[u],c=l.value,f=l.stack;fs(e,l),o.componentDidCatch(c,{componentStack:null!==f?f:""})}break;case Z:var d=e.updateQueue;(null===d||null===d.capturedValues)&&r(!1,"An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");var p=d.capturedValues;d.capturedValues=null;for(var h=0;h<p.length;h++){var y=p[h];fs(e,y),t(y.value)}break;default:r(!1,"This unit of work tag cannot capture errors.  This error is likely caused by a bug in React. Please file an issue.")}}function m(e){var t=e.ref;if(null!==t){var n=e.stateNode,r=void 0;switch(e.tag){case te:r=u(n);break;default:r=n}"function"==typeof t?t(r):(t.hasOwnProperty("current")||o(!1,"Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s",on(e),sn(e)),t.current=r)}}function v(e){var t=e.ref;null!==t&&("function"==typeof t?t(null):t.current=null)}function g(e){switch(ki(e),e.tag){case X:d(e);var n=e.stateNode;return void("function"==typeof n.componentWillUnmount&&function(e,n){if(ss(null,f,null,e,n),us()){var r=ls();t(e,r)}}(e,n));case te:return void d(e);case re:return void b(e.stateNode);case ee:return void(Mi&&l?L(e):qi&&c&&w(e))}}function b(e){for(var t=e;;)if(g(t),null===t.child||l&&t.tag===ee){if(t===e)return;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function _(e){e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)}var w=void 0;if(!l){var x=void 0;if(c){var k=c.replaceContainerChildren,C=c.createContainerChildSet;w=function(e){var t=e.stateNode.containerInfo,n=C(t);k(t,n)},x=function(e){switch(e.tag){case X:case te:case ne:return;case Z:case ee:var t=e.stateNode,n=t.containerInfo,o=t.pendingChildren;return void k(n,o);default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}}}else x=function(e){};if(qi)return{commitResetTextContent:function(e){},commitPlacement:function(e){},commitDeletion:function(e){b(e),_(e)},commitWork:function(e,t){x(t)},commitLifeCycles:h,commitBeforeMutationLifeCycles:p,commitErrorLogging:y,commitAttachRef:m,commitDetachRef:v};r(!1,c?"Persistent reconciler is disabled.":"Noop reconciler is disabled.")}var S=l.commitMount,T=l.commitUpdate,E=l.resetTextContent,I=l.commitTextUpdate,O=l.appendChild,P=l.appendChildToContainer,R=l.insertBefore,A=l.insertInContainerBefore,N=l.removeChild,M=l.removeChildFromContainer;function q(e){return e.tag===te||e.tag===Z||e.tag===ee}function L(e){for(var t=e,n=!1,o=void 0,i=void 0;;){if(!n){var a=t.return;e:for(;;){switch(null===a&&r(!1,"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."),a.tag){case te:o=a.stateNode,i=!1;break e;case Z:case ee:o=a.stateNode.containerInfo,i=!0;break e}a=a.return}n=!0}if(t.tag===te||t.tag===ne)b(t),i?M(o,t.stateNode):N(o,t.stateNode);else if(t.tag===ee){if(o=t.stateNode.containerInfo,null!==t.child){t.child.return=t,t=t.child;continue}}else if(g(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)return;for(;null===t.sibling;){if(null===t.return||t.return===e)return;(t=t.return).tag===ee&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}if(Mi)return{commitBeforeMutationLifeCycles:p,commitResetTextContent:function(e){E(e.stateNode)},commitPlacement:function(e){var t=function(e){for(var t=e.return;null!==t;){if(q(t))return t;t=t.return}r(!1,"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.")}(e),n=void 0,o=void 0;switch(t.tag){case te:n=t.stateNode,o=!1;break;case Z:case ee:n=t.stateNode.containerInfo,o=!0;break;default:r(!1,"Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}t.effectTag&Er&&(E(n),t.effectTag&=~Er);for(var i=function(e){var t=e;e:for(;;){for(;null===t.sibling;){if(null===t.return||q(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==te&&t.tag!==ne;){if(t.effectTag&kr)continue e;if(null===t.child||t.tag===ee)continue e;t.child.return=t,t=t.child}if(!(t.effectTag&kr))return t.stateNode}}(e),a=e;;){if(a.tag===te||a.tag===ne)i?o?A(n,a.stateNode,i):R(n,a.stateNode,i):o?P(n,a.stateNode):O(n,a.stateNode);else if(a.tag===ee);else if(null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)return;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}},commitDeletion:function(e){L(e),_(e)},commitWork:function(e,t){switch(t.tag){case X:return;case te:var n=t.stateNode;if(null!=n){var o=t.memoizedProps,i=null!==e?e.memoizedProps:o,a=t.type,s=t.updateQueue;t.updateQueue=null,null!==s&&T(n,s,a,i,o,t)}return;case ne:null===t.stateNode&&r(!1,"This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");var u=t.stateNode,l=t.memoizedProps,c=null!==e?e.memoizedProps:l;return void I(u,c,l);case Z:return;default:r(!1,"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}},commitLifeCycles:h,commitErrorLogging:y,commitAttachRef:m,commitDetachRef:v};r(!1,"Mutating reconciler is disabled.")},ps={},hs=function(e){var t=e.shouldSetTextContent,n=e.hydration;if(!n)return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){r(!1,"Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.")},prepareToHydrateHostTextInstance:function(){r(!1,"Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.")},popHydrationState:function(e){return!1}};var o=n.canHydrateInstance,i=n.canHydrateTextInstance,a=n.getNextHydratableSibling,s=n.getFirstHydratableChild,u=n.hydrateInstance,l=n.hydrateTextInstance,c=n.didNotMatchHydratedContainerTextInstance,f=n.didNotMatchHydratedTextInstance,d=n.didNotHydrateContainerInstance,p=n.didNotHydrateInstance,h=n.didNotFindHydratableContainerInstance,y=n.didNotFindHydratableContainerTextInstance,m=n.didNotFindHydratableInstance,v=n.didNotFindHydratableTextInstance,g=null,b=null,_=!1;function w(e,t){switch(e.tag){case Z:d(e.stateNode.containerInfo,t);break;case te:p(e.type,e.memoizedProps,e.stateNode,t)}var n,r=((n=li(te,null,null,ti)).type="DELETED",n);r.stateNode=t,r.return=e,r.effectTag=Tr,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function x(e,t){switch(t.effectTag|=kr,e.tag){case Z:var n=e.stateNode.containerInfo;switch(t.tag){case te:var r=t.type,o=t.pendingProps;h(n,r,o);break;case ne:var i=t.pendingProps;y(n,i)}break;case te:var a=e.type,s=e.memoizedProps,u=e.stateNode;switch(t.tag){case te:var l=t.type,c=t.pendingProps;m(a,s,u,l,c);break;case ne:var f=t.pendingProps;v(a,s,u,f)}break;default:return}}function k(e,t){switch(e.tag){case te:var n=e.type,r=e.pendingProps,a=o(t,n,r);return null!==a&&(e.stateNode=a,!0);case ne:var s=e.pendingProps,u=i(t,s);return null!==u&&(e.stateNode=u,!0);default:return!1}}function C(e){for(var t=e.return;null!==t&&t.tag!==te&&t.tag!==Z;)t=t.return;g=t}return{enterHydrationState:function(e){var t=e.stateNode.containerInfo;return b=s(t),g=e,_=!0,!0},resetHydrationState:function(){g=null,b=null,_=!1},tryToClaimNextHydratableInstance:function(e){if(_){var t=b;if(!t)return x(g,e),_=!1,void(g=e);if(!k(e,t)){if(!(t=a(t))||!k(e,t))return x(g,e),_=!1,void(g=e);w(g,b)}g=e,b=s(t)}},prepareToHydrateHostInstance:function(e,t,n){var r=e.stateNode,o=u(r,e.type,e.memoizedProps,t,n,e);return e.updateQueue=o,null!==o},prepareToHydrateHostTextInstance:function(e){var t=e.stateNode,n=e.memoizedProps,r=l(t,n,e);if(r){var o=g;if(null!==o)switch(o.tag){case Z:var i=o.stateNode.containerInfo;c(i,t,n);break;case te:var a=o.type,s=o.memoizedProps,u=o.stateNode;f(a,s,u,t,n)}}return r},popHydrationState:function(e){if(e!==g)return!1;if(!_)return C(e),_=!0,!1;var n=e.type;if(e.tag!==te||"head"!==n&&"body"!==n&&!t(n,e.memoizedProps))for(var r=b;r;)w(e,r),r=a(r);return C(e),b=g?a(e.stateNode):null,!0}}},ys={debugTool:null},ms=void 0;ms={};var vs=g.invokeGuardedCallback,gs=g.hasCaughtError,bs=g.clearCaughtError,_s=void 0,ws=void 0,xs=void 0,ks=void 0;_s=!1,ws=!1;var Cs={};xs=function(e){var t=on(e)||"ReactClass";Cs[t]||(o(!1,"Can't call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.%s",sn(e)),Cs[t]=!0)},ks=function(e){switch(ln.phase){case"getChildContext":if(ws)return;o(!1,"setState(...): Cannot call setState() inside getChildContext()"),ws=!0;break;case"render":if(_s)return;o(!1,"Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`."),_s=!0}};var Ss=function(e){var t=function(){var e=[],t=void 0;t=[];var n=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===n},pop:function(r,i){n<0?o(!1,"Unexpected pop."):(i!==t[n]&&o(!1,"Unexpected Fiber popped."),r.current=e[n],e[n]=null,t[n]=null,n--)},push:function(r,o,i){e[++n]=r.current,t[n]=i,r.current=o},checkThatStackIsEmpty:function(){-1!==n&&o(!1,"Expected an empty stack. Something was not reset properly.")},resetStackAfterFatalErrorInDev:function(){n=-1,e.length=0,t.length=0}}}(),n=function(e,t){var n=e.getChildHostContext,o=e.getRootHostContext,i=t.createCursor,a=t.push,s=t.pop,u=i(ps),l=i(ps),c=i(ps);function f(e){return e===ps&&r(!1,"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."),e}return{getHostContext:function(){return f(u.current)},getRootHostContainer:function(){return f(c.current)},popHostContainer:function(e){s(u,e),s(l,e),s(c,e)},popHostContext:function(e){l.current===e&&(s(u,e),s(l,e))},pushHostContainer:function(e,t){a(c,t,e),a(l,e,e),a(u,ps,e);var n=o(t);s(u,e),a(u,n,e)},pushHostContext:function(e){var t=f(c.current),r=f(u.current),o=n(r,e.type,t);r!==o&&(a(l,e,e),a(u,o,e))}}}(e,t),i=function(e){var t=e.createCursor,n=e.push,i=e.pop,s=t(d),l=t(!1),c=d;function f(e,t,n){var r=e.stateNode;r.__reactInternalMemoizedUnmaskedChildContext=t,r.__reactInternalMemoizedMaskedChildContext=n}function p(e){return e.tag===X&&null!=e.type.childContextTypes}function h(e,t){var n,i=e.stateNode,s=e.type.childContextTypes;if("function"!=typeof i.getChildContext){var l=on(e)||"Unknown";return ms[l]||(ms[l]=!0,o(!1,"%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",l,l)),t}for(var c in ln.setCurrentPhase("getChildContext"),ma(e,"getChildContext"),n=i.getChildContext(),va(),ln.setCurrentPhase(null),n)c in s||r(!1,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',on(e)||"Unknown",c);var f=on(e)||"Unknown";return u(s,n,"child context",f,ln.getCurrentFiberStackAddendum),a({},t,n)}return{getUnmaskedContext:function(e){return p(e)?c:s.current},cacheContext:f,getMaskedContext:function(e,t){var n=e.type.contextTypes;if(!n)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={};for(var i in n)o[i]=t[i];var a=on(e)||"Unknown";return u(n,o,"context",a,ln.getCurrentFiberStackAddendum),r&&f(e,t,o),o},hasContextChanged:function(){return l.current},isContextConsumer:function(e){return e.tag===X&&null!=e.type.contextTypes},isContextProvider:p,popContextProvider:function(e){p(e)&&(i(l,e),i(s,e))},popTopLevelContextObject:function(e){i(l,e),i(s,e)},pushTopLevelContextObject:function(e,t,o){null!=s.cursor&&r(!1,"Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."),n(s,t,e),n(l,o,e)},processChildContext:h,pushContextProvider:function(e){if(!p(e))return!1;var t=e.stateNode,r=t&&t.__reactInternalMemoizedMergedChildContext||d;return c=s.current,n(s,r,e),n(l,l.current,e),!0},invalidateContextProvider:function(e,t){var o=e.stateNode;if(o||r(!1,"Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."),t){var a=h(e,c);o.__reactInternalMemoizedMergedChildContext=a,i(l,e),i(s,e),n(s,a,e),n(l,t,e)}else i(l,e),n(l,t,e)},findCurrentUnmaskedContext:function(e){Ur(e)&&e.tag===X||r(!1,"Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");for(var t=e;t.tag!==Z;){if(p(t))return t.stateNode.__reactInternalMemoizedMergedChildContext;var n=t.return;n||r(!1,"Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."),t=n}return t.stateNode.context}}}(t),s=function(e){var t=e.createCursor,n=e.push,r=e.pop,i=t(null),a=t(null),s=t(0),u=void 0;return u={},{pushProvider:function(e){var t=e.type._context;n(s,t._changedBits,e),n(a,t._currentValue,e),n(i,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode,o(null===t._currentRenderer||t._currentRenderer===u,"Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),t._currentRenderer=u},popProvider:function(e){var t=s.current,n=a.current;r(i,e),r(a,e),r(s,e);var o=e.type._context;o._currentValue=n,o._changedBits=t}}}(t),l=n.popHostContext,c=n.popHostContainer,f=i.popTopLevelContextObject,p=i.popContextProvider,h=s.popProvider,y=hs(e),m=os(e,n,i,s,y,we,_e).beginWork,v=is(e,n,i,s,y).completeWork,g=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,s=t.popContextProvider,u=t.popTopLevelContextObject,l=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=Mr,t.firstEffect=t.lastEffect=null;var r=as(n,t),i=e;do{switch(i.tag){case Z:var a=r;return Ta(i),i.updateQueue.capturedValues=[a],void(i.effectTag|=qr);case X:var s=i.type,u=i.stateNode;if((i.effectTag&Or)===wr&&("function"==typeof s.getDerivedStateFromCatch&&Li||null!==u&&"function"==typeof u.componentDidCatch&&!o(u))){Ta(i);var l=i.updateQueue,c=l.capturedValues;return null===c?l.capturedValues=[r]:c.push(r),void(i.effectTag|=qr)}}i=i.return}while(null!==i)},unwindWork:function(e){switch(e.tag){case X:s(e);var t=e.effectTag;return t&qr?(e.effectTag=t&~qr|Or,e):null;case Z:i(e),u(e);var n=e.effectTag;return n&qr?(e.effectTag=n&~qr|Or,e):null;case te:return a(e),null;case ee:return i(e),null;case le:return l(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case X:s(e);break;case Z:i(e),u(e);break;case te:a(e);break;case ee:i(e);break;case le:l(e)}}}}(n,i,s,0,ce),b=g.throwException,_=g.unwindWork,w=g.unwindInterruptedWork,x=ds(e,ge,0,0,function(e){null===$?$=new Set([e]):$.add(e)}),k=x.commitBeforeMutationLifeCycles,C=x.commitResetTextContent,S=x.commitPlacement,T=x.commitDeletion,E=x.commitWork,I=x.commitLifeCycles,O=x.commitErrorLogging,P=x.commitAttachRef,R=x.commitDetachRef,A=e.now,N=e.scheduleDeferredCallback,M=e.cancelDeferredCallback,q=e.prepareForCommit,L=e.resetAfterCommit,j=A(),D=(Xo(0),j),F=0,U=Qo,W=!1,B=null,H=null,z=Qo,V=null,K=!1,Q=!1,$=null,Y=null,J=void 0,G=void 0,ne=void 0,re=void 0,oe=void 0;function ie(){if(null!==B)for(var e=B.return;null!==e;)w(e),e=e.return;Si.discardPendingWarnings(),t.checkThatStackIsEmpty(),H=null,z=Qo,B=null,Q=!1}function ae(){for(;null!==V;){ln.setCurrentFiber(V),fa();var e=V.effectTag;if(e&Er&&C(V),e&Pr){var t=V.alternate;null!==t&&R(t)}switch(e&(kr|Cr|Tr)){case kr:S(V),V.effectTag&=~kr;break;case Sr:S(V),V.effectTag&=~kr;var n=V.alternate;E(n,V);break;case Cr:var r=V.alternate;E(r,V);break;case Tr:T(V)}V=V.nextEffect}ln.resetCurrentFiber()}function se(){for(;null!==V;){if(V.effectTag&Ar){fa();var e=V.alternate;k(e,V)}V=V.nextEffect}}function ue(e,t,n){for(Si.flushPendingUnsafeLifecycleWarnings(),Ui&&Si.flushPendingDeprecationWarnings();null!==V;){var r=V.effectTag;if(r&(Cr|Ir)){fa();var o=V.alternate;I(e,o,V,t,n)}r&Rr&&O(V,Ze),r&Pr&&(fa(),P(V));var i=V.nextEffect;V.nextEffect=null,V=i}}function ce(e){return null!==$&&$.has(e)}function fe(e){W=!0,K=!0,ba();var t=e.stateNode;t.current===e&&r(!1,"Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");var n=t.pendingCommitExpirationTime;n===Qo&&r(!1,"Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue."),t.pendingCommitExpirationTime=Qo;var o=xe();Wt.current=null;var i=void 0;for(e.effectTag>xr?null!==e.lastEffect?(e.lastEffect.nextEffect=e,i=e.firstEffect):i=e:i=e.firstEffect,q(t.containerInfo),V=i,function(){if(Ni){if(!Wi)return;Yi=0,Zi("(Committing Snapshot Effects)")}}();null!==V;){var a=!1,s=void 0;vs(null,se,null),gs()&&(a=!0,s=bs()),a&&(null===V&&r(!1,"Should have next effect. This error is likely caused by a bug in React. Please file an issue."),ge(V,s),null!==V&&(V=V.nextEffect))}for(!function(){if(Ni){if(!Wi)return;var e=Yi;Yi=0,ea("(Committing Snapshot Effects: "+e+" Total)","(Committing Snapshot Effects)",null)}}(),V=i,function(){if(Ni){if(!Wi)return;Yi=0,Zi("(Committing Host Effects)")}}();null!==V;){var u=!1,l=void 0;vs(null,ae,null),gs()&&(u=!0,l=bs()),u&&(null===V&&r(!1,"Should have next effect. This error is likely caused by a bug in React. Please file an issue."),ge(V,l),null!==V&&(V=V.nextEffect))}for(!function(){if(Ni){if(!Wi)return;var e=Yi;Yi=0,ea("(Committing Host Effects: "+e+" Total)","(Committing Host Effects)",null)}}(),L(t.containerInfo),t.current=e,V=i,function(){if(Ni){if(!Wi)return;Yi=0,Zi("(Calling Lifecycle Methods)")}}();null!==V;){var c=!1,f=void 0;vs(null,ue,null,t,o,n),gs()&&(c=!0,f=bs()),c&&(null===V&&r(!1,"Should have next effect. This error is likely caused by a bug in React. Please file an issue."),ge(V,f),null!==V&&(V=V.nextEffect))}K=!1,W=!1,function(){if(Ni){if(!Wi)return;var e=Yi;Yi=0,ea("(Calling Lifecycle Methods: "+e+" Total)","(Calling Lifecycle Methods)",null)}}(),_a(),xi(e.stateNode),ys.debugTool&&ys.debugTool.onCommitWork(e);var d=t.current.expirationTime;return d===Qo&&($=null),d}function de(e,t){if(t===Yo||e.expirationTime!==Yo){for(var n=function(e){switch(e.tag){case Z:case X:var t=e.updateQueue;return null===t?Qo:t.expirationTime;default:return Qo}}(e),r=e.child;null!==r;)r.expirationTime!==Qo&&(n===Qo||n>r.expirationTime)&&(n=r.expirationTime),r=r.sibling;e.expirationTime=n}}function pe(e){for(;;){var t=e.alternate;ln.setCurrentFiber(e);var n=e.return,r=e.sibling;if((e.effectTag&Mr)===wr){var o=v(t,e,z);if(ha(e),de(e,z),ln.resetCurrentFiber(),null!==o)return ha(e),ys.debugTool&&ys.debugTool.onCompleteWork(e),o;if(null!==n&&(n.effectTag&Mr)===wr)null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),e.effectTag>xr&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e);if(ys.debugTool&&ys.debugTool.onCompleteWork(e),null!==r)return r;if(null!==n){e=n;continue}return Q=!0,null}var i=_(e);if(e.effectTag&Or?ya(e):ha(e),ln.resetCurrentFiber(),null!==i)return ha(e),ys.debugTool&&ys.debugTool.onCompleteWork(e),i.effectTag&=Nr,i;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=Mr),ys.debugTool&&ys.debugTool.onCompleteWork(e),null!==r)return r;if(null===n)return null;e=n}return null}function he(e){var t=e.alternate;!function(e){if(Ni){if(!Wi||aa(e))return;if(Bi=e,!ra(e,null))return;e._debugIsCurrentlyTiming=!0}}(e),ln.setCurrentFiber(e),Fi&&(J=mi(J,e));var n=m(t,e,z);return ln.resetCurrentFiber(),ne&&oe(),ys.debugTool&&ys.debugTool.onBeginWork(e),null===n&&(n=pe(e)),Wt.current=null,n}function ye(e){if(e)for(;null!==B&&!Xe();)B=he(B);else for(;null!==B;)B=he(B)}function me(e,n,o){W&&r(!1,"renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue."),W=!0,n===z&&e===H&&null!==B||(ie(),z=n,B=ci((H=e).current,null,z),e.pendingCommitExpirationTime=Qo);var i=!1;for(!function(e){if(Ni){if(Bi=e,!Wi)return;$i=0,Zi("(React Tree Reconciliation)"),ca()}}(B);;){try{ye(o)}catch(e){if(null===B){i=!0,Ze(e);break}if(Fi)G(B,e,o);var a=B,s=a.return;if(null===s){i=!0,Ze(e);break}b(s,a,e),B=pe(a)}break}var u=!1;return W=!1,i?(ga(Y,u),Y=null,t.resetStackAfterFatalErrorInDev(),null):null!==B?(ga(Y,u),Y=null,null):Q?(ga(Y,u=!0),Y=null,e.pendingCommitExpirationTime=n,e.current.alternate):(ga(Y,u),Y=null,void r(!1,"Expired work should have completed. This error is likely caused by a bug in React. Please file an issue."))}function ve(e,t,n,r){Ea(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:as(n,e),next:null}),we(t,r)}function ge(e,t){return function(e,t,n){W&&!K&&r(!1,"dispatch: Cannot dispatch during the render phase.");for(var o=e.return;null!==o;){switch(o.tag){case X:var i=o.type,a=o.stateNode;if("function"==typeof i.getDerivedStateFromCatch||"function"==typeof a.componentDidCatch&&!ce(a))return void ve(e,o,t,n);break;case Z:return void ve(e,o,t,n)}o=o.return}e.tag===Z&&ve(e,e,t,n)}(e,t,$o)}function be(e){return ei(e,5e3,250)}function _e(e){var t=void 0;if(U!==Qo)t=U;else if(W)t=K?$o:z;else{if(e.mode&ni)if(De)t=function(e){return ei(e,500,100)}(xe());else t=be(xe());else t=$o}return De&&(Re===Qo||t>Re)&&(Re=t),t}function we(e,t){return function(e,t,n){if(da(),!n&&e.tag===X){var o=e.stateNode;ks(o)}var i=e;for(;null!==i;){if((i.expirationTime===Qo||i.expirationTime>t)&&(i.expirationTime=t),null!==i.alternate&&(i.alternate.expirationTime===Qo||i.alternate.expirationTime>t)&&(i.alternate.expirationTime=t),null===i.return){if(i.tag!==Z)return void(n||e.tag!==X||xs(e));var a=i.stateNode;!W&&z!==Qo&&t<z&&(Y=e,ie()),W&&!K&&H===a||ze(a,t),We>Ue&&r(!1,"Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.")}i=i.return}}(e,t,!1)}function xe(){return D=A()-j,Xo(D)}function ke(e,t,n,r,o){var i=U;U=$o;try{return e(t,n,r,o)}finally{U=i}}Fi&&(J=null,ne=!1,re=null,G=function(e,t,n){switch(mi(e,J),e.tag){case Z:c(e),f(e);break;case te:l(e);break;case X:p(e);break;case ee:c(e);break;case le:h(e)}ne=!0,re=t,vs(null,ye,null,n),ne=!1,re=null,gs()?bs():B=e},oe=function(){throw re});var Ce=null,Se=null,Te=Qo,Ee=-1,Ie=!1,Oe=null,Pe=Qo,Re=Qo,Ae=!1,Ne=!1,Me=null,qe=null,Le=!1,je=!1,De=!1,Fe=null,Ue=1e3,We=0,Be=1;function He(e){if(Te!==Qo){if(e>Te)return;M(Ee)}else Ni&&Wi&&!Ji&&(Ji=!0,Zi("(Waiting for async callback...)"));var t=A()-j,n=Zo(e);Te=e,Ee=N(Ke,{timeout:n-t})}function ze(e,t){!function(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Se?(Ce=Se=e,e.nextScheduledRoot=e):(Se.nextScheduledRoot=e,(Se=e).nextScheduledRoot=Ce);else{var n=e.remainingExpirationTime;(n===Qo||t<n)&&(e.remainingExpirationTime=t)}}(e,t),Ie||(Le?je&&(Oe=e,Pe=$o,Je(e,$o,!1)):t===$o?Qe():He(t))}function Ve(){var e=Qo,t=null;if(null!==Se)for(var n=Se,o=Ce;null!==o;){var i=o.remainingExpirationTime;if(i===Qo){if((null===n||null===Se)&&r(!1,"Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue."),o===o.nextScheduledRoot){o.nextScheduledRoot=null,Ce=Se=null;break}if(o===Ce){var a=o.nextScheduledRoot;Ce=a,Se.nextScheduledRoot=a,o.nextScheduledRoot=null}else{if(o===Se){(Se=n).nextScheduledRoot=Ce,o.nextScheduledRoot=null;break}n.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=n.nextScheduledRoot}else{if((e===Qo||i<e)&&(e=i,t=o),o===Se)break;n=o,o=o.nextScheduledRoot}}null!==Oe&&Oe===t&&e===$o?We++:We=0,Oe=t,Pe=e}function Ke(e){$e(Qo,!0,e)}function Qe(){$e($o,!1,null)}function $e(e,t,n){(qe=n,Ve(),Ni&&null!==qe)&&function(e,t){Ni&&Wi&&(Ji=!1,ea("(Waiting for async callback... will force flush in "+t+" ms)","(Waiting for async callback...)",e?"React was blocked by main thread":null))}(Pe<xe(),Zo(Pe));if(t)for(;null!==Oe&&Pe!==Qo&&(e===Qo||e>=Pe)&&(!Ae||xe()>=Pe);)Je(Oe,Pe,!Ae),Ve();else for(;null!==Oe&&Pe!==Qo&&(e===Qo||e>=Pe);)Je(Oe,Pe,!1),Ve();null!==qe&&(Te=Qo,Ee=-1),Pe!==Qo&&He(Pe),qe=null,Ae=!1,Ye()}function Ye(){if(We=0,null!==Fe){var e=Fe;Fe=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(r){Ne||(Ne=!0,Me=r)}}}if(Ne){var r=Me;throw Me=null,Ne=!1,r}}function Je(e,t,n){if(Ie&&r(!1,"performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue."),Ie=!0,n){var o=e.finishedWork;null!==o?Ge(e,o,t):(e.finishedWork=null,null!==(o=me(e,t,!0))&&(Xe()?e.finishedWork=o:Ge(e,o,t)))}else{var i=e.finishedWork;null!==i?Ge(e,i,t):(e.finishedWork=null,null!==(i=me(e,t,!1))&&Ge(e,i,t))}Ie=!1}function Ge(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Fe?Fe=[r]:Fe.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=Qo);e.finishedWork=null,e.remainingExpirationTime=fe(t)}function Xe(){return null!==qe&&(!(qe.timeRemaining()>Be)&&(Ae=!0,!0))}function Ze(e){null===Oe&&r(!1,"Should be working on a root. This error is likely caused by a bug in React. Please file an issue."),Oe.remainingExpirationTime=Qo,Ne||(Ne=!0,Me=e)}return{recalculateCurrentTime:xe,computeExpirationForFiber:_e,scheduleWork:we,requestWork:ze,flushRoot:function(e,t){Ie&&r(!1,"work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method."),Oe=e,Pe=t,Je(e,t,!1),Qe(),Ye()},batchedUpdates:function(e,t){var n=Le;Le=!0;try{return e(t)}finally{(Le=n)||Ie||Qe()}},unbatchedUpdates:function(e,t){if(Le&&!je){je=!0;try{return e(t)}finally{je=!1}}return e(t)},flushSync:function(e,t){Ie&&r(!1,"flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");var n=Le;Le=!0;try{return ke(e,t)}finally{Le=n,Qe()}},flushControlled:function(e){var t=Le;Le=!0;try{ke(e)}finally{(Le=t)||Ie||$e($o,!1,null)}},deferredUpdates:function(e){var t=U,n=xe();U=be(n);try{return e()}finally{U=t}},syncUpdates:ke,interactiveUpdates:function(e,t,n){if(De)return e(t,n);Le||Ie||Re===Qo||($e(Re,!1,null),Re=Qo);var r=De,o=Le;De=!0,Le=!0;try{return e(t,n)}finally{De=r,(Le=o)||Ie||Qe()}},flushInteractiveUpdates:function(){Ie||Re===Qo||($e(Re,!1,null),Re=Qo)},computeUniqueAsyncExpiration:function(){var e=be(xe());return e<=F&&(e=F+1),F=e},legacyContext:i}},Ts=void 0;Ts=!1;var Es=function(e){var t=e.getPublicInstance,n=Ss(e),r=n.computeUniqueAsyncExpiration,i=n.recalculateCurrentTime,s=n.computeExpirationForFiber,u=n.scheduleWork,l=n.requestWork,c=n.flushRoot,f=n.batchedUpdates,p=n.unbatchedUpdates,h=n.flushSync,y=n.flushControlled,m=n.deferredUpdates,v=n.syncUpdates,g=n.interactiveUpdates,b=n.flushInteractiveUpdates,_=n.legacyContext,w=_.findCurrentUnmaskedContext,x=_.isContextProvider,k=_.processChildContext;function C(e,t,n,r,i,a){var s=t.current;ys.debugTool&&(null===s.alternate?ys.debugTool.onMountContainer(t):null===e?ys.debugTool.onUnmountContainer(t):ys.debugTool.onUpdateContainer(t));var l=function(e){if(!e)return d;var t=_r(e),n=w(t);return x(t)?k(t,n):n}(n);return null===t.context?t.context=l:t.pendingContext=l,function(e,t,n,r,i){return"render"!==ln.phase||null===ln.current||Ts||(Ts=!0,o(!1,"Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",on(ln.current)||"Unknown")),o(null===(i=void 0===i?null:i)||"function"==typeof i,"render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",i),Ea(e,{expirationTime:r,partialState:{element:t},callback:i,isReplace:!1,isForced:!1,capturedValue:null,next:null}),u(e,r),r}(s,e,0,i,a)}function S(e){var t=function(e){var t=Hr(e);if(!t)return null;for(var n=t;;){if(n.tag===te||n.tag===ne)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}(e);return null===t?null:t.stateNode}return{createContainer:function(e,t,n){return vi(e,t,n)},updateContainer:function(e,t,n,r){var o=t.current;i();return C(e,t,n,0,s(o),r)},updateContainerAtExpirationTime:function(e,t,n,r,o){i();return C(e,t,n,0,r,o)},flushRoot:c,requestWork:l,computeUniqueAsyncExpiration:r,batchedUpdates:f,unbatchedUpdates:p,deferredUpdates:m,syncUpdates:v,interactiveUpdates:g,flushInteractiveUpdates:b,flushControlled:y,flushSync:h,getPublicRootInstance:function(e){var n=e.current;if(!n.child)return null;switch(n.child.tag){case te:return t(n.child.stateNode);default:return n.child.stateNode}},findHostInstance:S,findHostInstanceWithNoPortals:function(e){var t=function(e){var t=Hr(e);if(!t)return null;for(var n=t;;){if(n.tag===te||n.tag===ne)return n;if(n.child&&n.tag!==ee)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}(e);return null===t?null:t.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return o(!1,"The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools"),!0;try{var n=t.inject(e);gi=wi(function(e){return t.onCommitFiberRoot(n,e)}),bi=wi(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){o(!1,"React DevTools encountered an error: %s.",e)}return!0}(a({},e,{findHostInstanceByFiber:function(e){return S(e)},findFiberByHostInstance:function(e){return t?t(e):null}}))}}},Is=Object.freeze({default:Es}),Os=Is&&Es||Is,Ps=Os.default?Os.default:Os;i.canUseDOM&&"function"!=typeof requestAnimationFrame&&o(!1,"React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");var Rs="object"==typeof performance&&"function"==typeof performance.now,As=void 0;As=Rs?function(){return performance.now()}:function(){return Date.now()};var Ns=void 0,Ms=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var qs=null,Ls=!1,js=-1,Ds=!1,Fs=0,Us=33,Ws=33,Bs=void 0;Bs=Rs?{didTimeout:!1,timeRemaining:function(){var e=Fs-performance.now();return e>0?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Fs-Date.now();return e>0?e:0}};var Hs="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Hs){Ls=!1;var t=As();if(Fs-t<=0){if(!(-1!==js&&js<=t))return void(Ds||(Ds=!0,requestAnimationFrame(zs)));Bs.didTimeout=!0}else Bs.didTimeout=!1;js=-1;var n=qs;qs=null,null!==n&&n(Bs)}},!1);var zs=function(e){Ds=!1;var t=e-Fs+Ws;t<Ws&&Us<Ws?(t<8&&(t=8),Ws=t<Us?Us:t):Us=t,Fs=e+Ws,Ls||(Ls=!0,window.postMessage(Hs,"*"))};Ns=function(e,t){return qs=e,null!=t&&"number"==typeof t.timeout&&(js=As()+t.timeout),Ds||(Ds=!0,requestAnimationFrame(zs)),0},Ms=function(){qs=null,Ls=!1,js=-1}}else Ns=window.requestIdleCallback,Ms=window.cancelIdleCallback;else Ns=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Ms=function(e){clearTimeout(e)};var Vs=!1;function Ks(e,t){null==t.selected||Vs||(o(!1,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),Vs=!0)}function Qs(e,n){var r=a({children:void 0},n),o=function(e){var n="";return t.Children.forEach(e,function(e){null!=e&&("string"!=typeof e&&"number"!=typeof e||(n+=e))}),n}(n.children);return o&&(r.children=o),r}var $s=ln.getCurrentFiberOwnerName,Ys=ln.getCurrentFiberStackAddendum,Js=void 0;function Gs(){var e=$s();return e?"\n\nCheck the render method of `"+e+"`.":""}Js=!1;var Xs=["value","defaultValue"];function Zs(e,t,n,r){var o=e.options;if(t){for(var i=n,a={},s=0;s<i.length;s++)a["$"+i[s]]=!0;for(var u=0;u<o.length;u++){var l=a.hasOwnProperty("$"+o[u].value);o[u].selected!==l&&(o[u].selected=l),l&&r&&(o[u].defaultSelected=!0)}}else{for(var c=""+n,f=null,d=0;d<o.length;d++){if(o[d].value===c)return o[d].selected=!0,void(r&&(o[d].defaultSelected=!0));null!==f||o[d].disabled||(f=o[d])}null!==f&&(f.selected=!0)}}function eu(e,t){return a({},t,{value:void 0})}function tu(e,t){var n=e;!function(e){Mn.checkPropTypes("select",e,Ys);for(var t=0;t<Xs.length;t++){var n=Xs[t];if(null!=e[n]){var r=Array.isArray(e[n]);e.multiple&&!r?o(!1,"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",n,Gs()):!e.multiple&&r&&o(!1,"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",n,Gs())}}}(t);var r=t.value;n._wrapperState={initialValue:null!=r?r:t.defaultValue,wasMultiple:!!t.multiple},void 0===t.value||void 0===t.defaultValue||Js||(o(!1,"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components"),Js=!0)}var nu=ln.getCurrentFiberStackAddendum,ru=!1;function ou(e,t){var n=e;return null!=t.dangerouslySetInnerHTML&&r(!1,"`dangerouslySetInnerHTML` does not make sense on <textarea>."),a({},t,{value:void 0,defaultValue:void 0,children:""+n._wrapperState.initialValue})}function iu(e,t){var n=e;Mn.checkPropTypes("textarea",t,nu),void 0===t.value||void 0===t.defaultValue||ru||(o(!1,"Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components"),ru=!0);var i=t.value;if(null==i){var a=t.defaultValue,s=t.children;null!=s&&(o(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."),null!=a&&r(!1,"If you supply `defaultValue` on a <textarea>, do not pass children."),Array.isArray(s)&&(s.length<=1||r(!1,"<textarea> can only have at most one child."),s=s[0]),a=""+s),null==a&&(a=""),i=a}n._wrapperState={initialValue:""+i}}function au(e,t){var n=e,r=t.value;if(null!=r){var o=""+r;o!==n.value&&(n.value=o),null==t.defaultValue&&(n.defaultValue=o)}null!=t.defaultValue&&(n.defaultValue=t.defaultValue)}function su(e,t){var n=e,r=n.textContent;r===n._wrapperState.initialValue&&(n.value=r)}var uu="http://www.w3.org/1999/xhtml",lu="http://www.w3.org/1998/Math/MathML",cu="http://www.w3.org/2000/svg",fu={html:uu,mathml:lu,svg:cu};function du(e){switch(e){case"svg":return cu;case"math":return lu;default:return uu}}function pu(e,t){return null==e||e===uu?du(t):e===cu&&"foreignObject"===t?uu:e}var hu,yu=void 0,mu=(hu=function(e,t){if(e.namespaceURI!==fu.svg||"innerHTML"in e)e.innerHTML=t;else{(yu=yu||document.createElement("div")).innerHTML="<svg>"+t+"</svg>";for(var n=yu.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return hu(e,t,n,r)})}:hu),vu=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===Pt)return void(n.nodeValue=t)}e.textContent=t},gu={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var bu=["Webkit","ms","Moz","O"];function _u(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||gu.hasOwnProperty(e)&&gu[e]?(""+t).trim():t+"px"}Object.keys(gu).forEach(function(e){bu.forEach(function(t){gu[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=gu[e]})});var wu=/^(?:webkit|moz|o)[A-Z]/,xu=/;\s*$/,ku={},Cu={},Su=!1,Tu=!1,Eu=function(e,t,n){e.indexOf("-")>-1?function(e,t){ku.hasOwnProperty(e)&&ku[e]||(ku[e]=!0,o(!1,"Unsupported style property %s. Did you mean %s?%s",e,h(e),t()))}(e,n):wu.test(e)?function(e,t){ku.hasOwnProperty(e)&&ku[e]||(ku[e]=!0,o(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?%s",e,e.charAt(0).toUpperCase()+e.slice(1),t()))}(e,n):xu.test(t)&&function(e,t,n){Cu.hasOwnProperty(t)&&Cu[t]||(Cu[t]=!0,o(!1,'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.%s',e,t.replace(xu,""),n()))}(e,t,n),"number"==typeof t&&(isNaN(t)?function(e,t,n){Su||(Su=!0,o(!1,"`NaN` is an invalid value for the `%s` css style property.%s",e,n()))}(e,0,n):isFinite(t)||function(e,t,n){Tu||(Tu=!0,o(!1,"`Infinity` is an invalid value for the `%s` css style property.%s",e,n()))}(e,0,n))};function Iu(e){var t="",n="";for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];if(null!=o){var i=0===r.indexOf("--");t+=n+p(r)+":",t+=_u(r,o,i),n=";"}}return t||null}function Ou(e,t,n){var r=e.style;for(var o in t)if(t.hasOwnProperty(o)){var i=0===o.indexOf("--");i||Eu(o,t[o],n);var a=_u(o,t[o],i);"float"===o&&(o="cssFloat"),i?r.setProperty(o,a):r[o]=a}}var Pu=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),Ru="__html";function Au(e,t,n){t&&(Pu[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&r(!1,"%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&r(!1,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."),"object"==typeof t.dangerouslySetInnerHTML&&Ru in t.dangerouslySetInnerHTML||r(!1,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.")),o(t.suppressContentEditableWarning||!t.contentEditable||null==t.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.%s",n()),null!=t.style&&"object"!=typeof t.style&&r(!1,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",n()))}function Nu(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Mu={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",download:"download",draggable:"draggable",enctype:"encType",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},qu={"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},Lu={},ju=new RegExp("^(aria)-["+vn+"]*$"),Du=new RegExp("^(aria)[A-Z]["+vn+"]*$"),Fu=Object.prototype.hasOwnProperty;function Uu(){var e=Bt.getStackAddendum();return null!=e?e:""}function Wu(e,t){if(Fu.call(Lu,t)&&Lu[t])return!0;if(Du.test(t)){var n="aria-"+t.slice(4).toLowerCase(),r=qu.hasOwnProperty(n)?n:null;if(null==r)return o(!1,"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s",t,Uu()),Lu[t]=!0,!0;if(t!==r)return o(!1,"Invalid ARIA attribute `%s`. Did you mean `%s`?%s",t,r,Uu()),Lu[t]=!0,!0}if(ju.test(t)){var i=t.toLowerCase(),a=qu.hasOwnProperty(i)?i:null;if(null==a)return Lu[t]=!0,!1;if(t!==a)return o(!1,"Unknown ARIA attribute `%s`. Did you mean `%s`?%s",t,a,Uu()),Lu[t]=!0,!0}return!0}function Bu(e,t){Nu(e,t)||function(e,t){var n=[];for(var r in t)Wu(0,r)||n.push(r);var i=n.map(function(e){return"`"+e+"`"}).join(", ");1===n.length?o(!1,"Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",i,e,Uu()):n.length>1&&o(!1,"Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",i,e,Uu())}(e,t)}var Hu=!1;function zu(){var e=Bt.getStackAddendum();return null!=e?e:""}function Vu(){var e=Bt.getStackAddendum();return null!=e?e:""}var Ku,Qu={},$u=Object.prototype.hasOwnProperty,Yu=/^on./,Ju=/^on[^A-Z]/,Gu=new RegExp("^(aria)-["+vn+"]*$"),Xu=new RegExp("^(aria)[A-Z]["+vn+"]*$");Ku=function(e,t,n,r){if($u.call(Qu,t)&&Qu[t])return!0;var i=t.toLowerCase();if("onfocusin"===i||"onfocusout"===i)return o(!1,"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),Qu[t]=!0,!0;if(r){if(E.hasOwnProperty(t))return!0;var a=O.hasOwnProperty(i)?O[i]:null;if(null!=a)return o(!1,"Invalid event handler property `%s`. Did you mean `%s`?%s",t,a,Vu()),Qu[t]=!0,!0;if(Yu.test(t))return o(!1,"Unknown event handler property `%s`. It will be ignored.%s",t,Vu()),Qu[t]=!0,!0}else if(Yu.test(t))return Ju.test(t)&&o(!1,"Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.%s",t,Vu()),Qu[t]=!0,!0;if(Gu.test(t)||Xu.test(t))return!0;if("innerhtml"===i)return o(!1,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),Qu[t]=!0,!0;if("aria"===i)return o(!1,"The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),Qu[t]=!0,!0;if("is"===i&&null!==n&&void 0!==n&&"string"!=typeof n)return o(!1,"Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.%s",typeof n,Vu()),Qu[t]=!0,!0;if("number"==typeof n&&isNaN(n))return o(!1,"Received NaN for the `%s` attribute. If this is expected, cast the value to a string.%s",t,Vu()),Qu[t]=!0,!0;var s=Tn(t),u=null!==s&&s.type===cn;if(Mu.hasOwnProperty(i)){var l=Mu[i];if(l!==t)return o(!1,"Invalid DOM property `%s`. Did you mean `%s`?%s",t,l,Vu()),Qu[t]=!0,!0}else if(!u&&t!==i)return o(!1,"React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.%s",t,i,Vu()),Qu[t]=!0,!0;return"boolean"==typeof n&&Cn(t,n,s,!1)?(n?o(!1,'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.%s',n,t,t,n,t,Vu()):o(!1,'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.%s',n,t,t,n,t,t,t,Vu()),Qu[t]=!0,!0):!!u||(!Cn(t,n,s,!1)||(Qu[t]=!0,!1))};var Zu=function(e,t,n){var r=[];for(var i in t){Ku(0,i,t[i],n)||r.push(i)}var a=r.map(function(e){return"`"+e+"`"}).join(", ");1===r.length?o(!1,"Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior%s",a,e,Vu()):r.length>1&&o(!1,"Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior%s",a,e,Vu())};var el,tl=ln.getCurrentFiberOwnerName,nl=ln.getCurrentFiberStackAddendum,rl=!1,ol=!1,il="dangerouslySetInnerHTML",al="suppressContentEditableWarning",sl="suppressHydrationWarning",ul="autoFocus",ll="children",cl="style",fl="__html",dl=fu.html,pl=s.thatReturns(""),hl=void 0,yl=void 0,ml=void 0,vl=void 0,gl=void 0,bl=void 0,_l=void 0,wl=void 0;pl=nl,hl={time:!0,dialog:!0},ml=function(e,t){Bu(e,t),function(e,t){"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||Hu||(Hu=!0,"select"===e&&t.multiple?o(!1,"`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.%s",e,zu()):o(!1,"`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.%s",e,zu()))}(e,t),function(e,t,n){Nu(e,t)||Zu(e,t,n)}(e,t,!0)};var xl=/\r\n?/g,kl=/\u0000|\uFFFD/g;function Cl(e,t){!function(e,t){for(var n=t,r=Po(n),o=I[e],i=0;i<o.length;i++){var a=o[i];r.hasOwnProperty(a)&&r[a]||("topScroll"===a?mo("topScroll","scroll",n):"topFocus"===a||"topBlur"===a?(mo("topFocus","focus",n),mo("topBlur","blur",n),r.topBlur=!0,r.topFocus=!0):"topCancel"===a?(qt("cancel",!0)&&mo("topCancel","cancel",n),r.topCancel=!0):"topClose"===a?(qt("close",!0)&&mo("topClose","close",n),r.topClose=!0):So.hasOwnProperty(a)&&yo(a,So[a],n),r[a]=!0)}}(t,e.nodeType===At||e.nodeType===Nt?e:e.ownerDocument)}function Sl(e){return e.nodeType===At?e:e.ownerDocument}function Tl(e){e.onclick=s}function El(e,t,n,r){var i=void 0,a=Sl(n),s=void 0,u=r;if(u===dl&&(u=du(e)),u===dl)if(i=Nu(e,t),o(i||e===e.toLowerCase(),"<%s /> is using uppercase HTML. Always use lowercase HTML tags in React.",e),"script"===e){var l=a.createElement("div");l.innerHTML="<script><\/script>";var c=l.firstChild;s=l.removeChild(c)}else s="string"==typeof t.is?a.createElement(e,{is:t.is}):a.createElement(e);else s=a.createElementNS(u,e);return u===dl&&(i||"[object HTMLUnknownElement]"!==Object.prototype.toString.call(s)||Object.prototype.hasOwnProperty.call(hl,e)||(hl[e]=!0,o(!1,"The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",e))),s}function Il(e,t){return Sl(t).createTextNode(e)}function Ol(e,t,n,r){var i=Nu(t,n);ml(t,n),i&&!ol&&e.shadyRoot&&(o(!1,"%s is using shady DOM. Using shady DOM with React can cause things to break subtly.",tl()||"A component"),ol=!0);var a=void 0;switch(t){case"iframe":case"object":yo("topLoad","load",e),a=n;break;case"video":case"audio":for(var s in To)To.hasOwnProperty(s)&&yo(s,To[s],e);a=n;break;case"source":yo("topError","error",e),a=n;break;case"img":case"image":case"link":yo("topError","error",e),yo("topLoad","load",e),a=n;break;case"form":yo("topReset","reset",e),yo("topSubmit","submit",e),a=n;break;case"details":yo("topToggle","toggle",e),a=n;break;case"input":Vn(e,n),a=zn(e,n),yo("topInvalid","invalid",e),Cl(r,"onChange");break;case"option":Ks(0,n),a=Qs(0,n);break;case"select":tu(e,n),a=eu(0,n),yo("topInvalid","invalid",e),Cl(r,"onChange");break;case"textarea":iu(e,n),a=ou(e,n),yo("topInvalid","invalid",e),Cl(r,"onChange");break;default:a=n}switch(Au(t,a,pl),function(e,t,n,r,o){for(var i in r)if(r.hasOwnProperty(i)){var a=r[i];if(i===cl)a&&Object.freeze(a),Ou(t,a,pl);else if(i===il){var s=a?a[fl]:void 0;null!=s&&mu(t,s)}else i===ll?"string"==typeof a?("textarea"!==e||""!==a)&&vu(t,a):"number"==typeof a&&vu(t,""+a):i===al||i===sl||i===ul||(E.hasOwnProperty(i)?null!=a&&("function"!=typeof a&&_l(i,a),Cl(n,i)):null!=a&&Nn(t,i,a,o))}}(t,e,r,a,i),t){case"input":Dt(e),$n(e,n);break;case"textarea":Dt(e),su(e);break;case"option":!function(e,t){null!=t.value&&e.setAttribute("value",t.value)}(e,n);break;case"select":!function(e,t){var n=e;n.multiple=!!t.multiple;var r=t.value;null!=r?Zs(n,!!t.multiple,r,!1):null!=t.defaultValue&&Zs(n,!!t.multiple,t.defaultValue,!0)}(e,n);break;default:"function"==typeof a.onClick&&Tl(e)}}function Pl(e,t,n,r,o){ml(t,r);var i=null,a=void 0,s=void 0;switch(t){case"input":a=zn(e,n),s=zn(e,r),i=[];break;case"option":a=Qs(0,n),s=Qs(0,r),i=[];break;case"select":a=eu(0,n),s=eu(0,r),i=[];break;case"textarea":a=ou(e,n),s=ou(e,r),i=[];break;default:s=r,"function"!=typeof(a=n).onClick&&"function"==typeof s.onClick&&Tl(e)}Au(t,s,pl);var u=void 0,l=void 0,c=null;for(u in a)if(!s.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if(u===cl){var f=a[u];for(l in f)f.hasOwnProperty(l)&&(c||(c={}),c[l]="")}else u===il||u===ll||u===al||u===sl||u===ul||(E.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in s){var d=s[u],p=null!=a?a[u]:void 0;if(s.hasOwnProperty(u)&&d!==p&&(null!=d||null!=p))if(u===cl)if(d&&Object.freeze(d),p){for(l in p)!p.hasOwnProperty(l)||d&&d.hasOwnProperty(l)||(c||(c={}),c[l]="");for(l in d)d.hasOwnProperty(l)&&p[l]!==d[l]&&(c||(c={}),c[l]=d[l])}else c||(i||(i=[]),i.push(u,c)),c=d;else if(u===il){var h=d?d[fl]:void 0,y=p?p[fl]:void 0;null!=h&&y!==h&&(i=i||[]).push(u,""+h)}else u===ll?p===d||"string"!=typeof d&&"number"!=typeof d||(i=i||[]).push(u,""+d):u===al||u===sl||(E.hasOwnProperty(u)?(null!=d&&("function"!=typeof d&&_l(u,d),Cl(o,u)),i||p===d||(i=[])):(i=i||[]).push(u,d))}return c&&(i=i||[]).push(cl,c),i}function Rl(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Kn(e,o);Nu(n,r);switch(function(e,t,n,r){for(var o=0;o<t.length;o+=2){var i=t[o],a=t[o+1];i===cl?Ou(e,a,pl):i===il?mu(e,a):i===ll?vu(e,a):Nn(e,i,a,r)}}(e,t,0,Nu(n,o)),n){case"input":Qn(e,o);break;case"textarea":au(e,o);break;case"select":!function(e,t){var n=e;n._wrapperState.initialValue=void 0;var r=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!t.multiple;var o=t.value;null!=o?Zs(n,!!t.multiple,o,!1):r!==!!t.multiple&&(null!=t.defaultValue?Zs(n,!!t.multiple,t.defaultValue,!0):Zs(n,!!t.multiple,t.multiple?[]:"",!1))}(e,o)}}function Al(e,t,n,r,i){var a,s=void 0;switch(yl=!0===n[sl],a=Nu(t,n),ml(t,n),a&&!ol&&e.shadyRoot&&(o(!1,"%s is using shady DOM. Using shady DOM with React can cause things to break subtly.",tl()||"A component"),ol=!0),t){case"iframe":case"object":yo("topLoad","load",e);break;case"video":case"audio":for(var u in To)To.hasOwnProperty(u)&&yo(u,To[u],e);break;case"source":yo("topError","error",e);break;case"img":case"image":case"link":yo("topError","error",e),yo("topLoad","load",e);break;case"form":yo("topReset","reset",e),yo("topSubmit","submit",e);break;case"details":yo("topToggle","toggle",e);break;case"input":Vn(e,n),yo("topInvalid","invalid",e),Cl(i,"onChange");break;case"option":Ks(0,n);break;case"select":tu(e,n),yo("topInvalid","invalid",e),Cl(i,"onChange");break;case"textarea":iu(e,n),yo("topInvalid","invalid",e),Cl(i,"onChange")}Au(t,n,pl),s=new Set;for(var l=e.attributes,c=0;c<l.length;c++){switch(l[c].name.toLowerCase()){case"data-reactroot":case"value":case"checked":case"selected":break;default:s.add(l[c].name)}}var f,d=null;for(var p in n)if(n.hasOwnProperty(p)){var h=n[p];if(p===ll)"string"==typeof h?e.textContent!==h&&(yl||vl(e.textContent,h),d=[ll,h]):"number"==typeof h&&e.textContent!==""+h&&(yl||vl(e.textContent,h),d=[ll,""+h]);else if(E.hasOwnProperty(p))null!=h&&("function"!=typeof h&&_l(p,h),Cl(i,p));else if("boolean"==typeof a){var y=void 0,m=Tn(p);if(yl);else if(p===al||p===sl||"value"===p||"checked"===p||"selected"===p);else if(p===il){var v=h&&h[fl]||"",g=e.innerHTML,b=wl(e,v);b!==g&&gl(p,g,b)}else if(p===cl){s.delete(p);var _=Iu(h);_!==(y=e.getAttribute("style"))&&gl(p,y,_)}else if(a)s.delete(p.toLowerCase()),h!==(y=An(e,p,h))&&gl(p,y,h);else if(!kn(p,m,a)&&!Sn(p,h,m,a)){var w=!1;if(null!==m)s.delete(m.attributeName),y=Rn(e,p,h,m);else{var x=r;if(x===dl&&(x=du(t)),x===dl)s.delete(p.toLowerCase());else{var k=(void 0,f=p.toLowerCase(),Mu.hasOwnProperty(f)&&Mu[f]||null);null!==k&&k!==p&&(w=!0,s.delete(k)),s.delete(p)}y=An(e,p,h)}h===y||w||gl(p,y,h)}}}switch(s.size>0&&!yl&&bl(s),t){case"input":Dt(e),$n(e,n);break;case"textarea":Dt(e),su(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&Tl(e)}return d}function Nl(e,t){return e.nodeValue!==t}function Ml(e,t){vl(e.nodeValue,t)}function ql(e,t){rl||(rl=!0,o(!1,"Did not expect server HTML to contain a <%s> in <%s>.",t.nodeName.toLowerCase(),e.nodeName.toLowerCase()))}function Ll(e,t){rl||(rl=!0,o(!1,'Did not expect server HTML to contain the text node "%s" in <%s>.',t.nodeValue,e.nodeName.toLowerCase()))}function jl(e,t,n){rl||(rl=!0,o(!1,"Expected server HTML to contain a matching <%s> in <%s>.",t,e.nodeName.toLowerCase()))}function Dl(e,t){""!==t&&(rl||(rl=!0,o(!1,'Expected server HTML to contain a matching text node for "%s" in <%s>.',t,e.nodeName.toLowerCase())))}el=function(e){return("string"==typeof e?e:""+e).replace(xl,"\n").replace(kl,"")},vl=function(e,t){if(!rl){var n=el(t),r=el(e);r!==n&&(rl=!0,o(!1,'Text content did not match. Server: "%s" Client: "%s"',r,n))}},gl=function(e,t,n){if(!rl){var r=el(n),i=el(t);i!==r&&(rl=!0,o(!1,"Prop `%s` did not match. Server: %s Client: %s",e,JSON.stringify(i),JSON.stringify(r)))}},bl=function(e){if(!rl){rl=!0;var t=[];e.forEach(function(e){t.push(e)}),o(!1,"Extra attributes from the server: %s",t)}},_l=function(e,t){!1===t?o(!1,"Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.%s",e,e,e,nl()):o(!1,"Expected `%s` listener to be a function, instead got a value of `%s` type.%s",e,typeof t,nl())},wl=function(e,t){var n=e.namespaceURI===dl?e.ownerDocument.createElement(e.tagName):e.ownerDocument.createElementNS(e.namespaceURI,e.tagName);return n.innerHTML=t,n.innerHTML};var Fl,Ul=Object.freeze({createElement:El,createTextNode:Il,setInitialProperties:Ol,diffProperties:Pl,updateProperties:Rl,diffHydratedProperties:Al,diffHydratedText:Nl,warnForUnmatchedText:Ml,warnForDeletedHydratableElement:ql,warnForDeletedHydratableText:Ll,warnForInsertedHydratedElement:jl,warnForInsertedHydratedText:Dl,restoreControlledState:function(e,t,n){switch(t){case"input":return void Yn(e,n);case"textarea":return void function(e,t){au(e,t)}(e,n);case"select":return void function(e,t){var n=e,r=t.value;null!=r&&Zs(n,!!t.multiple,r,!1)}(e,n)}}}),Wl=ln.getCurrentFiberStackAddendum,Bl=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],Hl=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],zl=Hl.concat(["button"]),Vl=["dd","dt","li","option","optgroup","p","rp","rt"],Kl={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null},Ql={};(Fl=function(e,t,n){var r=(n=n||Kl).current,i=r&&r.tag;null!=t&&(o(null==e,"validateDOMNesting: when childText is passed, childTag should be null"),e="#text");var a=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===Vl.indexOf(t);case"body":case"caption":case"col":case"colgroup":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0}(e,i)?null:r,s=a?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,n),u=a||s;if(u){var l=u.tag,c=Wl(),f=!!a+"|"+e+"|"+l+"|"+c;if(!Ql[f]){Ql[f]=!0;var d=e,p="";if("#text"===e?/\S/.test(t)?d="Text nodes":(d="Whitespace text nodes",p=" Make sure you don't have any extra whitespace between tags on each line of your source code."):d="<"+e+">",a){var h="";"table"===l&&"tr"===e&&(h+=" Add a <tbody> to your code to match the DOM tree generated by the browser."),o(!1,"validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s",d,l,p,h,c)}else o(!1,"validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s",d,l,c)}}}).updatedAncestorInfo=function(e,t,n){var r=a({},e||Kl),o={tag:t,instance:n};return-1!==Hl.indexOf(t)&&(r.aTagInScope=null,r.buttonTagInScope=null,r.nobrTagInScope=null),-1!==zl.indexOf(t)&&(r.pTagInButtonScope=null),-1!==Bl.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(r.listItemTagAutoclosing=null,r.dlItemTagAutoclosing=null),r.current=o,"form"===t&&(r.formTag=o),"a"===t&&(r.aTagInScope=o),"button"===t&&(r.buttonTagInScope=o),"nobr"===t&&(r.nobrTagInScope=o),"p"===t&&(r.pTagInButtonScope=o),"li"===t&&(r.listItemTagAutoclosing=o),"dd"!==t&&"dt"!==t||(r.dlItemTagAutoclosing=o),r};var $l,Yl=Fl,Jl=El,Gl=Il,Xl=Ol,Zl=Pl,ec=Rl,tc=Al,nc=Nl,rc=Ml,oc=ql,ic=Ll,ac=jl,sc=Dl,uc=Yl.updatedAncestorInfo,lc=he,cc=be,fc=void 0,dc=!1;"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||o(!1,"React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),fc=function(e){if(e._reactRootContainer&&e.nodeType!==Rt){var t=wc.findHostInstanceWithNoPortals(e._reactRootContainer._internalRoot.current);t&&o(t.parentNode===e,"render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.")}var n=!!e._reactRootContainer,r=bc(e),i=!(!r||!me(r));o(!i||n,"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."),o(e.nodeType!==Ot||!e.tagName||"BODY"!==e.tagName.toUpperCase(),"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.")},$l=function(e,t){o(null===e||"function"==typeof e,"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e)},mt.injectFiberControlledHostComponent(Ul);var pc=null,hc=null;function yc(e){var t=wc.computeUniqueAsyncExpiration();this._expirationTime=t,this._root=e,this._next=null,this._callbacks=null,this._didComplete=!1,this._hasChildren=!1,this._children=null,this._defer=!0}function mc(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function vc(e,t,n){var r=wc.createContainer(e,t,n);this._internalRoot=r}function gc(e){return!(!e||e.nodeType!==Ot&&e.nodeType!==At&&e.nodeType!==Nt&&(e.nodeType!==Rt||" react-mount-point-unstable "!==e.nodeValue))}function bc(e){return e?e.nodeType===At?e.documentElement:e.firstChild:null}function _c(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}yc.prototype.render=function(e){this._defer||r(!1,"batch.render: Cannot render a batch that already committed."),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,o=new mc;return wc.updateContainerAtExpirationTime(e,t,null,n,o._onCommit),o},yc.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},yc.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||r(!1,"batch.commit: Cannot commit a batch multiple times."),!this._hasChildren)return this._next=null,void(this._defer=!1);var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var o=null,i=t;i!==this;)o=i,i=i._next;null===o&&r(!1,"batch.commit: Cannot commit a batch multiple times."),o._next=i._next,this._next=t,t=e.firstBatch=this}this._defer=!1,wc.flushRoot(e,n);var a=this._next;this._next=null,null!==(t=e.firstBatch=a)&&t._hasChildren&&t.render(t._children)},yc.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){(0,e[t])()}}},mc.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},mc.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&r(!1,"Invalid argument passed as callback. Expected a function. Instead received: %s",n),n()}}},vc.prototype.render=function(e,t){var n=this._internalRoot,r=new mc;return $l(t=void 0===t?null:t,"render"),null!==t&&r.then(t),wc.updateContainer(e,n,null,r._onCommit),r},vc.prototype.unmount=function(e){var t=this._internalRoot,n=new mc;return $l(e=void 0===e?null:e,"render"),null!==e&&n.then(e),wc.updateContainer(null,t,null,n._onCommit),n},vc.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new mc;return $l(n=void 0===n?null:n,"render"),null!==n&&o.then(n),wc.updateContainer(t,r,e,o._onCommit),o},vc.prototype.createBatch=function(){var e=new yc(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(var o=null,i=r;null!==i&&i._expirationTime<=t;)o=i,i=i._next;e._next=i,null!==o&&(o._next=e)}return e};var wc=Ps({getRootHostContext:function(e){var t=void 0,n=void 0,r=e.nodeType;switch(r){case At:case Nt:t=r===At?"#document":"#fragment";var o=e.documentElement;n=o?o.namespaceURI:pu(null,"");break;default:var i=r===Rt?e.parentNode:e;n=pu(i.namespaceURI||null,t=i.tagName)}var a=t.toLowerCase();return{namespace:n,ancestorInfo:uc(null,a,null)}},getChildHostContext:function(e,t){var n=e;return{namespace:pu(n.namespace,t),ancestorInfo:uc(n.ancestorInfo,t,null)}},getPublicInstance:function(e){return e},prepareForCommit:function(){pc=ho(),hc=Lo(),po(!1)},resetAfterCommit:function(){jo(hc),hc=null,po(pc),pc=null},createInstance:function(e,t,n,r,o){var i,a=r;if(Yl(e,null,a.ancestorInfo),"string"==typeof t.children||"number"==typeof t.children){var s=""+t.children,u=uc(a.ancestorInfo,e,null);Yl(null,s,u)}i=a.namespace;var l=Jl(e,t,n,i);return lc(o,l),cc(l,t),l},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return Xl(e,t,n,r),_c(t,n)},prepareUpdate:function(e,t,n,r,o,i){var a=i;if(typeof r.children!=typeof n.children&&("string"==typeof r.children||"number"==typeof r.children)){var s=""+r.children,u=uc(a.ancestorInfo,t,null);Yl(null,s,u)}return Zl(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){Yl(null,e,n.ancestorInfo);var o=Gl(e,t);return lc(r,o),o},now:As,mutation:{commitMount:function(e,t,n,r){_c(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o,i){cc(e,o),ec(e,t,n,r,o)},resetTextContent:function(e){vu(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){e.nodeType===Rt?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){e.nodeType===Rt?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){e.nodeType===Rt?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t,n){return e.nodeType!==Ot||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||e.nodeType!==Pt?null:e},getNextHydratableSibling:function(e){for(var t=e.nextSibling;t&&t.nodeType!==Ot&&t.nodeType!==Pt;)t=t.nextSibling;return t},getFirstHydratableChild:function(e){for(var t=e.firstChild;t&&t.nodeType!==Ot&&t.nodeType!==Pt;)t=t.nextSibling;return t},hydrateInstance:function(e,t,n,r,o,i){lc(i,e),cc(e,n);var a;return a=o.namespace,tc(e,t,n,a,r)},hydrateTextInstance:function(e,t,n){return lc(n,e),nc(e,t)},didNotMatchHydratedContainerTextInstance:function(e,t,n){rc(t,n)},didNotMatchHydratedTextInstance:function(e,t,n,r,o){!0!==t.suppressHydrationWarning&&rc(r,o)},didNotHydrateContainerInstance:function(e,t){1===t.nodeType?oc(e,t):ic(e,t)},didNotHydrateInstance:function(e,t,n,r){!0!==t.suppressHydrationWarning&&(1===r.nodeType?oc(n,r):ic(n,r))},didNotFindHydratableContainerInstance:function(e,t,n){ac(e,t,n)},didNotFindHydratableContainerTextInstance:function(e,t){sc(e,t)},didNotFindHydratableInstance:function(e,t,n,r,o){!0!==t.suppressHydrationWarning&&ac(n,r,o)},didNotFindHydratableTextInstance:function(e,t,n,r){!0!==t.suppressHydrationWarning&&sc(n,r)}},scheduleDeferredCallback:Ns,cancelDeferredCallback:Ms});Tt(wc);var xc=!1;function kc(e,t){var n=t||function(e){var t=bc(e);return!(!t||t.nodeType!==Ot||!t.hasAttribute(gn))}(e);if(!n)for(var r=!1,i=void 0;i=e.lastChild;)!r&&i.nodeType===Ot&&i.hasAttribute(gn)&&(r=!0,o(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.")),e.removeChild(i);!n||t||xc||(xc=!0,Ci(!1,"render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML."));return new vc(e,!1,n)}function Cc(e,t,n,o,i){gc(n)||r(!1,"Target container is not a DOM element."),fc(n);var a=n._reactRootContainer;if(a){if("function"==typeof i){var s=i;i=function(){var e=wc.getPublicRootInstance(a._internalRoot);s.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,i):a.render(t,i)}else{if(a=n._reactRootContainer=kc(n,o),"function"==typeof i){var u=i;i=function(){var e=wc.getPublicRootInstance(a._internalRoot);u.call(e)}}wc.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,i):a.render(t,i)})}return wc.getPublicRootInstance(a._internalRoot)}function Sc(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return gc(t)||r(!1,"Target container is not a DOM element."),function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$t,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}var Tc={createPortal:Sc,findDOMNode:function(e){var t=Wt.current;if(null!==t&&null!==t.stateNode){var n=t.stateNode._warnedAboutRefsInRender;o(n,"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",on(t)||"A component"),t.stateNode._warnedAboutRefsInRender=!0}if(null==e)return null;if(e.nodeType===Ot)return e;var i=_r(e);if(i)return wc.findHostInstance(i);"function"==typeof e.render?r(!1,"Unable to find node on an unmounted component."):r(!1,"Element appears to be neither ReactComponent nor DOMNode. Keys: %s",Object.keys(e))},hydrate:function(e,t,n){return Cc(null,e,t,!0,n)},render:function(e,t,n){return Cc(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,o){return(null==e||void 0===e._reactInternalFiber)&&r(!1,"parentComponent must be a valid React Component"),Cc(e,t,n,!1,o)},unmountComponentAtNode:function(e){if(gc(e)||r(!1,"unmountComponentAtNode(...): Target container is not a DOM element."),e._reactRootContainer){var t=bc(e),n=t&&!me(t);return o(!n,"unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."),wc.unbatchedUpdates(function(){Cc(null,null,e,!1,function(){e._reactRootContainer=null})}),!0}var i=bc(e),a=!(!i||!me(i)),s=1===e.nodeType&&gc(e.parentNode)&&!!e.parentNode._reactRootContainer;return o(!a,"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",s?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."),!1},unstable_createPortal:function(){return dc||(dc=!0,Ci(!1,'The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.')),Sc.apply(void 0,arguments)},unstable_batchedUpdates:wc.batchedUpdates,unstable_deferredUpdates:wc.deferredUpdates,flushSync:wc.flushSync,unstable_flushControlled:wc.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Y,EventPluginRegistry:A,EventPropagators:Re,ReactControlledComponent:_t,ReactDOMComponentTree:_e,ReactDOMEventListener:bo},unstable_createRoot:function(e,t){return new vc(e,!0,null!=t&&!0===t.hydrate)}};if(!wc.injectIntoDevTools({findFiberByHostInstance:ye,bundleType:1,version:"16.3.1",rendererPackageName:"react-dom"})&&i.canUseDOM&&window.top===window.self&&(navigator.userAgent.indexOf("Chrome")>-1&&-1===navigator.userAgent.indexOf("Edge")||navigator.userAgent.indexOf("Firefox")>-1)){var Ec=window.location.protocol;/^(https?|file):$/.test(Ec)&&console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools"+("file:"===Ec?"\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq":""),"font-weight:bold")}var Ic=Object.freeze({default:Tc}),Oc=Ic&&Tc||Ic,Pc=Oc.default?Oc.default:Oc;e.exports=Pc})()},function(e,t,n){"use strict";e.exports=n(121)},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.3.1
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){var t=n(52),r=n(51),o=n(35),i=n(34),a=n(33),s=n(50),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,c=u?Symbol.for("react.call"):60104,f=u?Symbol.for("react.return"):60105,d=u?Symbol.for("react.portal"):60106,p=u?Symbol.for("react.fragment"):60107,h=u?Symbol.for("react.strict_mode"):60108,y=u?Symbol.for("react.provider"):60109,m=u?Symbol.for("react.context"):60110,v=u?Symbol.for("react.async_mode"):60111,g=u?Symbol.for("react.forward_ref"):60112,b="function"==typeof Symbol&&Symbol.iterator,_="@@iterator";function w(e){if(null===e||void 0===e)return null;var t=b&&e[b]||e[_];return"function"==typeof t?t:null}var x=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.warn(i);try{throw new Error(i)}catch(e){}}).apply(void 0,[t].concat(r))}},k={};function C(e,t){var n=e.constructor,r=n&&(n.displayName||n.name)||"ReactClass",o=r+"."+t;k[o]||(i(!1,"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,r),k[o]=!0)}var S={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,n){C(e,"forceUpdate")},enqueueReplaceState:function(e,t,n,r){C(e,"replaceState")},enqueueSetState:function(e,t,n,r){C(e,"setState")}};function T(e,t,n){this.props=e,this.context=t,this.refs=r,this.updater=n||S}T.prototype.isReactComponent={},T.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&o(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."),this.updater.enqueueSetState(this,e,t,"setState")},T.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var E={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},I=function(e,t){Object.defineProperty(T.prototype,e,{get:function(){x(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var O in E)E.hasOwnProperty(O)&&I(O,E[O]);function P(){}function R(e,t,n){this.props=e,this.context=t,this.refs=r,this.updater=n||S}P.prototype=T.prototype;var A=R.prototype=new P;A.constructor=R,t(A,T.prototype),A.isPureReactComponent=!0;var N={current:null},M=Object.prototype.hasOwnProperty,q={key:!0,ref:!0,__self:!0,__source:!0},L=void 0,j=void 0;function D(e){if(M.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function F(e){if(M.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}var U=function(e,t,n,r,o,i,a){var s={$$typeof:l,type:e,key:t,ref:n,props:a,_owner:i,_store:{}};return Object.defineProperty(s._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(s,"_self",{configurable:!1,enumerable:!1,writable:!1,value:r}),Object.defineProperty(s,"_source",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.freeze&&(Object.freeze(s.props),Object.freeze(s)),s};function W(e,t,n){var r=void 0,o={},a=null,s=null,u=null,c=null;if(null!=t)for(r in D(t)&&(s=t.ref),F(t)&&(a=""+t.key),u=void 0===t.__self?null:t.__self,c=void 0===t.__source?null:t.__source,t)M.call(t,r)&&!q.hasOwnProperty(r)&&(o[r]=t[r]);var f=arguments.length-2;if(1===f)o.children=n;else if(f>1){for(var d=Array(f),p=0;p<f;p++)d[p]=arguments[p+2];Object.freeze&&Object.freeze(d),o.children=d}if(e&&e.defaultProps){var h=e.defaultProps;for(r in h)void 0===o[r]&&(o[r]=h[r])}if((a||s)&&(void 0===o.$$typeof||o.$$typeof!==l)){var y="function"==typeof e?e.displayName||e.name||"Unknown":e;a&&function(e,t){var n=function(){L||(L=!0,i(!1,"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(o,y),s&&function(e,t){var n=function(){j||(j=!0,i(!1,"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}(o,y)}return U(e,a,s,u,c,N.current,o)}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var H={getCurrentStack:null,getStackAddendum:function(){var e=H.getCurrentStack;return e?e():null}},z=".",V=":";var K=!1,Q=/\/+/g;function $(e){return(""+e).replace(Q,"$&/")}var Y=10,J=[];function G(e,t,n,r){if(J.length){var o=J.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function X(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,J.length<Y&&J.push(e)}function Z(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case l:case d:u=!0}}if(u)return r(a,t,""===n?z+ee(t,0):n),1;var c=void 0,f=0,p=""===n?z:n+V;if(Array.isArray(t))for(var h=0;h<t.length;h++)f+=e(c=t[h],p+ee(c,h),r,a);else{var y=w(t);if("function"==typeof y){y===t.entries&&(i(K,"Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.%s",H.getStackAddendum()),K=!0);for(var m=y.call(t),v=void 0,g=0;!(v=m.next()).done;)f+=e(c=v.value,p+ee(c,g++),r,a)}else if("object"===s){var b;b=" If you meant to render a collection of children, use an array instead."+H.getStackAddendum();var _=""+t;o(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===_?"object with keys {"+Object.keys(t).join(", ")+"}":_,b)}}return f}(e,"",t,n)}function ee(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=e.key,r={"=":"=0",":":"=2"},"$"+(""+n).replace(/[=:]/g,function(e){return r[e]})):t.toString(36);var n,r}function te(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function ne(e,t,n){var r,o,i=e.result,s=e.keyPrefix,u=e.func,l=e.context,c=u.call(l,t,e.count++);Array.isArray(c)?re(c,i,n,a.thatReturnsArgument):null!=c&&(B(c)&&(r=c,o=s+(!c.key||t&&t.key===c.key?"":$(c.key)+"/")+n,c=U(r.type,o,r.ref,r._self,r._source,r._owner,r.props)),i.push(c))}function re(e,t,n,r,o){var i="";null!=n&&(i=$(n)+"/");var a=G(t,i,r,o);Z(e,ne,a),X(a)}function oe(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case p:return"ReactFragment";case d:return"ReactPortal";case c:return"ReactCall";case f:return"ReactReturn"}return null}var ie,ae=void 0,se=void 0,ue=function(){};function le(){if(N.current){var e=oe(N.current);if(e)return"\n\nCheck the render method of `"+e+"`."}return""}ae=null,se=!1,ie=function(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type===p?"React.Fragment":e.type.displayName||e.type.name||"Unknown"},ue=function(){var e="";if(ae){var t=ie(ae),n=ae._owner;e+=function(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}(t,ae._source,n&&oe(n))}return e+=H.getStackAddendum()||""};var ce={};function fe(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var n=function(e){var t=le();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t="\n\nCheck the top-level render call using <"+n+">.")}return t}(t);if(!ce[n]){ce[n]=!0;var r="";e&&e._owner&&e._owner!==N.current&&(r=" It was passed a child from "+oe(e._owner)+"."),ae=e,i(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s',n,r,ue()),ae=null}}}function de(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];B(r)&&fe(r,t)}else if(B(e))e._store&&(e._store.validated=!0);else if(e){var o=w(e);if("function"==typeof o&&o!==e.entries)for(var i=o.call(e),a=void 0;!(a=i.next()).done;)B(a.value)&&fe(a.value,t)}}function pe(e){var t=e.type;if("function"==typeof t){var n=t.displayName||t.name,r=t.propTypes;r?(ae=e,s(r,e.props,"prop",n,ue),ae=null):void 0===t.PropTypes||se||(se=!0,i(!1,"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",n||"Unknown")),"function"==typeof t.getDefaultProps&&i(t.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function he(e,t,n){var r=function(e){return"string"==typeof e||"function"==typeof e||e===p||e===v||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===g)}(e);if(!r){var o="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(o+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var a=function(e){if(null!==e&&void 0!==e&&void 0!==e.__source){var t=e.__source;return"\n\nCheck your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+"."}return""}(t);o+=a||le(),o+=ue()||"";var s=void 0;s=null===e?"null":Array.isArray(e)?"array":typeof e,i(!1,"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",s,o)}var u=W.apply(this,arguments);if(null==u)return u;if(r)for(var l=2;l<arguments.length;l++)de(arguments[l],e);return e===p?function(e){ae=e;for(var t=Object.keys(e.props),n=0;n<t.length;n++){var r=t[n];if("children"!==r&&"key"!==r){i(!1,"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.%s",r,ue());break}}null!==e.ref&&i(!1,"Invalid attribute `ref` supplied to `React.Fragment`.%s",ue()),ae=null}(u):pe(u),u}var ye={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return re(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;var r=G(null,null,t,n);Z(e,te,r),X(r)},count:function(e,t){return Z(e,a.thatReturnsNull,null)},toArray:function(e){var t=[];return re(e,t,null,a.thatReturnsArgument),t},only:function(e){return B(e)||o(!1,"React.Children.only expected to receive a single React element child."),e}},createRef:function(){var e={current:null};return Object.seal(e),e},Component:T,PureComponent:R,createContext:function(e,t){void 0===t?t=null:i(null===t||"function"==typeof t,"createContext: Expected the optional second argument to be a function. Instead received: %s",t);var n={$$typeof:m,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null};return n.Provider={$$typeof:y,_context:n},n.Consumer=n,n._currentRenderer=null,n},forwardRef:function(e){return i("function"==typeof e,"forwardRef requires a render function but was given %s.",null===e?"null":typeof e),{$$typeof:g,render:e}},Fragment:p,StrictMode:h,unstable_AsyncMode:v,createElement:he,cloneElement:function(e,n,r){for(var o=function(e,n,r){var o=void 0,i=t({},e.props),a=e.key,s=e.ref,u=e._self,l=e._source,c=e._owner;if(null!=n){D(n)&&(s=n.ref,c=N.current),F(n)&&(a=""+n.key);var f=void 0;for(o in e.type&&e.type.defaultProps&&(f=e.type.defaultProps),n)M.call(n,o)&&!q.hasOwnProperty(o)&&(void 0===n[o]&&void 0!==f?i[o]=f[o]:i[o]=n[o])}var d=arguments.length-2;if(1===d)i.children=r;else if(d>1){for(var p=Array(d),h=0;h<d;h++)p[h]=arguments[h+2];i.children=p}return U(e.type,a,s,u,l,c,i)}.apply(this,arguments),i=2;i<arguments.length;i++)de(arguments[i],o.type);return pe(o),o},createFactory:function(e){var t=he.bind(null,e);return t.type=e,Object.defineProperty(t,"type",{enumerable:!1,get:function(){return x(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t},isValidElement:B,version:"16.3.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:N,assign:t}};t(ye.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,{ReactDebugCurrentFrame:H,ReactComponentTreeHook:{}});var me=Object.freeze({default:ye}),ve=me&&ye||me,ge=ve.default?ve.default:ve;e.exports=ge})()},function(e,t,n){"use strict";var r=a(n(36)),o=a(n(122)),i=n(110);function a(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(i.AccountStatus,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,